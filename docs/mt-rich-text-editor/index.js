var u0 = Object.defineProperty;
var bd = (n) => {
  throw TypeError(n);
};
var d0 = (n, t, e) => t in n ? u0(n, t, { enumerable: !0, configurable: !0, writable: !0, value: e }) : n[t] = e;
var nn = (n, t, e) => d0(n, typeof t != "symbol" ? t + "" : t, e), hl = (n, t, e) => t.has(n) || bd("Cannot " + e);
var J = (n, t, e) => (hl(n, t, "read from private field"), e ? e.call(n) : t.get(n)), Rt = (n, t, e) => t.has(n) ? bd("Cannot add the same private member more than once") : t instanceof WeakSet ? t.add(n) : t.set(n, e), Nt = (n, t, e, i) => (hl(n, t, "write to private field"), i ? i.call(n, e) : t.set(n, e), e), ho = (n, t, e) => (hl(n, t, "access private method"), e);
import { b as Va, E as ru, r as Es, a as Lr, p as Go, h as zt, c as Fi, U as f0, H as gp, d as dc, s as Ii, e as Pi, f as pn, g as _p, i as bp, j as su, k as yp, I as zo, q as ou, l as Os, m as au, n as yd, o as lu, t as h0, u as vd, D as Vi, v as p0, w as m0, x as g0, y as cu, z as vp, A as _0, B as b0, C as uu, F as y0, G as xp, J as v0, K as x0, L as fc, M as w0, N as k0, O as xd, P as hc, Q as S0, R as C0, S as pr, T as T0, V as Vr, W as wd, X as Js, Y as Ji, Z as ja, _ as Wa, $ as E0, a0 as O0, a1 as M0, a2 as A0, a3 as N0, a4 as L0, a5 as R0, a6 as I0, a7 as P0, a8 as Ce, a9 as D0, aa as $0, ab as B0, ac as z0, ad as H0, ae as F0, af as V0, ag as j0, ah as Xr, ai as W0, aj as U0, ak as kd, al as Sd, am as K0, an as du, ao as Cd, ap as q0, aq as G0, ar as J0, as as $t, at as Td, au as C, av as X0, aw as Ms, ax as wp, ay as Y0, az as Z0, aA as vt, aB as xt, aC as et, aD as ce, aE as V, aF as wt, aG as Z, aH as nt, aI as mr, aJ as K, aK as L, aL as H, aM as Q0, aN as A, aO as tb, aP as eb, aQ as De, aR as kp, aS as Sp, aT as Di, aU as It, aV as P, aW as Cp, aX as z, aY as lt, aZ as bn, a_ as Tp, a$ as jr, b0 as Te, b1 as gr, b2 as Qt, b3 as Ep, b4 as nb, b5 as pt, b6 as yn, b7 as ib, b8 as rb, b9 as Rr, ba as sb, bb as ob } from "./component-B0A4uxRg.js";
const ab = "0.0.1", _t = (n) => typeof n == "string", Yr = () => {
  let n, t;
  const e = new Promise((i, r) => {
    n = i, t = r;
  });
  return e.resolve = n, e.reject = t, e;
}, Ed = (n) => n == null ? "" : "" + n, lb = (n, t, e) => {
  n.forEach((i) => {
    t[i] && (e[i] = t[i]);
  });
}, cb = /###/g, Od = (n) => n && n.indexOf("###") > -1 ? n.replace(cb, ".") : n, Md = (n) => !n || _t(n), ps = (n, t, e) => {
  const i = _t(t) ? t.split(".") : t;
  let r = 0;
  for (; r < i.length - 1; ) {
    if (Md(n)) return {};
    const s = Od(i[r]);
    !n[s] && e && (n[s] = new e()), Object.prototype.hasOwnProperty.call(n, s) ? n = n[s] : n = {}, ++r;
  }
  return Md(n) ? {} : {
    obj: n,
    k: Od(i[r])
  };
}, Ad = (n, t, e) => {
  const {
    obj: i,
    k: r
  } = ps(n, t, Object);
  if (i !== void 0 || t.length === 1) {
    i[r] = e;
    return;
  }
  let s = t[t.length - 1], o = t.slice(0, t.length - 1), a = ps(n, o, Object);
  for (; a.obj === void 0 && o.length; )
    s = `${o[o.length - 1]}.${s}`, o = o.slice(0, o.length - 1), a = ps(n, o, Object), a != null && a.obj && typeof a.obj[`${a.k}.${s}`] < "u" && (a.obj = void 0);
  a.obj[`${a.k}.${s}`] = e;
}, ub = (n, t, e, i) => {
  const {
    obj: r,
    k: s
  } = ps(n, t, Object);
  r[s] = r[s] || [], r[s].push(e);
}, Jo = (n, t) => {
  const {
    obj: e,
    k: i
  } = ps(n, t);
  if (e && Object.prototype.hasOwnProperty.call(e, i))
    return e[i];
}, db = (n, t, e) => {
  const i = Jo(n, e);
  return i !== void 0 ? i : Jo(t, e);
}, Op = (n, t, e) => {
  for (const i in t)
    i !== "__proto__" && i !== "constructor" && (i in n ? _t(n[i]) || n[i] instanceof String || _t(t[i]) || t[i] instanceof String ? e && (n[i] = t[i]) : Op(n[i], t[i], e) : n[i] = t[i]);
  return n;
}, ir = (n) => n.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$&");
var fb = {
  "&": "&amp;",
  "<": "&lt;",
  ">": "&gt;",
  '"': "&quot;",
  "'": "&#39;",
  "/": "&#x2F;"
};
const hb = (n) => _t(n) ? n.replace(/[&<>"'\/]/g, (t) => fb[t]) : n;
class pb {
  constructor(t) {
    this.capacity = t, this.regExpMap = /* @__PURE__ */ new Map(), this.regExpQueue = [];
  }
  getRegExp(t) {
    const e = this.regExpMap.get(t);
    if (e !== void 0)
      return e;
    const i = new RegExp(t);
    return this.regExpQueue.length === this.capacity && this.regExpMap.delete(this.regExpQueue.shift()), this.regExpMap.set(t, i), this.regExpQueue.push(t), i;
  }
}
const mb = [" ", ",", "?", "!", ";"], gb = new pb(20), _b = (n, t, e) => {
  t = t || "", e = e || "";
  const i = mb.filter((o) => t.indexOf(o) < 0 && e.indexOf(o) < 0);
  if (i.length === 0) return !0;
  const r = gb.getRegExp(`(${i.map((o) => o === "?" ? "\\?" : o).join("|")})`);
  let s = !r.test(n);
  if (!s) {
    const o = n.indexOf(e);
    o > 0 && !r.test(n.substring(0, o)) && (s = !0);
  }
  return s;
}, pc = function(n, t) {
  let e = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : ".";
  if (!n) return;
  if (n[t])
    return Object.prototype.hasOwnProperty.call(n, t) ? n[t] : void 0;
  const i = t.split(e);
  let r = n;
  for (let s = 0; s < i.length; ) {
    if (!r || typeof r != "object")
      return;
    let o, a = "";
    for (let l = s; l < i.length; ++l)
      if (l !== s && (a += e), a += i[l], o = r[a], o !== void 0) {
        if (["string", "number", "boolean"].indexOf(typeof o) > -1 && l < i.length - 1)
          continue;
        s += l - s + 1;
        break;
      }
    r = o;
  }
  return r;
}, Xo = (n) => n == null ? void 0 : n.replace("_", "-"), bb = {
  type: "logger",
  log(n) {
    this.output("log", n);
  },
  warn(n) {
    this.output("warn", n);
  },
  error(n) {
    this.output("error", n);
  },
  output(n, t) {
    var e, i;
    (i = (e = console == null ? void 0 : console[n]) == null ? void 0 : e.apply) == null || i.call(e, console, t);
  }
};
class Yo {
  constructor(t) {
    let e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    this.init(t, e);
  }
  init(t) {
    let e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    this.prefix = e.prefix || "i18next:", this.logger = t || bb, this.options = e, this.debug = e.debug;
  }
  log() {
    for (var t = arguments.length, e = new Array(t), i = 0; i < t; i++)
      e[i] = arguments[i];
    return this.forward(e, "log", "", !0);
  }
  warn() {
    for (var t = arguments.length, e = new Array(t), i = 0; i < t; i++)
      e[i] = arguments[i];
    return this.forward(e, "warn", "", !0);
  }
  error() {
    for (var t = arguments.length, e = new Array(t), i = 0; i < t; i++)
      e[i] = arguments[i];
    return this.forward(e, "error", "");
  }
  deprecate() {
    for (var t = arguments.length, e = new Array(t), i = 0; i < t; i++)
      e[i] = arguments[i];
    return this.forward(e, "warn", "WARNING DEPRECATED: ", !0);
  }
  forward(t, e, i, r) {
    return r && !this.debug ? null : (_t(t[0]) && (t[0] = `${i}${this.prefix} ${t[0]}`), this.logger[e](t));
  }
  create(t) {
    return new Yo(this.logger, {
      prefix: `${this.prefix}:${t}:`,
      ...this.options
    });
  }
  clone(t) {
    return t = t || this.options, t.prefix = t.prefix || this.prefix, new Yo(this.logger, t);
  }
}
var Ln = new Yo();
let Ua = class {
  constructor() {
    this.observers = {};
  }
  on(t, e) {
    return t.split(" ").forEach((i) => {
      this.observers[i] || (this.observers[i] = /* @__PURE__ */ new Map());
      const r = this.observers[i].get(e) || 0;
      this.observers[i].set(e, r + 1);
    }), this;
  }
  off(t, e) {
    if (this.observers[t]) {
      if (!e) {
        delete this.observers[t];
        return;
      }
      this.observers[t].delete(e);
    }
  }
  emit(t) {
    for (var e = arguments.length, i = new Array(e > 1 ? e - 1 : 0), r = 1; r < e; r++)
      i[r - 1] = arguments[r];
    this.observers[t] && Array.from(this.observers[t].entries()).forEach((o) => {
      let [a, l] = o;
      for (let c = 0; c < l; c++)
        a(...i);
    }), this.observers["*"] && Array.from(this.observers["*"].entries()).forEach((o) => {
      let [a, l] = o;
      for (let c = 0; c < l; c++)
        a.apply(a, [t, ...i]);
    });
  }
};
class Nd extends Ua {
  constructor(t) {
    let e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {
      ns: ["translation"],
      defaultNS: "translation"
    };
    super(), this.data = t || {}, this.options = e, this.options.keySeparator === void 0 && (this.options.keySeparator = "."), this.options.ignoreJSONStructure === void 0 && (this.options.ignoreJSONStructure = !0);
  }
  addNamespaces(t) {
    this.options.ns.indexOf(t) < 0 && this.options.ns.push(t);
  }
  removeNamespaces(t) {
    const e = this.options.ns.indexOf(t);
    e > -1 && this.options.ns.splice(e, 1);
  }
  getResource(t, e, i) {
    var c, u;
    let r = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};
    const s = r.keySeparator !== void 0 ? r.keySeparator : this.options.keySeparator, o = r.ignoreJSONStructure !== void 0 ? r.ignoreJSONStructure : this.options.ignoreJSONStructure;
    let a;
    t.indexOf(".") > -1 ? a = t.split(".") : (a = [t, e], i && (Array.isArray(i) ? a.push(...i) : _t(i) && s ? a.push(...i.split(s)) : a.push(i)));
    const l = Jo(this.data, a);
    return !l && !e && !i && t.indexOf(".") > -1 && (t = a[0], e = a[1], i = a.slice(2).join(".")), l || !o || !_t(i) ? l : pc((u = (c = this.data) == null ? void 0 : c[t]) == null ? void 0 : u[e], i, s);
  }
  addResource(t, e, i, r) {
    let s = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : {
      silent: !1
    };
    const o = s.keySeparator !== void 0 ? s.keySeparator : this.options.keySeparator;
    let a = [t, e];
    i && (a = a.concat(o ? i.split(o) : i)), t.indexOf(".") > -1 && (a = t.split("."), r = e, e = a[1]), this.addNamespaces(e), Ad(this.data, a, r), s.silent || this.emit("added", t, e, i, r);
  }
  addResources(t, e, i) {
    let r = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {
      silent: !1
    };
    for (const s in i)
      (_t(i[s]) || Array.isArray(i[s])) && this.addResource(t, e, s, i[s], {
        silent: !0
      });
    r.silent || this.emit("added", t, e, i);
  }
  addResourceBundle(t, e, i, r, s) {
    let o = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : {
      silent: !1,
      skipCopy: !1
    }, a = [t, e];
    t.indexOf(".") > -1 && (a = t.split("."), r = i, i = e, e = a[1]), this.addNamespaces(e);
    let l = Jo(this.data, a) || {};
    o.skipCopy || (i = JSON.parse(JSON.stringify(i))), r ? Op(l, i, s) : l = {
      ...l,
      ...i
    }, Ad(this.data, a, l), o.silent || this.emit("added", t, e, i);
  }
  removeResourceBundle(t, e) {
    this.hasResourceBundle(t, e) && delete this.data[t][e], this.removeNamespaces(e), this.emit("removed", t, e);
  }
  hasResourceBundle(t, e) {
    return this.getResource(t, e) !== void 0;
  }
  getResourceBundle(t, e) {
    return e || (e = this.options.defaultNS), this.getResource(t, e);
  }
  getDataByLanguage(t) {
    return this.data[t];
  }
  hasLanguageSomeTranslations(t) {
    const e = this.getDataByLanguage(t);
    return !!(e && Object.keys(e) || []).find((r) => e[r] && Object.keys(e[r]).length > 0);
  }
  toJSON() {
    return this.data;
  }
}
var Mp = {
  processors: {},
  addPostProcessor(n) {
    this.processors[n.name] = n;
  },
  handle(n, t, e, i, r) {
    return n.forEach((s) => {
      var o;
      t = ((o = this.processors[s]) == null ? void 0 : o.process(t, e, i, r)) ?? t;
    }), t;
  }
};
const Ld = {}, Rd = (n) => !_t(n) && typeof n != "boolean" && typeof n != "number";
class Zo extends Ua {
  constructor(t) {
    let e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    super(), lb(["resourceStore", "languageUtils", "pluralResolver", "interpolator", "backendConnector", "i18nFormat", "utils"], t, this), this.options = e, this.options.keySeparator === void 0 && (this.options.keySeparator = "."), this.logger = Ln.create("translator");
  }
  changeLanguage(t) {
    t && (this.language = t);
  }
  exists(t) {
    let e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {
      interpolation: {}
    };
    if (t == null)
      return !1;
    const i = this.resolve(t, e);
    return (i == null ? void 0 : i.res) !== void 0;
  }
  extractFromKey(t, e) {
    let i = e.nsSeparator !== void 0 ? e.nsSeparator : this.options.nsSeparator;
    i === void 0 && (i = ":");
    const r = e.keySeparator !== void 0 ? e.keySeparator : this.options.keySeparator;
    let s = e.ns || this.options.defaultNS || [];
    const o = i && t.indexOf(i) > -1, a = !this.options.userDefinedKeySeparator && !e.keySeparator && !this.options.userDefinedNsSeparator && !e.nsSeparator && !_b(t, i, r);
    if (o && !a) {
      const l = t.match(this.interpolator.nestingRegexp);
      if (l && l.length > 0)
        return {
          key: t,
          namespaces: _t(s) ? [s] : s
        };
      const c = t.split(i);
      (i !== r || i === r && this.options.ns.indexOf(c[0]) > -1) && (s = c.shift()), t = c.join(r);
    }
    return {
      key: t,
      namespaces: _t(s) ? [s] : s
    };
  }
  translate(t, e, i) {
    if (typeof e != "object" && this.options.overloadTranslationOptionHandler && (e = this.options.overloadTranslationOptionHandler(arguments)), typeof e == "object" && (e = {
      ...e
    }), e || (e = {}), t == null) return "";
    Array.isArray(t) || (t = [String(t)]);
    const r = e.returnDetails !== void 0 ? e.returnDetails : this.options.returnDetails, s = e.keySeparator !== void 0 ? e.keySeparator : this.options.keySeparator, {
      key: o,
      namespaces: a
    } = this.extractFromKey(t[t.length - 1], e), l = a[a.length - 1], c = e.lng || this.language, u = e.appendNamespaceToCIMode || this.options.appendNamespaceToCIMode;
    if ((c == null ? void 0 : c.toLowerCase()) === "cimode") {
      if (u) {
        const T = e.nsSeparator || this.options.nsSeparator;
        return r ? {
          res: `${l}${T}${o}`,
          usedKey: o,
          exactUsedKey: o,
          usedLng: c,
          usedNS: l,
          usedParams: this.getUsedParamsDetails(e)
        } : `${l}${T}${o}`;
      }
      return r ? {
        res: o,
        usedKey: o,
        exactUsedKey: o,
        usedLng: c,
        usedNS: l,
        usedParams: this.getUsedParamsDetails(e)
      } : o;
    }
    const d = this.resolve(t, e);
    let f = d == null ? void 0 : d.res;
    const h = (d == null ? void 0 : d.usedKey) || o, p = (d == null ? void 0 : d.exactUsedKey) || o, _ = ["[object Number]", "[object Function]", "[object RegExp]"], g = e.joinArrays !== void 0 ? e.joinArrays : this.options.joinArrays, m = !this.i18nFormat || this.i18nFormat.handleAsObject, y = e.count !== void 0 && !_t(e.count), x = Zo.hasDefaultValue(e), k = y ? this.pluralResolver.getSuffix(c, e.count, e) : "", S = e.ordinal && y ? this.pluralResolver.getSuffix(c, e.count, {
      ordinal: !1
    }) : "", w = y && !e.ordinal && e.count === 0, O = w && e[`defaultValue${this.options.pluralSeparator}zero`] || e[`defaultValue${k}`] || e[`defaultValue${S}`] || e.defaultValue;
    let v = f;
    m && !f && x && (v = O);
    const E = Rd(v), b = Object.prototype.toString.apply(v);
    if (m && v && E && _.indexOf(b) < 0 && !(_t(g) && Array.isArray(v))) {
      if (!e.returnObjects && !this.options.returnObjects) {
        this.options.returnedObjectHandler || this.logger.warn("accessing an object - but returnObjects options is not enabled!");
        const T = this.options.returnedObjectHandler ? this.options.returnedObjectHandler(h, v, {
          ...e,
          ns: a
        }) : `key '${o} (${this.language})' returned an object instead of string.`;
        return r ? (d.res = T, d.usedParams = this.getUsedParamsDetails(e), d) : T;
      }
      if (s) {
        const T = Array.isArray(v), M = T ? [] : {}, F = T ? p : h;
        for (const D in v)
          if (Object.prototype.hasOwnProperty.call(v, D)) {
            const U = `${F}${s}${D}`;
            x && !f ? M[D] = this.translate(U, {
              ...e,
              defaultValue: Rd(O) ? O[D] : void 0,
              joinArrays: !1,
              ns: a
            }) : M[D] = this.translate(U, {
              ...e,
              joinArrays: !1,
              ns: a
            }), M[D] === U && (M[D] = v[D]);
          }
        f = M;
      }
    } else if (m && _t(g) && Array.isArray(f))
      f = f.join(g), f && (f = this.extendTranslation(f, t, e, i));
    else {
      let T = !1, M = !1;
      !this.isValidLookup(f) && x && (T = !0, f = O), this.isValidLookup(f) || (M = !0, f = o);
      const D = (e.missingKeyNoValueFallbackToKey || this.options.missingKeyNoValueFallbackToKey) && M ? void 0 : f, U = x && O !== f && this.options.updateMissing;
      if (M || T || U) {
        if (this.logger.log(U ? "updateKey" : "missingKey", c, l, o, U ? O : f), s) {
          const rt = this.resolve(o, {
            ...e,
            keySeparator: !1
          });
          rt && rt.res && this.logger.warn("Seems the loaded translations were in flat JSON format instead of nested. Either set keySeparator: false on init or make sure your translations are published in nested format.");
        }
        let q = [];
        const Q = this.languageUtils.getFallbackCodes(this.options.fallbackLng, e.lng || this.language);
        if (this.options.saveMissingTo === "fallback" && Q && Q[0])
          for (let rt = 0; rt < Q.length; rt++)
            q.push(Q[rt]);
        else this.options.saveMissingTo === "all" ? q = this.languageUtils.toResolveHierarchy(e.lng || this.language) : q.push(e.lng || this.language);
        const ut = (rt, kt, st) => {
          var ht;
          const Pt = x && st !== f ? st : D;
          this.options.missingKeyHandler ? this.options.missingKeyHandler(rt, l, kt, Pt, U, e) : (ht = this.backendConnector) != null && ht.saveMissing && this.backendConnector.saveMissing(rt, l, kt, Pt, U, e), this.emit("missingKey", rt, l, kt, f);
        };
        this.options.saveMissing && (this.options.saveMissingPlurals && y ? q.forEach((rt) => {
          const kt = this.pluralResolver.getSuffixes(rt, e);
          w && e[`defaultValue${this.options.pluralSeparator}zero`] && kt.indexOf(`${this.options.pluralSeparator}zero`) < 0 && kt.push(`${this.options.pluralSeparator}zero`), kt.forEach((st) => {
            ut([rt], o + st, e[`defaultValue${st}`] || O);
          });
        }) : ut(q, o, O));
      }
      f = this.extendTranslation(f, t, e, d, i), M && f === o && this.options.appendNamespaceToMissingKey && (f = `${l}:${o}`), (M || T) && this.options.parseMissingKeyHandler && (f = this.options.parseMissingKeyHandler(this.options.appendNamespaceToMissingKey ? `${l}:${o}` : o, T ? f : void 0));
    }
    return r ? (d.res = f, d.usedParams = this.getUsedParamsDetails(e), d) : f;
  }
  extendTranslation(t, e, i, r, s) {
    var c, u;
    var o = this;
    if ((c = this.i18nFormat) != null && c.parse)
      t = this.i18nFormat.parse(t, {
        ...this.options.interpolation.defaultVariables,
        ...i
      }, i.lng || this.language || r.usedLng, r.usedNS, r.usedKey, {
        resolved: r
      });
    else if (!i.skipInterpolation) {
      i.interpolation && this.interpolator.init({
        ...i,
        interpolation: {
          ...this.options.interpolation,
          ...i.interpolation
        }
      });
      const d = _t(t) && (((u = i == null ? void 0 : i.interpolation) == null ? void 0 : u.skipOnVariables) !== void 0 ? i.interpolation.skipOnVariables : this.options.interpolation.skipOnVariables);
      let f;
      if (d) {
        const p = t.match(this.interpolator.nestingRegexp);
        f = p && p.length;
      }
      let h = i.replace && !_t(i.replace) ? i.replace : i;
      if (this.options.interpolation.defaultVariables && (h = {
        ...this.options.interpolation.defaultVariables,
        ...h
      }), t = this.interpolator.interpolate(t, h, i.lng || this.language || r.usedLng, i), d) {
        const p = t.match(this.interpolator.nestingRegexp), _ = p && p.length;
        f < _ && (i.nest = !1);
      }
      !i.lng && r && r.res && (i.lng = this.language || r.usedLng), i.nest !== !1 && (t = this.interpolator.nest(t, function() {
        for (var p = arguments.length, _ = new Array(p), g = 0; g < p; g++)
          _[g] = arguments[g];
        return (s == null ? void 0 : s[0]) === _[0] && !i.context ? (o.logger.warn(`It seems you are nesting recursively key: ${_[0]} in key: ${e[0]}`), null) : o.translate(..._, e);
      }, i)), i.interpolation && this.interpolator.reset();
    }
    const a = i.postProcess || this.options.postProcess, l = _t(a) ? [a] : a;
    return t != null && (l != null && l.length) && i.applyPostProcessor !== !1 && (t = Mp.handle(l, t, e, this.options && this.options.postProcessPassResolved ? {
      i18nResolved: {
        ...r,
        usedParams: this.getUsedParamsDetails(i)
      },
      ...i
    } : i, this)), t;
  }
  resolve(t) {
    let e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, i, r, s, o, a;
    return _t(t) && (t = [t]), t.forEach((l) => {
      if (this.isValidLookup(i)) return;
      const c = this.extractFromKey(l, e), u = c.key;
      r = u;
      let d = c.namespaces;
      this.options.fallbackNS && (d = d.concat(this.options.fallbackNS));
      const f = e.count !== void 0 && !_t(e.count), h = f && !e.ordinal && e.count === 0, p = e.context !== void 0 && (_t(e.context) || typeof e.context == "number") && e.context !== "", _ = e.lngs ? e.lngs : this.languageUtils.toResolveHierarchy(e.lng || this.language, e.fallbackLng);
      d.forEach((g) => {
        var m, y;
        this.isValidLookup(i) || (a = g, !Ld[`${_[0]}-${g}`] && ((m = this.utils) != null && m.hasLoadedNamespace) && !((y = this.utils) != null && y.hasLoadedNamespace(a)) && (Ld[`${_[0]}-${g}`] = !0, this.logger.warn(`key "${r}" for languages "${_.join(", ")}" won't get resolved as namespace "${a}" was not yet loaded`, "This means something IS WRONG in your setup. You access the t function before i18next.init / i18next.loadNamespace / i18next.changeLanguage was done. Wait for the callback or Promise to resolve before accessing it!!!")), _.forEach((x) => {
          var w;
          if (this.isValidLookup(i)) return;
          o = x;
          const k = [u];
          if ((w = this.i18nFormat) != null && w.addLookupKeys)
            this.i18nFormat.addLookupKeys(k, u, x, g, e);
          else {
            let O;
            f && (O = this.pluralResolver.getSuffix(x, e.count, e));
            const v = `${this.options.pluralSeparator}zero`, E = `${this.options.pluralSeparator}ordinal${this.options.pluralSeparator}`;
            if (f && (k.push(u + O), e.ordinal && O.indexOf(E) === 0 && k.push(u + O.replace(E, this.options.pluralSeparator)), h && k.push(u + v)), p) {
              const b = `${u}${this.options.contextSeparator}${e.context}`;
              k.push(b), f && (k.push(b + O), e.ordinal && O.indexOf(E) === 0 && k.push(b + O.replace(E, this.options.pluralSeparator)), h && k.push(b + v));
            }
          }
          let S;
          for (; S = k.pop(); )
            this.isValidLookup(i) || (s = S, i = this.getResource(x, g, S, e));
        }));
      });
    }), {
      res: i,
      usedKey: r,
      exactUsedKey: s,
      usedLng: o,
      usedNS: a
    };
  }
  isValidLookup(t) {
    return t !== void 0 && !(!this.options.returnNull && t === null) && !(!this.options.returnEmptyString && t === "");
  }
  getResource(t, e, i) {
    var s;
    let r = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};
    return (s = this.i18nFormat) != null && s.getResource ? this.i18nFormat.getResource(t, e, i, r) : this.resourceStore.getResource(t, e, i, r);
  }
  getUsedParamsDetails() {
    let t = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    const e = ["defaultValue", "ordinal", "context", "replace", "lng", "lngs", "fallbackLng", "ns", "keySeparator", "nsSeparator", "returnObjects", "returnDetails", "joinArrays", "postProcess", "interpolation"], i = t.replace && !_t(t.replace);
    let r = i ? t.replace : t;
    if (i && typeof t.count < "u" && (r.count = t.count), this.options.interpolation.defaultVariables && (r = {
      ...this.options.interpolation.defaultVariables,
      ...r
    }), !i) {
      r = {
        ...r
      };
      for (const s of e)
        delete r[s];
    }
    return r;
  }
  static hasDefaultValue(t) {
    const e = "defaultValue";
    for (const i in t)
      if (Object.prototype.hasOwnProperty.call(t, i) && e === i.substring(0, e.length) && t[i] !== void 0)
        return !0;
    return !1;
  }
}
class Id {
  constructor(t) {
    this.options = t, this.supportedLngs = this.options.supportedLngs || !1, this.logger = Ln.create("languageUtils");
  }
  getScriptPartFromCode(t) {
    if (t = Xo(t), !t || t.indexOf("-") < 0) return null;
    const e = t.split("-");
    return e.length === 2 || (e.pop(), e[e.length - 1].toLowerCase() === "x") ? null : this.formatLanguageCode(e.join("-"));
  }
  getLanguagePartFromCode(t) {
    if (t = Xo(t), !t || t.indexOf("-") < 0) return t;
    const e = t.split("-");
    return this.formatLanguageCode(e[0]);
  }
  formatLanguageCode(t) {
    if (_t(t) && t.indexOf("-") > -1) {
      let e;
      try {
        e = Intl.getCanonicalLocales(t)[0];
      } catch {
      }
      return e && this.options.lowerCaseLng && (e = e.toLowerCase()), e || (this.options.lowerCaseLng ? t.toLowerCase() : t);
    }
    return this.options.cleanCode || this.options.lowerCaseLng ? t.toLowerCase() : t;
  }
  isSupportedCode(t) {
    return (this.options.load === "languageOnly" || this.options.nonExplicitSupportedLngs) && (t = this.getLanguagePartFromCode(t)), !this.supportedLngs || !this.supportedLngs.length || this.supportedLngs.indexOf(t) > -1;
  }
  getBestMatchFromCodes(t) {
    if (!t) return null;
    let e;
    return t.forEach((i) => {
      if (e) return;
      const r = this.formatLanguageCode(i);
      (!this.options.supportedLngs || this.isSupportedCode(r)) && (e = r);
    }), !e && this.options.supportedLngs && t.forEach((i) => {
      if (e) return;
      const r = this.getLanguagePartFromCode(i);
      if (this.isSupportedCode(r)) return e = r;
      e = this.options.supportedLngs.find((s) => {
        if (s === r) return s;
        if (!(s.indexOf("-") < 0 && r.indexOf("-") < 0) && (s.indexOf("-") > 0 && r.indexOf("-") < 0 && s.substring(0, s.indexOf("-")) === r || s.indexOf(r) === 0 && r.length > 1))
          return s;
      });
    }), e || (e = this.getFallbackCodes(this.options.fallbackLng)[0]), e;
  }
  getFallbackCodes(t, e) {
    if (!t) return [];
    if (typeof t == "function" && (t = t(e)), _t(t) && (t = [t]), Array.isArray(t)) return t;
    if (!e) return t.default || [];
    let i = t[e];
    return i || (i = t[this.getScriptPartFromCode(e)]), i || (i = t[this.formatLanguageCode(e)]), i || (i = t[this.getLanguagePartFromCode(e)]), i || (i = t.default), i || [];
  }
  toResolveHierarchy(t, e) {
    const i = this.getFallbackCodes(e || this.options.fallbackLng || [], t), r = [], s = (o) => {
      o && (this.isSupportedCode(o) ? r.push(o) : this.logger.warn(`rejecting language code not found in supportedLngs: ${o}`));
    };
    return _t(t) && (t.indexOf("-") > -1 || t.indexOf("_") > -1) ? (this.options.load !== "languageOnly" && s(this.formatLanguageCode(t)), this.options.load !== "languageOnly" && this.options.load !== "currentOnly" && s(this.getScriptPartFromCode(t)), this.options.load !== "currentOnly" && s(this.getLanguagePartFromCode(t))) : _t(t) && s(this.formatLanguageCode(t)), i.forEach((o) => {
      r.indexOf(o) < 0 && s(this.formatLanguageCode(o));
    }), r;
  }
}
const Pd = {
  zero: 0,
  one: 1,
  two: 2,
  few: 3,
  many: 4,
  other: 5
}, Dd = {
  select: (n) => n === 1 ? "one" : "other",
  resolvedOptions: () => ({
    pluralCategories: ["one", "other"]
  })
};
class yb {
  constructor(t) {
    let e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    this.languageUtils = t, this.options = e, this.logger = Ln.create("pluralResolver"), this.pluralRulesCache = {};
  }
  addRule(t, e) {
    this.rules[t] = e;
  }
  clearCache() {
    this.pluralRulesCache = {};
  }
  getRule(t) {
    let e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    const i = Xo(t === "dev" ? "en" : t), r = e.ordinal ? "ordinal" : "cardinal", s = JSON.stringify({
      cleanedCode: i,
      type: r
    });
    if (s in this.pluralRulesCache)
      return this.pluralRulesCache[s];
    let o;
    try {
      o = new Intl.PluralRules(i, {
        type: r
      });
    } catch {
      if (!Intl)
        return this.logger.error("No Intl support, please use an Intl polyfill!"), Dd;
      if (!t.match(/-|_/)) return Dd;
      const l = this.languageUtils.getLanguagePartFromCode(t);
      o = this.getRule(l, e);
    }
    return this.pluralRulesCache[s] = o, o;
  }
  needsPlural(t) {
    let e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, i = this.getRule(t, e);
    return i || (i = this.getRule("dev", e)), (i == null ? void 0 : i.resolvedOptions().pluralCategories.length) > 1;
  }
  getPluralFormsOfKey(t, e) {
    let i = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
    return this.getSuffixes(t, i).map((r) => `${e}${r}`);
  }
  getSuffixes(t) {
    let e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, i = this.getRule(t, e);
    return i || (i = this.getRule("dev", e)), i ? i.resolvedOptions().pluralCategories.sort((r, s) => Pd[r] - Pd[s]).map((r) => `${this.options.prepend}${e.ordinal ? `ordinal${this.options.prepend}` : ""}${r}`) : [];
  }
  getSuffix(t, e) {
    let i = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
    const r = this.getRule(t, i);
    return r ? `${this.options.prepend}${i.ordinal ? `ordinal${this.options.prepend}` : ""}${r.select(e)}` : (this.logger.warn(`no plural rule found for: ${t}`), this.getSuffix("dev", e, i));
  }
}
const $d = function(n, t, e) {
  let i = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : ".", r = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : !0, s = db(n, t, e);
  return !s && r && _t(e) && (s = pc(n, e, i), s === void 0 && (s = pc(t, e, i))), s;
}, pl = (n) => n.replace(/\$/g, "$$$$");
class vb {
  constructor() {
    var e;
    let t = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    this.logger = Ln.create("interpolator"), this.options = t, this.format = ((e = t == null ? void 0 : t.interpolation) == null ? void 0 : e.format) || ((i) => i), this.init(t);
  }
  init() {
    let t = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    t.interpolation || (t.interpolation = {
      escapeValue: !0
    });
    const {
      escape: e,
      escapeValue: i,
      useRawValueToEscape: r,
      prefix: s,
      prefixEscaped: o,
      suffix: a,
      suffixEscaped: l,
      formatSeparator: c,
      unescapeSuffix: u,
      unescapePrefix: d,
      nestingPrefix: f,
      nestingPrefixEscaped: h,
      nestingSuffix: p,
      nestingSuffixEscaped: _,
      nestingOptionsSeparator: g,
      maxReplaces: m,
      alwaysFormat: y
    } = t.interpolation;
    this.escape = e !== void 0 ? e : hb, this.escapeValue = i !== void 0 ? i : !0, this.useRawValueToEscape = r !== void 0 ? r : !1, this.prefix = s ? ir(s) : o || "{{", this.suffix = a ? ir(a) : l || "}}", this.formatSeparator = c || ",", this.unescapePrefix = u ? "" : d || "-", this.unescapeSuffix = this.unescapePrefix ? "" : u || "", this.nestingPrefix = f ? ir(f) : h || ir("$t("), this.nestingSuffix = p ? ir(p) : _ || ir(")"), this.nestingOptionsSeparator = g || ",", this.maxReplaces = m || 1e3, this.alwaysFormat = y !== void 0 ? y : !1, this.resetRegExp();
  }
  reset() {
    this.options && this.init(this.options);
  }
  resetRegExp() {
    const t = (e, i) => (e == null ? void 0 : e.source) === i ? (e.lastIndex = 0, e) : new RegExp(i, "g");
    this.regexp = t(this.regexp, `${this.prefix}(.+?)${this.suffix}`), this.regexpUnescape = t(this.regexpUnescape, `${this.prefix}${this.unescapePrefix}(.+?)${this.unescapeSuffix}${this.suffix}`), this.nestingRegexp = t(this.nestingRegexp, `${this.nestingPrefix}(.+?)${this.nestingSuffix}`);
  }
  interpolate(t, e, i, r) {
    var h;
    let s, o, a;
    const l = this.options && this.options.interpolation && this.options.interpolation.defaultVariables || {}, c = (p) => {
      if (p.indexOf(this.formatSeparator) < 0) {
        const y = $d(e, l, p, this.options.keySeparator, this.options.ignoreJSONStructure);
        return this.alwaysFormat ? this.format(y, void 0, i, {
          ...r,
          ...e,
          interpolationkey: p
        }) : y;
      }
      const _ = p.split(this.formatSeparator), g = _.shift().trim(), m = _.join(this.formatSeparator).trim();
      return this.format($d(e, l, g, this.options.keySeparator, this.options.ignoreJSONStructure), m, i, {
        ...r,
        ...e,
        interpolationkey: g
      });
    };
    this.resetRegExp();
    const u = (r == null ? void 0 : r.missingInterpolationHandler) || this.options.missingInterpolationHandler, d = ((h = r == null ? void 0 : r.interpolation) == null ? void 0 : h.skipOnVariables) !== void 0 ? r.interpolation.skipOnVariables : this.options.interpolation.skipOnVariables;
    return [{
      regex: this.regexpUnescape,
      safeValue: (p) => pl(p)
    }, {
      regex: this.regexp,
      safeValue: (p) => this.escapeValue ? pl(this.escape(p)) : pl(p)
    }].forEach((p) => {
      for (a = 0; s = p.regex.exec(t); ) {
        const _ = s[1].trim();
        if (o = c(_), o === void 0)
          if (typeof u == "function") {
            const m = u(t, s, r);
            o = _t(m) ? m : "";
          } else if (r && Object.prototype.hasOwnProperty.call(r, _))
            o = "";
          else if (d) {
            o = s[0];
            continue;
          } else
            this.logger.warn(`missed to pass in variable ${_} for interpolating ${t}`), o = "";
        else !_t(o) && !this.useRawValueToEscape && (o = Ed(o));
        const g = p.safeValue(o);
        if (t = t.replace(s[0], g), d ? (p.regex.lastIndex += o.length, p.regex.lastIndex -= s[0].length) : p.regex.lastIndex = 0, a++, a >= this.maxReplaces)
          break;
      }
    }), t;
  }
  nest(t, e) {
    let i = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {}, r, s, o;
    const a = (l, c) => {
      const u = this.nestingOptionsSeparator;
      if (l.indexOf(u) < 0) return l;
      const d = l.split(new RegExp(`${u}[ ]*{`));
      let f = `{${d[1]}`;
      l = d[0], f = this.interpolate(f, o);
      const h = f.match(/'/g), p = f.match(/"/g);
      (((h == null ? void 0 : h.length) ?? 0) % 2 === 0 && !p || p.length % 2 !== 0) && (f = f.replace(/'/g, '"'));
      try {
        o = JSON.parse(f), c && (o = {
          ...c,
          ...o
        });
      } catch (_) {
        return this.logger.warn(`failed parsing options string in nesting for key ${l}`, _), `${l}${u}${f}`;
      }
      return o.defaultValue && o.defaultValue.indexOf(this.prefix) > -1 && delete o.defaultValue, l;
    };
    for (; r = this.nestingRegexp.exec(t); ) {
      let l = [];
      o = {
        ...i
      }, o = o.replace && !_t(o.replace) ? o.replace : o, o.applyPostProcessor = !1, delete o.defaultValue;
      let c = !1;
      if (r[0].indexOf(this.formatSeparator) !== -1 && !/{.*}/.test(r[1])) {
        const u = r[1].split(this.formatSeparator).map((d) => d.trim());
        r[1] = u.shift(), l = u, c = !0;
      }
      if (s = e(a.call(this, r[1].trim(), o), o), s && r[0] === t && !_t(s)) return s;
      _t(s) || (s = Ed(s)), s || (this.logger.warn(`missed to resolve ${r[1]} for nesting ${t}`), s = ""), c && (s = l.reduce((u, d) => this.format(u, d, i.lng, {
        ...i,
        interpolationkey: r[1].trim()
      }), s.trim())), t = t.replace(r[0], s), this.regexp.lastIndex = 0;
    }
    return t;
  }
}
const xb = (n) => {
  let t = n.toLowerCase().trim();
  const e = {};
  if (n.indexOf("(") > -1) {
    const i = n.split("(");
    t = i[0].toLowerCase().trim();
    const r = i[1].substring(0, i[1].length - 1);
    t === "currency" && r.indexOf(":") < 0 ? e.currency || (e.currency = r.trim()) : t === "relativetime" && r.indexOf(":") < 0 ? e.range || (e.range = r.trim()) : r.split(";").forEach((o) => {
      if (o) {
        const [a, ...l] = o.split(":"), c = l.join(":").trim().replace(/^'+|'+$/g, ""), u = a.trim();
        e[u] || (e[u] = c), c === "false" && (e[u] = !1), c === "true" && (e[u] = !0), isNaN(c) || (e[u] = parseInt(c, 10));
      }
    });
  }
  return {
    formatName: t,
    formatOptions: e
  };
}, rr = (n) => {
  const t = {};
  return (e, i, r) => {
    let s = r;
    r && r.interpolationkey && r.formatParams && r.formatParams[r.interpolationkey] && r[r.interpolationkey] && (s = {
      ...s,
      [r.interpolationkey]: void 0
    });
    const o = i + JSON.stringify(s);
    let a = t[o];
    return a || (a = n(Xo(i), r), t[o] = a), a(e);
  };
};
class wb {
  constructor() {
    let t = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    this.logger = Ln.create("formatter"), this.options = t, this.formats = {
      number: rr((e, i) => {
        const r = new Intl.NumberFormat(e, {
          ...i
        });
        return (s) => r.format(s);
      }),
      currency: rr((e, i) => {
        const r = new Intl.NumberFormat(e, {
          ...i,
          style: "currency"
        });
        return (s) => r.format(s);
      }),
      datetime: rr((e, i) => {
        const r = new Intl.DateTimeFormat(e, {
          ...i
        });
        return (s) => r.format(s);
      }),
      relativetime: rr((e, i) => {
        const r = new Intl.RelativeTimeFormat(e, {
          ...i
        });
        return (s) => r.format(s, i.range || "day");
      }),
      list: rr((e, i) => {
        const r = new Intl.ListFormat(e, {
          ...i
        });
        return (s) => r.format(s);
      })
    }, this.init(t);
  }
  init(t) {
    let e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {
      interpolation: {}
    };
    this.formatSeparator = e.interpolation.formatSeparator || ",";
  }
  add(t, e) {
    this.formats[t.toLowerCase().trim()] = e;
  }
  addCached(t, e) {
    this.formats[t.toLowerCase().trim()] = rr(e);
  }
  format(t, e, i) {
    let r = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};
    const s = e.split(this.formatSeparator);
    if (s.length > 1 && s[0].indexOf("(") > 1 && s[0].indexOf(")") < 0 && s.find((a) => a.indexOf(")") > -1)) {
      const a = s.findIndex((l) => l.indexOf(")") > -1);
      s[0] = [s[0], ...s.splice(1, a)].join(this.formatSeparator);
    }
    return s.reduce((a, l) => {
      var d;
      const {
        formatName: c,
        formatOptions: u
      } = xb(l);
      if (this.formats[c]) {
        let f = a;
        try {
          const h = ((d = r == null ? void 0 : r.formatParams) == null ? void 0 : d[r.interpolationkey]) || {}, p = h.locale || h.lng || r.locale || r.lng || i;
          f = this.formats[c](a, p, {
            ...u,
            ...r,
            ...h
          });
        } catch (h) {
          this.logger.warn(h);
        }
        return f;
      } else
        this.logger.warn(`there was no format function for ${c}`);
      return a;
    }, t);
  }
}
const kb = (n, t) => {
  n.pending[t] !== void 0 && (delete n.pending[t], n.pendingCount--);
};
class Sb extends Ua {
  constructor(t, e, i) {
    var s, o;
    let r = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};
    super(), this.backend = t, this.store = e, this.services = i, this.languageUtils = i.languageUtils, this.options = r, this.logger = Ln.create("backendConnector"), this.waitingReads = [], this.maxParallelReads = r.maxParallelReads || 10, this.readingCalls = 0, this.maxRetries = r.maxRetries >= 0 ? r.maxRetries : 5, this.retryTimeout = r.retryTimeout >= 1 ? r.retryTimeout : 350, this.state = {}, this.queue = [], (o = (s = this.backend) == null ? void 0 : s.init) == null || o.call(s, i, r.backend, r);
  }
  queueLoad(t, e, i, r) {
    const s = {}, o = {}, a = {}, l = {};
    return t.forEach((c) => {
      let u = !0;
      e.forEach((d) => {
        const f = `${c}|${d}`;
        !i.reload && this.store.hasResourceBundle(c, d) ? this.state[f] = 2 : this.state[f] < 0 || (this.state[f] === 1 ? o[f] === void 0 && (o[f] = !0) : (this.state[f] = 1, u = !1, o[f] === void 0 && (o[f] = !0), s[f] === void 0 && (s[f] = !0), l[d] === void 0 && (l[d] = !0)));
      }), u || (a[c] = !0);
    }), (Object.keys(s).length || Object.keys(o).length) && this.queue.push({
      pending: o,
      pendingCount: Object.keys(o).length,
      loaded: {},
      errors: [],
      callback: r
    }), {
      toLoad: Object.keys(s),
      pending: Object.keys(o),
      toLoadLanguages: Object.keys(a),
      toLoadNamespaces: Object.keys(l)
    };
  }
  loaded(t, e, i) {
    const r = t.split("|"), s = r[0], o = r[1];
    e && this.emit("failedLoading", s, o, e), !e && i && this.store.addResourceBundle(s, o, i, void 0, void 0, {
      skipCopy: !0
    }), this.state[t] = e ? -1 : 2, e && i && (this.state[t] = 0);
    const a = {};
    this.queue.forEach((l) => {
      ub(l.loaded, [s], o), kb(l, t), e && l.errors.push(e), l.pendingCount === 0 && !l.done && (Object.keys(l.loaded).forEach((c) => {
        a[c] || (a[c] = {});
        const u = l.loaded[c];
        u.length && u.forEach((d) => {
          a[c][d] === void 0 && (a[c][d] = !0);
        });
      }), l.done = !0, l.errors.length ? l.callback(l.errors) : l.callback());
    }), this.emit("loaded", a), this.queue = this.queue.filter((l) => !l.done);
  }
  read(t, e, i) {
    let r = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 0, s = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : this.retryTimeout, o = arguments.length > 5 ? arguments[5] : void 0;
    if (!t.length) return o(null, {});
    if (this.readingCalls >= this.maxParallelReads) {
      this.waitingReads.push({
        lng: t,
        ns: e,
        fcName: i,
        tried: r,
        wait: s,
        callback: o
      });
      return;
    }
    this.readingCalls++;
    const a = (c, u) => {
      if (this.readingCalls--, this.waitingReads.length > 0) {
        const d = this.waitingReads.shift();
        this.read(d.lng, d.ns, d.fcName, d.tried, d.wait, d.callback);
      }
      if (c && u && r < this.maxRetries) {
        setTimeout(() => {
          this.read.call(this, t, e, i, r + 1, s * 2, o);
        }, s);
        return;
      }
      o(c, u);
    }, l = this.backend[i].bind(this.backend);
    if (l.length === 2) {
      try {
        const c = l(t, e);
        c && typeof c.then == "function" ? c.then((u) => a(null, u)).catch(a) : a(null, c);
      } catch (c) {
        a(c);
      }
      return;
    }
    return l(t, e, a);
  }
  prepareLoading(t, e) {
    let i = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {}, r = arguments.length > 3 ? arguments[3] : void 0;
    if (!this.backend)
      return this.logger.warn("No backend was added via i18next.use. Will not load resources."), r && r();
    _t(t) && (t = this.languageUtils.toResolveHierarchy(t)), _t(e) && (e = [e]);
    const s = this.queueLoad(t, e, i, r);
    if (!s.toLoad.length)
      return s.pending.length || r(), null;
    s.toLoad.forEach((o) => {
      this.loadOne(o);
    });
  }
  load(t, e, i) {
    this.prepareLoading(t, e, {}, i);
  }
  reload(t, e, i) {
    this.prepareLoading(t, e, {
      reload: !0
    }, i);
  }
  loadOne(t) {
    let e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "";
    const i = t.split("|"), r = i[0], s = i[1];
    this.read(r, s, "read", void 0, void 0, (o, a) => {
      o && this.logger.warn(`${e}loading namespace ${s} for language ${r} failed`, o), !o && a && this.logger.log(`${e}loaded namespace ${s} for language ${r}`, a), this.loaded(t, o, a);
    });
  }
  saveMissing(t, e, i, r, s) {
    var l, c, u, d, f;
    let o = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : {}, a = arguments.length > 6 && arguments[6] !== void 0 ? arguments[6] : () => {
    };
    if ((c = (l = this.services) == null ? void 0 : l.utils) != null && c.hasLoadedNamespace && !((d = (u = this.services) == null ? void 0 : u.utils) != null && d.hasLoadedNamespace(e))) {
      this.logger.warn(`did not save key "${i}" as the namespace "${e}" was not yet loaded`, "This means something IS WRONG in your setup. You access the t function before i18next.init / i18next.loadNamespace / i18next.changeLanguage was done. Wait for the callback or Promise to resolve before accessing it!!!");
      return;
    }
    if (!(i == null || i === "")) {
      if ((f = this.backend) != null && f.create) {
        const h = {
          ...o,
          isUpdate: s
        }, p = this.backend.create.bind(this.backend);
        if (p.length < 6)
          try {
            let _;
            p.length === 5 ? _ = p(t, e, i, r, h) : _ = p(t, e, i, r), _ && typeof _.then == "function" ? _.then((g) => a(null, g)).catch(a) : a(null, _);
          } catch (_) {
            a(_);
          }
        else
          p(t, e, i, r, a, h);
      }
      !t || !t[0] || this.store.addResource(t[0], e, i, r);
    }
  }
}
const Bd = () => ({
  debug: !1,
  initAsync: !0,
  ns: ["translation"],
  defaultNS: ["translation"],
  fallbackLng: ["dev"],
  fallbackNS: !1,
  supportedLngs: !1,
  nonExplicitSupportedLngs: !1,
  load: "all",
  preload: !1,
  simplifyPluralSuffix: !0,
  keySeparator: ".",
  nsSeparator: ":",
  pluralSeparator: "_",
  contextSeparator: "_",
  partialBundledLanguages: !1,
  saveMissing: !1,
  updateMissing: !1,
  saveMissingTo: "fallback",
  saveMissingPlurals: !0,
  missingKeyHandler: !1,
  missingInterpolationHandler: !1,
  postProcess: !1,
  postProcessPassResolved: !1,
  returnNull: !1,
  returnEmptyString: !0,
  returnObjects: !1,
  joinArrays: !1,
  returnedObjectHandler: !1,
  parseMissingKeyHandler: !1,
  appendNamespaceToMissingKey: !1,
  appendNamespaceToCIMode: !1,
  overloadTranslationOptionHandler: (n) => {
    let t = {};
    if (typeof n[1] == "object" && (t = n[1]), _t(n[1]) && (t.defaultValue = n[1]), _t(n[2]) && (t.tDescription = n[2]), typeof n[2] == "object" || typeof n[3] == "object") {
      const e = n[3] || n[2];
      Object.keys(e).forEach((i) => {
        t[i] = e[i];
      });
    }
    return t;
  },
  interpolation: {
    escapeValue: !0,
    format: (n) => n,
    prefix: "{{",
    suffix: "}}",
    formatSeparator: ",",
    unescapePrefix: "-",
    nestingPrefix: "$t(",
    nestingSuffix: ")",
    nestingOptionsSeparator: ",",
    maxReplaces: 1e3,
    skipOnVariables: !0
  }
}), zd = (n) => {
  var t, e;
  return _t(n.ns) && (n.ns = [n.ns]), _t(n.fallbackLng) && (n.fallbackLng = [n.fallbackLng]), _t(n.fallbackNS) && (n.fallbackNS = [n.fallbackNS]), ((e = (t = n.supportedLngs) == null ? void 0 : t.indexOf) == null ? void 0 : e.call(t, "cimode")) < 0 && (n.supportedLngs = n.supportedLngs.concat(["cimode"])), typeof n.initImmediate == "boolean" && (n.initAsync = n.initImmediate), n;
}, po = () => {
}, Cb = (n) => {
  Object.getOwnPropertyNames(Object.getPrototypeOf(n)).forEach((e) => {
    typeof n[e] == "function" && (n[e] = n[e].bind(n));
  });
};
class As extends Ua {
  constructor() {
    let t = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, e = arguments.length > 1 ? arguments[1] : void 0;
    if (super(), this.options = zd(t), this.services = {}, this.logger = Ln, this.modules = {
      external: []
    }, Cb(this), e && !this.isInitialized && !t.isClone) {
      if (!this.options.initAsync)
        return this.init(t, e), this;
      setTimeout(() => {
        this.init(t, e);
      }, 0);
    }
  }
  init() {
    var t = this;
    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, i = arguments.length > 1 ? arguments[1] : void 0;
    this.isInitializing = !0, typeof e == "function" && (i = e, e = {}), e.defaultNS == null && e.ns && (_t(e.ns) ? e.defaultNS = e.ns : e.ns.indexOf("translation") < 0 && (e.defaultNS = e.ns[0]));
    const r = Bd();
    this.options = {
      ...r,
      ...this.options,
      ...zd(e)
    }, this.options.interpolation = {
      ...r.interpolation,
      ...this.options.interpolation
    }, e.keySeparator !== void 0 && (this.options.userDefinedKeySeparator = e.keySeparator), e.nsSeparator !== void 0 && (this.options.userDefinedNsSeparator = e.nsSeparator);
    const s = (u) => u ? typeof u == "function" ? new u() : u : null;
    if (!this.options.isClone) {
      this.modules.logger ? Ln.init(s(this.modules.logger), this.options) : Ln.init(null, this.options);
      let u;
      this.modules.formatter ? u = this.modules.formatter : u = wb;
      const d = new Id(this.options);
      this.store = new Nd(this.options.resources, this.options);
      const f = this.services;
      f.logger = Ln, f.resourceStore = this.store, f.languageUtils = d, f.pluralResolver = new yb(d, {
        prepend: this.options.pluralSeparator,
        simplifyPluralSuffix: this.options.simplifyPluralSuffix
      }), u && (!this.options.interpolation.format || this.options.interpolation.format === r.interpolation.format) && (f.formatter = s(u), f.formatter.init(f, this.options), this.options.interpolation.format = f.formatter.format.bind(f.formatter)), f.interpolator = new vb(this.options), f.utils = {
        hasLoadedNamespace: this.hasLoadedNamespace.bind(this)
      }, f.backendConnector = new Sb(s(this.modules.backend), f.resourceStore, f, this.options), f.backendConnector.on("*", function(h) {
        for (var p = arguments.length, _ = new Array(p > 1 ? p - 1 : 0), g = 1; g < p; g++)
          _[g - 1] = arguments[g];
        t.emit(h, ..._);
      }), this.modules.languageDetector && (f.languageDetector = s(this.modules.languageDetector), f.languageDetector.init && f.languageDetector.init(f, this.options.detection, this.options)), this.modules.i18nFormat && (f.i18nFormat = s(this.modules.i18nFormat), f.i18nFormat.init && f.i18nFormat.init(this)), this.translator = new Zo(this.services, this.options), this.translator.on("*", function(h) {
        for (var p = arguments.length, _ = new Array(p > 1 ? p - 1 : 0), g = 1; g < p; g++)
          _[g - 1] = arguments[g];
        t.emit(h, ..._);
      }), this.modules.external.forEach((h) => {
        h.init && h.init(this);
      });
    }
    if (this.format = this.options.interpolation.format, i || (i = po), this.options.fallbackLng && !this.services.languageDetector && !this.options.lng) {
      const u = this.services.languageUtils.getFallbackCodes(this.options.fallbackLng);
      u.length > 0 && u[0] !== "dev" && (this.options.lng = u[0]);
    }
    !this.services.languageDetector && !this.options.lng && this.logger.warn("init: no languageDetector is used and no lng is defined"), ["getResource", "hasResourceBundle", "getResourceBundle", "getDataByLanguage"].forEach((u) => {
      this[u] = function() {
        return t.store[u](...arguments);
      };
    }), ["addResource", "addResources", "addResourceBundle", "removeResourceBundle"].forEach((u) => {
      this[u] = function() {
        return t.store[u](...arguments), t;
      };
    });
    const l = Yr(), c = () => {
      const u = (d, f) => {
        this.isInitializing = !1, this.isInitialized && !this.initializedStoreOnce && this.logger.warn("init: i18next is already initialized. You should call init just once!"), this.isInitialized = !0, this.options.isClone || this.logger.log("initialized", this.options), this.emit("initialized", this.options), l.resolve(f), i(d, f);
      };
      if (this.languages && !this.isInitialized) return u(null, this.t.bind(this));
      this.changeLanguage(this.options.lng, u);
    };
    return this.options.resources || !this.options.initAsync ? c() : setTimeout(c, 0), l;
  }
  loadResources(t) {
    var s, o;
    let i = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : po;
    const r = _t(t) ? t : this.language;
    if (typeof t == "function" && (i = t), !this.options.resources || this.options.partialBundledLanguages) {
      if ((r == null ? void 0 : r.toLowerCase()) === "cimode" && (!this.options.preload || this.options.preload.length === 0)) return i();
      const a = [], l = (c) => {
        if (!c || c === "cimode") return;
        this.services.languageUtils.toResolveHierarchy(c).forEach((d) => {
          d !== "cimode" && a.indexOf(d) < 0 && a.push(d);
        });
      };
      r ? l(r) : this.services.languageUtils.getFallbackCodes(this.options.fallbackLng).forEach((u) => l(u)), (o = (s = this.options.preload) == null ? void 0 : s.forEach) == null || o.call(s, (c) => l(c)), this.services.backendConnector.load(a, this.options.ns, (c) => {
        !c && !this.resolvedLanguage && this.language && this.setResolvedLanguage(this.language), i(c);
      });
    } else
      i(null);
  }
  reloadResources(t, e, i) {
    const r = Yr();
    return typeof t == "function" && (i = t, t = void 0), typeof e == "function" && (i = e, e = void 0), t || (t = this.languages), e || (e = this.options.ns), i || (i = po), this.services.backendConnector.reload(t, e, (s) => {
      r.resolve(), i(s);
    }), r;
  }
  use(t) {
    if (!t) throw new Error("You are passing an undefined module! Please check the object you are passing to i18next.use()");
    if (!t.type) throw new Error("You are passing a wrong module! Please check the object you are passing to i18next.use()");
    return t.type === "backend" && (this.modules.backend = t), (t.type === "logger" || t.log && t.warn && t.error) && (this.modules.logger = t), t.type === "languageDetector" && (this.modules.languageDetector = t), t.type === "i18nFormat" && (this.modules.i18nFormat = t), t.type === "postProcessor" && Mp.addPostProcessor(t), t.type === "formatter" && (this.modules.formatter = t), t.type === "3rdParty" && this.modules.external.push(t), this;
  }
  setResolvedLanguage(t) {
    if (!(!t || !this.languages) && !(["cimode", "dev"].indexOf(t) > -1))
      for (let e = 0; e < this.languages.length; e++) {
        const i = this.languages[e];
        if (!(["cimode", "dev"].indexOf(i) > -1) && this.store.hasLanguageSomeTranslations(i)) {
          this.resolvedLanguage = i;
          break;
        }
      }
  }
  changeLanguage(t, e) {
    var i = this;
    this.isLanguageChangingTo = t;
    const r = Yr();
    this.emit("languageChanging", t);
    const s = (l) => {
      this.language = l, this.languages = this.services.languageUtils.toResolveHierarchy(l), this.resolvedLanguage = void 0, this.setResolvedLanguage(l);
    }, o = (l, c) => {
      c ? (s(c), this.translator.changeLanguage(c), this.isLanguageChangingTo = void 0, this.emit("languageChanged", c), this.logger.log("languageChanged", c)) : this.isLanguageChangingTo = void 0, r.resolve(function() {
        return i.t(...arguments);
      }), e && e(l, function() {
        return i.t(...arguments);
      });
    }, a = (l) => {
      var u, d;
      !t && !l && this.services.languageDetector && (l = []);
      const c = _t(l) ? l : this.services.languageUtils.getBestMatchFromCodes(l);
      c && (this.language || s(c), this.translator.language || this.translator.changeLanguage(c), (d = (u = this.services.languageDetector) == null ? void 0 : u.cacheUserLanguage) == null || d.call(u, c)), this.loadResources(c, (f) => {
        o(f, c);
      });
    };
    return !t && this.services.languageDetector && !this.services.languageDetector.async ? a(this.services.languageDetector.detect()) : !t && this.services.languageDetector && this.services.languageDetector.async ? this.services.languageDetector.detect.length === 0 ? this.services.languageDetector.detect().then(a) : this.services.languageDetector.detect(a) : a(t), r;
  }
  getFixedT(t, e, i) {
    var r = this;
    const s = function(o, a) {
      let l;
      if (typeof a != "object") {
        for (var c = arguments.length, u = new Array(c > 2 ? c - 2 : 0), d = 2; d < c; d++)
          u[d - 2] = arguments[d];
        l = r.options.overloadTranslationOptionHandler([o, a].concat(u));
      } else
        l = {
          ...a
        };
      l.lng = l.lng || s.lng, l.lngs = l.lngs || s.lngs, l.ns = l.ns || s.ns, l.keyPrefix !== "" && (l.keyPrefix = l.keyPrefix || i || s.keyPrefix);
      const f = r.options.keySeparator || ".";
      let h;
      return l.keyPrefix && Array.isArray(o) ? h = o.map((p) => `${l.keyPrefix}${f}${p}`) : h = l.keyPrefix ? `${l.keyPrefix}${f}${o}` : o, r.t(h, l);
    };
    return _t(t) ? s.lng = t : s.lngs = t, s.ns = e, s.keyPrefix = i, s;
  }
  t() {
    var r;
    for (var t = arguments.length, e = new Array(t), i = 0; i < t; i++)
      e[i] = arguments[i];
    return (r = this.translator) == null ? void 0 : r.translate(...e);
  }
  exists() {
    var r;
    for (var t = arguments.length, e = new Array(t), i = 0; i < t; i++)
      e[i] = arguments[i];
    return (r = this.translator) == null ? void 0 : r.exists(...e);
  }
  setDefaultNamespace(t) {
    this.options.defaultNS = t;
  }
  hasLoadedNamespace(t) {
    let e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    if (!this.isInitialized)
      return this.logger.warn("hasLoadedNamespace: i18next was not initialized", this.languages), !1;
    if (!this.languages || !this.languages.length)
      return this.logger.warn("hasLoadedNamespace: i18n.languages were undefined or empty", this.languages), !1;
    const i = e.lng || this.resolvedLanguage || this.languages[0], r = this.options ? this.options.fallbackLng : !1, s = this.languages[this.languages.length - 1];
    if (i.toLowerCase() === "cimode") return !0;
    const o = (a, l) => {
      const c = this.services.backendConnector.state[`${a}|${l}`];
      return c === -1 || c === 0 || c === 2;
    };
    if (e.precheck) {
      const a = e.precheck(this, o);
      if (a !== void 0) return a;
    }
    return !!(this.hasResourceBundle(i, t) || !this.services.backendConnector.backend || this.options.resources && !this.options.partialBundledLanguages || o(i, t) && (!r || o(s, t)));
  }
  loadNamespaces(t, e) {
    const i = Yr();
    return this.options.ns ? (_t(t) && (t = [t]), t.forEach((r) => {
      this.options.ns.indexOf(r) < 0 && this.options.ns.push(r);
    }), this.loadResources((r) => {
      i.resolve(), e && e(r);
    }), i) : (e && e(), Promise.resolve());
  }
  loadLanguages(t, e) {
    const i = Yr();
    _t(t) && (t = [t]);
    const r = this.options.preload || [], s = t.filter((o) => r.indexOf(o) < 0 && this.services.languageUtils.isSupportedCode(o));
    return s.length ? (this.options.preload = r.concat(s), this.loadResources((o) => {
      i.resolve(), e && e(o);
    }), i) : (e && e(), Promise.resolve());
  }
  dir(t) {
    var r, s;
    if (t || (t = this.resolvedLanguage || (((r = this.languages) == null ? void 0 : r.length) > 0 ? this.languages[0] : this.language)), !t) return "rtl";
    const e = ["ar", "shu", "sqr", "ssh", "xaa", "yhd", "yud", "aao", "abh", "abv", "acm", "acq", "acw", "acx", "acy", "adf", "ads", "aeb", "aec", "afb", "ajp", "apc", "apd", "arb", "arq", "ars", "ary", "arz", "auz", "avl", "ayh", "ayl", "ayn", "ayp", "bbz", "pga", "he", "iw", "ps", "pbt", "pbu", "pst", "prp", "prd", "ug", "ur", "ydd", "yds", "yih", "ji", "yi", "hbo", "men", "xmn", "fa", "jpr", "peo", "pes", "prs", "dv", "sam", "ckb"], i = ((s = this.services) == null ? void 0 : s.languageUtils) || new Id(Bd());
    return e.indexOf(i.getLanguagePartFromCode(t)) > -1 || t.toLowerCase().indexOf("-arab") > 1 ? "rtl" : "ltr";
  }
  static createInstance() {
    let t = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, e = arguments.length > 1 ? arguments[1] : void 0;
    return new As(t, e);
  }
  cloneInstance() {
    let t = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : po;
    const i = t.forkResourceStore;
    i && delete t.forkResourceStore;
    const r = {
      ...this.options,
      ...t,
      isClone: !0
    }, s = new As(r);
    if ((t.debug !== void 0 || t.prefix !== void 0) && (s.logger = s.logger.clone(t)), ["store", "services", "language"].forEach((a) => {
      s[a] = this[a];
    }), s.services = {
      ...this.services
    }, s.services.utils = {
      hasLoadedNamespace: s.hasLoadedNamespace.bind(s)
    }, i) {
      const a = Object.keys(this.store.data).reduce((l, c) => (l[c] = {
        ...this.store.data[c]
      }, Object.keys(l[c]).reduce((u, d) => (u[d] = {
        ...l[c][d]
      }, u), {})), {});
      s.store = new Nd(a, r), s.services.resourceStore = s.store;
    }
    return s.translator = new Zo(s.services, r), s.translator.on("*", function(a) {
      for (var l = arguments.length, c = new Array(l > 1 ? l - 1 : 0), u = 1; u < l; u++)
        c[u - 1] = arguments[u];
      s.emit(a, ...c);
    }), s.init(r, e), s.translator.options = r, s.translator.backendConnector.services.utils = {
      hasLoadedNamespace: s.hasLoadedNamespace.bind(s)
    }, s;
  }
  toJSON() {
    return {
      options: this.options,
      store: this.store,
      language: this.language,
      languages: this.languages,
      resolvedLanguage: this.resolvedLanguage
    };
  }
}
const te = As.createInstance();
te.createInstance = As.createInstance;
te.createInstance;
te.dir;
te.init;
te.loadResources;
te.reloadResources;
te.use;
te.changeLanguage;
te.getFixedT;
te.t;
te.exists;
te.setDefaultNamespace;
te.hasLoadedNamespace;
te.loadNamespaces;
te.loadLanguages;
const Tb = "下揃え", Eb = "行", Ob = "高さ", Mb = "中央揃え", Ab = "ファイル", Nb = "スコープ", Lb = "リンクを解除", Rb = "タイトル", Ib = "保存", Pb = "スタイル", Db = "インデントを減らす", $b = "上揃え", Bb = "段落", zb = "テキスト", Hb = "フォーマット", Fb = "新規ウィンドウ", Vb = "リッチテキストエディタ", jb = "列", Wb = "キャンセル", Ub = "斜体", Kb = "両端揃え", qb = "太字", Gb = "挿入", Jb = "幅", Xb = "リンク", Yb = "文字色と背景色の選択肢", Zb = "インデントを増やす", Qb = "下線", t1 = "元に戻す", e1 = "ツールバー", n1 = "取り消し線", i1 = "なし", r1 = "右揃え", s1 = "URL", o1 = "セル", a1 = "左揃え", l1 = "やり直す", c1 = "書式設定済み", u1 = "定型文", d1 = "同じウィンドウ", f1 = "表", h1 = "画像", p1 = "引用", m1 = "中央揃え", g1 = {
  "Edit Link": "リンクを編集",
  VERTICAL_ALIGN_BOTTOM: Tb,
  Row: Eb,
  Height: Ob,
  "Embed webpage as card": "ウェブページの埋め込み (カード)",
  VERTICAL_ALIGN_MIDDLE: Mb,
  File: Ab,
  Scope: Nb,
  "Row group": "行グループ",
  "Paste as link": "リンクとして貼り付け",
  Unlink: Lb,
  Title: Rb,
  Save: Ib,
  "Add New Color": "新しい色を追加",
  "Merge cells": "セルを結合",
  "Properties for style attributes": "style属性のプロパティ",
  "Cell Spacing": "セルの間隔",
  Style: Pb,
  Outdent: Db,
  "Link Target": "リンクの開き方...",
  "Row Properties": "行のプロパティ",
  "Embed inline": "インライン埋め込み",
  "Edit attributes": "属性値の編集",
  VERTICAL_ALIGN_TOP: $b,
  "Paste as text": "テキストとして貼り付け",
  "Default parameters for embedding by oEmbed": "oEmbedによる埋込時のデフォルトのパラメーター",
  "Insert Boilerplate": "定型文の挿入",
  "Table properties": "表のプロパティ",
  Paragraph: Bb,
  "Insert row after": "後に行を挿入",
  Text: zb,
  "Header cell": "ヘッダーセル",
  Blocks: Hb,
  LINK_TARGET_BLANK: Fb,
  "Align Center": "中央揃え",
  MTRichTextEditor: Vb,
  "Heading 4": "見出し 4",
  "Align Right": "右揃え",
  "Cell type": "セルの種類",
  Column: jb,
  "Embed object": "埋め込みオブジェクト",
  "Heading 2": "見出し 2",
  "Delete Image": "画像を削除",
  "Heading 1": "見出し 1",
  Cancel: Wb,
  "Cell Properties": "セルのプロパティ",
  Italic: Ub,
  "Failed to get embed object": "埋め込みオブジェクトの取得に失敗しました",
  HORIZONTAL_ALIGN_JUSTIFY: Kb,
  Bold: qb,
  "Heading 6": "見出し 6",
  "Toggle to HTML editing mode": "HTML編集モードへの切り替え",
  "Delete row": "行の削除",
  "Edit Image": "画像を編集",
  "Cell properties": "セルのプロパティ",
  "Ordered List": "番号付き箇条書き",
  Insert: Gb,
  "Insert column after": "後に列を挿入",
  "Insert (s)": "挿入 (s)",
  "Insert column before": "前に列を挿入",
  Width: Jb,
  "MTRichTextEditor Settings": "リッチテキストエディタ設定",
  "Align Left": "左揃え",
  Link: Xb,
  "Insert table": "表の挿入",
  "Available Blocks": "追加可能なブロック",
  Colors: Yb,
  "Insert Link": "リンク挿入",
  "Select All": "すべて選択",
  "Select the properties you want to keep in the pasted HTML. Unselected properties will be removed.": "style属性のプロパティを選択してください。選択しないプロパティは削除されます。",
  Indent: Zb,
  Underline: Qb,
  "Text Color": "テキストの色",
  "Available Items": "追加可能なアイテム",
  Undo: t1,
  "Heading 3": "見出し 3",
  "Bullet List": "箇条書き",
  "Link URL": "リンクURL",
  Toolbar: e1,
  "Full Screen": "フルスクリーン",
  Strike: n1,
  "Cancel (x)": "キャンセル (x)",
  None: i1,
  "Toggle to HTML structure editing mode": "HTML構造編集モードへの切り替え",
  "Cell Padding": "セル内のスペース",
  "Link Text": "リンク元テキスト",
  "Split cell": "セルを分割",
  HORIZONTAL_ALIGN_RIGHT: r1,
  "Heading 5": "見出し 5",
  "Embed webpage as inline link": "ウェブページの埋め込み (インラインリンク)",
  "Source Code": "ソースコード",
  "Horizontal Rule": "水平罫線",
  "Select the data attributes you want to keep in the pasted HTML. Unselected attributes will be removed.": "保持したいデータ属性を選択してください。選択しない属性は削除されます。",
  "Remove Format": "書式をクリア",
  URL: s1,
  Cell: o1,
  "Insert row before": "前に行を挿入",
  HORIZONTAL_ALIGN_LEFT: a1,
  "Save (s)": "保存 (s)",
  "Background Color": "背景色",
  "Delete column": "列の削除",
  "Row properties": "行のプロパティ",
  "Delete table": "表の削除",
  "Data attributes": "データ属性",
  "Column group": "列グループ",
  Redo: l1,
  "Table Properties": "表のプロパティ",
  Preformatted: c1,
  Boilerplate: u1,
  "Horizontal align": "横配置",
  "Insert File": "アセットの挿入",
  "Insert HTML": "HTMLの挿入",
  LINK_TARGET_SELF: d1,
  "Insert Image": "画像の挿入",
  "Vertical align": "縦配置",
  "Border Width": "枠線幅",
  Table: f1,
  "Paste as HTML": "HTMLとして貼り付け",
  Image: h1,
  "Convert from Markdown": "Markdownから変換",
  "Class name": "クラス名",
  Blockquote: p1,
  HORIZONTAL_ALIGN_CENTER: m1
}, _1 = "Center", b1 = "Top", y1 = "Right", v1 = "Left", x1 = "Middle", w1 = "Bottom", k1 = "Justify", S1 = "Current window", C1 = "New window", T1 = {
  HORIZONTAL_ALIGN_CENTER: _1,
  "Vertical align": "Vertical align",
  VERTICAL_ALIGN_TOP: b1,
  HORIZONTAL_ALIGN_RIGHT: y1,
  HORIZONTAL_ALIGN_LEFT: v1,
  VERTICAL_ALIGN_MIDDLE: x1,
  VERTICAL_ALIGN_BOTTOM: w1,
  HORIZONTAL_ALIGN_JUSTIFY: k1,
  LINK_TARGET_SELF: S1,
  LINK_TARGET_BLANK: C1
};
te.init({
  fallbackLng: "en",
  resources: {
    ja: {
      translation: g1
    },
    en: {
      translation: T1
    }
  }
});
const I = (...n) => {
  if (typeof n[0] == "string")
    return te.t(...n);
  {
    let t = "";
    const [e, ...i] = n;
    for (let r = 0; r < e.length; r++)
      t += e[r] + te.t(i[r]);
    return t;
  }
};
function ge(n) {
  this.content = n;
}
ge.prototype = {
  constructor: ge,
  find: function(n) {
    for (var t = 0; t < this.content.length; t += 2)
      if (this.content[t] === n) return t;
    return -1;
  },
  // :: (string) → ?any
  // Retrieve the value stored under `key`, or return undefined when
  // no such key exists.
  get: function(n) {
    var t = this.find(n);
    return t == -1 ? void 0 : this.content[t + 1];
  },
  // :: (string, any, ?string) → OrderedMap
  // Create a new map by replacing the value of `key` with a new
  // value, or adding a binding to the end of the map. If `newKey` is
  // given, the key of the binding will be replaced with that key.
  update: function(n, t, e) {
    var i = e && e != n ? this.remove(e) : this, r = i.find(n), s = i.content.slice();
    return r == -1 ? s.push(e || n, t) : (s[r + 1] = t, e && (s[r] = e)), new ge(s);
  },
  // :: (string) → OrderedMap
  // Return a map with the given key removed, if it existed.
  remove: function(n) {
    var t = this.find(n);
    if (t == -1) return this;
    var e = this.content.slice();
    return e.splice(t, 2), new ge(e);
  },
  // :: (string, any) → OrderedMap
  // Add a new key to the start of the map.
  addToStart: function(n, t) {
    return new ge([n, t].concat(this.remove(n).content));
  },
  // :: (string, any) → OrderedMap
  // Add a new key to the end of the map.
  addToEnd: function(n, t) {
    var e = this.remove(n).content.slice();
    return e.push(n, t), new ge(e);
  },
  // :: (string, string, any) → OrderedMap
  // Add a key after the given key. If `place` is not found, the new
  // key is added to the end.
  addBefore: function(n, t, e) {
    var i = this.remove(t), r = i.content.slice(), s = i.find(n);
    return r.splice(s == -1 ? r.length : s, 0, t, e), new ge(r);
  },
  // :: ((key: string, value: any))
  // Call the given function for each key/value pair in the map, in
  // order.
  forEach: function(n) {
    for (var t = 0; t < this.content.length; t += 2)
      n(this.content[t], this.content[t + 1]);
  },
  // :: (union<Object, OrderedMap>) → OrderedMap
  // Create a new map by prepending the keys in this map that don't
  // appear in `map` before the keys in `map`.
  prepend: function(n) {
    return n = ge.from(n), n.size ? new ge(n.content.concat(this.subtract(n).content)) : this;
  },
  // :: (union<Object, OrderedMap>) → OrderedMap
  // Create a new map by appending the keys in this map that don't
  // appear in `map` after the keys in `map`.
  append: function(n) {
    return n = ge.from(n), n.size ? new ge(this.subtract(n).content.concat(n.content)) : this;
  },
  // :: (union<Object, OrderedMap>) → OrderedMap
  // Create a map containing all the keys in this map that don't
  // appear in `map`.
  subtract: function(n) {
    var t = this;
    n = ge.from(n);
    for (var e = 0; e < n.content.length; e += 2)
      t = t.remove(n.content[e]);
    return t;
  },
  // :: () → Object
  // Turn ordered map into a plain object.
  toObject: function() {
    var n = {};
    return this.forEach(function(t, e) {
      n[t] = e;
    }), n;
  },
  // :: number
  // The amount of keys in this map.
  get size() {
    return this.content.length >> 1;
  }
};
ge.from = function(n) {
  if (n instanceof ge) return n;
  var t = [];
  if (n) for (var e in n) t.push(e, n[e]);
  return new ge(t);
};
function Ap(n, t, e) {
  for (let i = 0; ; i++) {
    if (i == n.childCount || i == t.childCount)
      return n.childCount == t.childCount ? null : e;
    let r = n.child(i), s = t.child(i);
    if (r == s) {
      e += r.nodeSize;
      continue;
    }
    if (!r.sameMarkup(s))
      return e;
    if (r.isText && r.text != s.text) {
      for (let o = 0; r.text[o] == s.text[o]; o++)
        e++;
      return e;
    }
    if (r.content.size || s.content.size) {
      let o = Ap(r.content, s.content, e + 1);
      if (o != null)
        return o;
    }
    e += r.nodeSize;
  }
}
function Np(n, t, e, i) {
  for (let r = n.childCount, s = t.childCount; ; ) {
    if (r == 0 || s == 0)
      return r == s ? null : { a: e, b: i };
    let o = n.child(--r), a = t.child(--s), l = o.nodeSize;
    if (o == a) {
      e -= l, i -= l;
      continue;
    }
    if (!o.sameMarkup(a))
      return { a: e, b: i };
    if (o.isText && o.text != a.text) {
      let c = 0, u = Math.min(o.text.length, a.text.length);
      for (; c < u && o.text[o.text.length - c - 1] == a.text[a.text.length - c - 1]; )
        c++, e--, i--;
      return { a: e, b: i };
    }
    if (o.content.size || a.content.size) {
      let c = Np(o.content, a.content, e - 1, i - 1);
      if (c)
        return c;
    }
    e -= l, i -= l;
  }
}
class B {
  /**
  @internal
  */
  constructor(t, e) {
    if (this.content = t, this.size = e || 0, e == null)
      for (let i = 0; i < t.length; i++)
        this.size += t[i].nodeSize;
  }
  /**
  Invoke a callback for all descendant nodes between the given two
  positions (relative to start of this fragment). Doesn't descend
  into a node when the callback returns `false`.
  */
  nodesBetween(t, e, i, r = 0, s) {
    for (let o = 0, a = 0; a < e; o++) {
      let l = this.content[o], c = a + l.nodeSize;
      if (c > t && i(l, r + a, s || null, o) !== !1 && l.content.size) {
        let u = a + 1;
        l.nodesBetween(Math.max(0, t - u), Math.min(l.content.size, e - u), i, r + u);
      }
      a = c;
    }
  }
  /**
  Call the given callback for every descendant node. `pos` will be
  relative to the start of the fragment. The callback may return
  `false` to prevent traversal of a given node's children.
  */
  descendants(t) {
    this.nodesBetween(0, this.size, t);
  }
  /**
  Extract the text between `from` and `to`. See the same method on
  [`Node`](https://prosemirror.net/docs/ref/#model.Node.textBetween).
  */
  textBetween(t, e, i, r) {
    let s = "", o = !0;
    return this.nodesBetween(t, e, (a, l) => {
      let c = a.isText ? a.text.slice(Math.max(t, l) - l, e - l) : a.isLeaf ? r ? typeof r == "function" ? r(a) : r : a.type.spec.leafText ? a.type.spec.leafText(a) : "" : "";
      a.isBlock && (a.isLeaf && c || a.isTextblock) && i && (o ? o = !1 : s += i), s += c;
    }, 0), s;
  }
  /**
  Create a new fragment containing the combined content of this
  fragment and the other.
  */
  append(t) {
    if (!t.size)
      return this;
    if (!this.size)
      return t;
    let e = this.lastChild, i = t.firstChild, r = this.content.slice(), s = 0;
    for (e.isText && e.sameMarkup(i) && (r[r.length - 1] = e.withText(e.text + i.text), s = 1); s < t.content.length; s++)
      r.push(t.content[s]);
    return new B(r, this.size + t.size);
  }
  /**
  Cut out the sub-fragment between the two given positions.
  */
  cut(t, e = this.size) {
    if (t == 0 && e == this.size)
      return this;
    let i = [], r = 0;
    if (e > t)
      for (let s = 0, o = 0; o < e; s++) {
        let a = this.content[s], l = o + a.nodeSize;
        l > t && ((o < t || l > e) && (a.isText ? a = a.cut(Math.max(0, t - o), Math.min(a.text.length, e - o)) : a = a.cut(Math.max(0, t - o - 1), Math.min(a.content.size, e - o - 1))), i.push(a), r += a.nodeSize), o = l;
      }
    return new B(i, r);
  }
  /**
  @internal
  */
  cutByIndex(t, e) {
    return t == e ? B.empty : t == 0 && e == this.content.length ? this : new B(this.content.slice(t, e));
  }
  /**
  Create a new fragment in which the node at the given index is
  replaced by the given node.
  */
  replaceChild(t, e) {
    let i = this.content[t];
    if (i == e)
      return this;
    let r = this.content.slice(), s = this.size + e.nodeSize - i.nodeSize;
    return r[t] = e, new B(r, s);
  }
  /**
  Create a new fragment by prepending the given node to this
  fragment.
  */
  addToStart(t) {
    return new B([t].concat(this.content), this.size + t.nodeSize);
  }
  /**
  Create a new fragment by appending the given node to this
  fragment.
  */
  addToEnd(t) {
    return new B(this.content.concat(t), this.size + t.nodeSize);
  }
  /**
  Compare this fragment to another one.
  */
  eq(t) {
    if (this.content.length != t.content.length)
      return !1;
    for (let e = 0; e < this.content.length; e++)
      if (!this.content[e].eq(t.content[e]))
        return !1;
    return !0;
  }
  /**
  The first child of the fragment, or `null` if it is empty.
  */
  get firstChild() {
    return this.content.length ? this.content[0] : null;
  }
  /**
  The last child of the fragment, or `null` if it is empty.
  */
  get lastChild() {
    return this.content.length ? this.content[this.content.length - 1] : null;
  }
  /**
  The number of child nodes in this fragment.
  */
  get childCount() {
    return this.content.length;
  }
  /**
  Get the child node at the given index. Raise an error when the
  index is out of range.
  */
  child(t) {
    let e = this.content[t];
    if (!e)
      throw new RangeError("Index " + t + " out of range for " + this);
    return e;
  }
  /**
  Get the child node at the given index, if it exists.
  */
  maybeChild(t) {
    return this.content[t] || null;
  }
  /**
  Call `f` for every child node, passing the node, its offset
  into this parent node, and its index.
  */
  forEach(t) {
    for (let e = 0, i = 0; e < this.content.length; e++) {
      let r = this.content[e];
      t(r, i, e), i += r.nodeSize;
    }
  }
  /**
  Find the first position at which this fragment and another
  fragment differ, or `null` if they are the same.
  */
  findDiffStart(t, e = 0) {
    return Ap(this, t, e);
  }
  /**
  Find the first position, searching from the end, at which this
  fragment and the given fragment differ, or `null` if they are
  the same. Since this position will not be the same in both
  nodes, an object with two separate positions is returned.
  */
  findDiffEnd(t, e = this.size, i = t.size) {
    return Np(this, t, e, i);
  }
  /**
  Find the index and inner offset corresponding to a given relative
  position in this fragment. The result object will be reused
  (overwritten) the next time the function is called. @internal
  */
  findIndex(t, e = -1) {
    if (t == 0)
      return mo(0, t);
    if (t == this.size)
      return mo(this.content.length, t);
    if (t > this.size || t < 0)
      throw new RangeError(`Position ${t} outside of fragment (${this})`);
    for (let i = 0, r = 0; ; i++) {
      let s = this.child(i), o = r + s.nodeSize;
      if (o >= t)
        return o == t || e > 0 ? mo(i + 1, o) : mo(i, r);
      r = o;
    }
  }
  /**
  Return a debugging string that describes this fragment.
  */
  toString() {
    return "<" + this.toStringInner() + ">";
  }
  /**
  @internal
  */
  toStringInner() {
    return this.content.join(", ");
  }
  /**
  Create a JSON-serializeable representation of this fragment.
  */
  toJSON() {
    return this.content.length ? this.content.map((t) => t.toJSON()) : null;
  }
  /**
  Deserialize a fragment from its JSON representation.
  */
  static fromJSON(t, e) {
    if (!e)
      return B.empty;
    if (!Array.isArray(e))
      throw new RangeError("Invalid input for Fragment.fromJSON");
    return new B(e.map(t.nodeFromJSON));
  }
  /**
  Build a fragment from an array of nodes. Ensures that adjacent
  text nodes with the same marks are joined together.
  */
  static fromArray(t) {
    if (!t.length)
      return B.empty;
    let e, i = 0;
    for (let r = 0; r < t.length; r++) {
      let s = t[r];
      i += s.nodeSize, r && s.isText && t[r - 1].sameMarkup(s) ? (e || (e = t.slice(0, r)), e[e.length - 1] = s.withText(e[e.length - 1].text + s.text)) : e && e.push(s);
    }
    return new B(e || t, i);
  }
  /**
  Create a fragment from something that can be interpreted as a
  set of nodes. For `null`, it returns the empty fragment. For a
  fragment, the fragment itself. For a node or array of nodes, a
  fragment containing those nodes.
  */
  static from(t) {
    if (!t)
      return B.empty;
    if (t instanceof B)
      return t;
    if (Array.isArray(t))
      return this.fromArray(t);
    if (t.attrs)
      return new B([t], t.nodeSize);
    throw new RangeError("Can not convert " + t + " to a Fragment" + (t.nodesBetween ? " (looks like multiple versions of prosemirror-model were loaded)" : ""));
  }
}
B.empty = new B([], 0);
const ml = { index: 0, offset: 0 };
function mo(n, t) {
  return ml.index = n, ml.offset = t, ml;
}
function Qo(n, t) {
  if (n === t)
    return !0;
  if (!(n && typeof n == "object") || !(t && typeof t == "object"))
    return !1;
  let e = Array.isArray(n);
  if (Array.isArray(t) != e)
    return !1;
  if (e) {
    if (n.length != t.length)
      return !1;
    for (let i = 0; i < n.length; i++)
      if (!Qo(n[i], t[i]))
        return !1;
  } else {
    for (let i in n)
      if (!(i in t) || !Qo(n[i], t[i]))
        return !1;
    for (let i in t)
      if (!(i in n))
        return !1;
  }
  return !0;
}
let Ft = class mc {
  /**
  @internal
  */
  constructor(t, e) {
    this.type = t, this.attrs = e;
  }
  /**
  Given a set of marks, create a new set which contains this one as
  well, in the right position. If this mark is already in the set,
  the set itself is returned. If any marks that are set to be
  [exclusive](https://prosemirror.net/docs/ref/#model.MarkSpec.excludes) with this mark are present,
  those are replaced by this one.
  */
  addToSet(t) {
    let e, i = !1;
    for (let r = 0; r < t.length; r++) {
      let s = t[r];
      if (this.eq(s))
        return t;
      if (this.type.excludes(s.type))
        e || (e = t.slice(0, r));
      else {
        if (s.type.excludes(this.type))
          return t;
        !i && s.type.rank > this.type.rank && (e || (e = t.slice(0, r)), e.push(this), i = !0), e && e.push(s);
      }
    }
    return e || (e = t.slice()), i || e.push(this), e;
  }
  /**
  Remove this mark from the given set, returning a new set. If this
  mark is not in the set, the set itself is returned.
  */
  removeFromSet(t) {
    for (let e = 0; e < t.length; e++)
      if (this.eq(t[e]))
        return t.slice(0, e).concat(t.slice(e + 1));
    return t;
  }
  /**
  Test whether this mark is in the given set of marks.
  */
  isInSet(t) {
    for (let e = 0; e < t.length; e++)
      if (this.eq(t[e]))
        return !0;
    return !1;
  }
  /**
  Test whether this mark has the same type and attributes as
  another mark.
  */
  eq(t) {
    return this == t || this.type == t.type && Qo(this.attrs, t.attrs);
  }
  /**
  Convert this mark to a JSON-serializeable representation.
  */
  toJSON() {
    let t = { type: this.type.name };
    for (let e in this.attrs) {
      t.attrs = this.attrs;
      break;
    }
    return t;
  }
  /**
  Deserialize a mark from JSON.
  */
  static fromJSON(t, e) {
    if (!e)
      throw new RangeError("Invalid input for Mark.fromJSON");
    let i = t.marks[e.type];
    if (!i)
      throw new RangeError(`There is no mark type ${e.type} in this schema`);
    let r = i.create(e.attrs);
    return i.checkAttrs(r.attrs), r;
  }
  /**
  Test whether two sets of marks are identical.
  */
  static sameSet(t, e) {
    if (t == e)
      return !0;
    if (t.length != e.length)
      return !1;
    for (let i = 0; i < t.length; i++)
      if (!t[i].eq(e[i]))
        return !1;
    return !0;
  }
  /**
  Create a properly sorted mark set from null, a single mark, or an
  unsorted array of marks.
  */
  static setFrom(t) {
    if (!t || Array.isArray(t) && t.length == 0)
      return mc.none;
    if (t instanceof mc)
      return [t];
    let e = t.slice();
    return e.sort((i, r) => i.type.rank - r.type.rank), e;
  }
};
Ft.none = [];
class ta extends Error {
}
class Y {
  /**
  Create a slice. When specifying a non-zero open depth, you must
  make sure that there are nodes of at least that depth at the
  appropriate side of the fragment—i.e. if the fragment is an
  empty paragraph node, `openStart` and `openEnd` can't be greater
  than 1.
  
  It is not necessary for the content of open nodes to conform to
  the schema's content constraints, though it should be a valid
  start/end/middle for such a node, depending on which sides are
  open.
  */
  constructor(t, e, i) {
    this.content = t, this.openStart = e, this.openEnd = i;
  }
  /**
  The size this slice would add when inserted into a document.
  */
  get size() {
    return this.content.size - this.openStart - this.openEnd;
  }
  /**
  @internal
  */
  insertAt(t, e) {
    let i = Rp(this.content, t + this.openStart, e);
    return i && new Y(i, this.openStart, this.openEnd);
  }
  /**
  @internal
  */
  removeBetween(t, e) {
    return new Y(Lp(this.content, t + this.openStart, e + this.openStart), this.openStart, this.openEnd);
  }
  /**
  Tests whether this slice is equal to another slice.
  */
  eq(t) {
    return this.content.eq(t.content) && this.openStart == t.openStart && this.openEnd == t.openEnd;
  }
  /**
  @internal
  */
  toString() {
    return this.content + "(" + this.openStart + "," + this.openEnd + ")";
  }
  /**
  Convert a slice to a JSON-serializable representation.
  */
  toJSON() {
    if (!this.content.size)
      return null;
    let t = { content: this.content.toJSON() };
    return this.openStart > 0 && (t.openStart = this.openStart), this.openEnd > 0 && (t.openEnd = this.openEnd), t;
  }
  /**
  Deserialize a slice from its JSON representation.
  */
  static fromJSON(t, e) {
    if (!e)
      return Y.empty;
    let i = e.openStart || 0, r = e.openEnd || 0;
    if (typeof i != "number" || typeof r != "number")
      throw new RangeError("Invalid input for Slice.fromJSON");
    return new Y(B.fromJSON(t, e.content), i, r);
  }
  /**
  Create a slice from a fragment by taking the maximum possible
  open value on both side of the fragment.
  */
  static maxOpen(t, e = !0) {
    let i = 0, r = 0;
    for (let s = t.firstChild; s && !s.isLeaf && (e || !s.type.spec.isolating); s = s.firstChild)
      i++;
    for (let s = t.lastChild; s && !s.isLeaf && (e || !s.type.spec.isolating); s = s.lastChild)
      r++;
    return new Y(t, i, r);
  }
}
Y.empty = new Y(B.empty, 0, 0);
function Lp(n, t, e) {
  let { index: i, offset: r } = n.findIndex(t), s = n.maybeChild(i), { index: o, offset: a } = n.findIndex(e);
  if (r == t || s.isText) {
    if (a != e && !n.child(o).isText)
      throw new RangeError("Removing non-flat range");
    return n.cut(0, t).append(n.cut(e));
  }
  if (i != o)
    throw new RangeError("Removing non-flat range");
  return n.replaceChild(i, s.copy(Lp(s.content, t - r - 1, e - r - 1)));
}
function Rp(n, t, e, i) {
  let { index: r, offset: s } = n.findIndex(t), o = n.maybeChild(r);
  if (s == t || o.isText)
    return n.cut(0, t).append(e).append(n.cut(t));
  let a = Rp(o.content, t - s - 1, e);
  return a && n.replaceChild(r, o.copy(a));
}
function E1(n, t, e) {
  if (e.openStart > n.depth)
    throw new ta("Inserted content deeper than insertion position");
  if (n.depth - e.openStart != t.depth - e.openEnd)
    throw new ta("Inconsistent open depths");
  return Ip(n, t, e, 0);
}
function Ip(n, t, e, i) {
  let r = n.index(i), s = n.node(i);
  if (r == t.index(i) && i < n.depth - e.openStart) {
    let o = Ip(n, t, e, i + 1);
    return s.copy(s.content.replaceChild(r, o));
  } else if (e.content.size)
    if (!e.openStart && !e.openEnd && n.depth == i && t.depth == i) {
      let o = n.parent, a = o.content;
      return Bi(o, a.cut(0, n.parentOffset).append(e.content).append(a.cut(t.parentOffset)));
    } else {
      let { start: o, end: a } = O1(e, n);
      return Bi(s, Dp(n, o, a, t, i));
    }
  else return Bi(s, ea(n, t, i));
}
function Pp(n, t) {
  if (!t.type.compatibleContent(n.type))
    throw new ta("Cannot join " + t.type.name + " onto " + n.type.name);
}
function gc(n, t, e) {
  let i = n.node(e);
  return Pp(i, t.node(e)), i;
}
function $i(n, t) {
  let e = t.length - 1;
  e >= 0 && n.isText && n.sameMarkup(t[e]) ? t[e] = n.withText(t[e].text + n.text) : t.push(n);
}
function ms(n, t, e, i) {
  let r = (t || n).node(e), s = 0, o = t ? t.index(e) : r.childCount;
  n && (s = n.index(e), n.depth > e ? s++ : n.textOffset && ($i(n.nodeAfter, i), s++));
  for (let a = s; a < o; a++)
    $i(r.child(a), i);
  t && t.depth == e && t.textOffset && $i(t.nodeBefore, i);
}
function Bi(n, t) {
  return n.type.checkContent(t), n.copy(t);
}
function Dp(n, t, e, i, r) {
  let s = n.depth > r && gc(n, t, r + 1), o = i.depth > r && gc(e, i, r + 1), a = [];
  return ms(null, n, r, a), s && o && t.index(r) == e.index(r) ? (Pp(s, o), $i(Bi(s, Dp(n, t, e, i, r + 1)), a)) : (s && $i(Bi(s, ea(n, t, r + 1)), a), ms(t, e, r, a), o && $i(Bi(o, ea(e, i, r + 1)), a)), ms(i, null, r, a), new B(a);
}
function ea(n, t, e) {
  let i = [];
  if (ms(null, n, e, i), n.depth > e) {
    let r = gc(n, t, e + 1);
    $i(Bi(r, ea(n, t, e + 1)), i);
  }
  return ms(t, null, e, i), new B(i);
}
function O1(n, t) {
  let e = t.depth - n.openStart, r = t.node(e).copy(n.content);
  for (let s = e - 1; s >= 0; s--)
    r = t.node(s).copy(B.from(r));
  return {
    start: r.resolveNoCache(n.openStart + e),
    end: r.resolveNoCache(r.content.size - n.openEnd - e)
  };
}
class Ns {
  /**
  @internal
  */
  constructor(t, e, i) {
    this.pos = t, this.path = e, this.parentOffset = i, this.depth = e.length / 3 - 1;
  }
  /**
  @internal
  */
  resolveDepth(t) {
    return t == null ? this.depth : t < 0 ? this.depth + t : t;
  }
  /**
  The parent node that the position points into. Note that even if
  a position points into a text node, that node is not considered
  the parent—text nodes are ‘flat’ in this model, and have no content.
  */
  get parent() {
    return this.node(this.depth);
  }
  /**
  The root node in which the position was resolved.
  */
  get doc() {
    return this.node(0);
  }
  /**
  The ancestor node at the given level. `p.node(p.depth)` is the
  same as `p.parent`.
  */
  node(t) {
    return this.path[this.resolveDepth(t) * 3];
  }
  /**
  The index into the ancestor at the given level. If this points
  at the 3rd node in the 2nd paragraph on the top level, for
  example, `p.index(0)` is 1 and `p.index(1)` is 2.
  */
  index(t) {
    return this.path[this.resolveDepth(t) * 3 + 1];
  }
  /**
  The index pointing after this position into the ancestor at the
  given level.
  */
  indexAfter(t) {
    return t = this.resolveDepth(t), this.index(t) + (t == this.depth && !this.textOffset ? 0 : 1);
  }
  /**
  The (absolute) position at the start of the node at the given
  level.
  */
  start(t) {
    return t = this.resolveDepth(t), t == 0 ? 0 : this.path[t * 3 - 1] + 1;
  }
  /**
  The (absolute) position at the end of the node at the given
  level.
  */
  end(t) {
    return t = this.resolveDepth(t), this.start(t) + this.node(t).content.size;
  }
  /**
  The (absolute) position directly before the wrapping node at the
  given level, or, when `depth` is `this.depth + 1`, the original
  position.
  */
  before(t) {
    if (t = this.resolveDepth(t), !t)
      throw new RangeError("There is no position before the top-level node");
    return t == this.depth + 1 ? this.pos : this.path[t * 3 - 1];
  }
  /**
  The (absolute) position directly after the wrapping node at the
  given level, or the original position when `depth` is `this.depth + 1`.
  */
  after(t) {
    if (t = this.resolveDepth(t), !t)
      throw new RangeError("There is no position after the top-level node");
    return t == this.depth + 1 ? this.pos : this.path[t * 3 - 1] + this.path[t * 3].nodeSize;
  }
  /**
  When this position points into a text node, this returns the
  distance between the position and the start of the text node.
  Will be zero for positions that point between nodes.
  */
  get textOffset() {
    return this.pos - this.path[this.path.length - 1];
  }
  /**
  Get the node directly after the position, if any. If the position
  points into a text node, only the part of that node after the
  position is returned.
  */
  get nodeAfter() {
    let t = this.parent, e = this.index(this.depth);
    if (e == t.childCount)
      return null;
    let i = this.pos - this.path[this.path.length - 1], r = t.child(e);
    return i ? t.child(e).cut(i) : r;
  }
  /**
  Get the node directly before the position, if any. If the
  position points into a text node, only the part of that node
  before the position is returned.
  */
  get nodeBefore() {
    let t = this.index(this.depth), e = this.pos - this.path[this.path.length - 1];
    return e ? this.parent.child(t).cut(0, e) : t == 0 ? null : this.parent.child(t - 1);
  }
  /**
  Get the position at the given index in the parent node at the
  given depth (which defaults to `this.depth`).
  */
  posAtIndex(t, e) {
    e = this.resolveDepth(e);
    let i = this.path[e * 3], r = e == 0 ? 0 : this.path[e * 3 - 1] + 1;
    for (let s = 0; s < t; s++)
      r += i.child(s).nodeSize;
    return r;
  }
  /**
  Get the marks at this position, factoring in the surrounding
  marks' [`inclusive`](https://prosemirror.net/docs/ref/#model.MarkSpec.inclusive) property. If the
  position is at the start of a non-empty node, the marks of the
  node after it (if any) are returned.
  */
  marks() {
    let t = this.parent, e = this.index();
    if (t.content.size == 0)
      return Ft.none;
    if (this.textOffset)
      return t.child(e).marks;
    let i = t.maybeChild(e - 1), r = t.maybeChild(e);
    if (!i) {
      let a = i;
      i = r, r = a;
    }
    let s = i.marks;
    for (var o = 0; o < s.length; o++)
      s[o].type.spec.inclusive === !1 && (!r || !s[o].isInSet(r.marks)) && (s = s[o--].removeFromSet(s));
    return s;
  }
  /**
  Get the marks after the current position, if any, except those
  that are non-inclusive and not present at position `$end`. This
  is mostly useful for getting the set of marks to preserve after a
  deletion. Will return `null` if this position is at the end of
  its parent node or its parent node isn't a textblock (in which
  case no marks should be preserved).
  */
  marksAcross(t) {
    let e = this.parent.maybeChild(this.index());
    if (!e || !e.isInline)
      return null;
    let i = e.marks, r = t.parent.maybeChild(t.index());
    for (var s = 0; s < i.length; s++)
      i[s].type.spec.inclusive === !1 && (!r || !i[s].isInSet(r.marks)) && (i = i[s--].removeFromSet(i));
    return i;
  }
  /**
  The depth up to which this position and the given (non-resolved)
  position share the same parent nodes.
  */
  sharedDepth(t) {
    for (let e = this.depth; e > 0; e--)
      if (this.start(e) <= t && this.end(e) >= t)
        return e;
    return 0;
  }
  /**
  Returns a range based on the place where this position and the
  given position diverge around block content. If both point into
  the same textblock, for example, a range around that textblock
  will be returned. If they point into different blocks, the range
  around those blocks in their shared ancestor is returned. You can
  pass in an optional predicate that will be called with a parent
  node to see if a range into that parent is acceptable.
  */
  blockRange(t = this, e) {
    if (t.pos < this.pos)
      return t.blockRange(this);
    for (let i = this.depth - (this.parent.inlineContent || this.pos == t.pos ? 1 : 0); i >= 0; i--)
      if (t.pos <= this.end(i) && (!e || e(this.node(i))))
        return new na(this, t, i);
    return null;
  }
  /**
  Query whether the given position shares the same parent node.
  */
  sameParent(t) {
    return this.pos - this.parentOffset == t.pos - t.parentOffset;
  }
  /**
  Return the greater of this and the given position.
  */
  max(t) {
    return t.pos > this.pos ? t : this;
  }
  /**
  Return the smaller of this and the given position.
  */
  min(t) {
    return t.pos < this.pos ? t : this;
  }
  /**
  @internal
  */
  toString() {
    let t = "";
    for (let e = 1; e <= this.depth; e++)
      t += (t ? "/" : "") + this.node(e).type.name + "_" + this.index(e - 1);
    return t + ":" + this.parentOffset;
  }
  /**
  @internal
  */
  static resolve(t, e) {
    if (!(e >= 0 && e <= t.content.size))
      throw new RangeError("Position " + e + " out of range");
    let i = [], r = 0, s = e;
    for (let o = t; ; ) {
      let { index: a, offset: l } = o.content.findIndex(s), c = s - l;
      if (i.push(o, a, r + l), !c || (o = o.child(a), o.isText))
        break;
      s = c - 1, r += l + 1;
    }
    return new Ns(e, i, s);
  }
  /**
  @internal
  */
  static resolveCached(t, e) {
    let i = Hd.get(t);
    if (i)
      for (let s = 0; s < i.elts.length; s++) {
        let o = i.elts[s];
        if (o.pos == e)
          return o;
      }
    else
      Hd.set(t, i = new M1());
    let r = i.elts[i.i] = Ns.resolve(t, e);
    return i.i = (i.i + 1) % A1, r;
  }
}
class M1 {
  constructor() {
    this.elts = [], this.i = 0;
  }
}
const A1 = 12, Hd = /* @__PURE__ */ new WeakMap();
class na {
  /**
  Construct a node range. `$from` and `$to` should point into the
  same node until at least the given `depth`, since a node range
  denotes an adjacent set of nodes in a single parent node.
  */
  constructor(t, e, i) {
    this.$from = t, this.$to = e, this.depth = i;
  }
  /**
  The position at the start of the range.
  */
  get start() {
    return this.$from.before(this.depth + 1);
  }
  /**
  The position at the end of the range.
  */
  get end() {
    return this.$to.after(this.depth + 1);
  }
  /**
  The parent node that the range points into.
  */
  get parent() {
    return this.$from.node(this.depth);
  }
  /**
  The start index of the range in the parent node.
  */
  get startIndex() {
    return this.$from.index(this.depth);
  }
  /**
  The end index of the range in the parent node.
  */
  get endIndex() {
    return this.$to.indexAfter(this.depth);
  }
}
const N1 = /* @__PURE__ */ Object.create(null);
let Pn = class _c {
  /**
  @internal
  */
  constructor(t, e, i, r = Ft.none) {
    this.type = t, this.attrs = e, this.marks = r, this.content = i || B.empty;
  }
  /**
  The array of this node's child nodes.
  */
  get children() {
    return this.content.content;
  }
  /**
  The size of this node, as defined by the integer-based [indexing
  scheme](/docs/guide/#doc.indexing). For text nodes, this is the
  amount of characters. For other leaf nodes, it is one. For
  non-leaf nodes, it is the size of the content plus two (the
  start and end token).
  */
  get nodeSize() {
    return this.isLeaf ? 1 : 2 + this.content.size;
  }
  /**
  The number of children that the node has.
  */
  get childCount() {
    return this.content.childCount;
  }
  /**
  Get the child node at the given index. Raises an error when the
  index is out of range.
  */
  child(t) {
    return this.content.child(t);
  }
  /**
  Get the child node at the given index, if it exists.
  */
  maybeChild(t) {
    return this.content.maybeChild(t);
  }
  /**
  Call `f` for every child node, passing the node, its offset
  into this parent node, and its index.
  */
  forEach(t) {
    this.content.forEach(t);
  }
  /**
  Invoke a callback for all descendant nodes recursively between
  the given two positions that are relative to start of this
  node's content. The callback is invoked with the node, its
  position relative to the original node (method receiver),
  its parent node, and its child index. When the callback returns
  false for a given node, that node's children will not be
  recursed over. The last parameter can be used to specify a
  starting position to count from.
  */
  nodesBetween(t, e, i, r = 0) {
    this.content.nodesBetween(t, e, i, r, this);
  }
  /**
  Call the given callback for every descendant node. Doesn't
  descend into a node when the callback returns `false`.
  */
  descendants(t) {
    this.nodesBetween(0, this.content.size, t);
  }
  /**
  Concatenates all the text nodes found in this fragment and its
  children.
  */
  get textContent() {
    return this.isLeaf && this.type.spec.leafText ? this.type.spec.leafText(this) : this.textBetween(0, this.content.size, "");
  }
  /**
  Get all text between positions `from` and `to`. When
  `blockSeparator` is given, it will be inserted to separate text
  from different block nodes. If `leafText` is given, it'll be
  inserted for every non-text leaf node encountered, otherwise
  [`leafText`](https://prosemirror.net/docs/ref/#model.NodeSpec^leafText) will be used.
  */
  textBetween(t, e, i, r) {
    return this.content.textBetween(t, e, i, r);
  }
  /**
  Returns this node's first child, or `null` if there are no
  children.
  */
  get firstChild() {
    return this.content.firstChild;
  }
  /**
  Returns this node's last child, or `null` if there are no
  children.
  */
  get lastChild() {
    return this.content.lastChild;
  }
  /**
  Test whether two nodes represent the same piece of document.
  */
  eq(t) {
    return this == t || this.sameMarkup(t) && this.content.eq(t.content);
  }
  /**
  Compare the markup (type, attributes, and marks) of this node to
  those of another. Returns `true` if both have the same markup.
  */
  sameMarkup(t) {
    return this.hasMarkup(t.type, t.attrs, t.marks);
  }
  /**
  Check whether this node's markup correspond to the given type,
  attributes, and marks.
  */
  hasMarkup(t, e, i) {
    return this.type == t && Qo(this.attrs, e || t.defaultAttrs || N1) && Ft.sameSet(this.marks, i || Ft.none);
  }
  /**
  Create a new node with the same markup as this node, containing
  the given content (or empty, if no content is given).
  */
  copy(t = null) {
    return t == this.content ? this : new _c(this.type, this.attrs, t, this.marks);
  }
  /**
  Create a copy of this node, with the given set of marks instead
  of the node's own marks.
  */
  mark(t) {
    return t == this.marks ? this : new _c(this.type, this.attrs, this.content, t);
  }
  /**
  Create a copy of this node with only the content between the
  given positions. If `to` is not given, it defaults to the end of
  the node.
  */
  cut(t, e = this.content.size) {
    return t == 0 && e == this.content.size ? this : this.copy(this.content.cut(t, e));
  }
  /**
  Cut out the part of the document between the given positions, and
  return it as a `Slice` object.
  */
  slice(t, e = this.content.size, i = !1) {
    if (t == e)
      return Y.empty;
    let r = this.resolve(t), s = this.resolve(e), o = i ? 0 : r.sharedDepth(e), a = r.start(o), c = r.node(o).content.cut(r.pos - a, s.pos - a);
    return new Y(c, r.depth - o, s.depth - o);
  }
  /**
  Replace the part of the document between the given positions with
  the given slice. The slice must 'fit', meaning its open sides
  must be able to connect to the surrounding content, and its
  content nodes must be valid children for the node they are placed
  into. If any of this is violated, an error of type
  [`ReplaceError`](https://prosemirror.net/docs/ref/#model.ReplaceError) is thrown.
  */
  replace(t, e, i) {
    return E1(this.resolve(t), this.resolve(e), i);
  }
  /**
  Find the node directly after the given position.
  */
  nodeAt(t) {
    for (let e = this; ; ) {
      let { index: i, offset: r } = e.content.findIndex(t);
      if (e = e.maybeChild(i), !e)
        return null;
      if (r == t || e.isText)
        return e;
      t -= r + 1;
    }
  }
  /**
  Find the (direct) child node after the given offset, if any,
  and return it along with its index and offset relative to this
  node.
  */
  childAfter(t) {
    let { index: e, offset: i } = this.content.findIndex(t);
    return { node: this.content.maybeChild(e), index: e, offset: i };
  }
  /**
  Find the (direct) child node before the given offset, if any,
  and return it along with its index and offset relative to this
  node.
  */
  childBefore(t) {
    if (t == 0)
      return { node: null, index: 0, offset: 0 };
    let { index: e, offset: i } = this.content.findIndex(t);
    if (i < t)
      return { node: this.content.child(e), index: e, offset: i };
    let r = this.content.child(e - 1);
    return { node: r, index: e - 1, offset: i - r.nodeSize };
  }
  /**
  Resolve the given position in the document, returning an
  [object](https://prosemirror.net/docs/ref/#model.ResolvedPos) with information about its context.
  */
  resolve(t) {
    return Ns.resolveCached(this, t);
  }
  /**
  @internal
  */
  resolveNoCache(t) {
    return Ns.resolve(this, t);
  }
  /**
  Test whether a given mark or mark type occurs in this document
  between the two given positions.
  */
  rangeHasMark(t, e, i) {
    let r = !1;
    return e > t && this.nodesBetween(t, e, (s) => (i.isInSet(s.marks) && (r = !0), !r)), r;
  }
  /**
  True when this is a block (non-inline node)
  */
  get isBlock() {
    return this.type.isBlock;
  }
  /**
  True when this is a textblock node, a block node with inline
  content.
  */
  get isTextblock() {
    return this.type.isTextblock;
  }
  /**
  True when this node allows inline content.
  */
  get inlineContent() {
    return this.type.inlineContent;
  }
  /**
  True when this is an inline node (a text node or a node that can
  appear among text).
  */
  get isInline() {
    return this.type.isInline;
  }
  /**
  True when this is a text node.
  */
  get isText() {
    return this.type.isText;
  }
  /**
  True when this is a leaf node.
  */
  get isLeaf() {
    return this.type.isLeaf;
  }
  /**
  True when this is an atom, i.e. when it does not have directly
  editable content. This is usually the same as `isLeaf`, but can
  be configured with the [`atom` property](https://prosemirror.net/docs/ref/#model.NodeSpec.atom)
  on a node's spec (typically used when the node is displayed as
  an uneditable [node view](https://prosemirror.net/docs/ref/#view.NodeView)).
  */
  get isAtom() {
    return this.type.isAtom;
  }
  /**
  Return a string representation of this node for debugging
  purposes.
  */
  toString() {
    if (this.type.spec.toDebugString)
      return this.type.spec.toDebugString(this);
    let t = this.type.name;
    return this.content.size && (t += "(" + this.content.toStringInner() + ")"), $p(this.marks, t);
  }
  /**
  Get the content match in this node at the given index.
  */
  contentMatchAt(t) {
    let e = this.type.contentMatch.matchFragment(this.content, 0, t);
    if (!e)
      throw new Error("Called contentMatchAt on a node with invalid content");
    return e;
  }
  /**
  Test whether replacing the range between `from` and `to` (by
  child index) with the given replacement fragment (which defaults
  to the empty fragment) would leave the node's content valid. You
  can optionally pass `start` and `end` indices into the
  replacement fragment.
  */
  canReplace(t, e, i = B.empty, r = 0, s = i.childCount) {
    let o = this.contentMatchAt(t).matchFragment(i, r, s), a = o && o.matchFragment(this.content, e);
    if (!a || !a.validEnd)
      return !1;
    for (let l = r; l < s; l++)
      if (!this.type.allowsMarks(i.child(l).marks))
        return !1;
    return !0;
  }
  /**
  Test whether replacing the range `from` to `to` (by index) with
  a node of the given type would leave the node's content valid.
  */
  canReplaceWith(t, e, i, r) {
    if (r && !this.type.allowsMarks(r))
      return !1;
    let s = this.contentMatchAt(t).matchType(i), o = s && s.matchFragment(this.content, e);
    return o ? o.validEnd : !1;
  }
  /**
  Test whether the given node's content could be appended to this
  node. If that node is empty, this will only return true if there
  is at least one node type that can appear in both nodes (to avoid
  merging completely incompatible nodes).
  */
  canAppend(t) {
    return t.content.size ? this.canReplace(this.childCount, this.childCount, t.content) : this.type.compatibleContent(t.type);
  }
  /**
  Check whether this node and its descendants conform to the
  schema, and raise an exception when they do not.
  */
  check() {
    this.type.checkContent(this.content), this.type.checkAttrs(this.attrs);
    let t = Ft.none;
    for (let e = 0; e < this.marks.length; e++) {
      let i = this.marks[e];
      i.type.checkAttrs(i.attrs), t = i.addToSet(t);
    }
    if (!Ft.sameSet(t, this.marks))
      throw new RangeError(`Invalid collection of marks for node ${this.type.name}: ${this.marks.map((e) => e.type.name)}`);
    this.content.forEach((e) => e.check());
  }
  /**
  Return a JSON-serializeable representation of this node.
  */
  toJSON() {
    let t = { type: this.type.name };
    for (let e in this.attrs) {
      t.attrs = this.attrs;
      break;
    }
    return this.content.size && (t.content = this.content.toJSON()), this.marks.length && (t.marks = this.marks.map((e) => e.toJSON())), t;
  }
  /**
  Deserialize a node from its JSON representation.
  */
  static fromJSON(t, e) {
    if (!e)
      throw new RangeError("Invalid input for Node.fromJSON");
    let i;
    if (e.marks) {
      if (!Array.isArray(e.marks))
        throw new RangeError("Invalid mark data for Node.fromJSON");
      i = e.marks.map(t.markFromJSON);
    }
    if (e.type == "text") {
      if (typeof e.text != "string")
        throw new RangeError("Invalid text node in JSON");
      return t.text(e.text, i);
    }
    let r = B.fromJSON(t, e.content), s = t.nodeType(e.type).create(e.attrs, r, i);
    return s.type.checkAttrs(s.attrs), s;
  }
};
Pn.prototype.text = void 0;
class ia extends Pn {
  /**
  @internal
  */
  constructor(t, e, i, r) {
    if (super(t, e, null, r), !i)
      throw new RangeError("Empty text nodes are not allowed");
    this.text = i;
  }
  toString() {
    return this.type.spec.toDebugString ? this.type.spec.toDebugString(this) : $p(this.marks, JSON.stringify(this.text));
  }
  get textContent() {
    return this.text;
  }
  textBetween(t, e) {
    return this.text.slice(t, e);
  }
  get nodeSize() {
    return this.text.length;
  }
  mark(t) {
    return t == this.marks ? this : new ia(this.type, this.attrs, this.text, t);
  }
  withText(t) {
    return t == this.text ? this : new ia(this.type, this.attrs, t, this.marks);
  }
  cut(t = 0, e = this.text.length) {
    return t == 0 && e == this.text.length ? this : this.withText(this.text.slice(t, e));
  }
  eq(t) {
    return this.sameMarkup(t) && this.text == t.text;
  }
  toJSON() {
    let t = super.toJSON();
    return t.text = this.text, t;
  }
}
function $p(n, t) {
  for (let e = n.length - 1; e >= 0; e--)
    t = n[e].type.name + "(" + t + ")";
  return t;
}
class ji {
  /**
  @internal
  */
  constructor(t) {
    this.validEnd = t, this.next = [], this.wrapCache = [];
  }
  /**
  @internal
  */
  static parse(t, e) {
    let i = new L1(t, e);
    if (i.next == null)
      return ji.empty;
    let r = Bp(i);
    i.next && i.err("Unexpected trailing text");
    let s = z1(B1(r));
    return H1(s, i), s;
  }
  /**
  Match a node type, returning a match after that node if
  successful.
  */
  matchType(t) {
    for (let e = 0; e < this.next.length; e++)
      if (this.next[e].type == t)
        return this.next[e].next;
    return null;
  }
  /**
  Try to match a fragment. Returns the resulting match when
  successful.
  */
  matchFragment(t, e = 0, i = t.childCount) {
    let r = this;
    for (let s = e; r && s < i; s++)
      r = r.matchType(t.child(s).type);
    return r;
  }
  /**
  @internal
  */
  get inlineContent() {
    return this.next.length != 0 && this.next[0].type.isInline;
  }
  /**
  Get the first matching node type at this match position that can
  be generated.
  */
  get defaultType() {
    for (let t = 0; t < this.next.length; t++) {
      let { type: e } = this.next[t];
      if (!(e.isText || e.hasRequiredAttrs()))
        return e;
    }
    return null;
  }
  /**
  @internal
  */
  compatible(t) {
    for (let e = 0; e < this.next.length; e++)
      for (let i = 0; i < t.next.length; i++)
        if (this.next[e].type == t.next[i].type)
          return !0;
    return !1;
  }
  /**
  Try to match the given fragment, and if that fails, see if it can
  be made to match by inserting nodes in front of it. When
  successful, return a fragment of inserted nodes (which may be
  empty if nothing had to be inserted). When `toEnd` is true, only
  return a fragment if the resulting match goes to the end of the
  content expression.
  */
  fillBefore(t, e = !1, i = 0) {
    let r = [this];
    function s(o, a) {
      let l = o.matchFragment(t, i);
      if (l && (!e || l.validEnd))
        return B.from(a.map((c) => c.createAndFill()));
      for (let c = 0; c < o.next.length; c++) {
        let { type: u, next: d } = o.next[c];
        if (!(u.isText || u.hasRequiredAttrs()) && r.indexOf(d) == -1) {
          r.push(d);
          let f = s(d, a.concat(u));
          if (f)
            return f;
        }
      }
      return null;
    }
    return s(this, []);
  }
  /**
  Find a set of wrapping node types that would allow a node of the
  given type to appear at this position. The result may be empty
  (when it fits directly) and will be null when no such wrapping
  exists.
  */
  findWrapping(t) {
    for (let i = 0; i < this.wrapCache.length; i += 2)
      if (this.wrapCache[i] == t)
        return this.wrapCache[i + 1];
    let e = this.computeWrapping(t);
    return this.wrapCache.push(t, e), e;
  }
  /**
  @internal
  */
  computeWrapping(t) {
    let e = /* @__PURE__ */ Object.create(null), i = [{ match: this, type: null, via: null }];
    for (; i.length; ) {
      let r = i.shift(), s = r.match;
      if (s.matchType(t)) {
        let o = [];
        for (let a = r; a.type; a = a.via)
          o.push(a.type);
        return o.reverse();
      }
      for (let o = 0; o < s.next.length; o++) {
        let { type: a, next: l } = s.next[o];
        !a.isLeaf && !a.hasRequiredAttrs() && !(a.name in e) && (!r.type || l.validEnd) && (i.push({ match: a.contentMatch, type: a, via: r }), e[a.name] = !0);
      }
    }
    return null;
  }
  /**
  The number of outgoing edges this node has in the finite
  automaton that describes the content expression.
  */
  get edgeCount() {
    return this.next.length;
  }
  /**
  Get the _n_​th outgoing edge from this node in the finite
  automaton that describes the content expression.
  */
  edge(t) {
    if (t >= this.next.length)
      throw new RangeError(`There's no ${t}th edge in this content match`);
    return this.next[t];
  }
  /**
  @internal
  */
  toString() {
    let t = [];
    function e(i) {
      t.push(i);
      for (let r = 0; r < i.next.length; r++)
        t.indexOf(i.next[r].next) == -1 && e(i.next[r].next);
    }
    return e(this), t.map((i, r) => {
      let s = r + (i.validEnd ? "*" : " ") + " ";
      for (let o = 0; o < i.next.length; o++)
        s += (o ? ", " : "") + i.next[o].type.name + "->" + t.indexOf(i.next[o].next);
      return s;
    }).join(`
`);
  }
}
ji.empty = new ji(!0);
class L1 {
  constructor(t, e) {
    this.string = t, this.nodeTypes = e, this.inline = null, this.pos = 0, this.tokens = t.split(/\s*(?=\b|\W|$)/), this.tokens[this.tokens.length - 1] == "" && this.tokens.pop(), this.tokens[0] == "" && this.tokens.shift();
  }
  get next() {
    return this.tokens[this.pos];
  }
  eat(t) {
    return this.next == t && (this.pos++ || !0);
  }
  err(t) {
    throw new SyntaxError(t + " (in content expression '" + this.string + "')");
  }
}
function Bp(n) {
  let t = [];
  do
    t.push(R1(n));
  while (n.eat("|"));
  return t.length == 1 ? t[0] : { type: "choice", exprs: t };
}
function R1(n) {
  let t = [];
  do
    t.push(I1(n));
  while (n.next && n.next != ")" && n.next != "|");
  return t.length == 1 ? t[0] : { type: "seq", exprs: t };
}
function I1(n) {
  let t = $1(n);
  for (; ; )
    if (n.eat("+"))
      t = { type: "plus", expr: t };
    else if (n.eat("*"))
      t = { type: "star", expr: t };
    else if (n.eat("?"))
      t = { type: "opt", expr: t };
    else if (n.eat("{"))
      t = P1(n, t);
    else
      break;
  return t;
}
function Fd(n) {
  /\D/.test(n.next) && n.err("Expected number, got '" + n.next + "'");
  let t = Number(n.next);
  return n.pos++, t;
}
function P1(n, t) {
  let e = Fd(n), i = e;
  return n.eat(",") && (n.next != "}" ? i = Fd(n) : i = -1), n.eat("}") || n.err("Unclosed braced range"), { type: "range", min: e, max: i, expr: t };
}
function D1(n, t) {
  let e = n.nodeTypes, i = e[t];
  if (i)
    return [i];
  let r = [];
  for (let s in e) {
    let o = e[s];
    o.isInGroup(t) && r.push(o);
  }
  return r.length == 0 && n.err("No node type or group '" + t + "' found"), r;
}
function $1(n) {
  if (n.eat("(")) {
    let t = Bp(n);
    return n.eat(")") || n.err("Missing closing paren"), t;
  } else if (/\W/.test(n.next))
    n.err("Unexpected token '" + n.next + "'");
  else {
    let t = D1(n, n.next).map((e) => (n.inline == null ? n.inline = e.isInline : n.inline != e.isInline && n.err("Mixing inline and block content"), { type: "name", value: e }));
    return n.pos++, t.length == 1 ? t[0] : { type: "choice", exprs: t };
  }
}
function B1(n) {
  let t = [[]];
  return r(s(n, 0), e()), t;
  function e() {
    return t.push([]) - 1;
  }
  function i(o, a, l) {
    let c = { term: l, to: a };
    return t[o].push(c), c;
  }
  function r(o, a) {
    o.forEach((l) => l.to = a);
  }
  function s(o, a) {
    if (o.type == "choice")
      return o.exprs.reduce((l, c) => l.concat(s(c, a)), []);
    if (o.type == "seq")
      for (let l = 0; ; l++) {
        let c = s(o.exprs[l], a);
        if (l == o.exprs.length - 1)
          return c;
        r(c, a = e());
      }
    else if (o.type == "star") {
      let l = e();
      return i(a, l), r(s(o.expr, l), l), [i(l)];
    } else if (o.type == "plus") {
      let l = e();
      return r(s(o.expr, a), l), r(s(o.expr, l), l), [i(l)];
    } else {
      if (o.type == "opt")
        return [i(a)].concat(s(o.expr, a));
      if (o.type == "range") {
        let l = a;
        for (let c = 0; c < o.min; c++) {
          let u = e();
          r(s(o.expr, l), u), l = u;
        }
        if (o.max == -1)
          r(s(o.expr, l), l);
        else
          for (let c = o.min; c < o.max; c++) {
            let u = e();
            i(l, u), r(s(o.expr, l), u), l = u;
          }
        return [i(l)];
      } else {
        if (o.type == "name")
          return [i(a, void 0, o.value)];
        throw new Error("Unknown expr type");
      }
    }
  }
}
function zp(n, t) {
  return t - n;
}
function Vd(n, t) {
  let e = [];
  return i(t), e.sort(zp);
  function i(r) {
    let s = n[r];
    if (s.length == 1 && !s[0].term)
      return i(s[0].to);
    e.push(r);
    for (let o = 0; o < s.length; o++) {
      let { term: a, to: l } = s[o];
      !a && e.indexOf(l) == -1 && i(l);
    }
  }
}
function z1(n) {
  let t = /* @__PURE__ */ Object.create(null);
  return e(Vd(n, 0));
  function e(i) {
    let r = [];
    i.forEach((o) => {
      n[o].forEach(({ term: a, to: l }) => {
        if (!a)
          return;
        let c;
        for (let u = 0; u < r.length; u++)
          r[u][0] == a && (c = r[u][1]);
        Vd(n, l).forEach((u) => {
          c || r.push([a, c = []]), c.indexOf(u) == -1 && c.push(u);
        });
      });
    });
    let s = t[i.join(",")] = new ji(i.indexOf(n.length - 1) > -1);
    for (let o = 0; o < r.length; o++) {
      let a = r[o][1].sort(zp);
      s.next.push({ type: r[o][0], next: t[a.join(",")] || e(a) });
    }
    return s;
  }
}
function H1(n, t) {
  for (let e = 0, i = [n]; e < i.length; e++) {
    let r = i[e], s = !r.validEnd, o = [];
    for (let a = 0; a < r.next.length; a++) {
      let { type: l, next: c } = r.next[a];
      o.push(l.name), s && !(l.isText || l.hasRequiredAttrs()) && (s = !1), i.indexOf(c) == -1 && i.push(c);
    }
    s && t.err("Only non-generatable nodes (" + o.join(", ") + ") in a required position (see https://prosemirror.net/docs/guide/#generatable)");
  }
}
function Hp(n) {
  let t = /* @__PURE__ */ Object.create(null);
  for (let e in n) {
    let i = n[e];
    if (!i.hasDefault)
      return null;
    t[e] = i.default;
  }
  return t;
}
function Fp(n, t) {
  let e = /* @__PURE__ */ Object.create(null);
  for (let i in n) {
    let r = t && t[i];
    if (r === void 0) {
      let s = n[i];
      if (s.hasDefault)
        r = s.default;
      else
        throw new RangeError("No value supplied for attribute " + i);
    }
    e[i] = r;
  }
  return e;
}
function Vp(n, t, e, i) {
  for (let r in t)
    if (!(r in n))
      throw new RangeError(`Unsupported attribute ${r} for ${e} of type ${r}`);
  for (let r in n) {
    let s = n[r];
    s.validate && s.validate(t[r]);
  }
}
function jp(n, t) {
  let e = /* @__PURE__ */ Object.create(null);
  if (t)
    for (let i in t)
      e[i] = new V1(n, i, t[i]);
  return e;
}
let jd = class Wp {
  /**
  @internal
  */
  constructor(t, e, i) {
    this.name = t, this.schema = e, this.spec = i, this.markSet = null, this.groups = i.group ? i.group.split(" ") : [], this.attrs = jp(t, i.attrs), this.defaultAttrs = Hp(this.attrs), this.contentMatch = null, this.inlineContent = null, this.isBlock = !(i.inline || t == "text"), this.isText = t == "text";
  }
  /**
  True if this is an inline type.
  */
  get isInline() {
    return !this.isBlock;
  }
  /**
  True if this is a textblock type, a block that contains inline
  content.
  */
  get isTextblock() {
    return this.isBlock && this.inlineContent;
  }
  /**
  True for node types that allow no content.
  */
  get isLeaf() {
    return this.contentMatch == ji.empty;
  }
  /**
  True when this node is an atom, i.e. when it does not have
  directly editable content.
  */
  get isAtom() {
    return this.isLeaf || !!this.spec.atom;
  }
  /**
  Return true when this node type is part of the given
  [group](https://prosemirror.net/docs/ref/#model.NodeSpec.group).
  */
  isInGroup(t) {
    return this.groups.indexOf(t) > -1;
  }
  /**
  The node type's [whitespace](https://prosemirror.net/docs/ref/#model.NodeSpec.whitespace) option.
  */
  get whitespace() {
    return this.spec.whitespace || (this.spec.code ? "pre" : "normal");
  }
  /**
  Tells you whether this node type has any required attributes.
  */
  hasRequiredAttrs() {
    for (let t in this.attrs)
      if (this.attrs[t].isRequired)
        return !0;
    return !1;
  }
  /**
  Indicates whether this node allows some of the same content as
  the given node type.
  */
  compatibleContent(t) {
    return this == t || this.contentMatch.compatible(t.contentMatch);
  }
  /**
  @internal
  */
  computeAttrs(t) {
    return !t && this.defaultAttrs ? this.defaultAttrs : Fp(this.attrs, t);
  }
  /**
  Create a `Node` of this type. The given attributes are
  checked and defaulted (you can pass `null` to use the type's
  defaults entirely, if no required attributes exist). `content`
  may be a `Fragment`, a node, an array of nodes, or
  `null`. Similarly `marks` may be `null` to default to the empty
  set of marks.
  */
  create(t = null, e, i) {
    if (this.isText)
      throw new Error("NodeType.create can't construct text nodes");
    return new Pn(this, this.computeAttrs(t), B.from(e), Ft.setFrom(i));
  }
  /**
  Like [`create`](https://prosemirror.net/docs/ref/#model.NodeType.create), but check the given content
  against the node type's content restrictions, and throw an error
  if it doesn't match.
  */
  createChecked(t = null, e, i) {
    return e = B.from(e), this.checkContent(e), new Pn(this, this.computeAttrs(t), e, Ft.setFrom(i));
  }
  /**
  Like [`create`](https://prosemirror.net/docs/ref/#model.NodeType.create), but see if it is
  necessary to add nodes to the start or end of the given fragment
  to make it fit the node. If no fitting wrapping can be found,
  return null. Note that, due to the fact that required nodes can
  always be created, this will always succeed if you pass null or
  `Fragment.empty` as content.
  */
  createAndFill(t = null, e, i) {
    if (t = this.computeAttrs(t), e = B.from(e), e.size) {
      let o = this.contentMatch.fillBefore(e);
      if (!o)
        return null;
      e = o.append(e);
    }
    let r = this.contentMatch.matchFragment(e), s = r && r.fillBefore(B.empty, !0);
    return s ? new Pn(this, t, e.append(s), Ft.setFrom(i)) : null;
  }
  /**
  Returns true if the given fragment is valid content for this node
  type.
  */
  validContent(t) {
    let e = this.contentMatch.matchFragment(t);
    if (!e || !e.validEnd)
      return !1;
    for (let i = 0; i < t.childCount; i++)
      if (!this.allowsMarks(t.child(i).marks))
        return !1;
    return !0;
  }
  /**
  Throws a RangeError if the given fragment is not valid content for this
  node type.
  @internal
  */
  checkContent(t) {
    if (!this.validContent(t))
      throw new RangeError(`Invalid content for node ${this.name}: ${t.toString().slice(0, 50)}`);
  }
  /**
  @internal
  */
  checkAttrs(t) {
    Vp(this.attrs, t, "node", this.name);
  }
  /**
  Check whether the given mark type is allowed in this node.
  */
  allowsMarkType(t) {
    return this.markSet == null || this.markSet.indexOf(t) > -1;
  }
  /**
  Test whether the given set of marks are allowed in this node.
  */
  allowsMarks(t) {
    if (this.markSet == null)
      return !0;
    for (let e = 0; e < t.length; e++)
      if (!this.allowsMarkType(t[e].type))
        return !1;
    return !0;
  }
  /**
  Removes the marks that are not allowed in this node from the given set.
  */
  allowedMarks(t) {
    if (this.markSet == null)
      return t;
    let e;
    for (let i = 0; i < t.length; i++)
      this.allowsMarkType(t[i].type) ? e && e.push(t[i]) : e || (e = t.slice(0, i));
    return e ? e.length ? e : Ft.none : t;
  }
  /**
  @internal
  */
  static compile(t, e) {
    let i = /* @__PURE__ */ Object.create(null);
    t.forEach((s, o) => i[s] = new Wp(s, e, o));
    let r = e.spec.topNode || "doc";
    if (!i[r])
      throw new RangeError("Schema is missing its top node type ('" + r + "')");
    if (!i.text)
      throw new RangeError("Every schema needs a 'text' type");
    for (let s in i.text.attrs)
      throw new RangeError("The text node type should not have attributes");
    return i;
  }
};
function F1(n, t, e) {
  let i = e.split("|");
  return (r) => {
    let s = r === null ? "null" : typeof r;
    if (i.indexOf(s) < 0)
      throw new RangeError(`Expected value of type ${i} for attribute ${t} on type ${n}, got ${s}`);
  };
}
class V1 {
  constructor(t, e, i) {
    this.hasDefault = Object.prototype.hasOwnProperty.call(i, "default"), this.default = i.default, this.validate = typeof i.validate == "string" ? F1(t, e, i.validate) : i.validate;
  }
  get isRequired() {
    return !this.hasDefault;
  }
}
class Ka {
  /**
  @internal
  */
  constructor(t, e, i, r) {
    this.name = t, this.rank = e, this.schema = i, this.spec = r, this.attrs = jp(t, r.attrs), this.excluded = null;
    let s = Hp(this.attrs);
    this.instance = s ? new Ft(this, s) : null;
  }
  /**
  Create a mark of this type. `attrs` may be `null` or an object
  containing only some of the mark's attributes. The others, if
  they have defaults, will be added.
  */
  create(t = null) {
    return !t && this.instance ? this.instance : new Ft(this, Fp(this.attrs, t));
  }
  /**
  @internal
  */
  static compile(t, e) {
    let i = /* @__PURE__ */ Object.create(null), r = 0;
    return t.forEach((s, o) => i[s] = new Ka(s, r++, e, o)), i;
  }
  /**
  When there is a mark of this type in the given set, a new set
  without it is returned. Otherwise, the input set is returned.
  */
  removeFromSet(t) {
    for (var e = 0; e < t.length; e++)
      t[e].type == this && (t = t.slice(0, e).concat(t.slice(e + 1)), e--);
    return t;
  }
  /**
  Tests whether there is a mark of this type in the given set.
  */
  isInSet(t) {
    for (let e = 0; e < t.length; e++)
      if (t[e].type == this)
        return t[e];
  }
  /**
  @internal
  */
  checkAttrs(t) {
    Vp(this.attrs, t, "mark", this.name);
  }
  /**
  Queries whether a given mark type is
  [excluded](https://prosemirror.net/docs/ref/#model.MarkSpec.excludes) by this one.
  */
  excludes(t) {
    return this.excluded.indexOf(t) > -1;
  }
}
class Up {
  /**
  Construct a schema from a schema [specification](https://prosemirror.net/docs/ref/#model.SchemaSpec).
  */
  constructor(t) {
    this.linebreakReplacement = null, this.cached = /* @__PURE__ */ Object.create(null);
    let e = this.spec = {};
    for (let r in t)
      e[r] = t[r];
    e.nodes = ge.from(t.nodes), e.marks = ge.from(t.marks || {}), this.nodes = jd.compile(this.spec.nodes, this), this.marks = Ka.compile(this.spec.marks, this);
    let i = /* @__PURE__ */ Object.create(null);
    for (let r in this.nodes) {
      if (r in this.marks)
        throw new RangeError(r + " can not be both a node and a mark");
      let s = this.nodes[r], o = s.spec.content || "", a = s.spec.marks;
      if (s.contentMatch = i[o] || (i[o] = ji.parse(o, this.nodes)), s.inlineContent = s.contentMatch.inlineContent, s.spec.linebreakReplacement) {
        if (this.linebreakReplacement)
          throw new RangeError("Multiple linebreak nodes defined");
        if (!s.isInline || !s.isLeaf)
          throw new RangeError("Linebreak replacement nodes must be inline leaf nodes");
        this.linebreakReplacement = s;
      }
      s.markSet = a == "_" ? null : a ? Wd(this, a.split(" ")) : a == "" || !s.inlineContent ? [] : null;
    }
    for (let r in this.marks) {
      let s = this.marks[r], o = s.spec.excludes;
      s.excluded = o == null ? [s] : o == "" ? [] : Wd(this, o.split(" "));
    }
    this.nodeFromJSON = this.nodeFromJSON.bind(this), this.markFromJSON = this.markFromJSON.bind(this), this.topNodeType = this.nodes[this.spec.topNode || "doc"], this.cached.wrappings = /* @__PURE__ */ Object.create(null);
  }
  /**
  Create a node in this schema. The `type` may be a string or a
  `NodeType` instance. Attributes will be extended with defaults,
  `content` may be a `Fragment`, `null`, a `Node`, or an array of
  nodes.
  */
  node(t, e = null, i, r) {
    if (typeof t == "string")
      t = this.nodeType(t);
    else if (t instanceof jd) {
      if (t.schema != this)
        throw new RangeError("Node type from different schema used (" + t.name + ")");
    } else throw new RangeError("Invalid node type: " + t);
    return t.createChecked(e, i, r);
  }
  /**
  Create a text node in the schema. Empty text nodes are not
  allowed.
  */
  text(t, e) {
    let i = this.nodes.text;
    return new ia(i, i.defaultAttrs, t, Ft.setFrom(e));
  }
  /**
  Create a mark with the given type and attributes.
  */
  mark(t, e) {
    return typeof t == "string" && (t = this.marks[t]), t.create(e);
  }
  /**
  Deserialize a node from its JSON representation. This method is
  bound.
  */
  nodeFromJSON(t) {
    return Pn.fromJSON(this, t);
  }
  /**
  Deserialize a mark from its JSON representation. This method is
  bound.
  */
  markFromJSON(t) {
    return Ft.fromJSON(this, t);
  }
  /**
  @internal
  */
  nodeType(t) {
    let e = this.nodes[t];
    if (!e)
      throw new RangeError("Unknown node type: " + t);
    return e;
  }
}
function Wd(n, t) {
  let e = [];
  for (let i = 0; i < t.length; i++) {
    let r = t[i], s = n.marks[r], o = s;
    if (s)
      e.push(s);
    else
      for (let a in n.marks) {
        let l = n.marks[a];
        (r == "_" || l.spec.group && l.spec.group.split(" ").indexOf(r) > -1) && e.push(o = l);
      }
    if (!o)
      throw new SyntaxError("Unknown mark type: '" + t[i] + "'");
  }
  return e;
}
function j1(n) {
  return n.tag != null;
}
function W1(n) {
  return n.style != null;
}
let _r = class bc {
  /**
  Create a parser that targets the given schema, using the given
  parsing rules.
  */
  constructor(t, e) {
    this.schema = t, this.rules = e, this.tags = [], this.styles = [];
    let i = this.matchedStyles = [];
    e.forEach((r) => {
      if (j1(r))
        this.tags.push(r);
      else if (W1(r)) {
        let s = /[^=]*/.exec(r.style)[0];
        i.indexOf(s) < 0 && i.push(s), this.styles.push(r);
      }
    }), this.normalizeLists = !this.tags.some((r) => {
      if (!/^(ul|ol)\b/.test(r.tag) || !r.node)
        return !1;
      let s = t.nodes[r.node];
      return s.contentMatch.matchType(s);
    });
  }
  /**
  Parse a document from the content of a DOM node.
  */
  parse(t, e = {}) {
    let i = new Kd(this, e, !1);
    return i.addAll(t, Ft.none, e.from, e.to), i.finish();
  }
  /**
  Parses the content of the given DOM node, like
  [`parse`](https://prosemirror.net/docs/ref/#model.DOMParser.parse), and takes the same set of
  options. But unlike that method, which produces a whole node,
  this one returns a slice that is open at the sides, meaning that
  the schema constraints aren't applied to the start of nodes to
  the left of the input and the end of nodes at the end.
  */
  parseSlice(t, e = {}) {
    let i = new Kd(this, e, !0);
    return i.addAll(t, Ft.none, e.from, e.to), Y.maxOpen(i.finish());
  }
  /**
  @internal
  */
  matchTag(t, e, i) {
    for (let r = i ? this.tags.indexOf(i) + 1 : 0; r < this.tags.length; r++) {
      let s = this.tags[r];
      if (q1(t, s.tag) && (s.namespace === void 0 || t.namespaceURI == s.namespace) && (!s.context || e.matchesContext(s.context))) {
        if (s.getAttrs) {
          let o = s.getAttrs(t);
          if (o === !1)
            continue;
          s.attrs = o || void 0;
        }
        return s;
      }
    }
  }
  /**
  @internal
  */
  matchStyle(t, e, i, r) {
    for (let s = r ? this.styles.indexOf(r) + 1 : 0; s < this.styles.length; s++) {
      let o = this.styles[s], a = o.style;
      if (!(a.indexOf(t) != 0 || o.context && !i.matchesContext(o.context) || // Test that the style string either precisely matches the prop,
      // or has an '=' sign after the prop, followed by the given
      // value.
      a.length > t.length && (a.charCodeAt(t.length) != 61 || a.slice(t.length + 1) != e))) {
        if (o.getAttrs) {
          let l = o.getAttrs(e);
          if (l === !1)
            continue;
          o.attrs = l || void 0;
        }
        return o;
      }
    }
  }
  /**
  @internal
  */
  static schemaRules(t) {
    let e = [];
    function i(r) {
      let s = r.priority == null ? 50 : r.priority, o = 0;
      for (; o < e.length; o++) {
        let a = e[o];
        if ((a.priority == null ? 50 : a.priority) < s)
          break;
      }
      e.splice(o, 0, r);
    }
    for (let r in t.marks) {
      let s = t.marks[r].spec.parseDOM;
      s && s.forEach((o) => {
        i(o = qd(o)), o.mark || o.ignore || o.clearMark || (o.mark = r);
      });
    }
    for (let r in t.nodes) {
      let s = t.nodes[r].spec.parseDOM;
      s && s.forEach((o) => {
        i(o = qd(o)), o.node || o.ignore || o.mark || (o.node = r);
      });
    }
    return e;
  }
  /**
  Construct a DOM parser using the parsing rules listed in a
  schema's [node specs](https://prosemirror.net/docs/ref/#model.NodeSpec.parseDOM), reordered by
  [priority](https://prosemirror.net/docs/ref/#model.ParseRule.priority).
  */
  static fromSchema(t) {
    return t.cached.domParser || (t.cached.domParser = new bc(t, bc.schemaRules(t)));
  }
};
const Kp = {
  address: !0,
  article: !0,
  aside: !0,
  blockquote: !0,
  canvas: !0,
  dd: !0,
  div: !0,
  dl: !0,
  fieldset: !0,
  figcaption: !0,
  figure: !0,
  footer: !0,
  form: !0,
  h1: !0,
  h2: !0,
  h3: !0,
  h4: !0,
  h5: !0,
  h6: !0,
  header: !0,
  hgroup: !0,
  hr: !0,
  li: !0,
  noscript: !0,
  ol: !0,
  output: !0,
  p: !0,
  pre: !0,
  section: !0,
  table: !0,
  tfoot: !0,
  ul: !0
}, U1 = {
  head: !0,
  noscript: !0,
  object: !0,
  script: !0,
  style: !0,
  title: !0
}, qp = { ol: !0, ul: !0 }, Ls = 1, yc = 2, gs = 4;
function Ud(n, t, e) {
  return t != null ? (t ? Ls : 0) | (t === "full" ? yc : 0) : n && n.whitespace == "pre" ? Ls | yc : e & ~gs;
}
class go {
  constructor(t, e, i, r, s, o) {
    this.type = t, this.attrs = e, this.marks = i, this.solid = r, this.options = o, this.content = [], this.activeMarks = Ft.none, this.match = s || (o & gs ? null : t.contentMatch);
  }
  findWrapping(t) {
    if (!this.match) {
      if (!this.type)
        return [];
      let e = this.type.contentMatch.fillBefore(B.from(t));
      if (e)
        this.match = this.type.contentMatch.matchFragment(e);
      else {
        let i = this.type.contentMatch, r;
        return (r = i.findWrapping(t.type)) ? (this.match = i, r) : null;
      }
    }
    return this.match.findWrapping(t.type);
  }
  finish(t) {
    if (!(this.options & Ls)) {
      let i = this.content[this.content.length - 1], r;
      if (i && i.isText && (r = /[ \t\r\n\u000c]+$/.exec(i.text))) {
        let s = i;
        i.text.length == r[0].length ? this.content.pop() : this.content[this.content.length - 1] = s.withText(s.text.slice(0, s.text.length - r[0].length));
      }
    }
    let e = B.from(this.content);
    return !t && this.match && (e = e.append(this.match.fillBefore(B.empty, !0))), this.type ? this.type.create(this.attrs, e, this.marks) : e;
  }
  inlineContext(t) {
    return this.type ? this.type.inlineContent : this.content.length ? this.content[0].isInline : t.parentNode && !Kp.hasOwnProperty(t.parentNode.nodeName.toLowerCase());
  }
}
class Kd {
  constructor(t, e, i) {
    this.parser = t, this.options = e, this.isOpen = i, this.open = 0, this.localPreserveWS = !1;
    let r = e.topNode, s, o = Ud(null, e.preserveWhitespace, 0) | (i ? gs : 0);
    r ? s = new go(r.type, r.attrs, Ft.none, !0, e.topMatch || r.type.contentMatch, o) : i ? s = new go(null, null, Ft.none, !0, null, o) : s = new go(t.schema.topNodeType, null, Ft.none, !0, null, o), this.nodes = [s], this.find = e.findPositions, this.needsBlock = !1;
  }
  get top() {
    return this.nodes[this.open];
  }
  // Add a DOM node to the content. Text is inserted as text node,
  // otherwise, the node is passed to `addElement` or, if it has a
  // `style` attribute, `addElementWithStyles`.
  addDOM(t, e) {
    t.nodeType == 3 ? this.addTextNode(t, e) : t.nodeType == 1 && this.addElement(t, e);
  }
  addTextNode(t, e) {
    let i = t.nodeValue, r = this.top, s = r.options & yc ? "full" : this.localPreserveWS || (r.options & Ls) > 0;
    if (s === "full" || r.inlineContext(t) || /[^ \t\r\n\u000c]/.test(i)) {
      if (s)
        s !== "full" ? i = i.replace(/\r?\n|\r/g, " ") : i = i.replace(/\r\n?/g, `
`);
      else if (i = i.replace(/[ \t\r\n\u000c]+/g, " "), /^[ \t\r\n\u000c]/.test(i) && this.open == this.nodes.length - 1) {
        let o = r.content[r.content.length - 1], a = t.previousSibling;
        (!o || a && a.nodeName == "BR" || o.isText && /[ \t\r\n\u000c]$/.test(o.text)) && (i = i.slice(1));
      }
      i && this.insertNode(this.parser.schema.text(i), e), this.findInText(t);
    } else
      this.findInside(t);
  }
  // Try to find a handler for the given tag and use that to parse. If
  // none is found, the element's content nodes are added directly.
  addElement(t, e, i) {
    let r = this.localPreserveWS, s = this.top;
    (t.tagName == "PRE" || /pre/.test(t.style && t.style.whiteSpace)) && (this.localPreserveWS = !0);
    let o = t.nodeName.toLowerCase(), a;
    qp.hasOwnProperty(o) && this.parser.normalizeLists && K1(t);
    let l = this.options.ruleFromNode && this.options.ruleFromNode(t) || (a = this.parser.matchTag(t, this, i));
    t: if (l ? l.ignore : U1.hasOwnProperty(o))
      this.findInside(t), this.ignoreFallback(t, e);
    else if (!l || l.skip || l.closeParent) {
      l && l.closeParent ? this.open = Math.max(0, this.open - 1) : l && l.skip.nodeType && (t = l.skip);
      let c, u = this.needsBlock;
      if (Kp.hasOwnProperty(o))
        s.content.length && s.content[0].isInline && this.open && (this.open--, s = this.top), c = !0, s.type || (this.needsBlock = !0);
      else if (!t.firstChild) {
        this.leafFallback(t, e);
        break t;
      }
      let d = l && l.skip ? e : this.readStyles(t, e);
      d && this.addAll(t, d), c && this.sync(s), this.needsBlock = u;
    } else {
      let c = this.readStyles(t, e);
      c && this.addElementByRule(t, l, c, l.consuming === !1 ? a : void 0);
    }
    this.localPreserveWS = r;
  }
  // Called for leaf DOM nodes that would otherwise be ignored
  leafFallback(t, e) {
    t.nodeName == "BR" && this.top.type && this.top.type.inlineContent && this.addTextNode(t.ownerDocument.createTextNode(`
`), e);
  }
  // Called for ignored nodes
  ignoreFallback(t, e) {
    t.nodeName == "BR" && (!this.top.type || !this.top.type.inlineContent) && this.findPlace(this.parser.schema.text("-"), e);
  }
  // Run any style parser associated with the node's styles. Either
  // return an updated array of marks, or null to indicate some of the
  // styles had a rule with `ignore` set.
  readStyles(t, e) {
    let i = t.style;
    if (i && i.length)
      for (let r = 0; r < this.parser.matchedStyles.length; r++) {
        let s = this.parser.matchedStyles[r], o = i.getPropertyValue(s);
        if (o)
          for (let a = void 0; ; ) {
            let l = this.parser.matchStyle(s, o, this, a);
            if (!l)
              break;
            if (l.ignore)
              return null;
            if (l.clearMark ? e = e.filter((c) => !l.clearMark(c)) : e = e.concat(this.parser.schema.marks[l.mark].create(l.attrs)), l.consuming === !1)
              a = l;
            else
              break;
          }
      }
    return e;
  }
  // Look up a handler for the given node. If none are found, return
  // false. Otherwise, apply it, use its return value to drive the way
  // the node's content is wrapped, and return true.
  addElementByRule(t, e, i, r) {
    let s, o;
    if (e.node)
      if (o = this.parser.schema.nodes[e.node], o.isLeaf)
        this.insertNode(o.create(e.attrs), i) || this.leafFallback(t, i);
      else {
        let l = this.enter(o, e.attrs || null, i, e.preserveWhitespace);
        l && (s = !0, i = l);
      }
    else {
      let l = this.parser.schema.marks[e.mark];
      i = i.concat(l.create(e.attrs));
    }
    let a = this.top;
    if (o && o.isLeaf)
      this.findInside(t);
    else if (r)
      this.addElement(t, i, r);
    else if (e.getContent)
      this.findInside(t), e.getContent(t, this.parser.schema).forEach((l) => this.insertNode(l, i));
    else {
      let l = t;
      typeof e.contentElement == "string" ? l = t.querySelector(e.contentElement) : typeof e.contentElement == "function" ? l = e.contentElement(t) : e.contentElement && (l = e.contentElement), this.findAround(t, l, !0), this.addAll(l, i), this.findAround(t, l, !1);
    }
    s && this.sync(a) && this.open--;
  }
  // Add all child nodes between `startIndex` and `endIndex` (or the
  // whole node, if not given). If `sync` is passed, use it to
  // synchronize after every block element.
  addAll(t, e, i, r) {
    let s = i || 0;
    for (let o = i ? t.childNodes[i] : t.firstChild, a = r == null ? null : t.childNodes[r]; o != a; o = o.nextSibling, ++s)
      this.findAtPoint(t, s), this.addDOM(o, e);
    this.findAtPoint(t, s);
  }
  // Try to find a way to fit the given node type into the current
  // context. May add intermediate wrappers and/or leave non-solid
  // nodes that we're in.
  findPlace(t, e) {
    let i, r;
    for (let s = this.open; s >= 0; s--) {
      let o = this.nodes[s], a = o.findWrapping(t);
      if (a && (!i || i.length > a.length) && (i = a, r = o, !a.length) || o.solid)
        break;
    }
    if (!i)
      return null;
    this.sync(r);
    for (let s = 0; s < i.length; s++)
      e = this.enterInner(i[s], null, e, !1);
    return e;
  }
  // Try to insert the given node, adjusting the context when needed.
  insertNode(t, e) {
    if (t.isInline && this.needsBlock && !this.top.type) {
      let r = this.textblockFromContext();
      r && (e = this.enterInner(r, null, e));
    }
    let i = this.findPlace(t, e);
    if (i) {
      this.closeExtra();
      let r = this.top;
      r.match && (r.match = r.match.matchType(t.type));
      let s = Ft.none;
      for (let o of i.concat(t.marks))
        (r.type ? r.type.allowsMarkType(o.type) : Gd(o.type, t.type)) && (s = o.addToSet(s));
      return r.content.push(t.mark(s)), !0;
    }
    return !1;
  }
  // Try to start a node of the given type, adjusting the context when
  // necessary.
  enter(t, e, i, r) {
    let s = this.findPlace(t.create(e), i);
    return s && (s = this.enterInner(t, e, i, !0, r)), s;
  }
  // Open a node of the given type
  enterInner(t, e, i, r = !1, s) {
    this.closeExtra();
    let o = this.top;
    o.match = o.match && o.match.matchType(t);
    let a = Ud(t, s, o.options);
    o.options & gs && o.content.length == 0 && (a |= gs);
    let l = Ft.none;
    return i = i.filter((c) => (o.type ? o.type.allowsMarkType(c.type) : Gd(c.type, t)) ? (l = c.addToSet(l), !1) : !0), this.nodes.push(new go(t, e, l, r, null, a)), this.open++, i;
  }
  // Make sure all nodes above this.open are finished and added to
  // their parents
  closeExtra(t = !1) {
    let e = this.nodes.length - 1;
    if (e > this.open) {
      for (; e > this.open; e--)
        this.nodes[e - 1].content.push(this.nodes[e].finish(t));
      this.nodes.length = this.open + 1;
    }
  }
  finish() {
    return this.open = 0, this.closeExtra(this.isOpen), this.nodes[0].finish(!!(this.isOpen || this.options.topOpen));
  }
  sync(t) {
    for (let e = this.open; e >= 0; e--) {
      if (this.nodes[e] == t)
        return this.open = e, !0;
      this.localPreserveWS && (this.nodes[e].options |= Ls);
    }
    return !1;
  }
  get currentPos() {
    this.closeExtra();
    let t = 0;
    for (let e = this.open; e >= 0; e--) {
      let i = this.nodes[e].content;
      for (let r = i.length - 1; r >= 0; r--)
        t += i[r].nodeSize;
      e && t++;
    }
    return t;
  }
  findAtPoint(t, e) {
    if (this.find)
      for (let i = 0; i < this.find.length; i++)
        this.find[i].node == t && this.find[i].offset == e && (this.find[i].pos = this.currentPos);
  }
  findInside(t) {
    if (this.find)
      for (let e = 0; e < this.find.length; e++)
        this.find[e].pos == null && t.nodeType == 1 && t.contains(this.find[e].node) && (this.find[e].pos = this.currentPos);
  }
  findAround(t, e, i) {
    if (t != e && this.find)
      for (let r = 0; r < this.find.length; r++)
        this.find[r].pos == null && t.nodeType == 1 && t.contains(this.find[r].node) && e.compareDocumentPosition(this.find[r].node) & (i ? 2 : 4) && (this.find[r].pos = this.currentPos);
  }
  findInText(t) {
    if (this.find)
      for (let e = 0; e < this.find.length; e++)
        this.find[e].node == t && (this.find[e].pos = this.currentPos - (t.nodeValue.length - this.find[e].offset));
  }
  // Determines whether the given context string matches this context.
  matchesContext(t) {
    if (t.indexOf("|") > -1)
      return t.split(/\s*\|\s*/).some(this.matchesContext, this);
    let e = t.split("/"), i = this.options.context, r = !this.isOpen && (!i || i.parent.type == this.nodes[0].type), s = -(i ? i.depth + 1 : 0) + (r ? 0 : 1), o = (a, l) => {
      for (; a >= 0; a--) {
        let c = e[a];
        if (c == "") {
          if (a == e.length - 1 || a == 0)
            continue;
          for (; l >= s; l--)
            if (o(a - 1, l))
              return !0;
          return !1;
        } else {
          let u = l > 0 || l == 0 && r ? this.nodes[l].type : i && l >= s ? i.node(l - s).type : null;
          if (!u || u.name != c && !u.isInGroup(c))
            return !1;
          l--;
        }
      }
      return !0;
    };
    return o(e.length - 1, this.open);
  }
  textblockFromContext() {
    let t = this.options.context;
    if (t)
      for (let e = t.depth; e >= 0; e--) {
        let i = t.node(e).contentMatchAt(t.indexAfter(e)).defaultType;
        if (i && i.isTextblock && i.defaultAttrs)
          return i;
      }
    for (let e in this.parser.schema.nodes) {
      let i = this.parser.schema.nodes[e];
      if (i.isTextblock && i.defaultAttrs)
        return i;
    }
  }
}
function K1(n) {
  for (let t = n.firstChild, e = null; t; t = t.nextSibling) {
    let i = t.nodeType == 1 ? t.nodeName.toLowerCase() : null;
    i && qp.hasOwnProperty(i) && e ? (e.appendChild(t), t = e) : i == "li" ? e = t : i && (e = null);
  }
}
function q1(n, t) {
  return (n.matches || n.msMatchesSelector || n.webkitMatchesSelector || n.mozMatchesSelector).call(n, t);
}
function qd(n) {
  let t = {};
  for (let e in n)
    t[e] = n[e];
  return t;
}
function Gd(n, t) {
  let e = t.schema.nodes;
  for (let i in e) {
    let r = e[i];
    if (!r.allowsMarkType(n))
      continue;
    let s = [], o = (a) => {
      s.push(a);
      for (let l = 0; l < a.edgeCount; l++) {
        let { type: c, next: u } = a.edge(l);
        if (c == t || s.indexOf(u) < 0 && o(u))
          return !0;
      }
    };
    if (o(r.contentMatch))
      return !0;
  }
}
class Xi {
  /**
  Create a serializer. `nodes` should map node names to functions
  that take a node and return a description of the corresponding
  DOM. `marks` does the same for mark names, but also gets an
  argument that tells it whether the mark's content is block or
  inline content (for typical use, it'll always be inline). A mark
  serializer may be `null` to indicate that marks of that type
  should not be serialized.
  */
  constructor(t, e) {
    this.nodes = t, this.marks = e;
  }
  /**
  Serialize the content of this fragment to a DOM fragment. When
  not in the browser, the `document` option, containing a DOM
  document, should be passed so that the serializer can create
  nodes.
  */
  serializeFragment(t, e = {}, i) {
    i || (i = gl(e).createDocumentFragment());
    let r = i, s = [];
    return t.forEach((o) => {
      if (s.length || o.marks.length) {
        let a = 0, l = 0;
        for (; a < s.length && l < o.marks.length; ) {
          let c = o.marks[l];
          if (!this.marks[c.type.name]) {
            l++;
            continue;
          }
          if (!c.eq(s[a][0]) || c.type.spec.spanning === !1)
            break;
          a++, l++;
        }
        for (; a < s.length; )
          r = s.pop()[1];
        for (; l < o.marks.length; ) {
          let c = o.marks[l++], u = this.serializeMark(c, o.isInline, e);
          u && (s.push([c, r]), r.appendChild(u.dom), r = u.contentDOM || u.dom);
        }
      }
      r.appendChild(this.serializeNodeInner(o, e));
    }), i;
  }
  /**
  @internal
  */
  serializeNodeInner(t, e) {
    let { dom: i, contentDOM: r } = Ho(gl(e), this.nodes[t.type.name](t), null, t.attrs);
    if (r) {
      if (t.isLeaf)
        throw new RangeError("Content hole not allowed in a leaf node spec");
      this.serializeFragment(t.content, e, r);
    }
    return i;
  }
  /**
  Serialize this node to a DOM node. This can be useful when you
  need to serialize a part of a document, as opposed to the whole
  document. To serialize a whole document, use
  [`serializeFragment`](https://prosemirror.net/docs/ref/#model.DOMSerializer.serializeFragment) on
  its [content](https://prosemirror.net/docs/ref/#model.Node.content).
  */
  serializeNode(t, e = {}) {
    let i = this.serializeNodeInner(t, e);
    for (let r = t.marks.length - 1; r >= 0; r--) {
      let s = this.serializeMark(t.marks[r], t.isInline, e);
      s && ((s.contentDOM || s.dom).appendChild(i), i = s.dom);
    }
    return i;
  }
  /**
  @internal
  */
  serializeMark(t, e, i = {}) {
    let r = this.marks[t.type.name];
    return r && Ho(gl(i), r(t, e), null, t.attrs);
  }
  static renderSpec(t, e, i = null, r) {
    return Ho(t, e, i, r);
  }
  /**
  Build a serializer using the [`toDOM`](https://prosemirror.net/docs/ref/#model.NodeSpec.toDOM)
  properties in a schema's node and mark specs.
  */
  static fromSchema(t) {
    return t.cached.domSerializer || (t.cached.domSerializer = new Xi(this.nodesFromSchema(t), this.marksFromSchema(t)));
  }
  /**
  Gather the serializers in a schema's node specs into an object.
  This can be useful as a base to build a custom serializer from.
  */
  static nodesFromSchema(t) {
    let e = Jd(t.nodes);
    return e.text || (e.text = (i) => i.text), e;
  }
  /**
  Gather the serializers in a schema's mark specs into an object.
  */
  static marksFromSchema(t) {
    return Jd(t.marks);
  }
}
function Jd(n) {
  let t = {};
  for (let e in n) {
    let i = n[e].spec.toDOM;
    i && (t[e] = i);
  }
  return t;
}
function gl(n) {
  return n.document || window.document;
}
const Xd = /* @__PURE__ */ new WeakMap();
function G1(n) {
  let t = Xd.get(n);
  return t === void 0 && Xd.set(n, t = J1(n)), t;
}
function J1(n) {
  let t = null;
  function e(i) {
    if (i && typeof i == "object")
      if (Array.isArray(i))
        if (typeof i[0] == "string")
          t || (t = []), t.push(i);
        else
          for (let r = 0; r < i.length; r++)
            e(i[r]);
      else
        for (let r in i)
          e(i[r]);
  }
  return e(n), t;
}
function Ho(n, t, e, i) {
  if (typeof t == "string")
    return { dom: n.createTextNode(t) };
  if (t.nodeType != null)
    return { dom: t };
  if (t.dom && t.dom.nodeType != null)
    return t;
  let r = t[0], s;
  if (typeof r != "string")
    throw new RangeError("Invalid array passed to renderSpec");
  if (i && (s = G1(i)) && s.indexOf(t) > -1)
    throw new RangeError("Using an array from an attribute object as a DOM spec. This may be an attempted cross site scripting attack.");
  let o = r.indexOf(" ");
  o > 0 && (e = r.slice(0, o), r = r.slice(o + 1));
  let a, l = e ? n.createElementNS(e, r) : n.createElement(r), c = t[1], u = 1;
  if (c && typeof c == "object" && c.nodeType == null && !Array.isArray(c)) {
    u = 2;
    for (let d in c)
      if (c[d] != null) {
        let f = d.indexOf(" ");
        f > 0 ? l.setAttributeNS(d.slice(0, f), d.slice(f + 1), c[d]) : l.setAttribute(d, c[d]);
      }
  }
  for (let d = u; d < t.length; d++) {
    let f = t[d];
    if (f === 0) {
      if (d < t.length - 1 || d > u)
        throw new RangeError("Content hole must be the only child of its parent node");
      return { dom: l, contentDOM: l };
    } else {
      let { dom: h, contentDOM: p } = Ho(n, f, e, i);
      if (l.appendChild(h), p) {
        if (a)
          throw new RangeError("Multiple content holes");
        a = p;
      }
    }
  }
  return { dom: l, contentDOM: a };
}
const Gp = 65535, Jp = Math.pow(2, 16);
function X1(n, t) {
  return n + t * Jp;
}
function Yd(n) {
  return n & Gp;
}
function Y1(n) {
  return (n - (n & Gp)) / Jp;
}
const Xp = 1, Yp = 2, Fo = 4, Zp = 8;
class vc {
  /**
  @internal
  */
  constructor(t, e, i) {
    this.pos = t, this.delInfo = e, this.recover = i;
  }
  /**
  Tells you whether the position was deleted, that is, whether the
  step removed the token on the side queried (via the `assoc`)
  argument from the document.
  */
  get deleted() {
    return (this.delInfo & Zp) > 0;
  }
  /**
  Tells you whether the token before the mapped position was deleted.
  */
  get deletedBefore() {
    return (this.delInfo & (Xp | Fo)) > 0;
  }
  /**
  True when the token after the mapped position was deleted.
  */
  get deletedAfter() {
    return (this.delInfo & (Yp | Fo)) > 0;
  }
  /**
  Tells whether any of the steps mapped through deletes across the
  position (including both the token before and after the
  position).
  */
  get deletedAcross() {
    return (this.delInfo & Fo) > 0;
  }
}
class Ge {
  /**
  Create a position map. The modifications to the document are
  represented as an array of numbers, in which each group of three
  represents a modified chunk as `[start, oldSize, newSize]`.
  */
  constructor(t, e = !1) {
    if (this.ranges = t, this.inverted = e, !t.length && Ge.empty)
      return Ge.empty;
  }
  /**
  @internal
  */
  recover(t) {
    let e = 0, i = Yd(t);
    if (!this.inverted)
      for (let r = 0; r < i; r++)
        e += this.ranges[r * 3 + 2] - this.ranges[r * 3 + 1];
    return this.ranges[i * 3] + e + Y1(t);
  }
  mapResult(t, e = 1) {
    return this._map(t, e, !1);
  }
  map(t, e = 1) {
    return this._map(t, e, !0);
  }
  /**
  @internal
  */
  _map(t, e, i) {
    let r = 0, s = this.inverted ? 2 : 1, o = this.inverted ? 1 : 2;
    for (let a = 0; a < this.ranges.length; a += 3) {
      let l = this.ranges[a] - (this.inverted ? r : 0);
      if (l > t)
        break;
      let c = this.ranges[a + s], u = this.ranges[a + o], d = l + c;
      if (t <= d) {
        let f = c ? t == l ? -1 : t == d ? 1 : e : e, h = l + r + (f < 0 ? 0 : u);
        if (i)
          return h;
        let p = t == (e < 0 ? l : d) ? null : X1(a / 3, t - l), _ = t == l ? Yp : t == d ? Xp : Fo;
        return (e < 0 ? t != l : t != d) && (_ |= Zp), new vc(h, _, p);
      }
      r += u - c;
    }
    return i ? t + r : new vc(t + r, 0, null);
  }
  /**
  @internal
  */
  touches(t, e) {
    let i = 0, r = Yd(e), s = this.inverted ? 2 : 1, o = this.inverted ? 1 : 2;
    for (let a = 0; a < this.ranges.length; a += 3) {
      let l = this.ranges[a] - (this.inverted ? i : 0);
      if (l > t)
        break;
      let c = this.ranges[a + s], u = l + c;
      if (t <= u && a == r * 3)
        return !0;
      i += this.ranges[a + o] - c;
    }
    return !1;
  }
  /**
  Calls the given function on each of the changed ranges included in
  this map.
  */
  forEach(t) {
    let e = this.inverted ? 2 : 1, i = this.inverted ? 1 : 2;
    for (let r = 0, s = 0; r < this.ranges.length; r += 3) {
      let o = this.ranges[r], a = o - (this.inverted ? s : 0), l = o + (this.inverted ? 0 : s), c = this.ranges[r + e], u = this.ranges[r + i];
      t(a, a + c, l, l + u), s += u - c;
    }
  }
  /**
  Create an inverted version of this map. The result can be used to
  map positions in the post-step document to the pre-step document.
  */
  invert() {
    return new Ge(this.ranges, !this.inverted);
  }
  /**
  @internal
  */
  toString() {
    return (this.inverted ? "-" : "") + JSON.stringify(this.ranges);
  }
  /**
  Create a map that moves all positions by offset `n` (which may be
  negative). This can be useful when applying steps meant for a
  sub-document to a larger document, or vice-versa.
  */
  static offset(t) {
    return t == 0 ? Ge.empty : new Ge(t < 0 ? [0, -t, 0] : [0, 0, t]);
  }
}
Ge.empty = new Ge([]);
class br {
  /**
  Create a new mapping with the given position maps.
  */
  constructor(t = [], e, i = 0, r = t.length) {
    this.maps = t, this.mirror = e, this.from = i, this.to = r;
  }
  /**
  Create a mapping that maps only through a part of this one.
  */
  slice(t = 0, e = this.maps.length) {
    return new br(this.maps, this.mirror, t, e);
  }
  /**
  @internal
  */
  copy() {
    return new br(this.maps.slice(), this.mirror && this.mirror.slice(), this.from, this.to);
  }
  /**
  Add a step map to the end of this mapping. If `mirrors` is
  given, it should be the index of the step map that is the mirror
  image of this one.
  */
  appendMap(t, e) {
    this.to = this.maps.push(t), e != null && this.setMirror(this.maps.length - 1, e);
  }
  /**
  Add all the step maps in a given mapping to this one (preserving
  mirroring information).
  */
  appendMapping(t) {
    for (let e = 0, i = this.maps.length; e < t.maps.length; e++) {
      let r = t.getMirror(e);
      this.appendMap(t.maps[e], r != null && r < e ? i + r : void 0);
    }
  }
  /**
  Finds the offset of the step map that mirrors the map at the
  given offset, in this mapping (as per the second argument to
  `appendMap`).
  */
  getMirror(t) {
    if (this.mirror) {
      for (let e = 0; e < this.mirror.length; e++)
        if (this.mirror[e] == t)
          return this.mirror[e + (e % 2 ? -1 : 1)];
    }
  }
  /**
  @internal
  */
  setMirror(t, e) {
    this.mirror || (this.mirror = []), this.mirror.push(t, e);
  }
  /**
  Append the inverse of the given mapping to this one.
  */
  appendMappingInverted(t) {
    for (let e = t.maps.length - 1, i = this.maps.length + t.maps.length; e >= 0; e--) {
      let r = t.getMirror(e);
      this.appendMap(t.maps[e].invert(), r != null && r > e ? i - r - 1 : void 0);
    }
  }
  /**
  Create an inverted version of this mapping.
  */
  invert() {
    let t = new br();
    return t.appendMappingInverted(this), t;
  }
  /**
  Map a position through this mapping.
  */
  map(t, e = 1) {
    if (this.mirror)
      return this._map(t, e, !0);
    for (let i = this.from; i < this.to; i++)
      t = this.maps[i].map(t, e);
    return t;
  }
  /**
  Map a position through this mapping, returning a mapping
  result.
  */
  mapResult(t, e = 1) {
    return this._map(t, e, !1);
  }
  /**
  @internal
  */
  _map(t, e, i) {
    let r = 0;
    for (let s = this.from; s < this.to; s++) {
      let o = this.maps[s], a = o.mapResult(t, e);
      if (a.recover != null) {
        let l = this.getMirror(s);
        if (l != null && l > s && l < this.to) {
          s = l, t = this.maps[l].recover(a.recover);
          continue;
        }
      }
      r |= a.delInfo, t = a.pos;
    }
    return i ? t : new vc(t, r, null);
  }
}
const _l = /* @__PURE__ */ Object.create(null);
class Ee {
  /**
  Get the step map that represents the changes made by this step,
  and which can be used to transform between positions in the old
  and the new document.
  */
  getMap() {
    return Ge.empty;
  }
  /**
  Try to merge this step with another one, to be applied directly
  after it. Returns the merged step when possible, null if the
  steps can't be merged.
  */
  merge(t) {
    return null;
  }
  /**
  Deserialize a step from its JSON representation. Will call
  through to the step class' own implementation of this method.
  */
  static fromJSON(t, e) {
    if (!e || !e.stepType)
      throw new RangeError("Invalid input for Step.fromJSON");
    let i = _l[e.stepType];
    if (!i)
      throw new RangeError(`No step type ${e.stepType} defined`);
    return i.fromJSON(t, e);
  }
  /**
  To be able to serialize steps to JSON, each step needs a string
  ID to attach to its JSON representation. Use this method to
  register an ID for your step classes. Try to pick something
  that's unlikely to clash with steps from other modules.
  */
  static jsonID(t, e) {
    if (t in _l)
      throw new RangeError("Duplicate use of step JSON ID " + t);
    return _l[t] = e, e.prototype.jsonID = t, e;
  }
}
class Zt {
  /**
  @internal
  */
  constructor(t, e) {
    this.doc = t, this.failed = e;
  }
  /**
  Create a successful step result.
  */
  static ok(t) {
    return new Zt(t, null);
  }
  /**
  Create a failed step result.
  */
  static fail(t) {
    return new Zt(null, t);
  }
  /**
  Call [`Node.replace`](https://prosemirror.net/docs/ref/#model.Node.replace) with the given
  arguments. Create a successful result if it succeeds, and a
  failed one if it throws a `ReplaceError`.
  */
  static fromReplace(t, e, i, r) {
    try {
      return Zt.ok(t.replace(e, i, r));
    } catch (s) {
      if (s instanceof ta)
        return Zt.fail(s.message);
      throw s;
    }
  }
}
function fu(n, t, e) {
  let i = [];
  for (let r = 0; r < n.childCount; r++) {
    let s = n.child(r);
    s.content.size && (s = s.copy(fu(s.content, t, s))), s.isInline && (s = t(s, e, r)), i.push(s);
  }
  return B.fromArray(i);
}
class di extends Ee {
  /**
  Create a mark step.
  */
  constructor(t, e, i) {
    super(), this.from = t, this.to = e, this.mark = i;
  }
  apply(t) {
    let e = t.slice(this.from, this.to), i = t.resolve(this.from), r = i.node(i.sharedDepth(this.to)), s = new Y(fu(e.content, (o, a) => !o.isAtom || !a.type.allowsMarkType(this.mark.type) ? o : o.mark(this.mark.addToSet(o.marks)), r), e.openStart, e.openEnd);
    return Zt.fromReplace(t, this.from, this.to, s);
  }
  invert() {
    return new Rn(this.from, this.to, this.mark);
  }
  map(t) {
    let e = t.mapResult(this.from, 1), i = t.mapResult(this.to, -1);
    return e.deleted && i.deleted || e.pos >= i.pos ? null : new di(e.pos, i.pos, this.mark);
  }
  merge(t) {
    return t instanceof di && t.mark.eq(this.mark) && this.from <= t.to && this.to >= t.from ? new di(Math.min(this.from, t.from), Math.max(this.to, t.to), this.mark) : null;
  }
  toJSON() {
    return {
      stepType: "addMark",
      mark: this.mark.toJSON(),
      from: this.from,
      to: this.to
    };
  }
  /**
  @internal
  */
  static fromJSON(t, e) {
    if (typeof e.from != "number" || typeof e.to != "number")
      throw new RangeError("Invalid input for AddMarkStep.fromJSON");
    return new di(e.from, e.to, t.markFromJSON(e.mark));
  }
}
Ee.jsonID("addMark", di);
class Rn extends Ee {
  /**
  Create a mark-removing step.
  */
  constructor(t, e, i) {
    super(), this.from = t, this.to = e, this.mark = i;
  }
  apply(t) {
    let e = t.slice(this.from, this.to), i = new Y(fu(e.content, (r) => r.mark(this.mark.removeFromSet(r.marks)), t), e.openStart, e.openEnd);
    return Zt.fromReplace(t, this.from, this.to, i);
  }
  invert() {
    return new di(this.from, this.to, this.mark);
  }
  map(t) {
    let e = t.mapResult(this.from, 1), i = t.mapResult(this.to, -1);
    return e.deleted && i.deleted || e.pos >= i.pos ? null : new Rn(e.pos, i.pos, this.mark);
  }
  merge(t) {
    return t instanceof Rn && t.mark.eq(this.mark) && this.from <= t.to && this.to >= t.from ? new Rn(Math.min(this.from, t.from), Math.max(this.to, t.to), this.mark) : null;
  }
  toJSON() {
    return {
      stepType: "removeMark",
      mark: this.mark.toJSON(),
      from: this.from,
      to: this.to
    };
  }
  /**
  @internal
  */
  static fromJSON(t, e) {
    if (typeof e.from != "number" || typeof e.to != "number")
      throw new RangeError("Invalid input for RemoveMarkStep.fromJSON");
    return new Rn(e.from, e.to, t.markFromJSON(e.mark));
  }
}
Ee.jsonID("removeMark", Rn);
class fi extends Ee {
  /**
  Create a node mark step.
  */
  constructor(t, e) {
    super(), this.pos = t, this.mark = e;
  }
  apply(t) {
    let e = t.nodeAt(this.pos);
    if (!e)
      return Zt.fail("No node at mark step's position");
    let i = e.type.create(e.attrs, null, this.mark.addToSet(e.marks));
    return Zt.fromReplace(t, this.pos, this.pos + 1, new Y(B.from(i), 0, e.isLeaf ? 0 : 1));
  }
  invert(t) {
    let e = t.nodeAt(this.pos);
    if (e) {
      let i = this.mark.addToSet(e.marks);
      if (i.length == e.marks.length) {
        for (let r = 0; r < e.marks.length; r++)
          if (!e.marks[r].isInSet(i))
            return new fi(this.pos, e.marks[r]);
        return new fi(this.pos, this.mark);
      }
    }
    return new Ir(this.pos, this.mark);
  }
  map(t) {
    let e = t.mapResult(this.pos, 1);
    return e.deletedAfter ? null : new fi(e.pos, this.mark);
  }
  toJSON() {
    return { stepType: "addNodeMark", pos: this.pos, mark: this.mark.toJSON() };
  }
  /**
  @internal
  */
  static fromJSON(t, e) {
    if (typeof e.pos != "number")
      throw new RangeError("Invalid input for AddNodeMarkStep.fromJSON");
    return new fi(e.pos, t.markFromJSON(e.mark));
  }
}
Ee.jsonID("addNodeMark", fi);
class Ir extends Ee {
  /**
  Create a mark-removing step.
  */
  constructor(t, e) {
    super(), this.pos = t, this.mark = e;
  }
  apply(t) {
    let e = t.nodeAt(this.pos);
    if (!e)
      return Zt.fail("No node at mark step's position");
    let i = e.type.create(e.attrs, null, this.mark.removeFromSet(e.marks));
    return Zt.fromReplace(t, this.pos, this.pos + 1, new Y(B.from(i), 0, e.isLeaf ? 0 : 1));
  }
  invert(t) {
    let e = t.nodeAt(this.pos);
    return !e || !this.mark.isInSet(e.marks) ? this : new fi(this.pos, this.mark);
  }
  map(t) {
    let e = t.mapResult(this.pos, 1);
    return e.deletedAfter ? null : new Ir(e.pos, this.mark);
  }
  toJSON() {
    return { stepType: "removeNodeMark", pos: this.pos, mark: this.mark.toJSON() };
  }
  /**
  @internal
  */
  static fromJSON(t, e) {
    if (typeof e.pos != "number")
      throw new RangeError("Invalid input for RemoveNodeMarkStep.fromJSON");
    return new Ir(e.pos, t.markFromJSON(e.mark));
  }
}
Ee.jsonID("removeNodeMark", Ir);
class ue extends Ee {
  /**
  The given `slice` should fit the 'gap' between `from` and
  `to`—the depths must line up, and the surrounding nodes must be
  able to be joined with the open sides of the slice. When
  `structure` is true, the step will fail if the content between
  from and to is not just a sequence of closing and then opening
  tokens (this is to guard against rebased replace steps
  overwriting something they weren't supposed to).
  */
  constructor(t, e, i, r = !1) {
    super(), this.from = t, this.to = e, this.slice = i, this.structure = r;
  }
  apply(t) {
    return this.structure && xc(t, this.from, this.to) ? Zt.fail("Structure replace would overwrite content") : Zt.fromReplace(t, this.from, this.to, this.slice);
  }
  getMap() {
    return new Ge([this.from, this.to - this.from, this.slice.size]);
  }
  invert(t) {
    return new ue(this.from, this.from + this.slice.size, t.slice(this.from, this.to));
  }
  map(t) {
    let e = t.mapResult(this.from, 1), i = t.mapResult(this.to, -1);
    return e.deletedAcross && i.deletedAcross ? null : new ue(e.pos, Math.max(e.pos, i.pos), this.slice);
  }
  merge(t) {
    if (!(t instanceof ue) || t.structure || this.structure)
      return null;
    if (this.from + this.slice.size == t.from && !this.slice.openEnd && !t.slice.openStart) {
      let e = this.slice.size + t.slice.size == 0 ? Y.empty : new Y(this.slice.content.append(t.slice.content), this.slice.openStart, t.slice.openEnd);
      return new ue(this.from, this.to + (t.to - t.from), e, this.structure);
    } else if (t.to == this.from && !this.slice.openStart && !t.slice.openEnd) {
      let e = this.slice.size + t.slice.size == 0 ? Y.empty : new Y(t.slice.content.append(this.slice.content), t.slice.openStart, this.slice.openEnd);
      return new ue(t.from, this.to, e, this.structure);
    } else
      return null;
  }
  toJSON() {
    let t = { stepType: "replace", from: this.from, to: this.to };
    return this.slice.size && (t.slice = this.slice.toJSON()), this.structure && (t.structure = !0), t;
  }
  /**
  @internal
  */
  static fromJSON(t, e) {
    if (typeof e.from != "number" || typeof e.to != "number")
      throw new RangeError("Invalid input for ReplaceStep.fromJSON");
    return new ue(e.from, e.to, Y.fromJSON(t, e.slice), !!e.structure);
  }
}
Ee.jsonID("replace", ue);
class fe extends Ee {
  /**
  Create a replace-around step with the given range and gap.
  `insert` should be the point in the slice into which the content
  of the gap should be moved. `structure` has the same meaning as
  it has in the [`ReplaceStep`](https://prosemirror.net/docs/ref/#transform.ReplaceStep) class.
  */
  constructor(t, e, i, r, s, o, a = !1) {
    super(), this.from = t, this.to = e, this.gapFrom = i, this.gapTo = r, this.slice = s, this.insert = o, this.structure = a;
  }
  apply(t) {
    if (this.structure && (xc(t, this.from, this.gapFrom) || xc(t, this.gapTo, this.to)))
      return Zt.fail("Structure gap-replace would overwrite content");
    let e = t.slice(this.gapFrom, this.gapTo);
    if (e.openStart || e.openEnd)
      return Zt.fail("Gap is not a flat range");
    let i = this.slice.insertAt(this.insert, e.content);
    return i ? Zt.fromReplace(t, this.from, this.to, i) : Zt.fail("Content does not fit in gap");
  }
  getMap() {
    return new Ge([
      this.from,
      this.gapFrom - this.from,
      this.insert,
      this.gapTo,
      this.to - this.gapTo,
      this.slice.size - this.insert
    ]);
  }
  invert(t) {
    let e = this.gapTo - this.gapFrom;
    return new fe(this.from, this.from + this.slice.size + e, this.from + this.insert, this.from + this.insert + e, t.slice(this.from, this.to).removeBetween(this.gapFrom - this.from, this.gapTo - this.from), this.gapFrom - this.from, this.structure);
  }
  map(t) {
    let e = t.mapResult(this.from, 1), i = t.mapResult(this.to, -1), r = this.from == this.gapFrom ? e.pos : t.map(this.gapFrom, -1), s = this.to == this.gapTo ? i.pos : t.map(this.gapTo, 1);
    return e.deletedAcross && i.deletedAcross || r < e.pos || s > i.pos ? null : new fe(e.pos, i.pos, r, s, this.slice, this.insert, this.structure);
  }
  toJSON() {
    let t = {
      stepType: "replaceAround",
      from: this.from,
      to: this.to,
      gapFrom: this.gapFrom,
      gapTo: this.gapTo,
      insert: this.insert
    };
    return this.slice.size && (t.slice = this.slice.toJSON()), this.structure && (t.structure = !0), t;
  }
  /**
  @internal
  */
  static fromJSON(t, e) {
    if (typeof e.from != "number" || typeof e.to != "number" || typeof e.gapFrom != "number" || typeof e.gapTo != "number" || typeof e.insert != "number")
      throw new RangeError("Invalid input for ReplaceAroundStep.fromJSON");
    return new fe(e.from, e.to, e.gapFrom, e.gapTo, Y.fromJSON(t, e.slice), e.insert, !!e.structure);
  }
}
Ee.jsonID("replaceAround", fe);
function xc(n, t, e) {
  let i = n.resolve(t), r = e - t, s = i.depth;
  for (; r > 0 && s > 0 && i.indexAfter(s) == i.node(s).childCount; )
    s--, r--;
  if (r > 0) {
    let o = i.node(s).maybeChild(i.indexAfter(s));
    for (; r > 0; ) {
      if (!o || o.isLeaf)
        return !0;
      o = o.firstChild, r--;
    }
  }
  return !1;
}
function Z1(n, t, e, i) {
  let r = [], s = [], o, a;
  n.doc.nodesBetween(t, e, (l, c, u) => {
    if (!l.isInline)
      return;
    let d = l.marks;
    if (!i.isInSet(d) && u.type.allowsMarkType(i.type)) {
      let f = Math.max(c, t), h = Math.min(c + l.nodeSize, e), p = i.addToSet(d);
      for (let _ = 0; _ < d.length; _++)
        d[_].isInSet(p) || (o && o.to == f && o.mark.eq(d[_]) ? o.to = h : r.push(o = new Rn(f, h, d[_])));
      a && a.to == f ? a.to = h : s.push(a = new di(f, h, i));
    }
  }), r.forEach((l) => n.step(l)), s.forEach((l) => n.step(l));
}
function Q1(n, t, e, i) {
  let r = [], s = 0;
  n.doc.nodesBetween(t, e, (o, a) => {
    if (!o.isInline)
      return;
    s++;
    let l = null;
    if (i instanceof Ka) {
      let c = o.marks, u;
      for (; u = i.isInSet(c); )
        (l || (l = [])).push(u), c = u.removeFromSet(c);
    } else i ? i.isInSet(o.marks) && (l = [i]) : l = o.marks;
    if (l && l.length) {
      let c = Math.min(a + o.nodeSize, e);
      for (let u = 0; u < l.length; u++) {
        let d = l[u], f;
        for (let h = 0; h < r.length; h++) {
          let p = r[h];
          p.step == s - 1 && d.eq(r[h].style) && (f = p);
        }
        f ? (f.to = c, f.step = s) : r.push({ style: d, from: Math.max(a, t), to: c, step: s });
      }
    }
  }), r.forEach((o) => n.step(new Rn(o.from, o.to, o.style)));
}
function hu(n, t, e, i = e.contentMatch, r = !0) {
  let s = n.doc.nodeAt(t), o = [], a = t + 1;
  for (let l = 0; l < s.childCount; l++) {
    let c = s.child(l), u = a + c.nodeSize, d = i.matchType(c.type);
    if (!d)
      o.push(new ue(a, u, Y.empty));
    else {
      i = d;
      for (let f = 0; f < c.marks.length; f++)
        e.allowsMarkType(c.marks[f].type) || n.step(new Rn(a, u, c.marks[f]));
      if (r && c.isText && e.whitespace != "pre") {
        let f, h = /\r?\n|\r/g, p;
        for (; f = h.exec(c.text); )
          p || (p = new Y(B.from(e.schema.text(" ", e.allowedMarks(c.marks))), 0, 0)), o.push(new ue(a + f.index, a + f.index + f[0].length, p));
      }
    }
    a = u;
  }
  if (!i.validEnd) {
    let l = i.fillBefore(B.empty, !0);
    n.replace(a, a, new Y(l, 0, 0));
  }
  for (let l = o.length - 1; l >= 0; l--)
    n.step(o[l]);
}
function ty(n, t, e) {
  return (t == 0 || n.canReplace(t, n.childCount)) && (e == n.childCount || n.canReplace(0, e));
}
function Wr(n) {
  let e = n.parent.content.cutByIndex(n.startIndex, n.endIndex);
  for (let i = n.depth; ; --i) {
    let r = n.$from.node(i), s = n.$from.index(i), o = n.$to.indexAfter(i);
    if (i < n.depth && r.canReplace(s, o, e))
      return i;
    if (i == 0 || r.type.spec.isolating || !ty(r, s, o))
      break;
  }
  return null;
}
function ey(n, t, e) {
  let { $from: i, $to: r, depth: s } = t, o = i.before(s + 1), a = r.after(s + 1), l = o, c = a, u = B.empty, d = 0;
  for (let p = s, _ = !1; p > e; p--)
    _ || i.index(p) > 0 ? (_ = !0, u = B.from(i.node(p).copy(u)), d++) : l--;
  let f = B.empty, h = 0;
  for (let p = s, _ = !1; p > e; p--)
    _ || r.after(p + 1) < r.end(p) ? (_ = !0, f = B.from(r.node(p).copy(f)), h++) : c++;
  n.step(new fe(l, c, o, a, new Y(u.append(f), d, h), u.size - d, !0));
}
function pu(n, t, e = null, i = n) {
  let r = ny(n, t), s = r && iy(i, t);
  return s ? r.map(Zd).concat({ type: t, attrs: e }).concat(s.map(Zd)) : null;
}
function Zd(n) {
  return { type: n, attrs: null };
}
function ny(n, t) {
  let { parent: e, startIndex: i, endIndex: r } = n, s = e.contentMatchAt(i).findWrapping(t);
  if (!s)
    return null;
  let o = s.length ? s[0] : t;
  return e.canReplaceWith(i, r, o) ? s : null;
}
function iy(n, t) {
  let { parent: e, startIndex: i, endIndex: r } = n, s = e.child(i), o = t.contentMatch.findWrapping(s.type);
  if (!o)
    return null;
  let l = (o.length ? o[o.length - 1] : t).contentMatch;
  for (let c = i; l && c < r; c++)
    l = l.matchType(e.child(c).type);
  return !l || !l.validEnd ? null : o;
}
function ry(n, t, e) {
  let i = B.empty;
  for (let o = e.length - 1; o >= 0; o--) {
    if (i.size) {
      let a = e[o].type.contentMatch.matchFragment(i);
      if (!a || !a.validEnd)
        throw new RangeError("Wrapper type given to Transform.wrap does not form valid content of its parent wrapper");
    }
    i = B.from(e[o].type.create(e[o].attrs, i));
  }
  let r = t.start, s = t.end;
  n.step(new fe(r, s, r, s, new Y(i, 0, 0), e.length, !0));
}
function sy(n, t, e, i, r) {
  if (!i.isTextblock)
    throw new RangeError("Type given to setBlockType should be a textblock");
  let s = n.steps.length;
  n.doc.nodesBetween(t, e, (o, a) => {
    let l = typeof r == "function" ? r(o) : r;
    if (o.isTextblock && !o.hasMarkup(i, l) && oy(n.doc, n.mapping.slice(s).map(a), i)) {
      let c = null;
      if (i.schema.linebreakReplacement) {
        let h = i.whitespace == "pre", p = !!i.contentMatch.matchType(i.schema.linebreakReplacement);
        h && !p ? c = !1 : !h && p && (c = !0);
      }
      c === !1 && tm(n, o, a, s), hu(n, n.mapping.slice(s).map(a, 1), i, void 0, c === null);
      let u = n.mapping.slice(s), d = u.map(a, 1), f = u.map(a + o.nodeSize, 1);
      return n.step(new fe(d, f, d + 1, f - 1, new Y(B.from(i.create(l, null, o.marks)), 0, 0), 1, !0)), c === !0 && Qp(n, o, a, s), !1;
    }
  });
}
function Qp(n, t, e, i) {
  t.forEach((r, s) => {
    if (r.isText) {
      let o, a = /\r?\n|\r/g;
      for (; o = a.exec(r.text); ) {
        let l = n.mapping.slice(i).map(e + 1 + s + o.index);
        n.replaceWith(l, l + 1, t.type.schema.linebreakReplacement.create());
      }
    }
  });
}
function tm(n, t, e, i) {
  t.forEach((r, s) => {
    if (r.type == r.type.schema.linebreakReplacement) {
      let o = n.mapping.slice(i).map(e + 1 + s);
      n.replaceWith(o, o + 1, t.type.schema.text(`
`));
    }
  });
}
function oy(n, t, e) {
  let i = n.resolve(t), r = i.index();
  return i.parent.canReplaceWith(r, r + 1, e);
}
function ay(n, t, e, i, r) {
  let s = n.doc.nodeAt(t);
  if (!s)
    throw new RangeError("No node at given position");
  e || (e = s.type);
  let o = e.create(i, null, r || s.marks);
  if (s.isLeaf)
    return n.replaceWith(t, t + s.nodeSize, o);
  if (!e.validContent(s.content))
    throw new RangeError("Invalid content for node type " + e.name);
  n.step(new fe(t, t + s.nodeSize, t + 1, t + s.nodeSize - 1, new Y(B.from(o), 0, 0), 1, !0));
}
function yr(n, t, e = 1, i) {
  let r = n.resolve(t), s = r.depth - e, o = i && i[i.length - 1] || r.parent;
  if (s < 0 || r.parent.type.spec.isolating || !r.parent.canReplace(r.index(), r.parent.childCount) || !o.type.validContent(r.parent.content.cutByIndex(r.index(), r.parent.childCount)))
    return !1;
  for (let c = r.depth - 1, u = e - 2; c > s; c--, u--) {
    let d = r.node(c), f = r.index(c);
    if (d.type.spec.isolating)
      return !1;
    let h = d.content.cutByIndex(f, d.childCount), p = i && i[u + 1];
    p && (h = h.replaceChild(0, p.type.create(p.attrs)));
    let _ = i && i[u] || d;
    if (!d.canReplace(f + 1, d.childCount) || !_.type.validContent(h))
      return !1;
  }
  let a = r.indexAfter(s), l = i && i[0];
  return r.node(s).canReplaceWith(a, a, l ? l.type : r.node(s + 1).type);
}
function ly(n, t, e = 1, i) {
  let r = n.doc.resolve(t), s = B.empty, o = B.empty;
  for (let a = r.depth, l = r.depth - e, c = e - 1; a > l; a--, c--) {
    s = B.from(r.node(a).copy(s));
    let u = i && i[c];
    o = B.from(u ? u.type.create(u.attrs, o) : r.node(a).copy(o));
  }
  n.step(new ue(t, t, new Y(s.append(o), e, e), !0));
}
function yi(n, t) {
  let e = n.resolve(t), i = e.index();
  return em(e.nodeBefore, e.nodeAfter) && e.parent.canReplace(i, i + 1);
}
function cy(n, t) {
  t.content.size || n.type.compatibleContent(t.type);
  let e = n.contentMatchAt(n.childCount), { linebreakReplacement: i } = n.type.schema;
  for (let r = 0; r < t.childCount; r++) {
    let s = t.child(r), o = s.type == i ? n.type.schema.nodes.text : s.type;
    if (e = e.matchType(o), !e || !n.type.allowsMarks(s.marks))
      return !1;
  }
  return e.validEnd;
}
function em(n, t) {
  return !!(n && t && !n.isLeaf && cy(n, t));
}
function qa(n, t, e = -1) {
  let i = n.resolve(t);
  for (let r = i.depth; ; r--) {
    let s, o, a = i.index(r);
    if (r == i.depth ? (s = i.nodeBefore, o = i.nodeAfter) : e > 0 ? (s = i.node(r + 1), a++, o = i.node(r).maybeChild(a)) : (s = i.node(r).maybeChild(a - 1), o = i.node(r + 1)), s && !s.isTextblock && em(s, o) && i.node(r).canReplace(a, a + 1))
      return t;
    if (r == 0)
      break;
    t = e < 0 ? i.before(r) : i.after(r);
  }
}
function uy(n, t, e) {
  let i = null, { linebreakReplacement: r } = n.doc.type.schema, s = n.doc.resolve(t - e), o = s.node().type;
  if (r && o.inlineContent) {
    let u = o.whitespace == "pre", d = !!o.contentMatch.matchType(r);
    u && !d ? i = !1 : !u && d && (i = !0);
  }
  let a = n.steps.length;
  if (i === !1) {
    let u = n.doc.resolve(t + e);
    tm(n, u.node(), u.before(), a);
  }
  o.inlineContent && hu(n, t + e - 1, o, s.node().contentMatchAt(s.index()), i == null);
  let l = n.mapping.slice(a), c = l.map(t - e);
  if (n.step(new ue(c, l.map(t + e, -1), Y.empty, !0)), i === !0) {
    let u = n.doc.resolve(c);
    Qp(n, u.node(), u.before(), n.steps.length);
  }
  return n;
}
function dy(n, t, e) {
  let i = n.resolve(t);
  if (i.parent.canReplaceWith(i.index(), i.index(), e))
    return t;
  if (i.parentOffset == 0)
    for (let r = i.depth - 1; r >= 0; r--) {
      let s = i.index(r);
      if (i.node(r).canReplaceWith(s, s, e))
        return i.before(r + 1);
      if (s > 0)
        return null;
    }
  if (i.parentOffset == i.parent.content.size)
    for (let r = i.depth - 1; r >= 0; r--) {
      let s = i.indexAfter(r);
      if (i.node(r).canReplaceWith(s, s, e))
        return i.after(r + 1);
      if (s < i.node(r).childCount)
        return null;
    }
  return null;
}
function nm(n, t, e) {
  let i = n.resolve(t);
  if (!e.content.size)
    return t;
  let r = e.content;
  for (let s = 0; s < e.openStart; s++)
    r = r.firstChild.content;
  for (let s = 1; s <= (e.openStart == 0 && e.size ? 2 : 1); s++)
    for (let o = i.depth; o >= 0; o--) {
      let a = o == i.depth ? 0 : i.pos <= (i.start(o + 1) + i.end(o + 1)) / 2 ? -1 : 1, l = i.index(o) + (a > 0 ? 1 : 0), c = i.node(o), u = !1;
      if (s == 1)
        u = c.canReplace(l, l, r);
      else {
        let d = c.contentMatchAt(l).findWrapping(r.firstChild.type);
        u = d && c.canReplaceWith(l, l, d[0]);
      }
      if (u)
        return a == 0 ? i.pos : a < 0 ? i.before(o + 1) : i.after(o + 1);
    }
  return null;
}
function Ga(n, t, e = t, i = Y.empty) {
  if (t == e && !i.size)
    return null;
  let r = n.resolve(t), s = n.resolve(e);
  return im(r, s, i) ? new ue(t, e, i) : new fy(r, s, i).fit();
}
function im(n, t, e) {
  return !e.openStart && !e.openEnd && n.start() == t.start() && n.parent.canReplace(n.index(), t.index(), e.content);
}
class fy {
  constructor(t, e, i) {
    this.$from = t, this.$to = e, this.unplaced = i, this.frontier = [], this.placed = B.empty;
    for (let r = 0; r <= t.depth; r++) {
      let s = t.node(r);
      this.frontier.push({
        type: s.type,
        match: s.contentMatchAt(t.indexAfter(r))
      });
    }
    for (let r = t.depth; r > 0; r--)
      this.placed = B.from(t.node(r).copy(this.placed));
  }
  get depth() {
    return this.frontier.length - 1;
  }
  fit() {
    for (; this.unplaced.size; ) {
      let c = this.findFittable();
      c ? this.placeNodes(c) : this.openMore() || this.dropNode();
    }
    let t = this.mustMoveInline(), e = this.placed.size - this.depth - this.$from.depth, i = this.$from, r = this.close(t < 0 ? this.$to : i.doc.resolve(t));
    if (!r)
      return null;
    let s = this.placed, o = i.depth, a = r.depth;
    for (; o && a && s.childCount == 1; )
      s = s.firstChild.content, o--, a--;
    let l = new Y(s, o, a);
    return t > -1 ? new fe(i.pos, t, this.$to.pos, this.$to.end(), l, e) : l.size || i.pos != this.$to.pos ? new ue(i.pos, r.pos, l) : null;
  }
  // Find a position on the start spine of `this.unplaced` that has
  // content that can be moved somewhere on the frontier. Returns two
  // depths, one for the slice and one for the frontier.
  findFittable() {
    let t = this.unplaced.openStart;
    for (let e = this.unplaced.content, i = 0, r = this.unplaced.openEnd; i < t; i++) {
      let s = e.firstChild;
      if (e.childCount > 1 && (r = 0), s.type.spec.isolating && r <= i) {
        t = i;
        break;
      }
      e = s.content;
    }
    for (let e = 1; e <= 2; e++)
      for (let i = e == 1 ? t : this.unplaced.openStart; i >= 0; i--) {
        let r, s = null;
        i ? (s = bl(this.unplaced.content, i - 1).firstChild, r = s.content) : r = this.unplaced.content;
        let o = r.firstChild;
        for (let a = this.depth; a >= 0; a--) {
          let { type: l, match: c } = this.frontier[a], u, d = null;
          if (e == 1 && (o ? c.matchType(o.type) || (d = c.fillBefore(B.from(o), !1)) : s && l.compatibleContent(s.type)))
            return { sliceDepth: i, frontierDepth: a, parent: s, inject: d };
          if (e == 2 && o && (u = c.findWrapping(o.type)))
            return { sliceDepth: i, frontierDepth: a, parent: s, wrap: u };
          if (s && c.matchType(s.type))
            break;
        }
      }
  }
  openMore() {
    let { content: t, openStart: e, openEnd: i } = this.unplaced, r = bl(t, e);
    return !r.childCount || r.firstChild.isLeaf ? !1 : (this.unplaced = new Y(t, e + 1, Math.max(i, r.size + e >= t.size - i ? e + 1 : 0)), !0);
  }
  dropNode() {
    let { content: t, openStart: e, openEnd: i } = this.unplaced, r = bl(t, e);
    if (r.childCount <= 1 && e > 0) {
      let s = t.size - e <= e + r.size;
      this.unplaced = new Y(ls(t, e - 1, 1), e - 1, s ? e - 1 : i);
    } else
      this.unplaced = new Y(ls(t, e, 1), e, i);
  }
  // Move content from the unplaced slice at `sliceDepth` to the
  // frontier node at `frontierDepth`. Close that frontier node when
  // applicable.
  placeNodes({ sliceDepth: t, frontierDepth: e, parent: i, inject: r, wrap: s }) {
    for (; this.depth > e; )
      this.closeFrontierNode();
    if (s)
      for (let _ = 0; _ < s.length; _++)
        this.openFrontierNode(s[_]);
    let o = this.unplaced, a = i ? i.content : o.content, l = o.openStart - t, c = 0, u = [], { match: d, type: f } = this.frontier[e];
    if (r) {
      for (let _ = 0; _ < r.childCount; _++)
        u.push(r.child(_));
      d = d.matchFragment(r);
    }
    let h = a.size + t - (o.content.size - o.openEnd);
    for (; c < a.childCount; ) {
      let _ = a.child(c), g = d.matchType(_.type);
      if (!g)
        break;
      c++, (c > 1 || l == 0 || _.content.size) && (d = g, u.push(rm(_.mark(f.allowedMarks(_.marks)), c == 1 ? l : 0, c == a.childCount ? h : -1)));
    }
    let p = c == a.childCount;
    p || (h = -1), this.placed = cs(this.placed, e, B.from(u)), this.frontier[e].match = d, p && h < 0 && i && i.type == this.frontier[this.depth].type && this.frontier.length > 1 && this.closeFrontierNode();
    for (let _ = 0, g = a; _ < h; _++) {
      let m = g.lastChild;
      this.frontier.push({ type: m.type, match: m.contentMatchAt(m.childCount) }), g = m.content;
    }
    this.unplaced = p ? t == 0 ? Y.empty : new Y(ls(o.content, t - 1, 1), t - 1, h < 0 ? o.openEnd : t - 1) : new Y(ls(o.content, t, c), o.openStart, o.openEnd);
  }
  mustMoveInline() {
    if (!this.$to.parent.isTextblock)
      return -1;
    let t = this.frontier[this.depth], e;
    if (!t.type.isTextblock || !yl(this.$to, this.$to.depth, t.type, t.match, !1) || this.$to.depth == this.depth && (e = this.findCloseLevel(this.$to)) && e.depth == this.depth)
      return -1;
    let { depth: i } = this.$to, r = this.$to.after(i);
    for (; i > 1 && r == this.$to.end(--i); )
      ++r;
    return r;
  }
  findCloseLevel(t) {
    t: for (let e = Math.min(this.depth, t.depth); e >= 0; e--) {
      let { match: i, type: r } = this.frontier[e], s = e < t.depth && t.end(e + 1) == t.pos + (t.depth - (e + 1)), o = yl(t, e, r, i, s);
      if (o) {
        for (let a = e - 1; a >= 0; a--) {
          let { match: l, type: c } = this.frontier[a], u = yl(t, a, c, l, !0);
          if (!u || u.childCount)
            continue t;
        }
        return { depth: e, fit: o, move: s ? t.doc.resolve(t.after(e + 1)) : t };
      }
    }
  }
  close(t) {
    let e = this.findCloseLevel(t);
    if (!e)
      return null;
    for (; this.depth > e.depth; )
      this.closeFrontierNode();
    e.fit.childCount && (this.placed = cs(this.placed, e.depth, e.fit)), t = e.move;
    for (let i = e.depth + 1; i <= t.depth; i++) {
      let r = t.node(i), s = r.type.contentMatch.fillBefore(r.content, !0, t.index(i));
      this.openFrontierNode(r.type, r.attrs, s);
    }
    return t;
  }
  openFrontierNode(t, e = null, i) {
    let r = this.frontier[this.depth];
    r.match = r.match.matchType(t), this.placed = cs(this.placed, this.depth, B.from(t.create(e, i))), this.frontier.push({ type: t, match: t.contentMatch });
  }
  closeFrontierNode() {
    let e = this.frontier.pop().match.fillBefore(B.empty, !0);
    e.childCount && (this.placed = cs(this.placed, this.frontier.length, e));
  }
}
function ls(n, t, e) {
  return t == 0 ? n.cutByIndex(e, n.childCount) : n.replaceChild(0, n.firstChild.copy(ls(n.firstChild.content, t - 1, e)));
}
function cs(n, t, e) {
  return t == 0 ? n.append(e) : n.replaceChild(n.childCount - 1, n.lastChild.copy(cs(n.lastChild.content, t - 1, e)));
}
function bl(n, t) {
  for (let e = 0; e < t; e++)
    n = n.firstChild.content;
  return n;
}
function rm(n, t, e) {
  if (t <= 0)
    return n;
  let i = n.content;
  return t > 1 && (i = i.replaceChild(0, rm(i.firstChild, t - 1, i.childCount == 1 ? e - 1 : 0))), t > 0 && (i = n.type.contentMatch.fillBefore(i).append(i), e <= 0 && (i = i.append(n.type.contentMatch.matchFragment(i).fillBefore(B.empty, !0)))), n.copy(i);
}
function yl(n, t, e, i, r) {
  let s = n.node(t), o = r ? n.indexAfter(t) : n.index(t);
  if (o == s.childCount && !e.compatibleContent(s.type))
    return null;
  let a = i.fillBefore(s.content, !0, o);
  return a && !hy(e, s.content, o) ? a : null;
}
function hy(n, t, e) {
  for (let i = e; i < t.childCount; i++)
    if (!n.allowsMarks(t.child(i).marks))
      return !0;
  return !1;
}
function py(n) {
  return n.spec.defining || n.spec.definingForContent;
}
function my(n, t, e, i) {
  if (!i.size)
    return n.deleteRange(t, e);
  let r = n.doc.resolve(t), s = n.doc.resolve(e);
  if (im(r, s, i))
    return n.step(new ue(t, e, i));
  let o = om(r, n.doc.resolve(e));
  o[o.length - 1] == 0 && o.pop();
  let a = -(r.depth + 1);
  o.unshift(a);
  for (let f = r.depth, h = r.pos - 1; f > 0; f--, h--) {
    let p = r.node(f).type.spec;
    if (p.defining || p.definingAsContext || p.isolating)
      break;
    o.indexOf(f) > -1 ? a = f : r.before(f) == h && o.splice(1, 0, -f);
  }
  let l = o.indexOf(a), c = [], u = i.openStart;
  for (let f = i.content, h = 0; ; h++) {
    let p = f.firstChild;
    if (c.push(p), h == i.openStart)
      break;
    f = p.content;
  }
  for (let f = u - 1; f >= 0; f--) {
    let h = c[f], p = py(h.type);
    if (p && !h.sameMarkup(r.node(Math.abs(a) - 1)))
      u = f;
    else if (p || !h.type.isTextblock)
      break;
  }
  for (let f = i.openStart; f >= 0; f--) {
    let h = (f + u + 1) % (i.openStart + 1), p = c[h];
    if (p)
      for (let _ = 0; _ < o.length; _++) {
        let g = o[(_ + l) % o.length], m = !0;
        g < 0 && (m = !1, g = -g);
        let y = r.node(g - 1), x = r.index(g - 1);
        if (y.canReplaceWith(x, x, p.type, p.marks))
          return n.replace(r.before(g), m ? s.after(g) : e, new Y(sm(i.content, 0, i.openStart, h), h, i.openEnd));
      }
  }
  let d = n.steps.length;
  for (let f = o.length - 1; f >= 0 && (n.replace(t, e, i), !(n.steps.length > d)); f--) {
    let h = o[f];
    h < 0 || (t = r.before(h), e = s.after(h));
  }
}
function sm(n, t, e, i, r) {
  if (t < e) {
    let s = n.firstChild;
    n = n.replaceChild(0, s.copy(sm(s.content, t + 1, e, i, s)));
  }
  if (t > i) {
    let s = r.contentMatchAt(0), o = s.fillBefore(n).append(n);
    n = o.append(s.matchFragment(o).fillBefore(B.empty, !0));
  }
  return n;
}
function gy(n, t, e, i) {
  if (!i.isInline && t == e && n.doc.resolve(t).parent.content.size) {
    let r = dy(n.doc, t, i.type);
    r != null && (t = e = r);
  }
  n.replaceRange(t, e, new Y(B.from(i), 0, 0));
}
function _y(n, t, e) {
  let i = n.doc.resolve(t), r = n.doc.resolve(e), s = om(i, r);
  for (let o = 0; o < s.length; o++) {
    let a = s[o], l = o == s.length - 1;
    if (l && a == 0 || i.node(a).type.contentMatch.validEnd)
      return n.delete(i.start(a), r.end(a));
    if (a > 0 && (l || i.node(a - 1).canReplace(i.index(a - 1), r.indexAfter(a - 1))))
      return n.delete(i.before(a), r.after(a));
  }
  for (let o = 1; o <= i.depth && o <= r.depth; o++)
    if (t - i.start(o) == i.depth - o && e > i.end(o) && r.end(o) - e != r.depth - o && i.start(o - 1) == r.start(o - 1) && i.node(o - 1).canReplace(i.index(o - 1), r.index(o - 1)))
      return n.delete(i.before(o), e);
  n.delete(t, e);
}
function om(n, t) {
  let e = [], i = Math.min(n.depth, t.depth);
  for (let r = i; r >= 0; r--) {
    let s = n.start(r);
    if (s < n.pos - (n.depth - r) || t.end(r) > t.pos + (t.depth - r) || n.node(r).type.spec.isolating || t.node(r).type.spec.isolating)
      break;
    (s == t.start(r) || r == n.depth && r == t.depth && n.parent.inlineContent && t.parent.inlineContent && r && t.start(r - 1) == s - 1) && e.push(r);
  }
  return e;
}
class vr extends Ee {
  /**
  Construct an attribute step.
  */
  constructor(t, e, i) {
    super(), this.pos = t, this.attr = e, this.value = i;
  }
  apply(t) {
    let e = t.nodeAt(this.pos);
    if (!e)
      return Zt.fail("No node at attribute step's position");
    let i = /* @__PURE__ */ Object.create(null);
    for (let s in e.attrs)
      i[s] = e.attrs[s];
    i[this.attr] = this.value;
    let r = e.type.create(i, null, e.marks);
    return Zt.fromReplace(t, this.pos, this.pos + 1, new Y(B.from(r), 0, e.isLeaf ? 0 : 1));
  }
  getMap() {
    return Ge.empty;
  }
  invert(t) {
    return new vr(this.pos, this.attr, t.nodeAt(this.pos).attrs[this.attr]);
  }
  map(t) {
    let e = t.mapResult(this.pos, 1);
    return e.deletedAfter ? null : new vr(e.pos, this.attr, this.value);
  }
  toJSON() {
    return { stepType: "attr", pos: this.pos, attr: this.attr, value: this.value };
  }
  static fromJSON(t, e) {
    if (typeof e.pos != "number" || typeof e.attr != "string")
      throw new RangeError("Invalid input for AttrStep.fromJSON");
    return new vr(e.pos, e.attr, e.value);
  }
}
Ee.jsonID("attr", vr);
class Rs extends Ee {
  /**
  Construct an attribute step.
  */
  constructor(t, e) {
    super(), this.attr = t, this.value = e;
  }
  apply(t) {
    let e = /* @__PURE__ */ Object.create(null);
    for (let r in t.attrs)
      e[r] = t.attrs[r];
    e[this.attr] = this.value;
    let i = t.type.create(e, t.content, t.marks);
    return Zt.ok(i);
  }
  getMap() {
    return Ge.empty;
  }
  invert(t) {
    return new Rs(this.attr, t.attrs[this.attr]);
  }
  map(t) {
    return this;
  }
  toJSON() {
    return { stepType: "docAttr", attr: this.attr, value: this.value };
  }
  static fromJSON(t, e) {
    if (typeof e.attr != "string")
      throw new RangeError("Invalid input for DocAttrStep.fromJSON");
    return new Rs(e.attr, e.value);
  }
}
Ee.jsonID("docAttr", Rs);
let Pr = class extends Error {
};
Pr = function n(t) {
  let e = Error.call(this, t);
  return e.__proto__ = n.prototype, e;
};
Pr.prototype = Object.create(Error.prototype);
Pr.prototype.constructor = Pr;
Pr.prototype.name = "TransformError";
class mu {
  /**
  Create a transform that starts with the given document.
  */
  constructor(t) {
    this.doc = t, this.steps = [], this.docs = [], this.mapping = new br();
  }
  /**
  The starting document.
  */
  get before() {
    return this.docs.length ? this.docs[0] : this.doc;
  }
  /**
  Apply a new step in this transform, saving the result. Throws an
  error when the step fails.
  */
  step(t) {
    let e = this.maybeStep(t);
    if (e.failed)
      throw new Pr(e.failed);
    return this;
  }
  /**
  Try to apply a step in this transformation, ignoring it if it
  fails. Returns the step result.
  */
  maybeStep(t) {
    let e = t.apply(this.doc);
    return e.failed || this.addStep(t, e.doc), e;
  }
  /**
  True when the document has been changed (when there are any
  steps).
  */
  get docChanged() {
    return this.steps.length > 0;
  }
  /**
  @internal
  */
  addStep(t, e) {
    this.docs.push(this.doc), this.steps.push(t), this.mapping.appendMap(t.getMap()), this.doc = e;
  }
  /**
  Replace the part of the document between `from` and `to` with the
  given `slice`.
  */
  replace(t, e = t, i = Y.empty) {
    let r = Ga(this.doc, t, e, i);
    return r && this.step(r), this;
  }
  /**
  Replace the given range with the given content, which may be a
  fragment, node, or array of nodes.
  */
  replaceWith(t, e, i) {
    return this.replace(t, e, new Y(B.from(i), 0, 0));
  }
  /**
  Delete the content between the given positions.
  */
  delete(t, e) {
    return this.replace(t, e, Y.empty);
  }
  /**
  Insert the given content at the given position.
  */
  insert(t, e) {
    return this.replaceWith(t, t, e);
  }
  /**
  Replace a range of the document with a given slice, using
  `from`, `to`, and the slice's
  [`openStart`](https://prosemirror.net/docs/ref/#model.Slice.openStart) property as hints, rather
  than fixed start and end points. This method may grow the
  replaced area or close open nodes in the slice in order to get a
  fit that is more in line with WYSIWYG expectations, by dropping
  fully covered parent nodes of the replaced region when they are
  marked [non-defining as
  context](https://prosemirror.net/docs/ref/#model.NodeSpec.definingAsContext), or including an
  open parent node from the slice that _is_ marked as [defining
  its content](https://prosemirror.net/docs/ref/#model.NodeSpec.definingForContent).
  
  This is the method, for example, to handle paste. The similar
  [`replace`](https://prosemirror.net/docs/ref/#transform.Transform.replace) method is a more
  primitive tool which will _not_ move the start and end of its given
  range, and is useful in situations where you need more precise
  control over what happens.
  */
  replaceRange(t, e, i) {
    return my(this, t, e, i), this;
  }
  /**
  Replace the given range with a node, but use `from` and `to` as
  hints, rather than precise positions. When from and to are the same
  and are at the start or end of a parent node in which the given
  node doesn't fit, this method may _move_ them out towards a parent
  that does allow the given node to be placed. When the given range
  completely covers a parent node, this method may completely replace
  that parent node.
  */
  replaceRangeWith(t, e, i) {
    return gy(this, t, e, i), this;
  }
  /**
  Delete the given range, expanding it to cover fully covered
  parent nodes until a valid replace is found.
  */
  deleteRange(t, e) {
    return _y(this, t, e), this;
  }
  /**
  Split the content in the given range off from its parent, if there
  is sibling content before or after it, and move it up the tree to
  the depth specified by `target`. You'll probably want to use
  [`liftTarget`](https://prosemirror.net/docs/ref/#transform.liftTarget) to compute `target`, to make
  sure the lift is valid.
  */
  lift(t, e) {
    return ey(this, t, e), this;
  }
  /**
  Join the blocks around the given position. If depth is 2, their
  last and first siblings are also joined, and so on.
  */
  join(t, e = 1) {
    return uy(this, t, e), this;
  }
  /**
  Wrap the given [range](https://prosemirror.net/docs/ref/#model.NodeRange) in the given set of wrappers.
  The wrappers are assumed to be valid in this position, and should
  probably be computed with [`findWrapping`](https://prosemirror.net/docs/ref/#transform.findWrapping).
  */
  wrap(t, e) {
    return ry(this, t, e), this;
  }
  /**
  Set the type of all textblocks (partly) between `from` and `to` to
  the given node type with the given attributes.
  */
  setBlockType(t, e = t, i, r = null) {
    return sy(this, t, e, i, r), this;
  }
  /**
  Change the type, attributes, and/or marks of the node at `pos`.
  When `type` isn't given, the existing node type is preserved,
  */
  setNodeMarkup(t, e, i = null, r) {
    return ay(this, t, e, i, r), this;
  }
  /**
  Set a single attribute on a given node to a new value.
  The `pos` addresses the document content. Use `setDocAttribute`
  to set attributes on the document itself.
  */
  setNodeAttribute(t, e, i) {
    return this.step(new vr(t, e, i)), this;
  }
  /**
  Set a single attribute on the document to a new value.
  */
  setDocAttribute(t, e) {
    return this.step(new Rs(t, e)), this;
  }
  /**
  Add a mark to the node at position `pos`.
  */
  addNodeMark(t, e) {
    return this.step(new fi(t, e)), this;
  }
  /**
  Remove a mark (or a mark of the given type) from the node at
  position `pos`.
  */
  removeNodeMark(t, e) {
    if (!(e instanceof Ft)) {
      let i = this.doc.nodeAt(t);
      if (!i)
        throw new RangeError("No node at position " + t);
      if (e = e.isInSet(i.marks), !e)
        return this;
    }
    return this.step(new Ir(t, e)), this;
  }
  /**
  Split the node at the given position, and optionally, if `depth` is
  greater than one, any number of nodes above that. By default, the
  parts split off will inherit the node type of the original node.
  This can be changed by passing an array of types and attributes to
  use after the split.
  */
  split(t, e = 1, i) {
    return ly(this, t, e, i), this;
  }
  /**
  Add the given mark to the inline content between `from` and `to`.
  */
  addMark(t, e, i) {
    return Z1(this, t, e, i), this;
  }
  /**
  Remove marks from inline nodes between `from` and `to`. When
  `mark` is a single mark, remove precisely that mark. When it is
  a mark type, remove all marks of that type. When it is null,
  remove all marks of any type.
  */
  removeMark(t, e, i) {
    return Q1(this, t, e, i), this;
  }
  /**
  Removes all marks and nodes from the content of the node at
  `pos` that don't match the given new parent node type. Accepts
  an optional starting [content match](https://prosemirror.net/docs/ref/#model.ContentMatch) as
  third argument.
  */
  clearIncompatible(t, e, i) {
    return hu(this, t, e, i), this;
  }
}
const vl = /* @__PURE__ */ Object.create(null);
class ft {
  /**
  Initialize a selection with the head and anchor and ranges. If no
  ranges are given, constructs a single range across `$anchor` and
  `$head`.
  */
  constructor(t, e, i) {
    this.$anchor = t, this.$head = e, this.ranges = i || [new am(t.min(e), t.max(e))];
  }
  /**
  The selection's anchor, as an unresolved position.
  */
  get anchor() {
    return this.$anchor.pos;
  }
  /**
  The selection's head.
  */
  get head() {
    return this.$head.pos;
  }
  /**
  The lower bound of the selection's main range.
  */
  get from() {
    return this.$from.pos;
  }
  /**
  The upper bound of the selection's main range.
  */
  get to() {
    return this.$to.pos;
  }
  /**
  The resolved lower  bound of the selection's main range.
  */
  get $from() {
    return this.ranges[0].$from;
  }
  /**
  The resolved upper bound of the selection's main range.
  */
  get $to() {
    return this.ranges[0].$to;
  }
  /**
  Indicates whether the selection contains any content.
  */
  get empty() {
    let t = this.ranges;
    for (let e = 0; e < t.length; e++)
      if (t[e].$from.pos != t[e].$to.pos)
        return !1;
    return !0;
  }
  /**
  Get the content of this selection as a slice.
  */
  content() {
    return this.$from.doc.slice(this.from, this.to, !0);
  }
  /**
  Replace the selection with a slice or, if no slice is given,
  delete the selection. Will append to the given transaction.
  */
  replace(t, e = Y.empty) {
    let i = e.content.lastChild, r = null;
    for (let a = 0; a < e.openEnd; a++)
      r = i, i = i.lastChild;
    let s = t.steps.length, o = this.ranges;
    for (let a = 0; a < o.length; a++) {
      let { $from: l, $to: c } = o[a], u = t.mapping.slice(s);
      t.replaceRange(u.map(l.pos), u.map(c.pos), a ? Y.empty : e), a == 0 && ef(t, s, (i ? i.isInline : r && r.isTextblock) ? -1 : 1);
    }
  }
  /**
  Replace the selection with the given node, appending the changes
  to the given transaction.
  */
  replaceWith(t, e) {
    let i = t.steps.length, r = this.ranges;
    for (let s = 0; s < r.length; s++) {
      let { $from: o, $to: a } = r[s], l = t.mapping.slice(i), c = l.map(o.pos), u = l.map(a.pos);
      s ? t.deleteRange(c, u) : (t.replaceRangeWith(c, u, e), ef(t, i, e.isInline ? -1 : 1));
    }
  }
  /**
  Find a valid cursor or leaf node selection starting at the given
  position and searching back if `dir` is negative, and forward if
  positive. When `textOnly` is true, only consider cursor
  selections. Will return null when no valid selection position is
  found.
  */
  static findFrom(t, e, i = !1) {
    let r = t.parent.inlineContent ? new ct(t) : lr(t.node(0), t.parent, t.pos, t.index(), e, i);
    if (r)
      return r;
    for (let s = t.depth - 1; s >= 0; s--) {
      let o = e < 0 ? lr(t.node(0), t.node(s), t.before(s + 1), t.index(s), e, i) : lr(t.node(0), t.node(s), t.after(s + 1), t.index(s) + 1, e, i);
      if (o)
        return o;
    }
    return null;
  }
  /**
  Find a valid cursor or leaf node selection near the given
  position. Searches forward first by default, but if `bias` is
  negative, it will search backwards first.
  */
  static near(t, e = 1) {
    return this.findFrom(t, e) || this.findFrom(t, -e) || new Xe(t.node(0));
  }
  /**
  Find the cursor or leaf node selection closest to the start of
  the given document. Will return an
  [`AllSelection`](https://prosemirror.net/docs/ref/#state.AllSelection) if no valid position
  exists.
  */
  static atStart(t) {
    return lr(t, t, 0, 0, 1) || new Xe(t);
  }
  /**
  Find the cursor or leaf node selection closest to the end of the
  given document.
  */
  static atEnd(t) {
    return lr(t, t, t.content.size, t.childCount, -1) || new Xe(t);
  }
  /**
  Deserialize the JSON representation of a selection. Must be
  implemented for custom classes (as a static class method).
  */
  static fromJSON(t, e) {
    if (!e || !e.type)
      throw new RangeError("Invalid input for Selection.fromJSON");
    let i = vl[e.type];
    if (!i)
      throw new RangeError(`No selection type ${e.type} defined`);
    return i.fromJSON(t, e);
  }
  /**
  To be able to deserialize selections from JSON, custom selection
  classes must register themselves with an ID string, so that they
  can be disambiguated. Try to pick something that's unlikely to
  clash with classes from other modules.
  */
  static jsonID(t, e) {
    if (t in vl)
      throw new RangeError("Duplicate use of selection JSON ID " + t);
    return vl[t] = e, e.prototype.jsonID = t, e;
  }
  /**
  Get a [bookmark](https://prosemirror.net/docs/ref/#state.SelectionBookmark) for this selection,
  which is a value that can be mapped without having access to a
  current document, and later resolved to a real selection for a
  given document again. (This is used mostly by the history to
  track and restore old selections.) The default implementation of
  this method just converts the selection to a text selection and
  returns the bookmark for that.
  */
  getBookmark() {
    return ct.between(this.$anchor, this.$head).getBookmark();
  }
}
ft.prototype.visible = !0;
class am {
  /**
  Create a range.
  */
  constructor(t, e) {
    this.$from = t, this.$to = e;
  }
}
let Qd = !1;
function tf(n) {
  !Qd && !n.parent.inlineContent && (Qd = !0, console.warn("TextSelection endpoint not pointing into a node with inline content (" + n.parent.type.name + ")"));
}
class ct extends ft {
  /**
  Construct a text selection between the given points.
  */
  constructor(t, e = t) {
    tf(t), tf(e), super(t, e);
  }
  /**
  Returns a resolved position if this is a cursor selection (an
  empty text selection), and null otherwise.
  */
  get $cursor() {
    return this.$anchor.pos == this.$head.pos ? this.$head : null;
  }
  map(t, e) {
    let i = t.resolve(e.map(this.head));
    if (!i.parent.inlineContent)
      return ft.near(i);
    let r = t.resolve(e.map(this.anchor));
    return new ct(r.parent.inlineContent ? r : i, i);
  }
  replace(t, e = Y.empty) {
    if (super.replace(t, e), e == Y.empty) {
      let i = this.$from.marksAcross(this.$to);
      i && t.ensureMarks(i);
    }
  }
  eq(t) {
    return t instanceof ct && t.anchor == this.anchor && t.head == this.head;
  }
  getBookmark() {
    return new Ja(this.anchor, this.head);
  }
  toJSON() {
    return { type: "text", anchor: this.anchor, head: this.head };
  }
  /**
  @internal
  */
  static fromJSON(t, e) {
    if (typeof e.anchor != "number" || typeof e.head != "number")
      throw new RangeError("Invalid input for TextSelection.fromJSON");
    return new ct(t.resolve(e.anchor), t.resolve(e.head));
  }
  /**
  Create a text selection from non-resolved positions.
  */
  static create(t, e, i = e) {
    let r = t.resolve(e);
    return new this(r, i == e ? r : t.resolve(i));
  }
  /**
  Return a text selection that spans the given positions or, if
  they aren't text positions, find a text selection near them.
  `bias` determines whether the method searches forward (default)
  or backwards (negative number) first. Will fall back to calling
  [`Selection.near`](https://prosemirror.net/docs/ref/#state.Selection^near) when the document
  doesn't contain a valid text position.
  */
  static between(t, e, i) {
    let r = t.pos - e.pos;
    if ((!i || r) && (i = r >= 0 ? 1 : -1), !e.parent.inlineContent) {
      let s = ft.findFrom(e, i, !0) || ft.findFrom(e, -i, !0);
      if (s)
        e = s.$head;
      else
        return ft.near(e, i);
    }
    return t.parent.inlineContent || (r == 0 ? t = e : (t = (ft.findFrom(t, -i, !0) || ft.findFrom(t, i, !0)).$anchor, t.pos < e.pos != r < 0 && (t = e))), new ct(t, e);
  }
}
ft.jsonID("text", ct);
class Ja {
  constructor(t, e) {
    this.anchor = t, this.head = e;
  }
  map(t) {
    return new Ja(t.map(this.anchor), t.map(this.head));
  }
  resolve(t) {
    return ct.between(t.resolve(this.anchor), t.resolve(this.head));
  }
}
class ot extends ft {
  /**
  Create a node selection. Does not verify the validity of its
  argument.
  */
  constructor(t) {
    let e = t.nodeAfter, i = t.node(0).resolve(t.pos + e.nodeSize);
    super(t, i), this.node = e;
  }
  map(t, e) {
    let { deleted: i, pos: r } = e.mapResult(this.anchor), s = t.resolve(r);
    return i ? ft.near(s) : new ot(s);
  }
  content() {
    return new Y(B.from(this.node), 0, 0);
  }
  eq(t) {
    return t instanceof ot && t.anchor == this.anchor;
  }
  toJSON() {
    return { type: "node", anchor: this.anchor };
  }
  getBookmark() {
    return new gu(this.anchor);
  }
  /**
  @internal
  */
  static fromJSON(t, e) {
    if (typeof e.anchor != "number")
      throw new RangeError("Invalid input for NodeSelection.fromJSON");
    return new ot(t.resolve(e.anchor));
  }
  /**
  Create a node selection from non-resolved positions.
  */
  static create(t, e) {
    return new ot(t.resolve(e));
  }
  /**
  Determines whether the given node may be selected as a node
  selection.
  */
  static isSelectable(t) {
    return !t.isText && t.type.spec.selectable !== !1;
  }
}
ot.prototype.visible = !1;
ft.jsonID("node", ot);
class gu {
  constructor(t) {
    this.anchor = t;
  }
  map(t) {
    let { deleted: e, pos: i } = t.mapResult(this.anchor);
    return e ? new Ja(i, i) : new gu(i);
  }
  resolve(t) {
    let e = t.resolve(this.anchor), i = e.nodeAfter;
    return i && ot.isSelectable(i) ? new ot(e) : ft.near(e);
  }
}
class Xe extends ft {
  /**
  Create an all-selection over the given document.
  */
  constructor(t) {
    super(t.resolve(0), t.resolve(t.content.size));
  }
  replace(t, e = Y.empty) {
    if (e == Y.empty) {
      t.delete(0, t.doc.content.size);
      let i = ft.atStart(t.doc);
      i.eq(t.selection) || t.setSelection(i);
    } else
      super.replace(t, e);
  }
  toJSON() {
    return { type: "all" };
  }
  /**
  @internal
  */
  static fromJSON(t) {
    return new Xe(t);
  }
  map(t) {
    return new Xe(t);
  }
  eq(t) {
    return t instanceof Xe;
  }
  getBookmark() {
    return by;
  }
}
ft.jsonID("all", Xe);
const by = {
  map() {
    return this;
  },
  resolve(n) {
    return new Xe(n);
  }
};
function lr(n, t, e, i, r, s = !1) {
  if (t.inlineContent)
    return ct.create(n, e);
  for (let o = i - (r > 0 ? 0 : 1); r > 0 ? o < t.childCount : o >= 0; o += r) {
    let a = t.child(o);
    if (a.isAtom) {
      if (!s && ot.isSelectable(a))
        return ot.create(n, e - (r < 0 ? a.nodeSize : 0));
    } else {
      let l = lr(n, a, e + r, r < 0 ? a.childCount : 0, r, s);
      if (l)
        return l;
    }
    e += a.nodeSize * r;
  }
  return null;
}
function ef(n, t, e) {
  let i = n.steps.length - 1;
  if (i < t)
    return;
  let r = n.steps[i];
  if (!(r instanceof ue || r instanceof fe))
    return;
  let s = n.mapping.maps[i], o;
  s.forEach((a, l, c, u) => {
    o == null && (o = u);
  }), n.setSelection(ft.near(n.doc.resolve(o), e));
}
const nf = 1, _o = 2, rf = 4;
class yy extends mu {
  /**
  @internal
  */
  constructor(t) {
    super(t.doc), this.curSelectionFor = 0, this.updated = 0, this.meta = /* @__PURE__ */ Object.create(null), this.time = Date.now(), this.curSelection = t.selection, this.storedMarks = t.storedMarks;
  }
  /**
  The transaction's current selection. This defaults to the editor
  selection [mapped](https://prosemirror.net/docs/ref/#state.Selection.map) through the steps in the
  transaction, but can be overwritten with
  [`setSelection`](https://prosemirror.net/docs/ref/#state.Transaction.setSelection).
  */
  get selection() {
    return this.curSelectionFor < this.steps.length && (this.curSelection = this.curSelection.map(this.doc, this.mapping.slice(this.curSelectionFor)), this.curSelectionFor = this.steps.length), this.curSelection;
  }
  /**
  Update the transaction's current selection. Will determine the
  selection that the editor gets when the transaction is applied.
  */
  setSelection(t) {
    if (t.$from.doc != this.doc)
      throw new RangeError("Selection passed to setSelection must point at the current document");
    return this.curSelection = t, this.curSelectionFor = this.steps.length, this.updated = (this.updated | nf) & ~_o, this.storedMarks = null, this;
  }
  /**
  Whether the selection was explicitly updated by this transaction.
  */
  get selectionSet() {
    return (this.updated & nf) > 0;
  }
  /**
  Set the current stored marks.
  */
  setStoredMarks(t) {
    return this.storedMarks = t, this.updated |= _o, this;
  }
  /**
  Make sure the current stored marks or, if that is null, the marks
  at the selection, match the given set of marks. Does nothing if
  this is already the case.
  */
  ensureMarks(t) {
    return Ft.sameSet(this.storedMarks || this.selection.$from.marks(), t) || this.setStoredMarks(t), this;
  }
  /**
  Add a mark to the set of stored marks.
  */
  addStoredMark(t) {
    return this.ensureMarks(t.addToSet(this.storedMarks || this.selection.$head.marks()));
  }
  /**
  Remove a mark or mark type from the set of stored marks.
  */
  removeStoredMark(t) {
    return this.ensureMarks(t.removeFromSet(this.storedMarks || this.selection.$head.marks()));
  }
  /**
  Whether the stored marks were explicitly set for this transaction.
  */
  get storedMarksSet() {
    return (this.updated & _o) > 0;
  }
  /**
  @internal
  */
  addStep(t, e) {
    super.addStep(t, e), this.updated = this.updated & ~_o, this.storedMarks = null;
  }
  /**
  Update the timestamp for the transaction.
  */
  setTime(t) {
    return this.time = t, this;
  }
  /**
  Replace the current selection with the given slice.
  */
  replaceSelection(t) {
    return this.selection.replace(this, t), this;
  }
  /**
  Replace the selection with the given node. When `inheritMarks` is
  true and the content is inline, it inherits the marks from the
  place where it is inserted.
  */
  replaceSelectionWith(t, e = !0) {
    let i = this.selection;
    return e && (t = t.mark(this.storedMarks || (i.empty ? i.$from.marks() : i.$from.marksAcross(i.$to) || Ft.none))), i.replaceWith(this, t), this;
  }
  /**
  Delete the selection.
  */
  deleteSelection() {
    return this.selection.replace(this), this;
  }
  /**
  Replace the given range, or the selection if no range is given,
  with a text node containing the given string.
  */
  insertText(t, e, i) {
    let r = this.doc.type.schema;
    if (e == null)
      return t ? this.replaceSelectionWith(r.text(t), !0) : this.deleteSelection();
    {
      if (i == null && (i = e), i = i ?? e, !t)
        return this.deleteRange(e, i);
      let s = this.storedMarks;
      if (!s) {
        let o = this.doc.resolve(e);
        s = i == e ? o.marks() : o.marksAcross(this.doc.resolve(i));
      }
      return this.replaceRangeWith(e, i, r.text(t, s)), this.selection.empty || this.setSelection(ft.near(this.selection.$to)), this;
    }
  }
  /**
  Store a metadata property in this transaction, keyed either by
  name or by plugin.
  */
  setMeta(t, e) {
    return this.meta[typeof t == "string" ? t : t.key] = e, this;
  }
  /**
  Retrieve a metadata property for a given name or plugin.
  */
  getMeta(t) {
    return this.meta[typeof t == "string" ? t : t.key];
  }
  /**
  Returns true if this transaction doesn't contain any metadata,
  and can thus safely be extended.
  */
  get isGeneric() {
    for (let t in this.meta)
      return !1;
    return !0;
  }
  /**
  Indicate that the editor should scroll the selection into view
  when updated to the state produced by this transaction.
  */
  scrollIntoView() {
    return this.updated |= rf, this;
  }
  /**
  True when this transaction has had `scrollIntoView` called on it.
  */
  get scrolledIntoView() {
    return (this.updated & rf) > 0;
  }
}
function sf(n, t) {
  return !t || !n ? n : n.bind(t);
}
class us {
  constructor(t, e, i) {
    this.name = t, this.init = sf(e.init, i), this.apply = sf(e.apply, i);
  }
}
const vy = [
  new us("doc", {
    init(n) {
      return n.doc || n.schema.topNodeType.createAndFill();
    },
    apply(n) {
      return n.doc;
    }
  }),
  new us("selection", {
    init(n, t) {
      return n.selection || ft.atStart(t.doc);
    },
    apply(n) {
      return n.selection;
    }
  }),
  new us("storedMarks", {
    init(n) {
      return n.storedMarks || null;
    },
    apply(n, t, e, i) {
      return i.selection.$cursor ? n.storedMarks : null;
    }
  }),
  new us("scrollToSelection", {
    init() {
      return 0;
    },
    apply(n, t) {
      return n.scrolledIntoView ? t + 1 : t;
    }
  })
];
class xl {
  constructor(t, e) {
    this.schema = t, this.plugins = [], this.pluginsByKey = /* @__PURE__ */ Object.create(null), this.fields = vy.slice(), e && e.forEach((i) => {
      if (this.pluginsByKey[i.key])
        throw new RangeError("Adding different instances of a keyed plugin (" + i.key + ")");
      this.plugins.push(i), this.pluginsByKey[i.key] = i, i.spec.state && this.fields.push(new us(i.key, i.spec.state, i));
    });
  }
}
class dr {
  /**
  @internal
  */
  constructor(t) {
    this.config = t;
  }
  /**
  The schema of the state's document.
  */
  get schema() {
    return this.config.schema;
  }
  /**
  The plugins that are active in this state.
  */
  get plugins() {
    return this.config.plugins;
  }
  /**
  Apply the given transaction to produce a new state.
  */
  apply(t) {
    return this.applyTransaction(t).state;
  }
  /**
  @internal
  */
  filterTransaction(t, e = -1) {
    for (let i = 0; i < this.config.plugins.length; i++)
      if (i != e) {
        let r = this.config.plugins[i];
        if (r.spec.filterTransaction && !r.spec.filterTransaction.call(r, t, this))
          return !1;
      }
    return !0;
  }
  /**
  Verbose variant of [`apply`](https://prosemirror.net/docs/ref/#state.EditorState.apply) that
  returns the precise transactions that were applied (which might
  be influenced by the [transaction
  hooks](https://prosemirror.net/docs/ref/#state.PluginSpec.filterTransaction) of
  plugins) along with the new state.
  */
  applyTransaction(t) {
    if (!this.filterTransaction(t))
      return { state: this, transactions: [] };
    let e = [t], i = this.applyInner(t), r = null;
    for (; ; ) {
      let s = !1;
      for (let o = 0; o < this.config.plugins.length; o++) {
        let a = this.config.plugins[o];
        if (a.spec.appendTransaction) {
          let l = r ? r[o].n : 0, c = r ? r[o].state : this, u = l < e.length && a.spec.appendTransaction.call(a, l ? e.slice(l) : e, c, i);
          if (u && i.filterTransaction(u, o)) {
            if (u.setMeta("appendedTransaction", t), !r) {
              r = [];
              for (let d = 0; d < this.config.plugins.length; d++)
                r.push(d < o ? { state: i, n: e.length } : { state: this, n: 0 });
            }
            e.push(u), i = i.applyInner(u), s = !0;
          }
          r && (r[o] = { state: i, n: e.length });
        }
      }
      if (!s)
        return { state: i, transactions: e };
    }
  }
  /**
  @internal
  */
  applyInner(t) {
    if (!t.before.eq(this.doc))
      throw new RangeError("Applying a mismatched transaction");
    let e = new dr(this.config), i = this.config.fields;
    for (let r = 0; r < i.length; r++) {
      let s = i[r];
      e[s.name] = s.apply(t, this[s.name], this, e);
    }
    return e;
  }
  /**
  Start a [transaction](https://prosemirror.net/docs/ref/#state.Transaction) from this state.
  */
  get tr() {
    return new yy(this);
  }
  /**
  Create a new state.
  */
  static create(t) {
    let e = new xl(t.doc ? t.doc.type.schema : t.schema, t.plugins), i = new dr(e);
    for (let r = 0; r < e.fields.length; r++)
      i[e.fields[r].name] = e.fields[r].init(t, i);
    return i;
  }
  /**
  Create a new state based on this one, but with an adjusted set
  of active plugins. State fields that exist in both sets of
  plugins are kept unchanged. Those that no longer exist are
  dropped, and those that are new are initialized using their
  [`init`](https://prosemirror.net/docs/ref/#state.StateField.init) method, passing in the new
  configuration object..
  */
  reconfigure(t) {
    let e = new xl(this.schema, t.plugins), i = e.fields, r = new dr(e);
    for (let s = 0; s < i.length; s++) {
      let o = i[s].name;
      r[o] = this.hasOwnProperty(o) ? this[o] : i[s].init(t, r);
    }
    return r;
  }
  /**
  Serialize this state to JSON. If you want to serialize the state
  of plugins, pass an object mapping property names to use in the
  resulting JSON object to plugin objects. The argument may also be
  a string or number, in which case it is ignored, to support the
  way `JSON.stringify` calls `toString` methods.
  */
  toJSON(t) {
    let e = { doc: this.doc.toJSON(), selection: this.selection.toJSON() };
    if (this.storedMarks && (e.storedMarks = this.storedMarks.map((i) => i.toJSON())), t && typeof t == "object")
      for (let i in t) {
        if (i == "doc" || i == "selection")
          throw new RangeError("The JSON fields `doc` and `selection` are reserved");
        let r = t[i], s = r.spec.state;
        s && s.toJSON && (e[i] = s.toJSON.call(r, this[r.key]));
      }
    return e;
  }
  /**
  Deserialize a JSON representation of a state. `config` should
  have at least a `schema` field, and should contain array of
  plugins to initialize the state with. `pluginFields` can be used
  to deserialize the state of plugins, by associating plugin
  instances with the property names they use in the JSON object.
  */
  static fromJSON(t, e, i) {
    if (!e)
      throw new RangeError("Invalid input for EditorState.fromJSON");
    if (!t.schema)
      throw new RangeError("Required config field 'schema' missing");
    let r = new xl(t.schema, t.plugins), s = new dr(r);
    return r.fields.forEach((o) => {
      if (o.name == "doc")
        s.doc = Pn.fromJSON(t.schema, e.doc);
      else if (o.name == "selection")
        s.selection = ft.fromJSON(s.doc, e.selection);
      else if (o.name == "storedMarks")
        e.storedMarks && (s.storedMarks = e.storedMarks.map(t.schema.markFromJSON));
      else {
        if (i)
          for (let a in i) {
            let l = i[a], c = l.spec.state;
            if (l.key == o.name && c && c.fromJSON && Object.prototype.hasOwnProperty.call(e, a)) {
              s[o.name] = c.fromJSON.call(l, t, e[a], s);
              return;
            }
          }
        s[o.name] = o.init(t, s);
      }
    }), s;
  }
}
function lm(n, t, e) {
  for (let i in n) {
    let r = n[i];
    r instanceof Function ? r = r.bind(t) : i == "handleDOMEvents" && (r = lm(r, t, {})), e[i] = r;
  }
  return e;
}
class pe {
  /**
  Create a plugin.
  */
  constructor(t) {
    this.spec = t, this.props = {}, t.props && lm(t.props, this, this.props), this.key = t.key ? t.key.key : cm("plugin");
  }
  /**
  Extract the plugin's state field from an editor state.
  */
  getState(t) {
    return t[this.key];
  }
}
const wl = /* @__PURE__ */ Object.create(null);
function cm(n) {
  return n in wl ? n + "$" + ++wl[n] : (wl[n] = 0, n + "$");
}
class $e {
  /**
  Create a plugin key.
  */
  constructor(t = "key") {
    this.key = cm(t);
  }
  /**
  Get the active plugin with this key, if any, from an editor
  state.
  */
  get(t) {
    return t.config.pluginsByKey[this.key];
  }
  /**
  Get the plugin's state from an editor state.
  */
  getState(t) {
    return t[this.key];
  }
}
const _e = function(n) {
  for (var t = 0; ; t++)
    if (n = n.previousSibling, !n)
      return t;
}, Is = function(n) {
  let t = n.assignedSlot || n.parentNode;
  return t && t.nodeType == 11 ? t.host : t;
};
let wc = null;
const Un = function(n, t, e) {
  let i = wc || (wc = document.createRange());
  return i.setEnd(n, e ?? n.nodeValue.length), i.setStart(n, t || 0), i;
}, xy = function() {
  wc = null;
}, Wi = function(n, t, e, i) {
  return e && (of(n, t, e, i, -1) || of(n, t, e, i, 1));
}, wy = /^(img|br|input|textarea|hr)$/i;
function of(n, t, e, i, r) {
  for (; ; ) {
    if (n == e && t == i)
      return !0;
    if (t == (r < 0 ? 0 : an(n))) {
      let s = n.parentNode;
      if (!s || s.nodeType != 1 || Xs(n) || wy.test(n.nodeName) || n.contentEditable == "false")
        return !1;
      t = _e(n) + (r < 0 ? 0 : 1), n = s;
    } else if (n.nodeType == 1) {
      if (n = n.childNodes[t + (r < 0 ? -1 : 0)], n.contentEditable == "false")
        return !1;
      t = r < 0 ? an(n) : 0;
    } else
      return !1;
  }
}
function an(n) {
  return n.nodeType == 3 ? n.nodeValue.length : n.childNodes.length;
}
function ky(n, t) {
  for (; ; ) {
    if (n.nodeType == 3 && t)
      return n;
    if (n.nodeType == 1 && t > 0) {
      if (n.contentEditable == "false")
        return null;
      n = n.childNodes[t - 1], t = an(n);
    } else if (n.parentNode && !Xs(n))
      t = _e(n), n = n.parentNode;
    else
      return null;
  }
}
function Sy(n, t) {
  for (; ; ) {
    if (n.nodeType == 3 && t < n.nodeValue.length)
      return n;
    if (n.nodeType == 1 && t < n.childNodes.length) {
      if (n.contentEditable == "false")
        return null;
      n = n.childNodes[t], t = 0;
    } else if (n.parentNode && !Xs(n))
      t = _e(n) + 1, n = n.parentNode;
    else
      return null;
  }
}
function Cy(n, t, e) {
  for (let i = t == 0, r = t == an(n); i || r; ) {
    if (n == e)
      return !0;
    let s = _e(n);
    if (n = n.parentNode, !n)
      return !1;
    i = i && s == 0, r = r && s == an(n);
  }
}
function Xs(n) {
  let t;
  for (let e = n; e && !(t = e.pmViewDesc); e = e.parentNode)
    ;
  return t && t.node && t.node.isBlock && (t.dom == n || t.contentDOM == n);
}
const Xa = function(n) {
  return n.focusNode && Wi(n.focusNode, n.focusOffset, n.anchorNode, n.anchorOffset);
};
function Si(n, t) {
  let e = document.createEvent("Event");
  return e.initEvent("keydown", !0, !0), e.keyCode = n, e.key = e.code = t, e;
}
function Ty(n) {
  let t = n.activeElement;
  for (; t && t.shadowRoot; )
    t = t.shadowRoot.activeElement;
  return t;
}
function Ey(n, t, e) {
  if (n.caretPositionFromPoint)
    try {
      let i = n.caretPositionFromPoint(t, e);
      if (i)
        return { node: i.offsetNode, offset: Math.min(an(i.offsetNode), i.offset) };
    } catch {
    }
  if (n.caretRangeFromPoint) {
    let i = n.caretRangeFromPoint(t, e);
    if (i)
      return { node: i.startContainer, offset: Math.min(an(i.startContainer), i.startOffset) };
  }
}
const Dn = typeof navigator < "u" ? navigator : null, af = typeof document < "u" ? document : null, vi = Dn && Dn.userAgent || "", kc = /Edge\/(\d+)/.exec(vi), um = /MSIE \d/.exec(vi), Sc = /Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(vi), Fe = !!(um || Sc || kc), pi = um ? document.documentMode : Sc ? +Sc[1] : kc ? +kc[1] : 0, _n = !Fe && /gecko\/(\d+)/i.test(vi);
_n && +(/Firefox\/(\d+)/.exec(vi) || [0, 0])[1];
const Cc = !Fe && /Chrome\/(\d+)/.exec(vi), ke = !!Cc, dm = Cc ? +Cc[1] : 0, Le = !Fe && !!Dn && /Apple Computer/.test(Dn.vendor), Dr = Le && (/Mobile\/\w+/.test(vi) || !!Dn && Dn.maxTouchPoints > 2), on = Dr || (Dn ? /Mac/.test(Dn.platform) : !1), Oy = Dn ? /Win/.test(Dn.platform) : !1, qn = /Android \d/.test(vi), Ys = !!af && "webkitFontSmoothing" in af.documentElement.style, My = Ys ? +(/\bAppleWebKit\/(\d+)/.exec(navigator.userAgent) || [0, 0])[1] : 0;
function Ay(n) {
  let t = n.defaultView && n.defaultView.visualViewport;
  return t ? {
    left: 0,
    right: t.width,
    top: 0,
    bottom: t.height
  } : {
    left: 0,
    right: n.documentElement.clientWidth,
    top: 0,
    bottom: n.documentElement.clientHeight
  };
}
function Hn(n, t) {
  return typeof n == "number" ? n : n[t];
}
function Ny(n) {
  let t = n.getBoundingClientRect(), e = t.width / n.offsetWidth || 1, i = t.height / n.offsetHeight || 1;
  return {
    left: t.left,
    right: t.left + n.clientWidth * e,
    top: t.top,
    bottom: t.top + n.clientHeight * i
  };
}
function lf(n, t, e) {
  let i = n.someProp("scrollThreshold") || 0, r = n.someProp("scrollMargin") || 5, s = n.dom.ownerDocument;
  for (let o = e || n.dom; o; o = Is(o)) {
    if (o.nodeType != 1)
      continue;
    let a = o, l = a == s.body, c = l ? Ay(s) : Ny(a), u = 0, d = 0;
    if (t.top < c.top + Hn(i, "top") ? d = -(c.top - t.top + Hn(r, "top")) : t.bottom > c.bottom - Hn(i, "bottom") && (d = t.bottom - t.top > c.bottom - c.top ? t.top + Hn(r, "top") - c.top : t.bottom - c.bottom + Hn(r, "bottom")), t.left < c.left + Hn(i, "left") ? u = -(c.left - t.left + Hn(r, "left")) : t.right > c.right - Hn(i, "right") && (u = t.right - c.right + Hn(r, "right")), u || d)
      if (l)
        s.defaultView.scrollBy(u, d);
      else {
        let f = a.scrollLeft, h = a.scrollTop;
        d && (a.scrollTop += d), u && (a.scrollLeft += u);
        let p = a.scrollLeft - f, _ = a.scrollTop - h;
        t = { left: t.left - p, top: t.top - _, right: t.right - p, bottom: t.bottom - _ };
      }
    if (l || /^(fixed|sticky)$/.test(getComputedStyle(o).position))
      break;
  }
}
function Ly(n) {
  let t = n.dom.getBoundingClientRect(), e = Math.max(0, t.top), i, r;
  for (let s = (t.left + t.right) / 2, o = e + 1; o < Math.min(innerHeight, t.bottom); o += 5) {
    let a = n.root.elementFromPoint(s, o);
    if (!a || a == n.dom || !n.dom.contains(a))
      continue;
    let l = a.getBoundingClientRect();
    if (l.top >= e - 20) {
      i = a, r = l.top;
      break;
    }
  }
  return { refDOM: i, refTop: r, stack: fm(n.dom) };
}
function fm(n) {
  let t = [], e = n.ownerDocument;
  for (let i = n; i && (t.push({ dom: i, top: i.scrollTop, left: i.scrollLeft }), n != e); i = Is(i))
    ;
  return t;
}
function Ry({ refDOM: n, refTop: t, stack: e }) {
  let i = n ? n.getBoundingClientRect().top : 0;
  hm(e, i == 0 ? 0 : i - t);
}
function hm(n, t) {
  for (let e = 0; e < n.length; e++) {
    let { dom: i, top: r, left: s } = n[e];
    i.scrollTop != r + t && (i.scrollTop = r + t), i.scrollLeft != s && (i.scrollLeft = s);
  }
}
let sr = null;
function Iy(n) {
  if (n.setActive)
    return n.setActive();
  if (sr)
    return n.focus(sr);
  let t = fm(n);
  n.focus(sr == null ? {
    get preventScroll() {
      return sr = { preventScroll: !0 }, !0;
    }
  } : void 0), sr || (sr = !1, hm(t, 0));
}
function pm(n, t) {
  let e, i = 2e8, r, s = 0, o = t.top, a = t.top, l, c;
  for (let u = n.firstChild, d = 0; u; u = u.nextSibling, d++) {
    let f;
    if (u.nodeType == 1)
      f = u.getClientRects();
    else if (u.nodeType == 3)
      f = Un(u).getClientRects();
    else
      continue;
    for (let h = 0; h < f.length; h++) {
      let p = f[h];
      if (p.top <= o && p.bottom >= a) {
        o = Math.max(p.bottom, o), a = Math.min(p.top, a);
        let _ = p.left > t.left ? p.left - t.left : p.right < t.left ? t.left - p.right : 0;
        if (_ < i) {
          e = u, i = _, r = _ && e.nodeType == 3 ? {
            left: p.right < t.left ? p.right : p.left,
            top: t.top
          } : t, u.nodeType == 1 && _ && (s = d + (t.left >= (p.left + p.right) / 2 ? 1 : 0));
          continue;
        }
      } else p.top > t.top && !l && p.left <= t.left && p.right >= t.left && (l = u, c = { left: Math.max(p.left, Math.min(p.right, t.left)), top: p.top });
      !e && (t.left >= p.right && t.top >= p.top || t.left >= p.left && t.top >= p.bottom) && (s = d + 1);
    }
  }
  return !e && l && (e = l, r = c, i = 0), e && e.nodeType == 3 ? Py(e, r) : !e || i && e.nodeType == 1 ? { node: n, offset: s } : pm(e, r);
}
function Py(n, t) {
  let e = n.nodeValue.length, i = document.createRange();
  for (let r = 0; r < e; r++) {
    i.setEnd(n, r + 1), i.setStart(n, r);
    let s = ti(i, 1);
    if (s.top != s.bottom && _u(t, s))
      return { node: n, offset: r + (t.left >= (s.left + s.right) / 2 ? 1 : 0) };
  }
  return { node: n, offset: 0 };
}
function _u(n, t) {
  return n.left >= t.left - 1 && n.left <= t.right + 1 && n.top >= t.top - 1 && n.top <= t.bottom + 1;
}
function Dy(n, t) {
  let e = n.parentNode;
  return e && /^li$/i.test(e.nodeName) && t.left < n.getBoundingClientRect().left ? e : n;
}
function $y(n, t, e) {
  let { node: i, offset: r } = pm(t, e), s = -1;
  if (i.nodeType == 1 && !i.firstChild) {
    let o = i.getBoundingClientRect();
    s = o.left != o.right && e.left > (o.left + o.right) / 2 ? 1 : -1;
  }
  return n.docView.posFromDOM(i, r, s);
}
function By(n, t, e, i) {
  let r = -1;
  for (let s = t, o = !1; s != n.dom; ) {
    let a = n.docView.nearestDesc(s, !0), l;
    if (!a)
      return null;
    if (a.dom.nodeType == 1 && (a.node.isBlock && a.parent || !a.contentDOM) && // Ignore elements with zero-size bounding rectangles
    ((l = a.dom.getBoundingClientRect()).width || l.height) && (a.node.isBlock && a.parent && (!o && l.left > i.left || l.top > i.top ? r = a.posBefore : (!o && l.right < i.left || l.bottom < i.top) && (r = a.posAfter), o = !0), !a.contentDOM && r < 0 && !a.node.isText))
      return (a.node.isBlock ? i.top < (l.top + l.bottom) / 2 : i.left < (l.left + l.right) / 2) ? a.posBefore : a.posAfter;
    s = a.dom.parentNode;
  }
  return r > -1 ? r : n.docView.posFromDOM(t, e, -1);
}
function mm(n, t, e) {
  let i = n.childNodes.length;
  if (i && e.top < e.bottom)
    for (let r = Math.max(0, Math.min(i - 1, Math.floor(i * (t.top - e.top) / (e.bottom - e.top)) - 2)), s = r; ; ) {
      let o = n.childNodes[s];
      if (o.nodeType == 1) {
        let a = o.getClientRects();
        for (let l = 0; l < a.length; l++) {
          let c = a[l];
          if (_u(t, c))
            return mm(o, t, c);
        }
      }
      if ((s = (s + 1) % i) == r)
        break;
    }
  return n;
}
function zy(n, t) {
  let e = n.dom.ownerDocument, i, r = 0, s = Ey(e, t.left, t.top);
  s && ({ node: i, offset: r } = s);
  let o = (n.root.elementFromPoint ? n.root : e).elementFromPoint(t.left, t.top), a;
  if (!o || !n.dom.contains(o.nodeType != 1 ? o.parentNode : o)) {
    let c = n.dom.getBoundingClientRect();
    if (!_u(t, c) || (o = mm(n.dom, t, c), !o))
      return null;
  }
  if (Le)
    for (let c = o; i && c; c = Is(c))
      c.draggable && (i = void 0);
  if (o = Dy(o, t), i) {
    if (_n && i.nodeType == 1 && (r = Math.min(r, i.childNodes.length), r < i.childNodes.length)) {
      let u = i.childNodes[r], d;
      u.nodeName == "IMG" && (d = u.getBoundingClientRect()).right <= t.left && d.bottom > t.top && r++;
    }
    let c;
    Ys && r && i.nodeType == 1 && (c = i.childNodes[r - 1]).nodeType == 1 && c.contentEditable == "false" && c.getBoundingClientRect().top >= t.top && r--, i == n.dom && r == i.childNodes.length - 1 && i.lastChild.nodeType == 1 && t.top > i.lastChild.getBoundingClientRect().bottom ? a = n.state.doc.content.size : (r == 0 || i.nodeType != 1 || i.childNodes[r - 1].nodeName != "BR") && (a = By(n, i, r, t));
  }
  a == null && (a = $y(n, o, t));
  let l = n.docView.nearestDesc(o, !0);
  return { pos: a, inside: l ? l.posAtStart - l.border : -1 };
}
function cf(n) {
  return n.top < n.bottom || n.left < n.right;
}
function ti(n, t) {
  let e = n.getClientRects();
  if (e.length) {
    let i = e[t < 0 ? 0 : e.length - 1];
    if (cf(i))
      return i;
  }
  return Array.prototype.find.call(e, cf) || n.getBoundingClientRect();
}
const Hy = /[\u0590-\u05f4\u0600-\u06ff\u0700-\u08ac]/;
function gm(n, t, e) {
  let { node: i, offset: r, atom: s } = n.docView.domFromPos(t, e < 0 ? -1 : 1), o = Ys || _n;
  if (i.nodeType == 3)
    if (o && (Hy.test(i.nodeValue) || (e < 0 ? !r : r == i.nodeValue.length))) {
      let l = ti(Un(i, r, r), e);
      if (_n && r && /\s/.test(i.nodeValue[r - 1]) && r < i.nodeValue.length) {
        let c = ti(Un(i, r - 1, r - 1), -1);
        if (c.top == l.top) {
          let u = ti(Un(i, r, r + 1), -1);
          if (u.top != l.top)
            return Zr(u, u.left < c.left);
        }
      }
      return l;
    } else {
      let l = r, c = r, u = e < 0 ? 1 : -1;
      return e < 0 && !r ? (c++, u = -1) : e >= 0 && r == i.nodeValue.length ? (l--, u = 1) : e < 0 ? l-- : c++, Zr(ti(Un(i, l, c), u), u < 0);
    }
  if (!n.state.doc.resolve(t - (s || 0)).parent.inlineContent) {
    if (s == null && r && (e < 0 || r == an(i))) {
      let l = i.childNodes[r - 1];
      if (l.nodeType == 1)
        return kl(l.getBoundingClientRect(), !1);
    }
    if (s == null && r < an(i)) {
      let l = i.childNodes[r];
      if (l.nodeType == 1)
        return kl(l.getBoundingClientRect(), !0);
    }
    return kl(i.getBoundingClientRect(), e >= 0);
  }
  if (s == null && r && (e < 0 || r == an(i))) {
    let l = i.childNodes[r - 1], c = l.nodeType == 3 ? Un(l, an(l) - (o ? 0 : 1)) : l.nodeType == 1 && (l.nodeName != "BR" || !l.nextSibling) ? l : null;
    if (c)
      return Zr(ti(c, 1), !1);
  }
  if (s == null && r < an(i)) {
    let l = i.childNodes[r];
    for (; l.pmViewDesc && l.pmViewDesc.ignoreForCoords; )
      l = l.nextSibling;
    let c = l ? l.nodeType == 3 ? Un(l, 0, o ? 0 : 1) : l.nodeType == 1 ? l : null : null;
    if (c)
      return Zr(ti(c, -1), !0);
  }
  return Zr(ti(i.nodeType == 3 ? Un(i) : i, -e), e >= 0);
}
function Zr(n, t) {
  if (n.width == 0)
    return n;
  let e = t ? n.left : n.right;
  return { top: n.top, bottom: n.bottom, left: e, right: e };
}
function kl(n, t) {
  if (n.height == 0)
    return n;
  let e = t ? n.top : n.bottom;
  return { top: e, bottom: e, left: n.left, right: n.right };
}
function _m(n, t, e) {
  let i = n.state, r = n.root.activeElement;
  i != t && n.updateState(t), r != n.dom && n.focus();
  try {
    return e();
  } finally {
    i != t && n.updateState(i), r != n.dom && r && r.focus();
  }
}
function Fy(n, t, e) {
  let i = t.selection, r = e == "up" ? i.$from : i.$to;
  return _m(n, t, () => {
    let { node: s } = n.docView.domFromPos(r.pos, e == "up" ? -1 : 1);
    for (; ; ) {
      let a = n.docView.nearestDesc(s, !0);
      if (!a)
        break;
      if (a.node.isBlock) {
        s = a.contentDOM || a.dom;
        break;
      }
      s = a.dom.parentNode;
    }
    let o = gm(n, r.pos, 1);
    for (let a = s.firstChild; a; a = a.nextSibling) {
      let l;
      if (a.nodeType == 1)
        l = a.getClientRects();
      else if (a.nodeType == 3)
        l = Un(a, 0, a.nodeValue.length).getClientRects();
      else
        continue;
      for (let c = 0; c < l.length; c++) {
        let u = l[c];
        if (u.bottom > u.top + 1 && (e == "up" ? o.top - u.top > (u.bottom - o.top) * 2 : u.bottom - o.bottom > (o.bottom - u.top) * 2))
          return !1;
      }
    }
    return !0;
  });
}
const Vy = /[\u0590-\u08ac]/;
function jy(n, t, e) {
  let { $head: i } = t.selection;
  if (!i.parent.isTextblock)
    return !1;
  let r = i.parentOffset, s = !r, o = r == i.parent.content.size, a = n.domSelection();
  return a ? !Vy.test(i.parent.textContent) || !a.modify ? e == "left" || e == "backward" ? s : o : _m(n, t, () => {
    let { focusNode: l, focusOffset: c, anchorNode: u, anchorOffset: d } = n.domSelectionRange(), f = a.caretBidiLevel;
    a.modify("move", e, "character");
    let h = i.depth ? n.docView.domAfterPos(i.before()) : n.dom, { focusNode: p, focusOffset: _ } = n.domSelectionRange(), g = p && !h.contains(p.nodeType == 1 ? p : p.parentNode) || l == p && c == _;
    try {
      a.collapse(u, d), l && (l != u || c != d) && a.extend && a.extend(l, c);
    } catch {
    }
    return f != null && (a.caretBidiLevel = f), g;
  }) : i.pos == i.start() || i.pos == i.end();
}
let uf = null, df = null, ff = !1;
function Wy(n, t, e) {
  return uf == t && df == e ? ff : (uf = t, df = e, ff = e == "up" || e == "down" ? Fy(n, t, e) : jy(n, t, e));
}
const ln = 0, hf = 1, Ci = 2, $n = 3;
class Zs {
  constructor(t, e, i, r) {
    this.parent = t, this.children = e, this.dom = i, this.contentDOM = r, this.dirty = ln, i.pmViewDesc = this;
  }
  // Used to check whether a given description corresponds to a
  // widget/mark/node.
  matchesWidget(t) {
    return !1;
  }
  matchesMark(t) {
    return !1;
  }
  matchesNode(t, e, i) {
    return !1;
  }
  matchesHack(t) {
    return !1;
  }
  // When parsing in-editor content (in domchange.js), we allow
  // descriptions to determine the parse rules that should be used to
  // parse them.
  parseRule() {
    return null;
  }
  // Used by the editor's event handler to ignore events that come
  // from certain descs.
  stopEvent(t) {
    return !1;
  }
  // The size of the content represented by this desc.
  get size() {
    let t = 0;
    for (let e = 0; e < this.children.length; e++)
      t += this.children[e].size;
    return t;
  }
  // For block nodes, this represents the space taken up by their
  // start/end tokens.
  get border() {
    return 0;
  }
  destroy() {
    this.parent = void 0, this.dom.pmViewDesc == this && (this.dom.pmViewDesc = void 0);
    for (let t = 0; t < this.children.length; t++)
      this.children[t].destroy();
  }
  posBeforeChild(t) {
    for (let e = 0, i = this.posAtStart; ; e++) {
      let r = this.children[e];
      if (r == t)
        return i;
      i += r.size;
    }
  }
  get posBefore() {
    return this.parent.posBeforeChild(this);
  }
  get posAtStart() {
    return this.parent ? this.parent.posBeforeChild(this) + this.border : 0;
  }
  get posAfter() {
    return this.posBefore + this.size;
  }
  get posAtEnd() {
    return this.posAtStart + this.size - 2 * this.border;
  }
  localPosFromDOM(t, e, i) {
    if (this.contentDOM && this.contentDOM.contains(t.nodeType == 1 ? t : t.parentNode))
      if (i < 0) {
        let s, o;
        if (t == this.contentDOM)
          s = t.childNodes[e - 1];
        else {
          for (; t.parentNode != this.contentDOM; )
            t = t.parentNode;
          s = t.previousSibling;
        }
        for (; s && !((o = s.pmViewDesc) && o.parent == this); )
          s = s.previousSibling;
        return s ? this.posBeforeChild(o) + o.size : this.posAtStart;
      } else {
        let s, o;
        if (t == this.contentDOM)
          s = t.childNodes[e];
        else {
          for (; t.parentNode != this.contentDOM; )
            t = t.parentNode;
          s = t.nextSibling;
        }
        for (; s && !((o = s.pmViewDesc) && o.parent == this); )
          s = s.nextSibling;
        return s ? this.posBeforeChild(o) : this.posAtEnd;
      }
    let r;
    if (t == this.dom && this.contentDOM)
      r = e > _e(this.contentDOM);
    else if (this.contentDOM && this.contentDOM != this.dom && this.dom.contains(this.contentDOM))
      r = t.compareDocumentPosition(this.contentDOM) & 2;
    else if (this.dom.firstChild) {
      if (e == 0)
        for (let s = t; ; s = s.parentNode) {
          if (s == this.dom) {
            r = !1;
            break;
          }
          if (s.previousSibling)
            break;
        }
      if (r == null && e == t.childNodes.length)
        for (let s = t; ; s = s.parentNode) {
          if (s == this.dom) {
            r = !0;
            break;
          }
          if (s.nextSibling)
            break;
        }
    }
    return r ?? i > 0 ? this.posAtEnd : this.posAtStart;
  }
  nearestDesc(t, e = !1) {
    for (let i = !0, r = t; r; r = r.parentNode) {
      let s = this.getDesc(r), o;
      if (s && (!e || s.node))
        if (i && (o = s.nodeDOM) && !(o.nodeType == 1 ? o.contains(t.nodeType == 1 ? t : t.parentNode) : o == t))
          i = !1;
        else
          return s;
    }
  }
  getDesc(t) {
    let e = t.pmViewDesc;
    for (let i = e; i; i = i.parent)
      if (i == this)
        return e;
  }
  posFromDOM(t, e, i) {
    for (let r = t; r; r = r.parentNode) {
      let s = this.getDesc(r);
      if (s)
        return s.localPosFromDOM(t, e, i);
    }
    return -1;
  }
  // Find the desc for the node after the given pos, if any. (When a
  // parent node overrode rendering, there might not be one.)
  descAt(t) {
    for (let e = 0, i = 0; e < this.children.length; e++) {
      let r = this.children[e], s = i + r.size;
      if (i == t && s != i) {
        for (; !r.border && r.children.length; )
          r = r.children[0];
        return r;
      }
      if (t < s)
        return r.descAt(t - i - r.border);
      i = s;
    }
  }
  domFromPos(t, e) {
    if (!this.contentDOM)
      return { node: this.dom, offset: 0, atom: t + 1 };
    let i = 0, r = 0;
    for (let s = 0; i < this.children.length; i++) {
      let o = this.children[i], a = s + o.size;
      if (a > t || o instanceof ym) {
        r = t - s;
        break;
      }
      s = a;
    }
    if (r)
      return this.children[i].domFromPos(r - this.children[i].border, e);
    for (let s; i && !(s = this.children[i - 1]).size && s instanceof bm && s.side >= 0; i--)
      ;
    if (e <= 0) {
      let s, o = !0;
      for (; s = i ? this.children[i - 1] : null, !(!s || s.dom.parentNode == this.contentDOM); i--, o = !1)
        ;
      return s && e && o && !s.border && !s.domAtom ? s.domFromPos(s.size, e) : { node: this.contentDOM, offset: s ? _e(s.dom) + 1 : 0 };
    } else {
      let s, o = !0;
      for (; s = i < this.children.length ? this.children[i] : null, !(!s || s.dom.parentNode == this.contentDOM); i++, o = !1)
        ;
      return s && o && !s.border && !s.domAtom ? s.domFromPos(0, e) : { node: this.contentDOM, offset: s ? _e(s.dom) : this.contentDOM.childNodes.length };
    }
  }
  // Used to find a DOM range in a single parent for a given changed
  // range.
  parseRange(t, e, i = 0) {
    if (this.children.length == 0)
      return { node: this.contentDOM, from: t, to: e, fromOffset: 0, toOffset: this.contentDOM.childNodes.length };
    let r = -1, s = -1;
    for (let o = i, a = 0; ; a++) {
      let l = this.children[a], c = o + l.size;
      if (r == -1 && t <= c) {
        let u = o + l.border;
        if (t >= u && e <= c - l.border && l.node && l.contentDOM && this.contentDOM.contains(l.contentDOM))
          return l.parseRange(t, e, u);
        t = o;
        for (let d = a; d > 0; d--) {
          let f = this.children[d - 1];
          if (f.size && f.dom.parentNode == this.contentDOM && !f.emptyChildAt(1)) {
            r = _e(f.dom) + 1;
            break;
          }
          t -= f.size;
        }
        r == -1 && (r = 0);
      }
      if (r > -1 && (c > e || a == this.children.length - 1)) {
        e = c;
        for (let u = a + 1; u < this.children.length; u++) {
          let d = this.children[u];
          if (d.size && d.dom.parentNode == this.contentDOM && !d.emptyChildAt(-1)) {
            s = _e(d.dom);
            break;
          }
          e += d.size;
        }
        s == -1 && (s = this.contentDOM.childNodes.length);
        break;
      }
      o = c;
    }
    return { node: this.contentDOM, from: t, to: e, fromOffset: r, toOffset: s };
  }
  emptyChildAt(t) {
    if (this.border || !this.contentDOM || !this.children.length)
      return !1;
    let e = this.children[t < 0 ? 0 : this.children.length - 1];
    return e.size == 0 || e.emptyChildAt(t);
  }
  domAfterPos(t) {
    let { node: e, offset: i } = this.domFromPos(t, 0);
    if (e.nodeType != 1 || i == e.childNodes.length)
      throw new RangeError("No node after pos " + t);
    return e.childNodes[i];
  }
  // View descs are responsible for setting any selection that falls
  // entirely inside of them, so that custom implementations can do
  // custom things with the selection. Note that this falls apart when
  // a selection starts in such a node and ends in another, in which
  // case we just use whatever domFromPos produces as a best effort.
  setSelection(t, e, i, r = !1) {
    let s = Math.min(t, e), o = Math.max(t, e);
    for (let h = 0, p = 0; h < this.children.length; h++) {
      let _ = this.children[h], g = p + _.size;
      if (s > p && o < g)
        return _.setSelection(t - p - _.border, e - p - _.border, i, r);
      p = g;
    }
    let a = this.domFromPos(t, t ? -1 : 1), l = e == t ? a : this.domFromPos(e, e ? -1 : 1), c = i.root.getSelection(), u = i.domSelectionRange(), d = !1;
    if ((_n || Le) && t == e) {
      let { node: h, offset: p } = a;
      if (h.nodeType == 3) {
        if (d = !!(p && h.nodeValue[p - 1] == `
`), d && p == h.nodeValue.length)
          for (let _ = h, g; _; _ = _.parentNode) {
            if (g = _.nextSibling) {
              g.nodeName == "BR" && (a = l = { node: g.parentNode, offset: _e(g) + 1 });
              break;
            }
            let m = _.pmViewDesc;
            if (m && m.node && m.node.isBlock)
              break;
          }
      } else {
        let _ = h.childNodes[p - 1];
        d = _ && (_.nodeName == "BR" || _.contentEditable == "false");
      }
    }
    if (_n && u.focusNode && u.focusNode != l.node && u.focusNode.nodeType == 1) {
      let h = u.focusNode.childNodes[u.focusOffset];
      h && h.contentEditable == "false" && (r = !0);
    }
    if (!(r || d && Le) && Wi(a.node, a.offset, u.anchorNode, u.anchorOffset) && Wi(l.node, l.offset, u.focusNode, u.focusOffset))
      return;
    let f = !1;
    if ((c.extend || t == e) && !d) {
      c.collapse(a.node, a.offset);
      try {
        t != e && c.extend(l.node, l.offset), f = !0;
      } catch {
      }
    }
    if (!f) {
      if (t > e) {
        let p = a;
        a = l, l = p;
      }
      let h = document.createRange();
      h.setEnd(l.node, l.offset), h.setStart(a.node, a.offset), c.removeAllRanges(), c.addRange(h);
    }
  }
  ignoreMutation(t) {
    return !this.contentDOM && t.type != "selection";
  }
  get contentLost() {
    return this.contentDOM && this.contentDOM != this.dom && !this.dom.contains(this.contentDOM);
  }
  // Remove a subtree of the element tree that has been touched
  // by a DOM change, so that the next update will redraw it.
  markDirty(t, e) {
    for (let i = 0, r = 0; r < this.children.length; r++) {
      let s = this.children[r], o = i + s.size;
      if (i == o ? t <= o && e >= i : t < o && e > i) {
        let a = i + s.border, l = o - s.border;
        if (t >= a && e <= l) {
          this.dirty = t == i || e == o ? Ci : hf, t == a && e == l && (s.contentLost || s.dom.parentNode != this.contentDOM) ? s.dirty = $n : s.markDirty(t - a, e - a);
          return;
        } else
          s.dirty = s.dom == s.contentDOM && s.dom.parentNode == this.contentDOM && !s.children.length ? Ci : $n;
      }
      i = o;
    }
    this.dirty = Ci;
  }
  markParentsDirty() {
    let t = 1;
    for (let e = this.parent; e; e = e.parent, t++) {
      let i = t == 1 ? Ci : hf;
      e.dirty < i && (e.dirty = i);
    }
  }
  get domAtom() {
    return !1;
  }
  get ignoreForCoords() {
    return !1;
  }
  isText(t) {
    return !1;
  }
}
class bm extends Zs {
  constructor(t, e, i, r) {
    let s, o = e.type.toDOM;
    if (typeof o == "function" && (o = o(i, () => {
      if (!s)
        return r;
      if (s.parent)
        return s.parent.posBeforeChild(s);
    })), !e.type.spec.raw) {
      if (o.nodeType != 1) {
        let a = document.createElement("span");
        a.appendChild(o), o = a;
      }
      o.contentEditable = "false", o.classList.add("ProseMirror-widget");
    }
    super(t, [], o, null), this.widget = e, this.widget = e, s = this;
  }
  matchesWidget(t) {
    return this.dirty == ln && t.type.eq(this.widget.type);
  }
  parseRule() {
    return { ignore: !0 };
  }
  stopEvent(t) {
    let e = this.widget.spec.stopEvent;
    return e ? e(t) : !1;
  }
  ignoreMutation(t) {
    return t.type != "selection" || this.widget.spec.ignoreSelection;
  }
  destroy() {
    this.widget.type.destroy(this.dom), super.destroy();
  }
  get domAtom() {
    return !0;
  }
  get side() {
    return this.widget.type.side;
  }
}
class Uy extends Zs {
  constructor(t, e, i, r) {
    super(t, [], e, null), this.textDOM = i, this.text = r;
  }
  get size() {
    return this.text.length;
  }
  localPosFromDOM(t, e) {
    return t != this.textDOM ? this.posAtStart + (e ? this.size : 0) : this.posAtStart + e;
  }
  domFromPos(t) {
    return { node: this.textDOM, offset: t };
  }
  ignoreMutation(t) {
    return t.type === "characterData" && t.target.nodeValue == t.oldValue;
  }
}
class Ui extends Zs {
  constructor(t, e, i, r, s) {
    super(t, [], i, r), this.mark = e, this.spec = s;
  }
  static create(t, e, i, r) {
    let s = r.nodeViews[e.type.name], o = s && s(e, r, i);
    return (!o || !o.dom) && (o = Xi.renderSpec(document, e.type.spec.toDOM(e, i), null, e.attrs)), new Ui(t, e, o.dom, o.contentDOM || o.dom, o);
  }
  parseRule() {
    return this.dirty & $n || this.mark.type.spec.reparseInView ? null : { mark: this.mark.type.name, attrs: this.mark.attrs, contentElement: this.contentDOM };
  }
  matchesMark(t) {
    return this.dirty != $n && this.mark.eq(t);
  }
  markDirty(t, e) {
    if (super.markDirty(t, e), this.dirty != ln) {
      let i = this.parent;
      for (; !i.node; )
        i = i.parent;
      i.dirty < this.dirty && (i.dirty = this.dirty), this.dirty = ln;
    }
  }
  slice(t, e, i) {
    let r = Ui.create(this.parent, this.mark, !0, i), s = this.children, o = this.size;
    e < o && (s = Ec(s, e, o, i)), t > 0 && (s = Ec(s, 0, t, i));
    for (let a = 0; a < s.length; a++)
      s[a].parent = r;
    return r.children = s, r;
  }
  ignoreMutation(t) {
    return this.spec.ignoreMutation ? this.spec.ignoreMutation(t) : super.ignoreMutation(t);
  }
  destroy() {
    this.spec.destroy && this.spec.destroy(), super.destroy();
  }
}
class mi extends Zs {
  constructor(t, e, i, r, s, o, a, l, c) {
    super(t, [], s, o), this.node = e, this.outerDeco = i, this.innerDeco = r, this.nodeDOM = a;
  }
  // By default, a node is rendered using the `toDOM` method from the
  // node type spec. But client code can use the `nodeViews` spec to
  // supply a custom node view, which can influence various aspects of
  // the way the node works.
  //
  // (Using subclassing for this was intentionally decided against,
  // since it'd require exposing a whole slew of finicky
  // implementation details to the user code that they probably will
  // never need.)
  static create(t, e, i, r, s, o) {
    let a = s.nodeViews[e.type.name], l, c = a && a(e, s, () => {
      if (!l)
        return o;
      if (l.parent)
        return l.parent.posBeforeChild(l);
    }, i, r), u = c && c.dom, d = c && c.contentDOM;
    if (e.isText) {
      if (!u)
        u = document.createTextNode(e.text);
      else if (u.nodeType != 3)
        throw new RangeError("Text must be rendered as a DOM text node");
    } else u || ({ dom: u, contentDOM: d } = Xi.renderSpec(document, e.type.spec.toDOM(e), null, e.attrs));
    !d && !e.isText && u.nodeName != "BR" && (u.hasAttribute("contenteditable") || (u.contentEditable = "false"), e.type.spec.draggable && (u.draggable = !0));
    let f = u;
    return u = wm(u, i, e), c ? l = new Ky(t, e, i, r, u, d || null, f, c, s, o + 1) : e.isText ? new Ya(t, e, i, r, u, f, s) : new mi(t, e, i, r, u, d || null, f, s, o + 1);
  }
  parseRule() {
    if (this.node.type.spec.reparseInView)
      return null;
    let t = { node: this.node.type.name, attrs: this.node.attrs };
    if (this.node.type.whitespace == "pre" && (t.preserveWhitespace = "full"), !this.contentDOM)
      t.getContent = () => this.node.content;
    else if (!this.contentLost)
      t.contentElement = this.contentDOM;
    else {
      for (let e = this.children.length - 1; e >= 0; e--) {
        let i = this.children[e];
        if (this.dom.contains(i.dom.parentNode)) {
          t.contentElement = i.dom.parentNode;
          break;
        }
      }
      t.contentElement || (t.getContent = () => B.empty);
    }
    return t;
  }
  matchesNode(t, e, i) {
    return this.dirty == ln && t.eq(this.node) && ra(e, this.outerDeco) && i.eq(this.innerDeco);
  }
  get size() {
    return this.node.nodeSize;
  }
  get border() {
    return this.node.isLeaf ? 0 : 1;
  }
  // Syncs `this.children` to match `this.node.content` and the local
  // decorations, possibly introducing nesting for marks. Then, in a
  // separate step, syncs the DOM inside `this.contentDOM` to
  // `this.children`.
  updateChildren(t, e) {
    let i = this.node.inlineContent, r = e, s = t.composing ? this.localCompositionInfo(t, e) : null, o = s && s.pos > -1 ? s : null, a = s && s.pos < 0, l = new Gy(this, o && o.node, t);
    Yy(this.node, this.innerDeco, (c, u, d) => {
      c.spec.marks ? l.syncToMarks(c.spec.marks, i, t) : c.type.side >= 0 && !d && l.syncToMarks(u == this.node.childCount ? Ft.none : this.node.child(u).marks, i, t), l.placeWidget(c, t, r);
    }, (c, u, d, f) => {
      l.syncToMarks(c.marks, i, t);
      let h;
      l.findNodeMatch(c, u, d, f) || a && t.state.selection.from > r && t.state.selection.to < r + c.nodeSize && (h = l.findIndexWithChild(s.node)) > -1 && l.updateNodeAt(c, u, d, h, t) || l.updateNextNode(c, u, d, t, f, r) || l.addNode(c, u, d, t, r), r += c.nodeSize;
    }), l.syncToMarks([], i, t), this.node.isTextblock && l.addTextblockHacks(), l.destroyRest(), (l.changed || this.dirty == Ci) && (o && this.protectLocalComposition(t, o), vm(this.contentDOM, this.children, t), Dr && Zy(this.dom));
  }
  localCompositionInfo(t, e) {
    let { from: i, to: r } = t.state.selection;
    if (!(t.state.selection instanceof ct) || i < e || r > e + this.node.content.size)
      return null;
    let s = t.input.compositionNode;
    if (!s || !this.dom.contains(s.parentNode))
      return null;
    if (this.node.inlineContent) {
      let o = s.nodeValue, a = Qy(this.node.content, o, i - e, r - e);
      return a < 0 ? null : { node: s, pos: a, text: o };
    } else
      return { node: s, pos: -1, text: "" };
  }
  protectLocalComposition(t, { node: e, pos: i, text: r }) {
    if (this.getDesc(e))
      return;
    let s = e;
    for (; s.parentNode != this.contentDOM; s = s.parentNode) {
      for (; s.previousSibling; )
        s.parentNode.removeChild(s.previousSibling);
      for (; s.nextSibling; )
        s.parentNode.removeChild(s.nextSibling);
      s.pmViewDesc && (s.pmViewDesc = void 0);
    }
    let o = new Uy(this, s, e, r);
    t.input.compositionNodes.push(o), this.children = Ec(this.children, i, i + r.length, t, o);
  }
  // If this desc must be updated to match the given node decoration,
  // do so and return true.
  update(t, e, i, r) {
    return this.dirty == $n || !t.sameMarkup(this.node) ? !1 : (this.updateInner(t, e, i, r), !0);
  }
  updateInner(t, e, i, r) {
    this.updateOuterDeco(e), this.node = t, this.innerDeco = i, this.contentDOM && this.updateChildren(r, this.posAtStart), this.dirty = ln;
  }
  updateOuterDeco(t) {
    if (ra(t, this.outerDeco))
      return;
    let e = this.nodeDOM.nodeType != 1, i = this.dom;
    this.dom = xm(this.dom, this.nodeDOM, Tc(this.outerDeco, this.node, e), Tc(t, this.node, e)), this.dom != i && (i.pmViewDesc = void 0, this.dom.pmViewDesc = this), this.outerDeco = t;
  }
  // Mark this node as being the selected node.
  selectNode() {
    this.nodeDOM.nodeType == 1 && this.nodeDOM.classList.add("ProseMirror-selectednode"), (this.contentDOM || !this.node.type.spec.draggable) && (this.dom.draggable = !0);
  }
  // Remove selected node marking from this node.
  deselectNode() {
    this.nodeDOM.nodeType == 1 && (this.nodeDOM.classList.remove("ProseMirror-selectednode"), (this.contentDOM || !this.node.type.spec.draggable) && this.dom.removeAttribute("draggable"));
  }
  get domAtom() {
    return this.node.isAtom;
  }
}
function pf(n, t, e, i, r) {
  wm(i, t, n);
  let s = new mi(void 0, n, t, e, i, i, i, r, 0);
  return s.contentDOM && s.updateChildren(r, 0), s;
}
class Ya extends mi {
  constructor(t, e, i, r, s, o, a) {
    super(t, e, i, r, s, null, o, a, 0);
  }
  parseRule() {
    let t = this.nodeDOM.parentNode;
    for (; t && t != this.dom && !t.pmIsDeco; )
      t = t.parentNode;
    return { skip: t || !0 };
  }
  update(t, e, i, r) {
    return this.dirty == $n || this.dirty != ln && !this.inParent() || !t.sameMarkup(this.node) ? !1 : (this.updateOuterDeco(e), (this.dirty != ln || t.text != this.node.text) && t.text != this.nodeDOM.nodeValue && (this.nodeDOM.nodeValue = t.text, r.trackWrites == this.nodeDOM && (r.trackWrites = null)), this.node = t, this.dirty = ln, !0);
  }
  inParent() {
    let t = this.parent.contentDOM;
    for (let e = this.nodeDOM; e; e = e.parentNode)
      if (e == t)
        return !0;
    return !1;
  }
  domFromPos(t) {
    return { node: this.nodeDOM, offset: t };
  }
  localPosFromDOM(t, e, i) {
    return t == this.nodeDOM ? this.posAtStart + Math.min(e, this.node.text.length) : super.localPosFromDOM(t, e, i);
  }
  ignoreMutation(t) {
    return t.type != "characterData" && t.type != "selection";
  }
  slice(t, e, i) {
    let r = this.node.cut(t, e), s = document.createTextNode(r.text);
    return new Ya(this.parent, r, this.outerDeco, this.innerDeco, s, s, i);
  }
  markDirty(t, e) {
    super.markDirty(t, e), this.dom != this.nodeDOM && (t == 0 || e == this.nodeDOM.nodeValue.length) && (this.dirty = $n);
  }
  get domAtom() {
    return !1;
  }
  isText(t) {
    return this.node.text == t;
  }
}
class ym extends Zs {
  parseRule() {
    return { ignore: !0 };
  }
  matchesHack(t) {
    return this.dirty == ln && this.dom.nodeName == t;
  }
  get domAtom() {
    return !0;
  }
  get ignoreForCoords() {
    return this.dom.nodeName == "IMG";
  }
}
class Ky extends mi {
  constructor(t, e, i, r, s, o, a, l, c, u) {
    super(t, e, i, r, s, o, a, c, u), this.spec = l;
  }
  // A custom `update` method gets to decide whether the update goes
  // through. If it does, and there's a `contentDOM` node, our logic
  // updates the children.
  update(t, e, i, r) {
    if (this.dirty == $n)
      return !1;
    if (this.spec.update && (this.node.type == t.type || this.spec.multiType)) {
      let s = this.spec.update(t, e, i);
      return s && this.updateInner(t, e, i, r), s;
    } else return !this.contentDOM && !t.isLeaf ? !1 : super.update(t, e, i, r);
  }
  selectNode() {
    this.spec.selectNode ? this.spec.selectNode() : super.selectNode();
  }
  deselectNode() {
    this.spec.deselectNode ? this.spec.deselectNode() : super.deselectNode();
  }
  setSelection(t, e, i, r) {
    this.spec.setSelection ? this.spec.setSelection(t, e, i.root) : super.setSelection(t, e, i, r);
  }
  destroy() {
    this.spec.destroy && this.spec.destroy(), super.destroy();
  }
  stopEvent(t) {
    return this.spec.stopEvent ? this.spec.stopEvent(t) : !1;
  }
  ignoreMutation(t) {
    return this.spec.ignoreMutation ? this.spec.ignoreMutation(t) : super.ignoreMutation(t);
  }
}
function vm(n, t, e) {
  let i = n.firstChild, r = !1;
  for (let s = 0; s < t.length; s++) {
    let o = t[s], a = o.dom;
    if (a.parentNode == n) {
      for (; a != i; )
        i = mf(i), r = !0;
      i = i.nextSibling;
    } else
      r = !0, n.insertBefore(a, i);
    if (o instanceof Ui) {
      let l = i ? i.previousSibling : n.lastChild;
      vm(o.contentDOM, o.children, e), i = l ? l.nextSibling : n.firstChild;
    }
  }
  for (; i; )
    i = mf(i), r = !0;
  r && e.trackWrites == n && (e.trackWrites = null);
}
const _s = function(n) {
  n && (this.nodeName = n);
};
_s.prototype = /* @__PURE__ */ Object.create(null);
const Ti = [new _s()];
function Tc(n, t, e) {
  if (n.length == 0)
    return Ti;
  let i = e ? Ti[0] : new _s(), r = [i];
  for (let s = 0; s < n.length; s++) {
    let o = n[s].type.attrs;
    if (o) {
      o.nodeName && r.push(i = new _s(o.nodeName));
      for (let a in o) {
        let l = o[a];
        l != null && (e && r.length == 1 && r.push(i = new _s(t.isInline ? "span" : "div")), a == "class" ? i.class = (i.class ? i.class + " " : "") + l : a == "style" ? i.style = (i.style ? i.style + ";" : "") + l : a != "nodeName" && (i[a] = l));
      }
    }
  }
  return r;
}
function xm(n, t, e, i) {
  if (e == Ti && i == Ti)
    return t;
  let r = t;
  for (let s = 0; s < i.length; s++) {
    let o = i[s], a = e[s];
    if (s) {
      let l;
      a && a.nodeName == o.nodeName && r != n && (l = r.parentNode) && l.nodeName.toLowerCase() == o.nodeName || (l = document.createElement(o.nodeName), l.pmIsDeco = !0, l.appendChild(r), a = Ti[0]), r = l;
    }
    qy(r, a || Ti[0], o);
  }
  return r;
}
function qy(n, t, e) {
  for (let i in t)
    i != "class" && i != "style" && i != "nodeName" && !(i in e) && n.removeAttribute(i);
  for (let i in e)
    i != "class" && i != "style" && i != "nodeName" && e[i] != t[i] && n.setAttribute(i, e[i]);
  if (t.class != e.class) {
    let i = t.class ? t.class.split(" ").filter(Boolean) : [], r = e.class ? e.class.split(" ").filter(Boolean) : [];
    for (let s = 0; s < i.length; s++)
      r.indexOf(i[s]) == -1 && n.classList.remove(i[s]);
    for (let s = 0; s < r.length; s++)
      i.indexOf(r[s]) == -1 && n.classList.add(r[s]);
    n.classList.length == 0 && n.removeAttribute("class");
  }
  if (t.style != e.style) {
    if (t.style) {
      let i = /\s*([\w\-\xa1-\uffff]+)\s*:(?:"(?:\\.|[^"])*"|'(?:\\.|[^'])*'|\(.*?\)|[^;])*/g, r;
      for (; r = i.exec(t.style); )
        n.style.removeProperty(r[1]);
    }
    e.style && (n.style.cssText += e.style);
  }
}
function wm(n, t, e) {
  return xm(n, n, Ti, Tc(t, e, n.nodeType != 1));
}
function ra(n, t) {
  if (n.length != t.length)
    return !1;
  for (let e = 0; e < n.length; e++)
    if (!n[e].type.eq(t[e].type))
      return !1;
  return !0;
}
function mf(n) {
  let t = n.nextSibling;
  return n.parentNode.removeChild(n), t;
}
class Gy {
  constructor(t, e, i) {
    this.lock = e, this.view = i, this.index = 0, this.stack = [], this.changed = !1, this.top = t, this.preMatch = Jy(t.node.content, t);
  }
  // Destroy and remove the children between the given indices in
  // `this.top`.
  destroyBetween(t, e) {
    if (t != e) {
      for (let i = t; i < e; i++)
        this.top.children[i].destroy();
      this.top.children.splice(t, e - t), this.changed = !0;
    }
  }
  // Destroy all remaining children in `this.top`.
  destroyRest() {
    this.destroyBetween(this.index, this.top.children.length);
  }
  // Sync the current stack of mark descs with the given array of
  // marks, reusing existing mark descs when possible.
  syncToMarks(t, e, i) {
    let r = 0, s = this.stack.length >> 1, o = Math.min(s, t.length);
    for (; r < o && (r == s - 1 ? this.top : this.stack[r + 1 << 1]).matchesMark(t[r]) && t[r].type.spec.spanning !== !1; )
      r++;
    for (; r < s; )
      this.destroyRest(), this.top.dirty = ln, this.index = this.stack.pop(), this.top = this.stack.pop(), s--;
    for (; s < t.length; ) {
      this.stack.push(this.top, this.index + 1);
      let a = -1;
      for (let l = this.index; l < Math.min(this.index + 3, this.top.children.length); l++) {
        let c = this.top.children[l];
        if (c.matchesMark(t[s]) && !this.isLocked(c.dom)) {
          a = l;
          break;
        }
      }
      if (a > -1)
        a > this.index && (this.changed = !0, this.destroyBetween(this.index, a)), this.top = this.top.children[this.index];
      else {
        let l = Ui.create(this.top, t[s], e, i);
        this.top.children.splice(this.index, 0, l), this.top = l, this.changed = !0;
      }
      this.index = 0, s++;
    }
  }
  // Try to find a node desc matching the given data. Skip over it and
  // return true when successful.
  findNodeMatch(t, e, i, r) {
    let s = -1, o;
    if (r >= this.preMatch.index && (o = this.preMatch.matches[r - this.preMatch.index]).parent == this.top && o.matchesNode(t, e, i))
      s = this.top.children.indexOf(o, this.index);
    else
      for (let a = this.index, l = Math.min(this.top.children.length, a + 5); a < l; a++) {
        let c = this.top.children[a];
        if (c.matchesNode(t, e, i) && !this.preMatch.matched.has(c)) {
          s = a;
          break;
        }
      }
    return s < 0 ? !1 : (this.destroyBetween(this.index, s), this.index++, !0);
  }
  updateNodeAt(t, e, i, r, s) {
    let o = this.top.children[r];
    return o.dirty == $n && o.dom == o.contentDOM && (o.dirty = Ci), o.update(t, e, i, s) ? (this.destroyBetween(this.index, r), this.index++, !0) : !1;
  }
  findIndexWithChild(t) {
    for (; ; ) {
      let e = t.parentNode;
      if (!e)
        return -1;
      if (e == this.top.contentDOM) {
        let i = t.pmViewDesc;
        if (i) {
          for (let r = this.index; r < this.top.children.length; r++)
            if (this.top.children[r] == i)
              return r;
        }
        return -1;
      }
      t = e;
    }
  }
  // Try to update the next node, if any, to the given data. Checks
  // pre-matches to avoid overwriting nodes that could still be used.
  updateNextNode(t, e, i, r, s, o) {
    for (let a = this.index; a < this.top.children.length; a++) {
      let l = this.top.children[a];
      if (l instanceof mi) {
        let c = this.preMatch.matched.get(l);
        if (c != null && c != s)
          return !1;
        let u = l.dom, d, f = this.isLocked(u) && !(t.isText && l.node && l.node.isText && l.nodeDOM.nodeValue == t.text && l.dirty != $n && ra(e, l.outerDeco));
        if (!f && l.update(t, e, i, r))
          return this.destroyBetween(this.index, a), l.dom != u && (this.changed = !0), this.index++, !0;
        if (!f && (d = this.recreateWrapper(l, t, e, i, r, o)))
          return this.destroyBetween(this.index, a), this.top.children[this.index] = d, d.contentDOM && (d.dirty = Ci, d.updateChildren(r, o + 1), d.dirty = ln), this.changed = !0, this.index++, !0;
        break;
      }
    }
    return !1;
  }
  // When a node with content is replaced by a different node with
  // identical content, move over its children.
  recreateWrapper(t, e, i, r, s, o) {
    if (t.dirty || e.isAtom || !t.children.length || !t.node.content.eq(e.content) || !ra(i, t.outerDeco) || !r.eq(t.innerDeco))
      return null;
    let a = mi.create(this.top, e, i, r, s, o);
    if (a.contentDOM) {
      a.children = t.children, t.children = [];
      for (let l of a.children)
        l.parent = a;
    }
    return t.destroy(), a;
  }
  // Insert the node as a newly created node desc.
  addNode(t, e, i, r, s) {
    let o = mi.create(this.top, t, e, i, r, s);
    o.contentDOM && o.updateChildren(r, s + 1), this.top.children.splice(this.index++, 0, o), this.changed = !0;
  }
  placeWidget(t, e, i) {
    let r = this.index < this.top.children.length ? this.top.children[this.index] : null;
    if (r && r.matchesWidget(t) && (t == r.widget || !r.widget.type.toDOM.parentNode))
      this.index++;
    else {
      let s = new bm(this.top, t, e, i);
      this.top.children.splice(this.index++, 0, s), this.changed = !0;
    }
  }
  // Make sure a textblock looks and behaves correctly in
  // contentEditable.
  addTextblockHacks() {
    let t = this.top.children[this.index - 1], e = this.top;
    for (; t instanceof Ui; )
      e = t, t = e.children[e.children.length - 1];
    (!t || // Empty textblock
    !(t instanceof Ya) || /\n$/.test(t.node.text) || this.view.requiresGeckoHackNode && /\s$/.test(t.node.text)) && ((Le || ke) && t && t.dom.contentEditable == "false" && this.addHackNode("IMG", e), this.addHackNode("BR", this.top));
  }
  addHackNode(t, e) {
    if (e == this.top && this.index < e.children.length && e.children[this.index].matchesHack(t))
      this.index++;
    else {
      let i = document.createElement(t);
      t == "IMG" && (i.className = "ProseMirror-separator", i.alt = ""), t == "BR" && (i.className = "ProseMirror-trailingBreak");
      let r = new ym(this.top, [], i, null);
      e != this.top ? e.children.push(r) : e.children.splice(this.index++, 0, r), this.changed = !0;
    }
  }
  isLocked(t) {
    return this.lock && (t == this.lock || t.nodeType == 1 && t.contains(this.lock.parentNode));
  }
}
function Jy(n, t) {
  let e = t, i = e.children.length, r = n.childCount, s = /* @__PURE__ */ new Map(), o = [];
  t: for (; r > 0; ) {
    let a;
    for (; ; )
      if (i) {
        let c = e.children[i - 1];
        if (c instanceof Ui)
          e = c, i = c.children.length;
        else {
          a = c, i--;
          break;
        }
      } else {
        if (e == t)
          break t;
        i = e.parent.children.indexOf(e), e = e.parent;
      }
    let l = a.node;
    if (l) {
      if (l != n.child(r - 1))
        break;
      --r, s.set(a, r), o.push(a);
    }
  }
  return { index: r, matched: s, matches: o.reverse() };
}
function Xy(n, t) {
  return n.type.side - t.type.side;
}
function Yy(n, t, e, i) {
  let r = t.locals(n), s = 0;
  if (r.length == 0) {
    for (let c = 0; c < n.childCount; c++) {
      let u = n.child(c);
      i(u, r, t.forChild(s, u), c), s += u.nodeSize;
    }
    return;
  }
  let o = 0, a = [], l = null;
  for (let c = 0; ; ) {
    let u, d;
    for (; o < r.length && r[o].to == s; ) {
      let g = r[o++];
      g.widget && (u ? (d || (d = [u])).push(g) : u = g);
    }
    if (u)
      if (d) {
        d.sort(Xy);
        for (let g = 0; g < d.length; g++)
          e(d[g], c, !!l);
      } else
        e(u, c, !!l);
    let f, h;
    if (l)
      h = -1, f = l, l = null;
    else if (c < n.childCount)
      h = c, f = n.child(c++);
    else
      break;
    for (let g = 0; g < a.length; g++)
      a[g].to <= s && a.splice(g--, 1);
    for (; o < r.length && r[o].from <= s && r[o].to > s; )
      a.push(r[o++]);
    let p = s + f.nodeSize;
    if (f.isText) {
      let g = p;
      o < r.length && r[o].from < g && (g = r[o].from);
      for (let m = 0; m < a.length; m++)
        a[m].to < g && (g = a[m].to);
      g < p && (l = f.cut(g - s), f = f.cut(0, g - s), p = g, h = -1);
    } else
      for (; o < r.length && r[o].to < p; )
        o++;
    let _ = f.isInline && !f.isLeaf ? a.filter((g) => !g.inline) : a.slice();
    i(f, _, t.forChild(s, f), h), s = p;
  }
}
function Zy(n) {
  if (n.nodeName == "UL" || n.nodeName == "OL") {
    let t = n.style.cssText;
    n.style.cssText = t + "; list-style: square !important", window.getComputedStyle(n).listStyle, n.style.cssText = t;
  }
}
function Qy(n, t, e, i) {
  for (let r = 0, s = 0; r < n.childCount && s <= i; ) {
    let o = n.child(r++), a = s;
    if (s += o.nodeSize, !o.isText)
      continue;
    let l = o.text;
    for (; r < n.childCount; ) {
      let c = n.child(r++);
      if (s += c.nodeSize, !c.isText)
        break;
      l += c.text;
    }
    if (s >= e) {
      if (s >= i && l.slice(i - t.length - a, i - a) == t)
        return i - t.length;
      let c = a < i ? l.lastIndexOf(t, i - a - 1) : -1;
      if (c >= 0 && c + t.length + a >= e)
        return a + c;
      if (e == i && l.length >= i + t.length - a && l.slice(i - a, i - a + t.length) == t)
        return i;
    }
  }
  return -1;
}
function Ec(n, t, e, i, r) {
  let s = [];
  for (let o = 0, a = 0; o < n.length; o++) {
    let l = n[o], c = a, u = a += l.size;
    c >= e || u <= t ? s.push(l) : (c < t && s.push(l.slice(0, t - c, i)), r && (s.push(r), r = void 0), u > e && s.push(l.slice(e - c, l.size, i)));
  }
  return s;
}
function bu(n, t = null) {
  let e = n.domSelectionRange(), i = n.state.doc;
  if (!e.focusNode)
    return null;
  let r = n.docView.nearestDesc(e.focusNode), s = r && r.size == 0, o = n.docView.posFromDOM(e.focusNode, e.focusOffset, 1);
  if (o < 0)
    return null;
  let a = i.resolve(o), l, c;
  if (Xa(e)) {
    for (l = o; r && !r.node; )
      r = r.parent;
    let d = r.node;
    if (r && d.isAtom && ot.isSelectable(d) && r.parent && !(d.isInline && Cy(e.focusNode, e.focusOffset, r.dom))) {
      let f = r.posBefore;
      c = new ot(o == f ? a : i.resolve(f));
    }
  } else {
    if (e instanceof n.dom.ownerDocument.defaultView.Selection && e.rangeCount > 1) {
      let d = o, f = o;
      for (let h = 0; h < e.rangeCount; h++) {
        let p = e.getRangeAt(h);
        d = Math.min(d, n.docView.posFromDOM(p.startContainer, p.startOffset, 1)), f = Math.max(f, n.docView.posFromDOM(p.endContainer, p.endOffset, -1));
      }
      if (d < 0)
        return null;
      [l, o] = f == n.state.selection.anchor ? [f, d] : [d, f], a = i.resolve(o);
    } else
      l = n.docView.posFromDOM(e.anchorNode, e.anchorOffset, 1);
    if (l < 0)
      return null;
  }
  let u = i.resolve(l);
  if (!c) {
    let d = t == "pointer" || n.state.selection.head < a.pos && !s ? 1 : -1;
    c = yu(n, u, a, d);
  }
  return c;
}
function km(n) {
  return n.editable ? n.hasFocus() : Cm(n) && document.activeElement && document.activeElement.contains(n.dom);
}
function Gn(n, t = !1) {
  let e = n.state.selection;
  if (Sm(n, e), !!km(n)) {
    if (!t && n.input.mouseDown && n.input.mouseDown.allowDefault && ke) {
      let i = n.domSelectionRange(), r = n.domObserver.currentSelection;
      if (i.anchorNode && r.anchorNode && Wi(i.anchorNode, i.anchorOffset, r.anchorNode, r.anchorOffset)) {
        n.input.mouseDown.delayedSelectionSync = !0, n.domObserver.setCurSelection();
        return;
      }
    }
    if (n.domObserver.disconnectSelection(), n.cursorWrapper)
      ev(n);
    else {
      let { anchor: i, head: r } = e, s, o;
      gf && !(e instanceof ct) && (e.$from.parent.inlineContent || (s = _f(n, e.from)), !e.empty && !e.$from.parent.inlineContent && (o = _f(n, e.to))), n.docView.setSelection(i, r, n, t), gf && (s && bf(s), o && bf(o)), e.visible ? n.dom.classList.remove("ProseMirror-hideselection") : (n.dom.classList.add("ProseMirror-hideselection"), "onselectionchange" in document && tv(n));
    }
    n.domObserver.setCurSelection(), n.domObserver.connectSelection();
  }
}
const gf = Le || ke && dm < 63;
function _f(n, t) {
  let { node: e, offset: i } = n.docView.domFromPos(t, 0), r = i < e.childNodes.length ? e.childNodes[i] : null, s = i ? e.childNodes[i - 1] : null;
  if (Le && r && r.contentEditable == "false")
    return Sl(r);
  if ((!r || r.contentEditable == "false") && (!s || s.contentEditable == "false")) {
    if (r)
      return Sl(r);
    if (s)
      return Sl(s);
  }
}
function Sl(n) {
  return n.contentEditable = "true", Le && n.draggable && (n.draggable = !1, n.wasDraggable = !0), n;
}
function bf(n) {
  n.contentEditable = "false", n.wasDraggable && (n.draggable = !0, n.wasDraggable = null);
}
function tv(n) {
  let t = n.dom.ownerDocument;
  t.removeEventListener("selectionchange", n.input.hideSelectionGuard);
  let e = n.domSelectionRange(), i = e.anchorNode, r = e.anchorOffset;
  t.addEventListener("selectionchange", n.input.hideSelectionGuard = () => {
    (e.anchorNode != i || e.anchorOffset != r) && (t.removeEventListener("selectionchange", n.input.hideSelectionGuard), setTimeout(() => {
      (!km(n) || n.state.selection.visible) && n.dom.classList.remove("ProseMirror-hideselection");
    }, 20));
  });
}
function ev(n) {
  let t = n.domSelection(), e = document.createRange();
  if (!t)
    return;
  let i = n.cursorWrapper.dom, r = i.nodeName == "IMG";
  r ? e.setStart(i.parentNode, _e(i) + 1) : e.setStart(i, 0), e.collapse(!0), t.removeAllRanges(), t.addRange(e), !r && !n.state.selection.visible && Fe && pi <= 11 && (i.disabled = !0, i.disabled = !1);
}
function Sm(n, t) {
  if (t instanceof ot) {
    let e = n.docView.descAt(t.from);
    e != n.lastSelectedViewDesc && (yf(n), e && e.selectNode(), n.lastSelectedViewDesc = e);
  } else
    yf(n);
}
function yf(n) {
  n.lastSelectedViewDesc && (n.lastSelectedViewDesc.parent && n.lastSelectedViewDesc.deselectNode(), n.lastSelectedViewDesc = void 0);
}
function yu(n, t, e, i) {
  return n.someProp("createSelectionBetween", (r) => r(n, t, e)) || ct.between(t, e, i);
}
function vf(n) {
  return n.editable && !n.hasFocus() ? !1 : Cm(n);
}
function Cm(n) {
  let t = n.domSelectionRange();
  if (!t.anchorNode)
    return !1;
  try {
    return n.dom.contains(t.anchorNode.nodeType == 3 ? t.anchorNode.parentNode : t.anchorNode) && (n.editable || n.dom.contains(t.focusNode.nodeType == 3 ? t.focusNode.parentNode : t.focusNode));
  } catch {
    return !1;
  }
}
function nv(n) {
  let t = n.docView.domFromPos(n.state.selection.anchor, 0), e = n.domSelectionRange();
  return Wi(t.node, t.offset, e.anchorNode, e.anchorOffset);
}
function Oc(n, t) {
  let { $anchor: e, $head: i } = n.selection, r = t > 0 ? e.max(i) : e.min(i), s = r.parent.inlineContent ? r.depth ? n.doc.resolve(t > 0 ? r.after() : r.before()) : null : r;
  return s && ft.findFrom(s, t);
}
function ei(n, t) {
  return n.dispatch(n.state.tr.setSelection(t).scrollIntoView()), !0;
}
function xf(n, t, e) {
  let i = n.state.selection;
  if (i instanceof ct)
    if (e.indexOf("s") > -1) {
      let { $head: r } = i, s = r.textOffset ? null : t < 0 ? r.nodeBefore : r.nodeAfter;
      if (!s || s.isText || !s.isLeaf)
        return !1;
      let o = n.state.doc.resolve(r.pos + s.nodeSize * (t < 0 ? -1 : 1));
      return ei(n, new ct(i.$anchor, o));
    } else if (i.empty) {
      if (n.endOfTextblock(t > 0 ? "forward" : "backward")) {
        let r = Oc(n.state, t);
        return r && r instanceof ot ? ei(n, r) : !1;
      } else if (!(on && e.indexOf("m") > -1)) {
        let r = i.$head, s = r.textOffset ? null : t < 0 ? r.nodeBefore : r.nodeAfter, o;
        if (!s || s.isText)
          return !1;
        let a = t < 0 ? r.pos - s.nodeSize : r.pos;
        return s.isAtom || (o = n.docView.descAt(a)) && !o.contentDOM ? ot.isSelectable(s) ? ei(n, new ot(t < 0 ? n.state.doc.resolve(r.pos - s.nodeSize) : r)) : Ys ? ei(n, new ct(n.state.doc.resolve(t < 0 ? a : a + s.nodeSize))) : !1 : !1;
      }
    } else return !1;
  else {
    if (i instanceof ot && i.node.isInline)
      return ei(n, new ct(t > 0 ? i.$to : i.$from));
    {
      let r = Oc(n.state, t);
      return r ? ei(n, r) : !1;
    }
  }
}
function sa(n) {
  return n.nodeType == 3 ? n.nodeValue.length : n.childNodes.length;
}
function bs(n, t) {
  let e = n.pmViewDesc;
  return e && e.size == 0 && (t < 0 || n.nextSibling || n.nodeName != "BR");
}
function or(n, t) {
  return t < 0 ? iv(n) : rv(n);
}
function iv(n) {
  let t = n.domSelectionRange(), e = t.focusNode, i = t.focusOffset;
  if (!e)
    return;
  let r, s, o = !1;
  for (_n && e.nodeType == 1 && i < sa(e) && bs(e.childNodes[i], -1) && (o = !0); ; )
    if (i > 0) {
      if (e.nodeType != 1)
        break;
      {
        let a = e.childNodes[i - 1];
        if (bs(a, -1))
          r = e, s = --i;
        else if (a.nodeType == 3)
          e = a, i = e.nodeValue.length;
        else
          break;
      }
    } else {
      if (Tm(e))
        break;
      {
        let a = e.previousSibling;
        for (; a && bs(a, -1); )
          r = e.parentNode, s = _e(a), a = a.previousSibling;
        if (a)
          e = a, i = sa(e);
        else {
          if (e = e.parentNode, e == n.dom)
            break;
          i = 0;
        }
      }
    }
  o ? Mc(n, e, i) : r && Mc(n, r, s);
}
function rv(n) {
  let t = n.domSelectionRange(), e = t.focusNode, i = t.focusOffset;
  if (!e)
    return;
  let r = sa(e), s, o;
  for (; ; )
    if (i < r) {
      if (e.nodeType != 1)
        break;
      let a = e.childNodes[i];
      if (bs(a, 1))
        s = e, o = ++i;
      else
        break;
    } else {
      if (Tm(e))
        break;
      {
        let a = e.nextSibling;
        for (; a && bs(a, 1); )
          s = a.parentNode, o = _e(a) + 1, a = a.nextSibling;
        if (a)
          e = a, i = 0, r = sa(e);
        else {
          if (e = e.parentNode, e == n.dom)
            break;
          i = r = 0;
        }
      }
    }
  s && Mc(n, s, o);
}
function Tm(n) {
  let t = n.pmViewDesc;
  return t && t.node && t.node.isBlock;
}
function sv(n, t) {
  for (; n && t == n.childNodes.length && !Xs(n); )
    t = _e(n) + 1, n = n.parentNode;
  for (; n && t < n.childNodes.length; ) {
    let e = n.childNodes[t];
    if (e.nodeType == 3)
      return e;
    if (e.nodeType == 1 && e.contentEditable == "false")
      break;
    n = e, t = 0;
  }
}
function ov(n, t) {
  for (; n && !t && !Xs(n); )
    t = _e(n), n = n.parentNode;
  for (; n && t; ) {
    let e = n.childNodes[t - 1];
    if (e.nodeType == 3)
      return e;
    if (e.nodeType == 1 && e.contentEditable == "false")
      break;
    n = e, t = n.childNodes.length;
  }
}
function Mc(n, t, e) {
  if (t.nodeType != 3) {
    let s, o;
    (o = sv(t, e)) ? (t = o, e = 0) : (s = ov(t, e)) && (t = s, e = s.nodeValue.length);
  }
  let i = n.domSelection();
  if (!i)
    return;
  if (Xa(i)) {
    let s = document.createRange();
    s.setEnd(t, e), s.setStart(t, e), i.removeAllRanges(), i.addRange(s);
  } else i.extend && i.extend(t, e);
  n.domObserver.setCurSelection();
  let { state: r } = n;
  setTimeout(() => {
    n.state == r && Gn(n);
  }, 50);
}
function wf(n, t) {
  let e = n.state.doc.resolve(t);
  if (!(ke || Oy) && e.parent.inlineContent) {
    let r = n.coordsAtPos(t);
    if (t > e.start()) {
      let s = n.coordsAtPos(t - 1), o = (s.top + s.bottom) / 2;
      if (o > r.top && o < r.bottom && Math.abs(s.left - r.left) > 1)
        return s.left < r.left ? "ltr" : "rtl";
    }
    if (t < e.end()) {
      let s = n.coordsAtPos(t + 1), o = (s.top + s.bottom) / 2;
      if (o > r.top && o < r.bottom && Math.abs(s.left - r.left) > 1)
        return s.left > r.left ? "ltr" : "rtl";
    }
  }
  return getComputedStyle(n.dom).direction == "rtl" ? "rtl" : "ltr";
}
function kf(n, t, e) {
  let i = n.state.selection;
  if (i instanceof ct && !i.empty || e.indexOf("s") > -1 || on && e.indexOf("m") > -1)
    return !1;
  let { $from: r, $to: s } = i;
  if (!r.parent.inlineContent || n.endOfTextblock(t < 0 ? "up" : "down")) {
    let o = Oc(n.state, t);
    if (o && o instanceof ot)
      return ei(n, o);
  }
  if (!r.parent.inlineContent) {
    let o = t < 0 ? r : s, a = i instanceof Xe ? ft.near(o, t) : ft.findFrom(o, t);
    return a ? ei(n, a) : !1;
  }
  return !1;
}
function Sf(n, t) {
  if (!(n.state.selection instanceof ct))
    return !0;
  let { $head: e, $anchor: i, empty: r } = n.state.selection;
  if (!e.sameParent(i))
    return !0;
  if (!r)
    return !1;
  if (n.endOfTextblock(t > 0 ? "forward" : "backward"))
    return !0;
  let s = !e.textOffset && (t < 0 ? e.nodeBefore : e.nodeAfter);
  if (s && !s.isText) {
    let o = n.state.tr;
    return t < 0 ? o.delete(e.pos - s.nodeSize, e.pos) : o.delete(e.pos, e.pos + s.nodeSize), n.dispatch(o), !0;
  }
  return !1;
}
function Cf(n, t, e) {
  n.domObserver.stop(), t.contentEditable = e, n.domObserver.start();
}
function av(n) {
  if (!Le || n.state.selection.$head.parentOffset > 0)
    return !1;
  let { focusNode: t, focusOffset: e } = n.domSelectionRange();
  if (t && t.nodeType == 1 && e == 0 && t.firstChild && t.firstChild.contentEditable == "false") {
    let i = t.firstChild;
    Cf(n, i, "true"), setTimeout(() => Cf(n, i, "false"), 20);
  }
  return !1;
}
function lv(n) {
  let t = "";
  return n.ctrlKey && (t += "c"), n.metaKey && (t += "m"), n.altKey && (t += "a"), n.shiftKey && (t += "s"), t;
}
function cv(n, t) {
  let e = t.keyCode, i = lv(t);
  if (e == 8 || on && e == 72 && i == "c")
    return Sf(n, -1) || or(n, -1);
  if (e == 46 && !t.shiftKey || on && e == 68 && i == "c")
    return Sf(n, 1) || or(n, 1);
  if (e == 13 || e == 27)
    return !0;
  if (e == 37 || on && e == 66 && i == "c") {
    let r = e == 37 ? wf(n, n.state.selection.from) == "ltr" ? -1 : 1 : -1;
    return xf(n, r, i) || or(n, r);
  } else if (e == 39 || on && e == 70 && i == "c") {
    let r = e == 39 ? wf(n, n.state.selection.from) == "ltr" ? 1 : -1 : 1;
    return xf(n, r, i) || or(n, r);
  } else {
    if (e == 38 || on && e == 80 && i == "c")
      return kf(n, -1, i) || or(n, -1);
    if (e == 40 || on && e == 78 && i == "c")
      return av(n) || kf(n, 1, i) || or(n, 1);
    if (i == (on ? "m" : "c") && (e == 66 || e == 73 || e == 89 || e == 90))
      return !0;
  }
  return !1;
}
function Em(n, t) {
  n.someProp("transformCopied", (h) => {
    t = h(t, n);
  });
  let e = [], { content: i, openStart: r, openEnd: s } = t;
  for (; r > 1 && s > 1 && i.childCount == 1 && i.firstChild.childCount == 1; ) {
    r--, s--;
    let h = i.firstChild;
    e.push(h.type.name, h.attrs != h.type.defaultAttrs ? h.attrs : null), i = h.content;
  }
  let o = n.someProp("clipboardSerializer") || Xi.fromSchema(n.state.schema), a = Rm(), l = a.createElement("div");
  l.appendChild(o.serializeFragment(i, { document: a }));
  let c = l.firstChild, u, d = 0;
  for (; c && c.nodeType == 1 && (u = Lm[c.nodeName.toLowerCase()]); ) {
    for (let h = u.length - 1; h >= 0; h--) {
      let p = a.createElement(u[h]);
      for (; l.firstChild; )
        p.appendChild(l.firstChild);
      l.appendChild(p), d++;
    }
    c = l.firstChild;
  }
  c && c.nodeType == 1 && c.setAttribute("data-pm-slice", `${r} ${s}${d ? ` -${d}` : ""} ${JSON.stringify(e)}`);
  let f = n.someProp("clipboardTextSerializer", (h) => h(t, n)) || t.content.textBetween(0, t.content.size, `

`);
  return { dom: l, text: f, slice: t };
}
function Om(n, t, e, i, r) {
  let s = r.parent.type.spec.code, o, a;
  if (!e && !t)
    return null;
  let l = t && (i || s || !e);
  if (l) {
    if (n.someProp("transformPastedText", (f) => {
      t = f(t, s || i, n);
    }), s)
      return t ? new Y(B.from(n.state.schema.text(t.replace(/\r\n?/g, `
`))), 0, 0) : Y.empty;
    let d = n.someProp("clipboardTextParser", (f) => f(t, r, i, n));
    if (d)
      a = d;
    else {
      let f = r.marks(), { schema: h } = n.state, p = Xi.fromSchema(h);
      o = document.createElement("div"), t.split(/(?:\r\n?|\n)+/).forEach((_) => {
        let g = o.appendChild(document.createElement("p"));
        _ && g.appendChild(p.serializeNode(h.text(_, f)));
      });
    }
  } else
    n.someProp("transformPastedHTML", (d) => {
      e = d(e, n);
    }), o = hv(e), Ys && pv(o);
  let c = o && o.querySelector("[data-pm-slice]"), u = c && /^(\d+) (\d+)(?: -(\d+))? (.*)/.exec(c.getAttribute("data-pm-slice") || "");
  if (u && u[3])
    for (let d = +u[3]; d > 0; d--) {
      let f = o.firstChild;
      for (; f && f.nodeType != 1; )
        f = f.nextSibling;
      if (!f)
        break;
      o = f;
    }
  if (a || (a = (n.someProp("clipboardParser") || n.someProp("domParser") || _r.fromSchema(n.state.schema)).parseSlice(o, {
    preserveWhitespace: !!(l || u),
    context: r,
    ruleFromNode(f) {
      return f.nodeName == "BR" && !f.nextSibling && f.parentNode && !uv.test(f.parentNode.nodeName) ? { ignore: !0 } : null;
    }
  })), u)
    a = mv(Tf(a, +u[1], +u[2]), u[4]);
  else if (a = Y.maxOpen(dv(a.content, r), !0), a.openStart || a.openEnd) {
    let d = 0, f = 0;
    for (let h = a.content.firstChild; d < a.openStart && !h.type.spec.isolating; d++, h = h.firstChild)
      ;
    for (let h = a.content.lastChild; f < a.openEnd && !h.type.spec.isolating; f++, h = h.lastChild)
      ;
    a = Tf(a, d, f);
  }
  return n.someProp("transformPasted", (d) => {
    a = d(a, n);
  }), a;
}
const uv = /^(a|abbr|acronym|b|cite|code|del|em|i|ins|kbd|label|output|q|ruby|s|samp|span|strong|sub|sup|time|u|tt|var)$/i;
function dv(n, t) {
  if (n.childCount < 2)
    return n;
  for (let e = t.depth; e >= 0; e--) {
    let r = t.node(e).contentMatchAt(t.index(e)), s, o = [];
    if (n.forEach((a) => {
      if (!o)
        return;
      let l = r.findWrapping(a.type), c;
      if (!l)
        return o = null;
      if (c = o.length && s.length && Am(l, s, a, o[o.length - 1], 0))
        o[o.length - 1] = c;
      else {
        o.length && (o[o.length - 1] = Nm(o[o.length - 1], s.length));
        let u = Mm(a, l);
        o.push(u), r = r.matchType(u.type), s = l;
      }
    }), o)
      return B.from(o);
  }
  return n;
}
function Mm(n, t, e = 0) {
  for (let i = t.length - 1; i >= e; i--)
    n = t[i].create(null, B.from(n));
  return n;
}
function Am(n, t, e, i, r) {
  if (r < n.length && r < t.length && n[r] == t[r]) {
    let s = Am(n, t, e, i.lastChild, r + 1);
    if (s)
      return i.copy(i.content.replaceChild(i.childCount - 1, s));
    if (i.contentMatchAt(i.childCount).matchType(r == n.length - 1 ? e.type : n[r + 1]))
      return i.copy(i.content.append(B.from(Mm(e, n, r + 1))));
  }
}
function Nm(n, t) {
  if (t == 0)
    return n;
  let e = n.content.replaceChild(n.childCount - 1, Nm(n.lastChild, t - 1)), i = n.contentMatchAt(n.childCount).fillBefore(B.empty, !0);
  return n.copy(e.append(i));
}
function Ac(n, t, e, i, r, s) {
  let o = t < 0 ? n.firstChild : n.lastChild, a = o.content;
  return n.childCount > 1 && (s = 0), r < i - 1 && (a = Ac(a, t, e, i, r + 1, s)), r >= e && (a = t < 0 ? o.contentMatchAt(0).fillBefore(a, s <= r).append(a) : a.append(o.contentMatchAt(o.childCount).fillBefore(B.empty, !0))), n.replaceChild(t < 0 ? 0 : n.childCount - 1, o.copy(a));
}
function Tf(n, t, e) {
  return t < n.openStart && (n = new Y(Ac(n.content, -1, t, n.openStart, 0, n.openEnd), t, n.openEnd)), e < n.openEnd && (n = new Y(Ac(n.content, 1, e, n.openEnd, 0, 0), n.openStart, e)), n;
}
const Lm = {
  thead: ["table"],
  tbody: ["table"],
  tfoot: ["table"],
  caption: ["table"],
  colgroup: ["table"],
  col: ["table", "colgroup"],
  tr: ["table", "tbody"],
  td: ["table", "tbody", "tr"],
  th: ["table", "tbody", "tr"]
};
let Ef = null;
function Rm() {
  return Ef || (Ef = document.implementation.createHTMLDocument("title"));
}
let Cl = null;
function fv(n) {
  let t = window.trustedTypes;
  return t ? (Cl || (Cl = t.createPolicy("ProseMirrorClipboard", { createHTML: (e) => e })), Cl.createHTML(n)) : n;
}
function hv(n) {
  let t = /^(\s*<meta [^>]*>)*/.exec(n);
  t && (n = n.slice(t[0].length));
  let e = Rm().createElement("div"), i = /<([a-z][^>\s]+)/i.exec(n), r;
  if ((r = i && Lm[i[1].toLowerCase()]) && (n = r.map((s) => "<" + s + ">").join("") + n + r.map((s) => "</" + s + ">").reverse().join("")), e.innerHTML = fv(n), r)
    for (let s = 0; s < r.length; s++)
      e = e.querySelector(r[s]) || e;
  return e;
}
function pv(n) {
  let t = n.querySelectorAll(ke ? "span:not([class]):not([style])" : "span.Apple-converted-space");
  for (let e = 0; e < t.length; e++) {
    let i = t[e];
    i.childNodes.length == 1 && i.textContent == " " && i.parentNode && i.parentNode.replaceChild(n.ownerDocument.createTextNode(" "), i);
  }
}
function mv(n, t) {
  if (!n.size)
    return n;
  let e = n.content.firstChild.type.schema, i;
  try {
    i = JSON.parse(t);
  } catch {
    return n;
  }
  let { content: r, openStart: s, openEnd: o } = n;
  for (let a = i.length - 2; a >= 0; a -= 2) {
    let l = e.nodes[i[a]];
    if (!l || l.hasRequiredAttrs())
      break;
    r = B.from(l.create(i[a + 1], r)), s++, o++;
  }
  return new Y(r, s, o);
}
const Re = {}, Ie = {}, gv = { touchstart: !0, touchmove: !0 };
class _v {
  constructor() {
    this.shiftKey = !1, this.mouseDown = null, this.lastKeyCode = null, this.lastKeyCodeTime = 0, this.lastClick = { time: 0, x: 0, y: 0, type: "" }, this.lastSelectionOrigin = null, this.lastSelectionTime = 0, this.lastIOSEnter = 0, this.lastIOSEnterFallbackTimeout = -1, this.lastFocus = 0, this.lastTouch = 0, this.lastChromeDelete = 0, this.composing = !1, this.compositionNode = null, this.composingTimeout = -1, this.compositionNodes = [], this.compositionEndedAt = -2e8, this.compositionID = 1, this.compositionPendingChanges = 0, this.domChangeCount = 0, this.eventHandlers = /* @__PURE__ */ Object.create(null), this.hideSelectionGuard = null;
  }
}
function bv(n) {
  for (let t in Re) {
    let e = Re[t];
    n.dom.addEventListener(t, n.input.eventHandlers[t] = (i) => {
      vv(n, i) && !vu(n, i) && (n.editable || !(i.type in Ie)) && e(n, i);
    }, gv[t] ? { passive: !0 } : void 0);
  }
  Le && n.dom.addEventListener("input", () => null), Nc(n);
}
function hi(n, t) {
  n.input.lastSelectionOrigin = t, n.input.lastSelectionTime = Date.now();
}
function yv(n) {
  n.domObserver.stop();
  for (let t in n.input.eventHandlers)
    n.dom.removeEventListener(t, n.input.eventHandlers[t]);
  clearTimeout(n.input.composingTimeout), clearTimeout(n.input.lastIOSEnterFallbackTimeout);
}
function Nc(n) {
  n.someProp("handleDOMEvents", (t) => {
    for (let e in t)
      n.input.eventHandlers[e] || n.dom.addEventListener(e, n.input.eventHandlers[e] = (i) => vu(n, i));
  });
}
function vu(n, t) {
  return n.someProp("handleDOMEvents", (e) => {
    let i = e[t.type];
    return i ? i(n, t) || t.defaultPrevented : !1;
  });
}
function vv(n, t) {
  if (!t.bubbles)
    return !0;
  if (t.defaultPrevented)
    return !1;
  for (let e = t.target; e != n.dom; e = e.parentNode)
    if (!e || e.nodeType == 11 || e.pmViewDesc && e.pmViewDesc.stopEvent(t))
      return !1;
  return !0;
}
function xv(n, t) {
  !vu(n, t) && Re[t.type] && (n.editable || !(t.type in Ie)) && Re[t.type](n, t);
}
Ie.keydown = (n, t) => {
  let e = t;
  if (n.input.shiftKey = e.keyCode == 16 || e.shiftKey, !Pm(n, e) && (n.input.lastKeyCode = e.keyCode, n.input.lastKeyCodeTime = Date.now(), !(qn && ke && e.keyCode == 13)))
    if (e.keyCode != 229 && n.domObserver.forceFlush(), Dr && e.keyCode == 13 && !e.ctrlKey && !e.altKey && !e.metaKey) {
      let i = Date.now();
      n.input.lastIOSEnter = i, n.input.lastIOSEnterFallbackTimeout = setTimeout(() => {
        n.input.lastIOSEnter == i && (n.someProp("handleKeyDown", (r) => r(n, Si(13, "Enter"))), n.input.lastIOSEnter = 0);
      }, 200);
    } else n.someProp("handleKeyDown", (i) => i(n, e)) || cv(n, e) ? e.preventDefault() : hi(n, "key");
};
Ie.keyup = (n, t) => {
  t.keyCode == 16 && (n.input.shiftKey = !1);
};
Ie.keypress = (n, t) => {
  let e = t;
  if (Pm(n, e) || !e.charCode || e.ctrlKey && !e.altKey || on && e.metaKey)
    return;
  if (n.someProp("handleKeyPress", (r) => r(n, e))) {
    e.preventDefault();
    return;
  }
  let i = n.state.selection;
  if (!(i instanceof ct) || !i.$from.sameParent(i.$to)) {
    let r = String.fromCharCode(e.charCode);
    !/[\r\n]/.test(r) && !n.someProp("handleTextInput", (s) => s(n, i.$from.pos, i.$to.pos, r)) && n.dispatch(n.state.tr.insertText(r).scrollIntoView()), e.preventDefault();
  }
};
function Za(n) {
  return { left: n.clientX, top: n.clientY };
}
function wv(n, t) {
  let e = t.x - n.clientX, i = t.y - n.clientY;
  return e * e + i * i < 100;
}
function xu(n, t, e, i, r) {
  if (i == -1)
    return !1;
  let s = n.state.doc.resolve(i);
  for (let o = s.depth + 1; o > 0; o--)
    if (n.someProp(t, (a) => o > s.depth ? a(n, e, s.nodeAfter, s.before(o), r, !0) : a(n, e, s.node(o), s.before(o), r, !1)))
      return !0;
  return !1;
}
function xr(n, t, e) {
  if (n.focused || n.focus(), n.state.selection.eq(t))
    return;
  let i = n.state.tr.setSelection(t);
  i.setMeta("pointer", !0), n.dispatch(i);
}
function kv(n, t) {
  if (t == -1)
    return !1;
  let e = n.state.doc.resolve(t), i = e.nodeAfter;
  return i && i.isAtom && ot.isSelectable(i) ? (xr(n, new ot(e)), !0) : !1;
}
function Sv(n, t) {
  if (t == -1)
    return !1;
  let e = n.state.selection, i, r;
  e instanceof ot && (i = e.node);
  let s = n.state.doc.resolve(t);
  for (let o = s.depth + 1; o > 0; o--) {
    let a = o > s.depth ? s.nodeAfter : s.node(o);
    if (ot.isSelectable(a)) {
      i && e.$from.depth > 0 && o >= e.$from.depth && s.before(e.$from.depth + 1) == e.$from.pos ? r = s.before(e.$from.depth) : r = s.before(o);
      break;
    }
  }
  return r != null ? (xr(n, ot.create(n.state.doc, r)), !0) : !1;
}
function Cv(n, t, e, i, r) {
  return xu(n, "handleClickOn", t, e, i) || n.someProp("handleClick", (s) => s(n, t, i)) || (r ? Sv(n, e) : kv(n, e));
}
function Tv(n, t, e, i) {
  return xu(n, "handleDoubleClickOn", t, e, i) || n.someProp("handleDoubleClick", (r) => r(n, t, i));
}
function Ev(n, t, e, i) {
  return xu(n, "handleTripleClickOn", t, e, i) || n.someProp("handleTripleClick", (r) => r(n, t, i)) || Ov(n, e, i);
}
function Ov(n, t, e) {
  if (e.button != 0)
    return !1;
  let i = n.state.doc;
  if (t == -1)
    return i.inlineContent ? (xr(n, ct.create(i, 0, i.content.size)), !0) : !1;
  let r = i.resolve(t);
  for (let s = r.depth + 1; s > 0; s--) {
    let o = s > r.depth ? r.nodeAfter : r.node(s), a = r.before(s);
    if (o.inlineContent)
      xr(n, ct.create(i, a + 1, a + 1 + o.content.size));
    else if (ot.isSelectable(o))
      xr(n, ot.create(i, a));
    else
      continue;
    return !0;
  }
}
function wu(n) {
  return oa(n);
}
const Im = on ? "metaKey" : "ctrlKey";
Re.mousedown = (n, t) => {
  let e = t;
  n.input.shiftKey = e.shiftKey;
  let i = wu(n), r = Date.now(), s = "singleClick";
  r - n.input.lastClick.time < 500 && wv(e, n.input.lastClick) && !e[Im] && (n.input.lastClick.type == "singleClick" ? s = "doubleClick" : n.input.lastClick.type == "doubleClick" && (s = "tripleClick")), n.input.lastClick = { time: r, x: e.clientX, y: e.clientY, type: s };
  let o = n.posAtCoords(Za(e));
  o && (s == "singleClick" ? (n.input.mouseDown && n.input.mouseDown.done(), n.input.mouseDown = new Mv(n, o, e, !!i)) : (s == "doubleClick" ? Tv : Ev)(n, o.pos, o.inside, e) ? e.preventDefault() : hi(n, "pointer"));
};
class Mv {
  constructor(t, e, i, r) {
    this.view = t, this.pos = e, this.event = i, this.flushed = r, this.delayedSelectionSync = !1, this.mightDrag = null, this.startDoc = t.state.doc, this.selectNode = !!i[Im], this.allowDefault = i.shiftKey;
    let s, o;
    if (e.inside > -1)
      s = t.state.doc.nodeAt(e.inside), o = e.inside;
    else {
      let u = t.state.doc.resolve(e.pos);
      s = u.parent, o = u.depth ? u.before() : 0;
    }
    const a = r ? null : i.target, l = a ? t.docView.nearestDesc(a, !0) : null;
    this.target = l && l.dom.nodeType == 1 ? l.dom : null;
    let { selection: c } = t.state;
    (i.button == 0 && s.type.spec.draggable && s.type.spec.selectable !== !1 || c instanceof ot && c.from <= o && c.to > o) && (this.mightDrag = {
      node: s,
      pos: o,
      addAttr: !!(this.target && !this.target.draggable),
      setUneditable: !!(this.target && _n && !this.target.hasAttribute("contentEditable"))
    }), this.target && this.mightDrag && (this.mightDrag.addAttr || this.mightDrag.setUneditable) && (this.view.domObserver.stop(), this.mightDrag.addAttr && (this.target.draggable = !0), this.mightDrag.setUneditable && setTimeout(() => {
      this.view.input.mouseDown == this && this.target.setAttribute("contentEditable", "false");
    }, 20), this.view.domObserver.start()), t.root.addEventListener("mouseup", this.up = this.up.bind(this)), t.root.addEventListener("mousemove", this.move = this.move.bind(this)), hi(t, "pointer");
  }
  done() {
    this.view.root.removeEventListener("mouseup", this.up), this.view.root.removeEventListener("mousemove", this.move), this.mightDrag && this.target && (this.view.domObserver.stop(), this.mightDrag.addAttr && this.target.removeAttribute("draggable"), this.mightDrag.setUneditable && this.target.removeAttribute("contentEditable"), this.view.domObserver.start()), this.delayedSelectionSync && setTimeout(() => Gn(this.view)), this.view.input.mouseDown = null;
  }
  up(t) {
    if (this.done(), !this.view.dom.contains(t.target))
      return;
    let e = this.pos;
    this.view.state.doc != this.startDoc && (e = this.view.posAtCoords(Za(t))), this.updateAllowDefault(t), this.allowDefault || !e ? hi(this.view, "pointer") : Cv(this.view, e.pos, e.inside, t, this.selectNode) ? t.preventDefault() : t.button == 0 && (this.flushed || // Safari ignores clicks on draggable elements
    Le && this.mightDrag && !this.mightDrag.node.isAtom || // Chrome will sometimes treat a node selection as a
    // cursor, but still report that the node is selected
    // when asked through getSelection. You'll then get a
    // situation where clicking at the point where that
    // (hidden) cursor is doesn't change the selection, and
    // thus doesn't get a reaction from ProseMirror. This
    // works around that.
    ke && !this.view.state.selection.visible && Math.min(Math.abs(e.pos - this.view.state.selection.from), Math.abs(e.pos - this.view.state.selection.to)) <= 2) ? (xr(this.view, ft.near(this.view.state.doc.resolve(e.pos))), t.preventDefault()) : hi(this.view, "pointer");
  }
  move(t) {
    this.updateAllowDefault(t), hi(this.view, "pointer"), t.buttons == 0 && this.done();
  }
  updateAllowDefault(t) {
    !this.allowDefault && (Math.abs(this.event.x - t.clientX) > 4 || Math.abs(this.event.y - t.clientY) > 4) && (this.allowDefault = !0);
  }
}
Re.touchstart = (n) => {
  n.input.lastTouch = Date.now(), wu(n), hi(n, "pointer");
};
Re.touchmove = (n) => {
  n.input.lastTouch = Date.now(), hi(n, "pointer");
};
Re.contextmenu = (n) => wu(n);
function Pm(n, t) {
  return n.composing ? !0 : Le && Math.abs(t.timeStamp - n.input.compositionEndedAt) < 500 ? (n.input.compositionEndedAt = -2e8, !0) : !1;
}
const Av = qn ? 5e3 : -1;
Ie.compositionstart = Ie.compositionupdate = (n) => {
  if (!n.composing) {
    n.domObserver.flush();
    let { state: t } = n, e = t.selection.$to;
    if (t.selection instanceof ct && (t.storedMarks || !e.textOffset && e.parentOffset && e.nodeBefore.marks.some((i) => i.type.spec.inclusive === !1)))
      n.markCursor = n.state.storedMarks || e.marks(), oa(n, !0), n.markCursor = null;
    else if (oa(n, !t.selection.empty), _n && t.selection.empty && e.parentOffset && !e.textOffset && e.nodeBefore.marks.length) {
      let i = n.domSelectionRange();
      for (let r = i.focusNode, s = i.focusOffset; r && r.nodeType == 1 && s != 0; ) {
        let o = s < 0 ? r.lastChild : r.childNodes[s - 1];
        if (!o)
          break;
        if (o.nodeType == 3) {
          let a = n.domSelection();
          a && a.collapse(o, o.nodeValue.length);
          break;
        } else
          r = o, s = -1;
      }
    }
    n.input.composing = !0;
  }
  Dm(n, Av);
};
Ie.compositionend = (n, t) => {
  n.composing && (n.input.composing = !1, n.input.compositionEndedAt = t.timeStamp, n.input.compositionPendingChanges = n.domObserver.pendingRecords().length ? n.input.compositionID : 0, n.input.compositionNode = null, n.input.compositionPendingChanges && Promise.resolve().then(() => n.domObserver.flush()), n.input.compositionID++, Dm(n, 20));
};
function Dm(n, t) {
  clearTimeout(n.input.composingTimeout), t > -1 && (n.input.composingTimeout = setTimeout(() => oa(n), t));
}
function $m(n) {
  for (n.composing && (n.input.composing = !1, n.input.compositionEndedAt = Lv()); n.input.compositionNodes.length > 0; )
    n.input.compositionNodes.pop().markParentsDirty();
}
function Nv(n) {
  let t = n.domSelectionRange();
  if (!t.focusNode)
    return null;
  let e = ky(t.focusNode, t.focusOffset), i = Sy(t.focusNode, t.focusOffset);
  if (e && i && e != i) {
    let r = i.pmViewDesc, s = n.domObserver.lastChangedTextNode;
    if (e == s || i == s)
      return s;
    if (!r || !r.isText(i.nodeValue))
      return i;
    if (n.input.compositionNode == i) {
      let o = e.pmViewDesc;
      if (!(!o || !o.isText(e.nodeValue)))
        return i;
    }
  }
  return e || i;
}
function Lv() {
  let n = document.createEvent("Event");
  return n.initEvent("event", !0, !0), n.timeStamp;
}
function oa(n, t = !1) {
  if (!(qn && n.domObserver.flushingSoon >= 0)) {
    if (n.domObserver.forceFlush(), $m(n), t || n.docView && n.docView.dirty) {
      let e = bu(n);
      return e && !e.eq(n.state.selection) ? n.dispatch(n.state.tr.setSelection(e)) : (n.markCursor || t) && !n.state.selection.empty ? n.dispatch(n.state.tr.deleteSelection()) : n.updateState(n.state), !0;
    }
    return !1;
  }
}
function Rv(n, t) {
  if (!n.dom.parentNode)
    return;
  let e = n.dom.parentNode.appendChild(document.createElement("div"));
  e.appendChild(t), e.style.cssText = "position: fixed; left: -10000px; top: 10px";
  let i = getSelection(), r = document.createRange();
  r.selectNodeContents(t), n.dom.blur(), i.removeAllRanges(), i.addRange(r), setTimeout(() => {
    e.parentNode && e.parentNode.removeChild(e), n.focus();
  }, 50);
}
const Ps = Fe && pi < 15 || Dr && My < 604;
Re.copy = Ie.cut = (n, t) => {
  let e = t, i = n.state.selection, r = e.type == "cut";
  if (i.empty)
    return;
  let s = Ps ? null : e.clipboardData, o = i.content(), { dom: a, text: l } = Em(n, o);
  s ? (e.preventDefault(), s.clearData(), s.setData("text/html", a.innerHTML), s.setData("text/plain", l)) : Rv(n, a), r && n.dispatch(n.state.tr.deleteSelection().scrollIntoView().setMeta("uiEvent", "cut"));
};
function Iv(n) {
  return n.openStart == 0 && n.openEnd == 0 && n.content.childCount == 1 ? n.content.firstChild : null;
}
function Pv(n, t) {
  if (!n.dom.parentNode)
    return;
  let e = n.input.shiftKey || n.state.selection.$from.parent.type.spec.code, i = n.dom.parentNode.appendChild(document.createElement(e ? "textarea" : "div"));
  e || (i.contentEditable = "true"), i.style.cssText = "position: fixed; left: -10000px; top: 10px", i.focus();
  let r = n.input.shiftKey && n.input.lastKeyCode != 45;
  setTimeout(() => {
    n.focus(), i.parentNode && i.parentNode.removeChild(i), e ? Ds(n, i.value, null, r, t) : Ds(n, i.textContent, i.innerHTML, r, t);
  }, 50);
}
function Ds(n, t, e, i, r) {
  let s = Om(n, t, e, i, n.state.selection.$from);
  if (n.someProp("handlePaste", (l) => l(n, r, s || Y.empty)))
    return !0;
  if (!s)
    return !1;
  let o = Iv(s), a = o ? n.state.tr.replaceSelectionWith(o, i) : n.state.tr.replaceSelection(s);
  return n.dispatch(a.scrollIntoView().setMeta("paste", !0).setMeta("uiEvent", "paste")), !0;
}
function Bm(n) {
  let t = n.getData("text/plain") || n.getData("Text");
  if (t)
    return t;
  let e = n.getData("text/uri-list");
  return e ? e.replace(/\r?\n/g, " ") : "";
}
Ie.paste = (n, t) => {
  let e = t;
  if (n.composing && !qn)
    return;
  let i = Ps ? null : e.clipboardData, r = n.input.shiftKey && n.input.lastKeyCode != 45;
  i && Ds(n, Bm(i), i.getData("text/html"), r, e) ? e.preventDefault() : Pv(n, e);
};
class zm {
  constructor(t, e, i) {
    this.slice = t, this.move = e, this.node = i;
  }
}
const Hm = on ? "altKey" : "ctrlKey";
Re.dragstart = (n, t) => {
  let e = t, i = n.input.mouseDown;
  if (i && i.done(), !e.dataTransfer)
    return;
  let r = n.state.selection, s = r.empty ? null : n.posAtCoords(Za(e)), o;
  if (!(s && s.pos >= r.from && s.pos <= (r instanceof ot ? r.to - 1 : r.to))) {
    if (i && i.mightDrag)
      o = ot.create(n.state.doc, i.mightDrag.pos);
    else if (e.target && e.target.nodeType == 1) {
      let d = n.docView.nearestDesc(e.target, !0);
      d && d.node.type.spec.draggable && d != n.docView && (o = ot.create(n.state.doc, d.posBefore));
    }
  }
  let a = (o || n.state.selection).content(), { dom: l, text: c, slice: u } = Em(n, a);
  (!e.dataTransfer.files.length || !ke || dm > 120) && e.dataTransfer.clearData(), e.dataTransfer.setData(Ps ? "Text" : "text/html", l.innerHTML), e.dataTransfer.effectAllowed = "copyMove", Ps || e.dataTransfer.setData("text/plain", c), n.dragging = new zm(u, !e[Hm], o);
};
Re.dragend = (n) => {
  let t = n.dragging;
  window.setTimeout(() => {
    n.dragging == t && (n.dragging = null);
  }, 50);
};
Ie.dragover = Ie.dragenter = (n, t) => t.preventDefault();
Ie.drop = (n, t) => {
  let e = t, i = n.dragging;
  if (n.dragging = null, !e.dataTransfer)
    return;
  let r = n.posAtCoords(Za(e));
  if (!r)
    return;
  let s = n.state.doc.resolve(r.pos), o = i && i.slice;
  o ? n.someProp("transformPasted", (p) => {
    o = p(o, n);
  }) : o = Om(n, Bm(e.dataTransfer), Ps ? null : e.dataTransfer.getData("text/html"), !1, s);
  let a = !!(i && !e[Hm]);
  if (n.someProp("handleDrop", (p) => p(n, e, o || Y.empty, a))) {
    e.preventDefault();
    return;
  }
  if (!o)
    return;
  e.preventDefault();
  let l = o ? nm(n.state.doc, s.pos, o) : s.pos;
  l == null && (l = s.pos);
  let c = n.state.tr;
  if (a) {
    let { node: p } = i;
    p ? p.replace(c) : c.deleteSelection();
  }
  let u = c.mapping.map(l), d = o.openStart == 0 && o.openEnd == 0 && o.content.childCount == 1, f = c.doc;
  if (d ? c.replaceRangeWith(u, u, o.content.firstChild) : c.replaceRange(u, u, o), c.doc.eq(f))
    return;
  let h = c.doc.resolve(u);
  if (d && ot.isSelectable(o.content.firstChild) && h.nodeAfter && h.nodeAfter.sameMarkup(o.content.firstChild))
    c.setSelection(new ot(h));
  else {
    let p = c.mapping.map(l);
    c.mapping.maps[c.mapping.maps.length - 1].forEach((_, g, m, y) => p = y), c.setSelection(yu(n, h, c.doc.resolve(p)));
  }
  n.focus(), n.dispatch(c.setMeta("uiEvent", "drop"));
};
Re.focus = (n) => {
  n.input.lastFocus = Date.now(), n.focused || (n.domObserver.stop(), n.dom.classList.add("ProseMirror-focused"), n.domObserver.start(), n.focused = !0, setTimeout(() => {
    n.docView && n.hasFocus() && !n.domObserver.currentSelection.eq(n.domSelectionRange()) && Gn(n);
  }, 20));
};
Re.blur = (n, t) => {
  let e = t;
  n.focused && (n.domObserver.stop(), n.dom.classList.remove("ProseMirror-focused"), n.domObserver.start(), e.relatedTarget && n.dom.contains(e.relatedTarget) && n.domObserver.currentSelection.clear(), n.focused = !1);
};
Re.beforeinput = (n, t) => {
  if (ke && qn && t.inputType == "deleteContentBackward") {
    n.domObserver.flushSoon();
    let { domChangeCount: i } = n.input;
    setTimeout(() => {
      if (n.input.domChangeCount != i || (n.dom.blur(), n.focus(), n.someProp("handleKeyDown", (s) => s(n, Si(8, "Backspace")))))
        return;
      let { $cursor: r } = n.state.selection;
      r && r.pos > 0 && n.dispatch(n.state.tr.delete(r.pos - 1, r.pos).scrollIntoView());
    }, 50);
  }
};
for (let n in Ie)
  Re[n] = Ie[n];
function $s(n, t) {
  if (n == t)
    return !0;
  for (let e in n)
    if (n[e] !== t[e])
      return !1;
  for (let e in t)
    if (!(e in n))
      return !1;
  return !0;
}
class aa {
  constructor(t, e) {
    this.toDOM = t, this.spec = e || zi, this.side = this.spec.side || 0;
  }
  map(t, e, i, r) {
    let { pos: s, deleted: o } = t.mapResult(e.from + r, this.side < 0 ? -1 : 1);
    return o ? null : new Ne(s - i, s - i, this);
  }
  valid() {
    return !0;
  }
  eq(t) {
    return this == t || t instanceof aa && (this.spec.key && this.spec.key == t.spec.key || this.toDOM == t.toDOM && $s(this.spec, t.spec));
  }
  destroy(t) {
    this.spec.destroy && this.spec.destroy(t);
  }
}
class gi {
  constructor(t, e) {
    this.attrs = t, this.spec = e || zi;
  }
  map(t, e, i, r) {
    let s = t.map(e.from + r, this.spec.inclusiveStart ? -1 : 1) - i, o = t.map(e.to + r, this.spec.inclusiveEnd ? 1 : -1) - i;
    return s >= o ? null : new Ne(s, o, this);
  }
  valid(t, e) {
    return e.from < e.to;
  }
  eq(t) {
    return this == t || t instanceof gi && $s(this.attrs, t.attrs) && $s(this.spec, t.spec);
  }
  static is(t) {
    return t.type instanceof gi;
  }
  destroy() {
  }
}
class ku {
  constructor(t, e) {
    this.attrs = t, this.spec = e || zi;
  }
  map(t, e, i, r) {
    let s = t.mapResult(e.from + r, 1);
    if (s.deleted)
      return null;
    let o = t.mapResult(e.to + r, -1);
    return o.deleted || o.pos <= s.pos ? null : new Ne(s.pos - i, o.pos - i, this);
  }
  valid(t, e) {
    let { index: i, offset: r } = t.content.findIndex(e.from), s;
    return r == e.from && !(s = t.child(i)).isText && r + s.nodeSize == e.to;
  }
  eq(t) {
    return this == t || t instanceof ku && $s(this.attrs, t.attrs) && $s(this.spec, t.spec);
  }
  destroy() {
  }
}
class Ne {
  /**
  @internal
  */
  constructor(t, e, i) {
    this.from = t, this.to = e, this.type = i;
  }
  /**
  @internal
  */
  copy(t, e) {
    return new Ne(t, e, this.type);
  }
  /**
  @internal
  */
  eq(t, e = 0) {
    return this.type.eq(t.type) && this.from + e == t.from && this.to + e == t.to;
  }
  /**
  @internal
  */
  map(t, e, i) {
    return this.type.map(t, this, e, i);
  }
  /**
  Creates a widget decoration, which is a DOM node that's shown in
  the document at the given position. It is recommended that you
  delay rendering the widget by passing a function that will be
  called when the widget is actually drawn in a view, but you can
  also directly pass a DOM node. `getPos` can be used to find the
  widget's current document position.
  */
  static widget(t, e, i) {
    return new Ne(t, t, new aa(e, i));
  }
  /**
  Creates an inline decoration, which adds the given attributes to
  each inline node between `from` and `to`.
  */
  static inline(t, e, i, r) {
    return new Ne(t, e, new gi(i, r));
  }
  /**
  Creates a node decoration. `from` and `to` should point precisely
  before and after a node in the document. That node, and only that
  node, will receive the given attributes.
  */
  static node(t, e, i, r) {
    return new Ne(t, e, new ku(i, r));
  }
  /**
  The spec provided when creating this decoration. Can be useful
  if you've stored extra information in that object.
  */
  get spec() {
    return this.type.spec;
  }
  /**
  @internal
  */
  get inline() {
    return this.type instanceof gi;
  }
  /**
  @internal
  */
  get widget() {
    return this.type instanceof aa;
  }
}
const cr = [], zi = {};
class qt {
  /**
  @internal
  */
  constructor(t, e) {
    this.local = t.length ? t : cr, this.children = e.length ? e : cr;
  }
  /**
  Create a set of decorations, using the structure of the given
  document. This will consume (modify) the `decorations` array, so
  you must make a copy if you want need to preserve that.
  */
  static create(t, e) {
    return e.length ? la(e, t, 0, zi) : we;
  }
  /**
  Find all decorations in this set which touch the given range
  (including decorations that start or end directly at the
  boundaries) and match the given predicate on their spec. When
  `start` and `end` are omitted, all decorations in the set are
  considered. When `predicate` isn't given, all decorations are
  assumed to match.
  */
  find(t, e, i) {
    let r = [];
    return this.findInner(t ?? 0, e ?? 1e9, r, 0, i), r;
  }
  findInner(t, e, i, r, s) {
    for (let o = 0; o < this.local.length; o++) {
      let a = this.local[o];
      a.from <= e && a.to >= t && (!s || s(a.spec)) && i.push(a.copy(a.from + r, a.to + r));
    }
    for (let o = 0; o < this.children.length; o += 3)
      if (this.children[o] < e && this.children[o + 1] > t) {
        let a = this.children[o] + 1;
        this.children[o + 2].findInner(t - a, e - a, i, r + a, s);
      }
  }
  /**
  Map the set of decorations in response to a change in the
  document.
  */
  map(t, e, i) {
    return this == we || t.maps.length == 0 ? this : this.mapInner(t, e, 0, 0, i || zi);
  }
  /**
  @internal
  */
  mapInner(t, e, i, r, s) {
    let o;
    for (let a = 0; a < this.local.length; a++) {
      let l = this.local[a].map(t, i, r);
      l && l.type.valid(e, l) ? (o || (o = [])).push(l) : s.onRemove && s.onRemove(this.local[a].spec);
    }
    return this.children.length ? Dv(this.children, o || [], t, e, i, r, s) : o ? new qt(o.sort(Hi), cr) : we;
  }
  /**
  Add the given array of decorations to the ones in the set,
  producing a new set. Consumes the `decorations` array. Needs
  access to the current document to create the appropriate tree
  structure.
  */
  add(t, e) {
    return e.length ? this == we ? qt.create(t, e) : this.addInner(t, e, 0) : this;
  }
  addInner(t, e, i) {
    let r, s = 0;
    t.forEach((a, l) => {
      let c = l + i, u;
      if (u = Vm(e, a, c)) {
        for (r || (r = this.children.slice()); s < r.length && r[s] < l; )
          s += 3;
        r[s] == l ? r[s + 2] = r[s + 2].addInner(a, u, c + 1) : r.splice(s, 0, l, l + a.nodeSize, la(u, a, c + 1, zi)), s += 3;
      }
    });
    let o = Fm(s ? jm(e) : e, -i);
    for (let a = 0; a < o.length; a++)
      o[a].type.valid(t, o[a]) || o.splice(a--, 1);
    return new qt(o.length ? this.local.concat(o).sort(Hi) : this.local, r || this.children);
  }
  /**
  Create a new set that contains the decorations in this set, minus
  the ones in the given array.
  */
  remove(t) {
    return t.length == 0 || this == we ? this : this.removeInner(t, 0);
  }
  removeInner(t, e) {
    let i = this.children, r = this.local;
    for (let s = 0; s < i.length; s += 3) {
      let o, a = i[s] + e, l = i[s + 1] + e;
      for (let u = 0, d; u < t.length; u++)
        (d = t[u]) && d.from > a && d.to < l && (t[u] = null, (o || (o = [])).push(d));
      if (!o)
        continue;
      i == this.children && (i = this.children.slice());
      let c = i[s + 2].removeInner(o, a + 1);
      c != we ? i[s + 2] = c : (i.splice(s, 3), s -= 3);
    }
    if (r.length) {
      for (let s = 0, o; s < t.length; s++)
        if (o = t[s])
          for (let a = 0; a < r.length; a++)
            r[a].eq(o, e) && (r == this.local && (r = this.local.slice()), r.splice(a--, 1));
    }
    return i == this.children && r == this.local ? this : r.length || i.length ? new qt(r, i) : we;
  }
  forChild(t, e) {
    if (this == we)
      return this;
    if (e.isLeaf)
      return qt.empty;
    let i, r;
    for (let a = 0; a < this.children.length; a += 3)
      if (this.children[a] >= t) {
        this.children[a] == t && (i = this.children[a + 2]);
        break;
      }
    let s = t + 1, o = s + e.content.size;
    for (let a = 0; a < this.local.length; a++) {
      let l = this.local[a];
      if (l.from < o && l.to > s && l.type instanceof gi) {
        let c = Math.max(s, l.from) - s, u = Math.min(o, l.to) - s;
        c < u && (r || (r = [])).push(l.copy(c, u));
      }
    }
    if (r) {
      let a = new qt(r.sort(Hi), cr);
      return i ? new si([a, i]) : a;
    }
    return i || we;
  }
  /**
  @internal
  */
  eq(t) {
    if (this == t)
      return !0;
    if (!(t instanceof qt) || this.local.length != t.local.length || this.children.length != t.children.length)
      return !1;
    for (let e = 0; e < this.local.length; e++)
      if (!this.local[e].eq(t.local[e]))
        return !1;
    for (let e = 0; e < this.children.length; e += 3)
      if (this.children[e] != t.children[e] || this.children[e + 1] != t.children[e + 1] || !this.children[e + 2].eq(t.children[e + 2]))
        return !1;
    return !0;
  }
  /**
  @internal
  */
  locals(t) {
    return Su(this.localsInner(t));
  }
  /**
  @internal
  */
  localsInner(t) {
    if (this == we)
      return cr;
    if (t.inlineContent || !this.local.some(gi.is))
      return this.local;
    let e = [];
    for (let i = 0; i < this.local.length; i++)
      this.local[i].type instanceof gi || e.push(this.local[i]);
    return e;
  }
  forEachSet(t) {
    t(this);
  }
}
qt.empty = new qt([], []);
qt.removeOverlap = Su;
const we = qt.empty;
class si {
  constructor(t) {
    this.members = t;
  }
  map(t, e) {
    const i = this.members.map((r) => r.map(t, e, zi));
    return si.from(i);
  }
  forChild(t, e) {
    if (e.isLeaf)
      return qt.empty;
    let i = [];
    for (let r = 0; r < this.members.length; r++) {
      let s = this.members[r].forChild(t, e);
      s != we && (s instanceof si ? i = i.concat(s.members) : i.push(s));
    }
    return si.from(i);
  }
  eq(t) {
    if (!(t instanceof si) || t.members.length != this.members.length)
      return !1;
    for (let e = 0; e < this.members.length; e++)
      if (!this.members[e].eq(t.members[e]))
        return !1;
    return !0;
  }
  locals(t) {
    let e, i = !0;
    for (let r = 0; r < this.members.length; r++) {
      let s = this.members[r].localsInner(t);
      if (s.length)
        if (!e)
          e = s;
        else {
          i && (e = e.slice(), i = !1);
          for (let o = 0; o < s.length; o++)
            e.push(s[o]);
        }
    }
    return e ? Su(i ? e : e.sort(Hi)) : cr;
  }
  // Create a group for the given array of decoration sets, or return
  // a single set when possible.
  static from(t) {
    switch (t.length) {
      case 0:
        return we;
      case 1:
        return t[0];
      default:
        return new si(t.every((e) => e instanceof qt) ? t : t.reduce((e, i) => e.concat(i instanceof qt ? i : i.members), []));
    }
  }
  forEachSet(t) {
    for (let e = 0; e < this.members.length; e++)
      this.members[e].forEachSet(t);
  }
}
function Dv(n, t, e, i, r, s, o) {
  let a = n.slice();
  for (let c = 0, u = s; c < e.maps.length; c++) {
    let d = 0;
    e.maps[c].forEach((f, h, p, _) => {
      let g = _ - p - (h - f);
      for (let m = 0; m < a.length; m += 3) {
        let y = a[m + 1];
        if (y < 0 || f > y + u - d)
          continue;
        let x = a[m] + u - d;
        h >= x ? a[m + 1] = f <= x ? -2 : -1 : f >= u && g && (a[m] += g, a[m + 1] += g);
      }
      d += g;
    }), u = e.maps[c].map(u, -1);
  }
  let l = !1;
  for (let c = 0; c < a.length; c += 3)
    if (a[c + 1] < 0) {
      if (a[c + 1] == -2) {
        l = !0, a[c + 1] = -1;
        continue;
      }
      let u = e.map(n[c] + s), d = u - r;
      if (d < 0 || d >= i.content.size) {
        l = !0;
        continue;
      }
      let f = e.map(n[c + 1] + s, -1), h = f - r, { index: p, offset: _ } = i.content.findIndex(d), g = i.maybeChild(p);
      if (g && _ == d && _ + g.nodeSize == h) {
        let m = a[c + 2].mapInner(e, g, u + 1, n[c] + s + 1, o);
        m != we ? (a[c] = d, a[c + 1] = h, a[c + 2] = m) : (a[c + 1] = -2, l = !0);
      } else
        l = !0;
    }
  if (l) {
    let c = $v(a, n, t, e, r, s, o), u = la(c, i, 0, o);
    t = u.local;
    for (let d = 0; d < a.length; d += 3)
      a[d + 1] < 0 && (a.splice(d, 3), d -= 3);
    for (let d = 0, f = 0; d < u.children.length; d += 3) {
      let h = u.children[d];
      for (; f < a.length && a[f] < h; )
        f += 3;
      a.splice(f, 0, u.children[d], u.children[d + 1], u.children[d + 2]);
    }
  }
  return new qt(t.sort(Hi), a);
}
function Fm(n, t) {
  if (!t || !n.length)
    return n;
  let e = [];
  for (let i = 0; i < n.length; i++) {
    let r = n[i];
    e.push(new Ne(r.from + t, r.to + t, r.type));
  }
  return e;
}
function $v(n, t, e, i, r, s, o) {
  function a(l, c) {
    for (let u = 0; u < l.local.length; u++) {
      let d = l.local[u].map(i, r, c);
      d ? e.push(d) : o.onRemove && o.onRemove(l.local[u].spec);
    }
    for (let u = 0; u < l.children.length; u += 3)
      a(l.children[u + 2], l.children[u] + c + 1);
  }
  for (let l = 0; l < n.length; l += 3)
    n[l + 1] == -1 && a(n[l + 2], t[l] + s + 1);
  return e;
}
function Vm(n, t, e) {
  if (t.isLeaf)
    return null;
  let i = e + t.nodeSize, r = null;
  for (let s = 0, o; s < n.length; s++)
    (o = n[s]) && o.from > e && o.to < i && ((r || (r = [])).push(o), n[s] = null);
  return r;
}
function jm(n) {
  let t = [];
  for (let e = 0; e < n.length; e++)
    n[e] != null && t.push(n[e]);
  return t;
}
function la(n, t, e, i) {
  let r = [], s = !1;
  t.forEach((a, l) => {
    let c = Vm(n, a, l + e);
    if (c) {
      s = !0;
      let u = la(c, a, e + l + 1, i);
      u != we && r.push(l, l + a.nodeSize, u);
    }
  });
  let o = Fm(s ? jm(n) : n, -e).sort(Hi);
  for (let a = 0; a < o.length; a++)
    o[a].type.valid(t, o[a]) || (i.onRemove && i.onRemove(o[a].spec), o.splice(a--, 1));
  return o.length || r.length ? new qt(o, r) : we;
}
function Hi(n, t) {
  return n.from - t.from || n.to - t.to;
}
function Su(n) {
  let t = n;
  for (let e = 0; e < t.length - 1; e++) {
    let i = t[e];
    if (i.from != i.to)
      for (let r = e + 1; r < t.length; r++) {
        let s = t[r];
        if (s.from == i.from) {
          s.to != i.to && (t == n && (t = n.slice()), t[r] = s.copy(s.from, i.to), Of(t, r + 1, s.copy(i.to, s.to)));
          continue;
        } else {
          s.from < i.to && (t == n && (t = n.slice()), t[e] = i.copy(i.from, s.from), Of(t, r, i.copy(s.from, i.to)));
          break;
        }
      }
  }
  return t;
}
function Of(n, t, e) {
  for (; t < n.length && Hi(e, n[t]) > 0; )
    t++;
  n.splice(t, 0, e);
}
function Tl(n) {
  let t = [];
  return n.someProp("decorations", (e) => {
    let i = e(n.state);
    i && i != we && t.push(i);
  }), n.cursorWrapper && t.push(qt.create(n.state.doc, [n.cursorWrapper.deco])), si.from(t);
}
const Bv = {
  childList: !0,
  characterData: !0,
  characterDataOldValue: !0,
  attributes: !0,
  attributeOldValue: !0,
  subtree: !0
}, zv = Fe && pi <= 11;
class Hv {
  constructor() {
    this.anchorNode = null, this.anchorOffset = 0, this.focusNode = null, this.focusOffset = 0;
  }
  set(t) {
    this.anchorNode = t.anchorNode, this.anchorOffset = t.anchorOffset, this.focusNode = t.focusNode, this.focusOffset = t.focusOffset;
  }
  clear() {
    this.anchorNode = this.focusNode = null;
  }
  eq(t) {
    return t.anchorNode == this.anchorNode && t.anchorOffset == this.anchorOffset && t.focusNode == this.focusNode && t.focusOffset == this.focusOffset;
  }
}
class Fv {
  constructor(t, e) {
    this.view = t, this.handleDOMChange = e, this.queue = [], this.flushingSoon = -1, this.observer = null, this.currentSelection = new Hv(), this.onCharData = null, this.suppressingSelectionUpdates = !1, this.lastChangedTextNode = null, this.observer = window.MutationObserver && new window.MutationObserver((i) => {
      for (let r = 0; r < i.length; r++)
        this.queue.push(i[r]);
      Fe && pi <= 11 && i.some((r) => r.type == "childList" && r.removedNodes.length || r.type == "characterData" && r.oldValue.length > r.target.nodeValue.length) ? this.flushSoon() : this.flush();
    }), zv && (this.onCharData = (i) => {
      this.queue.push({ target: i.target, type: "characterData", oldValue: i.prevValue }), this.flushSoon();
    }), this.onSelectionChange = this.onSelectionChange.bind(this);
  }
  flushSoon() {
    this.flushingSoon < 0 && (this.flushingSoon = window.setTimeout(() => {
      this.flushingSoon = -1, this.flush();
    }, 20));
  }
  forceFlush() {
    this.flushingSoon > -1 && (window.clearTimeout(this.flushingSoon), this.flushingSoon = -1, this.flush());
  }
  start() {
    this.observer && (this.observer.takeRecords(), this.observer.observe(this.view.dom, Bv)), this.onCharData && this.view.dom.addEventListener("DOMCharacterDataModified", this.onCharData), this.connectSelection();
  }
  stop() {
    if (this.observer) {
      let t = this.observer.takeRecords();
      if (t.length) {
        for (let e = 0; e < t.length; e++)
          this.queue.push(t[e]);
        window.setTimeout(() => this.flush(), 20);
      }
      this.observer.disconnect();
    }
    this.onCharData && this.view.dom.removeEventListener("DOMCharacterDataModified", this.onCharData), this.disconnectSelection();
  }
  connectSelection() {
    this.view.dom.ownerDocument.addEventListener("selectionchange", this.onSelectionChange);
  }
  disconnectSelection() {
    this.view.dom.ownerDocument.removeEventListener("selectionchange", this.onSelectionChange);
  }
  suppressSelectionUpdates() {
    this.suppressingSelectionUpdates = !0, setTimeout(() => this.suppressingSelectionUpdates = !1, 50);
  }
  onSelectionChange() {
    if (vf(this.view)) {
      if (this.suppressingSelectionUpdates)
        return Gn(this.view);
      if (Fe && pi <= 11 && !this.view.state.selection.empty) {
        let t = this.view.domSelectionRange();
        if (t.focusNode && Wi(t.focusNode, t.focusOffset, t.anchorNode, t.anchorOffset))
          return this.flushSoon();
      }
      this.flush();
    }
  }
  setCurSelection() {
    this.currentSelection.set(this.view.domSelectionRange());
  }
  ignoreSelectionChange(t) {
    if (!t.focusNode)
      return !0;
    let e = /* @__PURE__ */ new Set(), i;
    for (let s = t.focusNode; s; s = Is(s))
      e.add(s);
    for (let s = t.anchorNode; s; s = Is(s))
      if (e.has(s)) {
        i = s;
        break;
      }
    let r = i && this.view.docView.nearestDesc(i);
    if (r && r.ignoreMutation({
      type: "selection",
      target: i.nodeType == 3 ? i.parentNode : i
    }))
      return this.setCurSelection(), !0;
  }
  pendingRecords() {
    if (this.observer)
      for (let t of this.observer.takeRecords())
        this.queue.push(t);
    return this.queue;
  }
  flush() {
    let { view: t } = this;
    if (!t.docView || this.flushingSoon > -1)
      return;
    let e = this.pendingRecords();
    e.length && (this.queue = []);
    let i = t.domSelectionRange(), r = !this.suppressingSelectionUpdates && !this.currentSelection.eq(i) && vf(t) && !this.ignoreSelectionChange(i), s = -1, o = -1, a = !1, l = [];
    if (t.editable)
      for (let u = 0; u < e.length; u++) {
        let d = this.registerMutation(e[u], l);
        d && (s = s < 0 ? d.from : Math.min(d.from, s), o = o < 0 ? d.to : Math.max(d.to, o), d.typeOver && (a = !0));
      }
    if (_n && l.length) {
      let u = l.filter((d) => d.nodeName == "BR");
      if (u.length == 2) {
        let [d, f] = u;
        d.parentNode && d.parentNode.parentNode == f.parentNode ? f.remove() : d.remove();
      } else {
        let { focusNode: d } = this.currentSelection;
        for (let f of u) {
          let h = f.parentNode;
          h && h.nodeName == "LI" && (!d || Wv(t, d) != h) && f.remove();
        }
      }
    }
    let c = null;
    s < 0 && r && t.input.lastFocus > Date.now() - 200 && Math.max(t.input.lastTouch, t.input.lastClick.time) < Date.now() - 300 && Xa(i) && (c = bu(t)) && c.eq(ft.near(t.state.doc.resolve(0), 1)) ? (t.input.lastFocus = 0, Gn(t), this.currentSelection.set(i), t.scrollToSelection()) : (s > -1 || r) && (s > -1 && (t.docView.markDirty(s, o), Vv(t)), this.handleDOMChange(s, o, a, l), t.docView && t.docView.dirty ? t.updateState(t.state) : this.currentSelection.eq(i) || Gn(t), this.currentSelection.set(i));
  }
  registerMutation(t, e) {
    if (e.indexOf(t.target) > -1)
      return null;
    let i = this.view.docView.nearestDesc(t.target);
    if (t.type == "attributes" && (i == this.view.docView || t.attributeName == "contenteditable" || // Firefox sometimes fires spurious events for null/empty styles
    t.attributeName == "style" && !t.oldValue && !t.target.getAttribute("style")) || !i || i.ignoreMutation(t))
      return null;
    if (t.type == "childList") {
      for (let u = 0; u < t.addedNodes.length; u++) {
        let d = t.addedNodes[u];
        e.push(d), d.nodeType == 3 && (this.lastChangedTextNode = d);
      }
      if (i.contentDOM && i.contentDOM != i.dom && !i.contentDOM.contains(t.target))
        return { from: i.posBefore, to: i.posAfter };
      let r = t.previousSibling, s = t.nextSibling;
      if (Fe && pi <= 11 && t.addedNodes.length)
        for (let u = 0; u < t.addedNodes.length; u++) {
          let { previousSibling: d, nextSibling: f } = t.addedNodes[u];
          (!d || Array.prototype.indexOf.call(t.addedNodes, d) < 0) && (r = d), (!f || Array.prototype.indexOf.call(t.addedNodes, f) < 0) && (s = f);
        }
      let o = r && r.parentNode == t.target ? _e(r) + 1 : 0, a = i.localPosFromDOM(t.target, o, -1), l = s && s.parentNode == t.target ? _e(s) : t.target.childNodes.length, c = i.localPosFromDOM(t.target, l, 1);
      return { from: a, to: c };
    } else return t.type == "attributes" ? { from: i.posAtStart - i.border, to: i.posAtEnd + i.border } : (this.lastChangedTextNode = t.target, {
      from: i.posAtStart,
      to: i.posAtEnd,
      // An event was generated for a text change that didn't change
      // any text. Mark the dom change to fall back to assuming the
      // selection was typed over with an identical value if it can't
      // find another change.
      typeOver: t.target.nodeValue == t.oldValue
    });
  }
}
let Mf = /* @__PURE__ */ new WeakMap(), Af = !1;
function Vv(n) {
  if (!Mf.has(n) && (Mf.set(n, null), ["normal", "nowrap", "pre-line"].indexOf(getComputedStyle(n.dom).whiteSpace) !== -1)) {
    if (n.requiresGeckoHackNode = _n, Af)
      return;
    console.warn("ProseMirror expects the CSS white-space property to be set, preferably to 'pre-wrap'. It is recommended to load style/prosemirror.css from the prosemirror-view package."), Af = !0;
  }
}
function Nf(n, t) {
  let e = t.startContainer, i = t.startOffset, r = t.endContainer, s = t.endOffset, o = n.domAtPos(n.state.selection.anchor);
  return Wi(o.node, o.offset, r, s) && ([e, i, r, s] = [r, s, e, i]), { anchorNode: e, anchorOffset: i, focusNode: r, focusOffset: s };
}
function jv(n, t) {
  if (t.getComposedRanges) {
    let r = t.getComposedRanges(n.root)[0];
    if (r)
      return Nf(n, r);
  }
  let e;
  function i(r) {
    r.preventDefault(), r.stopImmediatePropagation(), e = r.getTargetRanges()[0];
  }
  return n.dom.addEventListener("beforeinput", i, !0), document.execCommand("indent"), n.dom.removeEventListener("beforeinput", i, !0), e ? Nf(n, e) : null;
}
function Wv(n, t) {
  for (let e = t.parentNode; e && e != n.dom; e = e.parentNode) {
    let i = n.docView.nearestDesc(e, !0);
    if (i && i.node.isBlock)
      return e;
  }
  return null;
}
function Uv(n, t, e) {
  let { node: i, fromOffset: r, toOffset: s, from: o, to: a } = n.docView.parseRange(t, e), l = n.domSelectionRange(), c, u = l.anchorNode;
  if (u && n.dom.contains(u.nodeType == 1 ? u : u.parentNode) && (c = [{ node: u, offset: l.anchorOffset }], Xa(l) || c.push({ node: l.focusNode, offset: l.focusOffset })), ke && n.input.lastKeyCode === 8)
    for (let g = s; g > r; g--) {
      let m = i.childNodes[g - 1], y = m.pmViewDesc;
      if (m.nodeName == "BR" && !y) {
        s = g;
        break;
      }
      if (!y || y.size)
        break;
    }
  let d = n.state.doc, f = n.someProp("domParser") || _r.fromSchema(n.state.schema), h = d.resolve(o), p = null, _ = f.parse(i, {
    topNode: h.parent,
    topMatch: h.parent.contentMatchAt(h.index()),
    topOpen: !0,
    from: r,
    to: s,
    preserveWhitespace: h.parent.type.whitespace == "pre" ? "full" : !0,
    findPositions: c,
    ruleFromNode: Kv,
    context: h
  });
  if (c && c[0].pos != null) {
    let g = c[0].pos, m = c[1] && c[1].pos;
    m == null && (m = g), p = { anchor: g + o, head: m + o };
  }
  return { doc: _, sel: p, from: o, to: a };
}
function Kv(n) {
  let t = n.pmViewDesc;
  if (t)
    return t.parseRule();
  if (n.nodeName == "BR" && n.parentNode) {
    if (Le && /^(ul|ol)$/i.test(n.parentNode.nodeName)) {
      let e = document.createElement("div");
      return e.appendChild(document.createElement("li")), { skip: e };
    } else if (n.parentNode.lastChild == n || Le && /^(tr|table)$/i.test(n.parentNode.nodeName))
      return { ignore: !0 };
  } else if (n.nodeName == "IMG" && n.getAttribute("mark-placeholder"))
    return { ignore: !0 };
  return null;
}
const qv = /^(a|abbr|acronym|b|bd[io]|big|br|button|cite|code|data(list)?|del|dfn|em|i|ins|kbd|label|map|mark|meter|output|q|ruby|s|samp|small|span|strong|su[bp]|time|u|tt|var)$/i;
function Gv(n, t, e, i, r) {
  let s = n.input.compositionPendingChanges || (n.composing ? n.input.compositionID : 0);
  if (n.input.compositionPendingChanges = 0, t < 0) {
    let E = n.input.lastSelectionTime > Date.now() - 50 ? n.input.lastSelectionOrigin : null, b = bu(n, E);
    if (b && !n.state.selection.eq(b)) {
      if (ke && qn && n.input.lastKeyCode === 13 && Date.now() - 100 < n.input.lastKeyCodeTime && n.someProp("handleKeyDown", (M) => M(n, Si(13, "Enter"))))
        return;
      let T = n.state.tr.setSelection(b);
      E == "pointer" ? T.setMeta("pointer", !0) : E == "key" && T.scrollIntoView(), s && T.setMeta("composition", s), n.dispatch(T);
    }
    return;
  }
  let o = n.state.doc.resolve(t), a = o.sharedDepth(e);
  t = o.before(a + 1), e = n.state.doc.resolve(e).after(a + 1);
  let l = n.state.selection, c = Uv(n, t, e), u = n.state.doc, d = u.slice(c.from, c.to), f, h;
  n.input.lastKeyCode === 8 && Date.now() - 100 < n.input.lastKeyCodeTime ? (f = n.state.selection.to, h = "end") : (f = n.state.selection.from, h = "start"), n.input.lastKeyCode = null;
  let p = Yv(d.content, c.doc.content, c.from, f, h);
  if (p && n.input.domChangeCount++, (Dr && n.input.lastIOSEnter > Date.now() - 225 || qn) && r.some((E) => E.nodeType == 1 && !qv.test(E.nodeName)) && (!p || p.endA >= p.endB) && n.someProp("handleKeyDown", (E) => E(n, Si(13, "Enter")))) {
    n.input.lastIOSEnter = 0;
    return;
  }
  if (!p)
    if (i && l instanceof ct && !l.empty && l.$head.sameParent(l.$anchor) && !n.composing && !(c.sel && c.sel.anchor != c.sel.head))
      p = { start: l.from, endA: l.to, endB: l.to };
    else {
      if (c.sel) {
        let E = Lf(n, n.state.doc, c.sel);
        if (E && !E.eq(n.state.selection)) {
          let b = n.state.tr.setSelection(E);
          s && b.setMeta("composition", s), n.dispatch(b);
        }
      }
      return;
    }
  n.state.selection.from < n.state.selection.to && p.start == p.endB && n.state.selection instanceof ct && (p.start > n.state.selection.from && p.start <= n.state.selection.from + 2 && n.state.selection.from >= c.from ? p.start = n.state.selection.from : p.endA < n.state.selection.to && p.endA >= n.state.selection.to - 2 && n.state.selection.to <= c.to && (p.endB += n.state.selection.to - p.endA, p.endA = n.state.selection.to)), Fe && pi <= 11 && p.endB == p.start + 1 && p.endA == p.start && p.start > c.from && c.doc.textBetween(p.start - c.from - 1, p.start - c.from + 1) == "  " && (p.start--, p.endA--, p.endB--);
  let _ = c.doc.resolveNoCache(p.start - c.from), g = c.doc.resolveNoCache(p.endB - c.from), m = u.resolve(p.start), y = _.sameParent(g) && _.parent.inlineContent && m.end() >= p.endA, x;
  if ((Dr && n.input.lastIOSEnter > Date.now() - 225 && (!y || r.some((E) => E.nodeName == "DIV" || E.nodeName == "P")) || !y && _.pos < c.doc.content.size && !_.sameParent(g) && (x = ft.findFrom(c.doc.resolve(_.pos + 1), 1, !0)) && x.head == g.pos) && n.someProp("handleKeyDown", (E) => E(n, Si(13, "Enter")))) {
    n.input.lastIOSEnter = 0;
    return;
  }
  if (n.state.selection.anchor > p.start && Xv(u, p.start, p.endA, _, g) && n.someProp("handleKeyDown", (E) => E(n, Si(8, "Backspace")))) {
    qn && ke && n.domObserver.suppressSelectionUpdates();
    return;
  }
  ke && p.endB == p.start && (n.input.lastChromeDelete = Date.now()), qn && !y && _.start() != g.start() && g.parentOffset == 0 && _.depth == g.depth && c.sel && c.sel.anchor == c.sel.head && c.sel.head == p.endA && (p.endB -= 2, g = c.doc.resolveNoCache(p.endB - c.from), setTimeout(() => {
    n.someProp("handleKeyDown", function(E) {
      return E(n, Si(13, "Enter"));
    });
  }, 20));
  let k = p.start, S = p.endA, w, O, v;
  if (y) {
    if (_.pos == g.pos)
      Fe && pi <= 11 && _.parentOffset == 0 && (n.domObserver.suppressSelectionUpdates(), setTimeout(() => Gn(n), 20)), w = n.state.tr.delete(k, S), O = u.resolve(p.start).marksAcross(u.resolve(p.endA));
    else if (
      // Adding or removing a mark
      p.endA == p.endB && (v = Jv(_.parent.content.cut(_.parentOffset, g.parentOffset), m.parent.content.cut(m.parentOffset, p.endA - m.start())))
    )
      w = n.state.tr, v.type == "add" ? w.addMark(k, S, v.mark) : w.removeMark(k, S, v.mark);
    else if (_.parent.child(_.index()).isText && _.index() == g.index() - (g.textOffset ? 0 : 1)) {
      let E = _.parent.textBetween(_.parentOffset, g.parentOffset);
      if (n.someProp("handleTextInput", (b) => b(n, k, S, E)))
        return;
      w = n.state.tr.insertText(E, k, S);
    }
  }
  if (w || (w = n.state.tr.replace(k, S, c.doc.slice(p.start - c.from, p.endB - c.from))), c.sel) {
    let E = Lf(n, w.doc, c.sel);
    E && !(ke && n.composing && E.empty && (p.start != p.endB || n.input.lastChromeDelete < Date.now() - 100) && (E.head == k || E.head == w.mapping.map(S) - 1) || Fe && E.empty && E.head == k) && w.setSelection(E);
  }
  O && w.ensureMarks(O), s && w.setMeta("composition", s), n.dispatch(w.scrollIntoView());
}
function Lf(n, t, e) {
  return Math.max(e.anchor, e.head) > t.content.size ? null : yu(n, t.resolve(e.anchor), t.resolve(e.head));
}
function Jv(n, t) {
  let e = n.firstChild.marks, i = t.firstChild.marks, r = e, s = i, o, a, l;
  for (let u = 0; u < i.length; u++)
    r = i[u].removeFromSet(r);
  for (let u = 0; u < e.length; u++)
    s = e[u].removeFromSet(s);
  if (r.length == 1 && s.length == 0)
    a = r[0], o = "add", l = (u) => u.mark(a.addToSet(u.marks));
  else if (r.length == 0 && s.length == 1)
    a = s[0], o = "remove", l = (u) => u.mark(a.removeFromSet(u.marks));
  else
    return null;
  let c = [];
  for (let u = 0; u < t.childCount; u++)
    c.push(l(t.child(u)));
  if (B.from(c).eq(n))
    return { mark: a, type: o };
}
function Xv(n, t, e, i, r) {
  if (
    // The content must have shrunk
    e - t <= r.pos - i.pos || // newEnd must point directly at or after the end of the block that newStart points into
    El(i, !0, !1) < r.pos
  )
    return !1;
  let s = n.resolve(t);
  if (!i.parent.isTextblock) {
    let a = s.nodeAfter;
    return a != null && e == t + a.nodeSize;
  }
  if (s.parentOffset < s.parent.content.size || !s.parent.isTextblock)
    return !1;
  let o = n.resolve(El(s, !0, !0));
  return !o.parent.isTextblock || o.pos > e || El(o, !0, !1) < e ? !1 : i.parent.content.cut(i.parentOffset).eq(o.parent.content);
}
function El(n, t, e) {
  let i = n.depth, r = t ? n.end() : n.pos;
  for (; i > 0 && (t || n.indexAfter(i) == n.node(i).childCount); )
    i--, r++, t = !1;
  if (e) {
    let s = n.node(i).maybeChild(n.indexAfter(i));
    for (; s && !s.isLeaf; )
      s = s.firstChild, r++;
  }
  return r;
}
function Yv(n, t, e, i, r) {
  let s = n.findDiffStart(t, e);
  if (s == null)
    return null;
  let { a: o, b: a } = n.findDiffEnd(t, e + n.size, e + t.size);
  if (r == "end") {
    let l = Math.max(0, s - Math.min(o, a));
    i -= o + l - s;
  }
  if (o < s && n.size < t.size) {
    let l = i <= s && i >= o ? s - i : 0;
    s -= l, s && s < t.size && Rf(t.textBetween(s - 1, s + 1)) && (s += l ? 1 : -1), a = s + (a - o), o = s;
  } else if (a < s) {
    let l = i <= s && i >= a ? s - i : 0;
    s -= l, s && s < n.size && Rf(n.textBetween(s - 1, s + 1)) && (s += l ? 1 : -1), o = s + (o - a), a = s;
  }
  return { start: s, endA: o, endB: a };
}
function Rf(n) {
  if (n.length != 2)
    return !1;
  let t = n.charCodeAt(0), e = n.charCodeAt(1);
  return t >= 56320 && t <= 57343 && e >= 55296 && e <= 56319;
}
class Zv {
  /**
  Create a view. `place` may be a DOM node that the editor should
  be appended to, a function that will place it into the document,
  or an object whose `mount` property holds the node to use as the
  document container. If it is `null`, the editor will not be
  added to the document.
  */
  constructor(t, e) {
    this._root = null, this.focused = !1, this.trackWrites = null, this.mounted = !1, this.markCursor = null, this.cursorWrapper = null, this.lastSelectedViewDesc = void 0, this.input = new _v(), this.prevDirectPlugins = [], this.pluginViews = [], this.requiresGeckoHackNode = !1, this.dragging = null, this._props = e, this.state = e.state, this.directPlugins = e.plugins || [], this.directPlugins.forEach(Bf), this.dispatch = this.dispatch.bind(this), this.dom = t && t.mount || document.createElement("div"), t && (t.appendChild ? t.appendChild(this.dom) : typeof t == "function" ? t(this.dom) : t.mount && (this.mounted = !0)), this.editable = Df(this), Pf(this), this.nodeViews = $f(this), this.docView = pf(this.state.doc, If(this), Tl(this), this.dom, this), this.domObserver = new Fv(this, (i, r, s, o) => Gv(this, i, r, s, o)), this.domObserver.start(), bv(this), this.updatePluginViews();
  }
  /**
  Holds `true` when a
  [composition](https://w3c.github.io/uievents/#events-compositionevents)
  is active.
  */
  get composing() {
    return this.input.composing;
  }
  /**
  The view's current [props](https://prosemirror.net/docs/ref/#view.EditorProps).
  */
  get props() {
    if (this._props.state != this.state) {
      let t = this._props;
      this._props = {};
      for (let e in t)
        this._props[e] = t[e];
      this._props.state = this.state;
    }
    return this._props;
  }
  /**
  Update the view's props. Will immediately cause an update to
  the DOM.
  */
  update(t) {
    t.handleDOMEvents != this._props.handleDOMEvents && Nc(this);
    let e = this._props;
    this._props = t, t.plugins && (t.plugins.forEach(Bf), this.directPlugins = t.plugins), this.updateStateInner(t.state, e);
  }
  /**
  Update the view by updating existing props object with the object
  given as argument. Equivalent to `view.update(Object.assign({},
  view.props, props))`.
  */
  setProps(t) {
    let e = {};
    for (let i in this._props)
      e[i] = this._props[i];
    e.state = this.state;
    for (let i in t)
      e[i] = t[i];
    this.update(e);
  }
  /**
  Update the editor's `state` prop, without touching any of the
  other props.
  */
  updateState(t) {
    this.updateStateInner(t, this._props);
  }
  updateStateInner(t, e) {
    var i;
    let r = this.state, s = !1, o = !1;
    t.storedMarks && this.composing && ($m(this), o = !0), this.state = t;
    let a = r.plugins != t.plugins || this._props.plugins != e.plugins;
    if (a || this._props.plugins != e.plugins || this._props.nodeViews != e.nodeViews) {
      let h = $f(this);
      tx(h, this.nodeViews) && (this.nodeViews = h, s = !0);
    }
    (a || e.handleDOMEvents != this._props.handleDOMEvents) && Nc(this), this.editable = Df(this), Pf(this);
    let l = Tl(this), c = If(this), u = r.plugins != t.plugins && !r.doc.eq(t.doc) ? "reset" : t.scrollToSelection > r.scrollToSelection ? "to selection" : "preserve", d = s || !this.docView.matchesNode(t.doc, c, l);
    (d || !t.selection.eq(r.selection)) && (o = !0);
    let f = u == "preserve" && o && this.dom.style.overflowAnchor == null && Ly(this);
    if (o) {
      this.domObserver.stop();
      let h = d && (Fe || ke) && !this.composing && !r.selection.empty && !t.selection.empty && Qv(r.selection, t.selection);
      if (d) {
        let p = ke ? this.trackWrites = this.domSelectionRange().focusNode : null;
        this.composing && (this.input.compositionNode = Nv(this)), (s || !this.docView.update(t.doc, c, l, this)) && (this.docView.updateOuterDeco(c), this.docView.destroy(), this.docView = pf(t.doc, c, l, this.dom, this)), p && !this.trackWrites && (h = !0);
      }
      h || !(this.input.mouseDown && this.domObserver.currentSelection.eq(this.domSelectionRange()) && nv(this)) ? Gn(this, h) : (Sm(this, t.selection), this.domObserver.setCurSelection()), this.domObserver.start();
    }
    this.updatePluginViews(r), !((i = this.dragging) === null || i === void 0) && i.node && !r.doc.eq(t.doc) && this.updateDraggedNode(this.dragging, r), u == "reset" ? this.dom.scrollTop = 0 : u == "to selection" ? this.scrollToSelection() : f && Ry(f);
  }
  /**
  @internal
  */
  scrollToSelection() {
    let t = this.domSelectionRange().focusNode;
    if (!this.someProp("handleScrollToSelection", (e) => e(this))) if (this.state.selection instanceof ot) {
      let e = this.docView.domAfterPos(this.state.selection.from);
      e.nodeType == 1 && lf(this, e.getBoundingClientRect(), t);
    } else
      lf(this, this.coordsAtPos(this.state.selection.head, 1), t);
  }
  destroyPluginViews() {
    let t;
    for (; t = this.pluginViews.pop(); )
      t.destroy && t.destroy();
  }
  updatePluginViews(t) {
    if (!t || t.plugins != this.state.plugins || this.directPlugins != this.prevDirectPlugins) {
      this.prevDirectPlugins = this.directPlugins, this.destroyPluginViews();
      for (let e = 0; e < this.directPlugins.length; e++) {
        let i = this.directPlugins[e];
        i.spec.view && this.pluginViews.push(i.spec.view(this));
      }
      for (let e = 0; e < this.state.plugins.length; e++) {
        let i = this.state.plugins[e];
        i.spec.view && this.pluginViews.push(i.spec.view(this));
      }
    } else
      for (let e = 0; e < this.pluginViews.length; e++) {
        let i = this.pluginViews[e];
        i.update && i.update(this, t);
      }
  }
  updateDraggedNode(t, e) {
    let i = t.node, r = -1;
    if (this.state.doc.nodeAt(i.from) == i.node)
      r = i.from;
    else {
      let s = i.from + (this.state.doc.content.size - e.doc.content.size);
      (s > 0 && this.state.doc.nodeAt(s)) == i.node && (r = s);
    }
    this.dragging = new zm(t.slice, t.move, r < 0 ? void 0 : ot.create(this.state.doc, r));
  }
  someProp(t, e) {
    let i = this._props && this._props[t], r;
    if (i != null && (r = e ? e(i) : i))
      return r;
    for (let o = 0; o < this.directPlugins.length; o++) {
      let a = this.directPlugins[o].props[t];
      if (a != null && (r = e ? e(a) : a))
        return r;
    }
    let s = this.state.plugins;
    if (s)
      for (let o = 0; o < s.length; o++) {
        let a = s[o].props[t];
        if (a != null && (r = e ? e(a) : a))
          return r;
      }
  }
  /**
  Query whether the view has focus.
  */
  hasFocus() {
    if (Fe) {
      let t = this.root.activeElement;
      if (t == this.dom)
        return !0;
      if (!t || !this.dom.contains(t))
        return !1;
      for (; t && this.dom != t && this.dom.contains(t); ) {
        if (t.contentEditable == "false")
          return !1;
        t = t.parentElement;
      }
      return !0;
    }
    return this.root.activeElement == this.dom;
  }
  /**
  Focus the editor.
  */
  focus() {
    this.domObserver.stop(), this.editable && Iy(this.dom), Gn(this), this.domObserver.start();
  }
  /**
  Get the document root in which the editor exists. This will
  usually be the top-level `document`, but might be a [shadow
  DOM](https://developer.mozilla.org/en-US/docs/Web/Web_Components/Shadow_DOM)
  root if the editor is inside one.
  */
  get root() {
    let t = this._root;
    if (t == null) {
      for (let e = this.dom.parentNode; e; e = e.parentNode)
        if (e.nodeType == 9 || e.nodeType == 11 && e.host)
          return e.getSelection || (Object.getPrototypeOf(e).getSelection = () => e.ownerDocument.getSelection()), this._root = e;
    }
    return t || document;
  }
  /**
  When an existing editor view is moved to a new document or
  shadow tree, call this to make it recompute its root.
  */
  updateRoot() {
    this._root = null;
  }
  /**
  Given a pair of viewport coordinates, return the document
  position that corresponds to them. May return null if the given
  coordinates aren't inside of the editor. When an object is
  returned, its `pos` property is the position nearest to the
  coordinates, and its `inside` property holds the position of the
  inner node that the position falls inside of, or -1 if it is at
  the top level, not in any node.
  */
  posAtCoords(t) {
    return zy(this, t);
  }
  /**
  Returns the viewport rectangle at a given document position.
  `left` and `right` will be the same number, as this returns a
  flat cursor-ish rectangle. If the position is between two things
  that aren't directly adjacent, `side` determines which element
  is used. When < 0, the element before the position is used,
  otherwise the element after.
  */
  coordsAtPos(t, e = 1) {
    return gm(this, t, e);
  }
  /**
  Find the DOM position that corresponds to the given document
  position. When `side` is negative, find the position as close as
  possible to the content before the position. When positive,
  prefer positions close to the content after the position. When
  zero, prefer as shallow a position as possible.
  
  Note that you should **not** mutate the editor's internal DOM,
  only inspect it (and even that is usually not necessary).
  */
  domAtPos(t, e = 0) {
    return this.docView.domFromPos(t, e);
  }
  /**
  Find the DOM node that represents the document node after the
  given position. May return `null` when the position doesn't point
  in front of a node or if the node is inside an opaque node view.
  
  This is intended to be able to call things like
  `getBoundingClientRect` on that DOM node. Do **not** mutate the
  editor DOM directly, or add styling this way, since that will be
  immediately overriden by the editor as it redraws the node.
  */
  nodeDOM(t) {
    let e = this.docView.descAt(t);
    return e ? e.nodeDOM : null;
  }
  /**
  Find the document position that corresponds to a given DOM
  position. (Whenever possible, it is preferable to inspect the
  document structure directly, rather than poking around in the
  DOM, but sometimes—for example when interpreting an event
  target—you don't have a choice.)
  
  The `bias` parameter can be used to influence which side of a DOM
  node to use when the position is inside a leaf node.
  */
  posAtDOM(t, e, i = -1) {
    let r = this.docView.posFromDOM(t, e, i);
    if (r == null)
      throw new RangeError("DOM position not inside the editor");
    return r;
  }
  /**
  Find out whether the selection is at the end of a textblock when
  moving in a given direction. When, for example, given `"left"`,
  it will return true if moving left from the current cursor
  position would leave that position's parent textblock. Will apply
  to the view's current state by default, but it is possible to
  pass a different state.
  */
  endOfTextblock(t, e) {
    return Wy(this, e || this.state, t);
  }
  /**
  Run the editor's paste logic with the given HTML string. The
  `event`, if given, will be passed to the
  [`handlePaste`](https://prosemirror.net/docs/ref/#view.EditorProps.handlePaste) hook.
  */
  pasteHTML(t, e) {
    return Ds(this, "", t, !1, e || new ClipboardEvent("paste"));
  }
  /**
  Run the editor's paste logic with the given plain-text input.
  */
  pasteText(t, e) {
    return Ds(this, t, null, !0, e || new ClipboardEvent("paste"));
  }
  /**
  Removes the editor from the DOM and destroys all [node
  views](https://prosemirror.net/docs/ref/#view.NodeView).
  */
  destroy() {
    this.docView && (yv(this), this.destroyPluginViews(), this.mounted ? (this.docView.update(this.state.doc, [], Tl(this), this), this.dom.textContent = "") : this.dom.parentNode && this.dom.parentNode.removeChild(this.dom), this.docView.destroy(), this.docView = null, xy());
  }
  /**
  This is true when the view has been
  [destroyed](https://prosemirror.net/docs/ref/#view.EditorView.destroy) (and thus should not be
  used anymore).
  */
  get isDestroyed() {
    return this.docView == null;
  }
  /**
  Used for testing.
  */
  dispatchEvent(t) {
    return xv(this, t);
  }
  /**
  Dispatch a transaction. Will call
  [`dispatchTransaction`](https://prosemirror.net/docs/ref/#view.DirectEditorProps.dispatchTransaction)
  when given, and otherwise defaults to applying the transaction to
  the current state and calling
  [`updateState`](https://prosemirror.net/docs/ref/#view.EditorView.updateState) with the result.
  This method is bound to the view instance, so that it can be
  easily passed around.
  */
  dispatch(t) {
    let e = this._props.dispatchTransaction;
    e ? e.call(this, t) : this.updateState(this.state.apply(t));
  }
  /**
  @internal
  */
  domSelectionRange() {
    let t = this.domSelection();
    return t ? Le && this.root.nodeType === 11 && Ty(this.dom.ownerDocument) == this.dom && jv(this, t) || t : { focusNode: null, focusOffset: 0, anchorNode: null, anchorOffset: 0 };
  }
  /**
  @internal
  */
  domSelection() {
    return this.root.getSelection();
  }
}
function If(n) {
  let t = /* @__PURE__ */ Object.create(null);
  return t.class = "ProseMirror", t.contenteditable = String(n.editable), n.someProp("attributes", (e) => {
    if (typeof e == "function" && (e = e(n.state)), e)
      for (let i in e)
        i == "class" ? t.class += " " + e[i] : i == "style" ? t.style = (t.style ? t.style + ";" : "") + e[i] : !t[i] && i != "contenteditable" && i != "nodeName" && (t[i] = String(e[i]));
  }), t.translate || (t.translate = "no"), [Ne.node(0, n.state.doc.content.size, t)];
}
function Pf(n) {
  if (n.markCursor) {
    let t = document.createElement("img");
    t.className = "ProseMirror-separator", t.setAttribute("mark-placeholder", "true"), t.setAttribute("alt", ""), n.cursorWrapper = { dom: t, deco: Ne.widget(n.state.selection.from, t, { raw: !0, marks: n.markCursor }) };
  } else
    n.cursorWrapper = null;
}
function Df(n) {
  return !n.someProp("editable", (t) => t(n.state) === !1);
}
function Qv(n, t) {
  let e = Math.min(n.$anchor.sharedDepth(n.head), t.$anchor.sharedDepth(t.head));
  return n.$anchor.start(e) != t.$anchor.start(e);
}
function $f(n) {
  let t = /* @__PURE__ */ Object.create(null);
  function e(i) {
    for (let r in i)
      Object.prototype.hasOwnProperty.call(t, r) || (t[r] = i[r]);
  }
  return n.someProp("nodeViews", e), n.someProp("markViews", e), t;
}
function tx(n, t) {
  let e = 0, i = 0;
  for (let r in n) {
    if (n[r] != t[r])
      return !0;
    e++;
  }
  for (let r in t)
    i++;
  return e != i;
}
function Bf(n) {
  if (n.spec.state || n.spec.filterTransaction || n.spec.appendTransaction)
    throw new RangeError("Plugins passed directly to the view must not have a state component");
}
var bi = {
  8: "Backspace",
  9: "Tab",
  10: "Enter",
  12: "NumLock",
  13: "Enter",
  16: "Shift",
  17: "Control",
  18: "Alt",
  20: "CapsLock",
  27: "Escape",
  32: " ",
  33: "PageUp",
  34: "PageDown",
  35: "End",
  36: "Home",
  37: "ArrowLeft",
  38: "ArrowUp",
  39: "ArrowRight",
  40: "ArrowDown",
  44: "PrintScreen",
  45: "Insert",
  46: "Delete",
  59: ";",
  61: "=",
  91: "Meta",
  92: "Meta",
  106: "*",
  107: "+",
  108: ",",
  109: "-",
  110: ".",
  111: "/",
  144: "NumLock",
  145: "ScrollLock",
  160: "Shift",
  161: "Shift",
  162: "Control",
  163: "Control",
  164: "Alt",
  165: "Alt",
  173: "-",
  186: ";",
  187: "=",
  188: ",",
  189: "-",
  190: ".",
  191: "/",
  192: "`",
  219: "[",
  220: "\\",
  221: "]",
  222: "'"
}, ca = {
  48: ")",
  49: "!",
  50: "@",
  51: "#",
  52: "$",
  53: "%",
  54: "^",
  55: "&",
  56: "*",
  57: "(",
  59: ":",
  61: "+",
  173: "_",
  186: ":",
  187: "+",
  188: "<",
  189: "_",
  190: ">",
  191: "?",
  192: "~",
  219: "{",
  220: "|",
  221: "}",
  222: '"'
}, ex = typeof navigator < "u" && /Mac/.test(navigator.platform), nx = typeof navigator < "u" && /MSIE \d|Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(navigator.userAgent);
for (var be = 0; be < 10; be++) bi[48 + be] = bi[96 + be] = String(be);
for (var be = 1; be <= 24; be++) bi[be + 111] = "F" + be;
for (var be = 65; be <= 90; be++)
  bi[be] = String.fromCharCode(be + 32), ca[be] = String.fromCharCode(be);
for (var Ol in bi) ca.hasOwnProperty(Ol) || (ca[Ol] = bi[Ol]);
function ix(n) {
  var t = ex && n.metaKey && n.shiftKey && !n.ctrlKey && !n.altKey || nx && n.shiftKey && n.key && n.key.length == 1 || n.key == "Unidentified", e = !t && n.key || (n.shiftKey ? ca : bi)[n.keyCode] || n.key || "Unidentified";
  return e == "Esc" && (e = "Escape"), e == "Del" && (e = "Delete"), e == "Left" && (e = "ArrowLeft"), e == "Up" && (e = "ArrowUp"), e == "Right" && (e = "ArrowRight"), e == "Down" && (e = "ArrowDown"), e;
}
const rx = typeof navigator < "u" ? /Mac|iP(hone|[oa]d)/.test(navigator.platform) : !1;
function sx(n) {
  let t = n.split(/-(?!$)/), e = t[t.length - 1];
  e == "Space" && (e = " ");
  let i, r, s, o;
  for (let a = 0; a < t.length - 1; a++) {
    let l = t[a];
    if (/^(cmd|meta|m)$/i.test(l))
      o = !0;
    else if (/^a(lt)?$/i.test(l))
      i = !0;
    else if (/^(c|ctrl|control)$/i.test(l))
      r = !0;
    else if (/^s(hift)?$/i.test(l))
      s = !0;
    else if (/^mod$/i.test(l))
      rx ? o = !0 : r = !0;
    else
      throw new Error("Unrecognized modifier name: " + l);
  }
  return i && (e = "Alt-" + e), r && (e = "Ctrl-" + e), o && (e = "Meta-" + e), s && (e = "Shift-" + e), e;
}
function ox(n) {
  let t = /* @__PURE__ */ Object.create(null);
  for (let e in n)
    t[sx(e)] = n[e];
  return t;
}
function Ml(n, t, e = !0) {
  return t.altKey && (n = "Alt-" + n), t.ctrlKey && (n = "Ctrl-" + n), t.metaKey && (n = "Meta-" + n), e && t.shiftKey && (n = "Shift-" + n), n;
}
function ax(n) {
  return new pe({ props: { handleKeyDown: Cu(n) } });
}
function Cu(n) {
  let t = ox(n);
  return function(e, i) {
    let r = ix(i), s, o = t[Ml(r, i)];
    if (o && o(e.state, e.dispatch, e))
      return !0;
    if (r.length == 1 && r != " ") {
      if (i.shiftKey) {
        let a = t[Ml(r, i, !1)];
        if (a && a(e.state, e.dispatch, e))
          return !0;
      }
      if ((i.shiftKey || i.altKey || i.metaKey || r.charCodeAt(0) > 127) && (s = bi[i.keyCode]) && s != r) {
        let a = t[Ml(s, i)];
        if (a && a(e.state, e.dispatch, e))
          return !0;
      }
    }
    return !1;
  };
}
const lx = (n, t) => n.selection.empty ? !1 : (t && t(n.tr.deleteSelection().scrollIntoView()), !0);
function Wm(n, t) {
  let { $cursor: e } = n.selection;
  return !e || (t ? !t.endOfTextblock("backward", n) : e.parentOffset > 0) ? null : e;
}
const cx = (n, t, e) => {
  let i = Wm(n, e);
  if (!i)
    return !1;
  let r = Tu(i);
  if (!r) {
    let o = i.blockRange(), a = o && Wr(o);
    return a == null ? !1 : (t && t(n.tr.lift(o, a).scrollIntoView()), !0);
  }
  let s = r.nodeBefore;
  if (Gm(n, r, t, -1))
    return !0;
  if (i.parent.content.size == 0 && ($r(s, "end") || ot.isSelectable(s)))
    for (let o = i.depth; ; o--) {
      let a = Ga(n.doc, i.before(o), i.after(o), Y.empty);
      if (a && a.slice.size < a.to - a.from) {
        if (t) {
          let l = n.tr.step(a);
          l.setSelection($r(s, "end") ? ft.findFrom(l.doc.resolve(l.mapping.map(r.pos, -1)), -1) : ot.create(l.doc, r.pos - s.nodeSize)), t(l.scrollIntoView());
        }
        return !0;
      }
      if (o == 1 || i.node(o - 1).childCount > 1)
        break;
    }
  return s.isAtom && r.depth == i.depth - 1 ? (t && t(n.tr.delete(r.pos - s.nodeSize, r.pos).scrollIntoView()), !0) : !1;
}, ux = (n, t, e) => {
  let i = Wm(n, e);
  if (!i)
    return !1;
  let r = Tu(i);
  return r ? Um(n, r, t) : !1;
}, dx = (n, t, e) => {
  let i = Km(n, e);
  if (!i)
    return !1;
  let r = Eu(i);
  return r ? Um(n, r, t) : !1;
};
function Um(n, t, e) {
  let i = t.nodeBefore, r = i, s = t.pos - 1;
  for (; !r.isTextblock; s--) {
    if (r.type.spec.isolating)
      return !1;
    let u = r.lastChild;
    if (!u)
      return !1;
    r = u;
  }
  let o = t.nodeAfter, a = o, l = t.pos + 1;
  for (; !a.isTextblock; l++) {
    if (a.type.spec.isolating)
      return !1;
    let u = a.firstChild;
    if (!u)
      return !1;
    a = u;
  }
  let c = Ga(n.doc, s, l, Y.empty);
  if (!c || c.from != s || c instanceof ue && c.slice.size >= l - s)
    return !1;
  if (e) {
    let u = n.tr.step(c);
    u.setSelection(ct.create(u.doc, s)), e(u.scrollIntoView());
  }
  return !0;
}
function $r(n, t, e = !1) {
  for (let i = n; i; i = t == "start" ? i.firstChild : i.lastChild) {
    if (i.isTextblock)
      return !0;
    if (e && i.childCount != 1)
      return !1;
  }
  return !1;
}
const fx = (n, t, e) => {
  let { $head: i, empty: r } = n.selection, s = i;
  if (!r)
    return !1;
  if (i.parent.isTextblock) {
    if (e ? !e.endOfTextblock("backward", n) : i.parentOffset > 0)
      return !1;
    s = Tu(i);
  }
  let o = s && s.nodeBefore;
  return !o || !ot.isSelectable(o) ? !1 : (t && t(n.tr.setSelection(ot.create(n.doc, s.pos - o.nodeSize)).scrollIntoView()), !0);
};
function Tu(n) {
  if (!n.parent.type.spec.isolating)
    for (let t = n.depth - 1; t >= 0; t--) {
      if (n.index(t) > 0)
        return n.doc.resolve(n.before(t + 1));
      if (n.node(t).type.spec.isolating)
        break;
    }
  return null;
}
function Km(n, t) {
  let { $cursor: e } = n.selection;
  return !e || (t ? !t.endOfTextblock("forward", n) : e.parentOffset < e.parent.content.size) ? null : e;
}
const hx = (n, t, e) => {
  let i = Km(n, e);
  if (!i)
    return !1;
  let r = Eu(i);
  if (!r)
    return !1;
  let s = r.nodeAfter;
  if (Gm(n, r, t, 1))
    return !0;
  if (i.parent.content.size == 0 && ($r(s, "start") || ot.isSelectable(s))) {
    let o = Ga(n.doc, i.before(), i.after(), Y.empty);
    if (o && o.slice.size < o.to - o.from) {
      if (t) {
        let a = n.tr.step(o);
        a.setSelection($r(s, "start") ? ft.findFrom(a.doc.resolve(a.mapping.map(r.pos)), 1) : ot.create(a.doc, a.mapping.map(r.pos))), t(a.scrollIntoView());
      }
      return !0;
    }
  }
  return s.isAtom && r.depth == i.depth - 1 ? (t && t(n.tr.delete(r.pos, r.pos + s.nodeSize).scrollIntoView()), !0) : !1;
}, px = (n, t, e) => {
  let { $head: i, empty: r } = n.selection, s = i;
  if (!r)
    return !1;
  if (i.parent.isTextblock) {
    if (e ? !e.endOfTextblock("forward", n) : i.parentOffset < i.parent.content.size)
      return !1;
    s = Eu(i);
  }
  let o = s && s.nodeAfter;
  return !o || !ot.isSelectable(o) ? !1 : (t && t(n.tr.setSelection(ot.create(n.doc, s.pos)).scrollIntoView()), !0);
};
function Eu(n) {
  if (!n.parent.type.spec.isolating)
    for (let t = n.depth - 1; t >= 0; t--) {
      let e = n.node(t);
      if (n.index(t) + 1 < e.childCount)
        return n.doc.resolve(n.after(t + 1));
      if (e.type.spec.isolating)
        break;
    }
  return null;
}
const mx = (n, t) => {
  let e = n.selection, i = e instanceof ot, r;
  if (i) {
    if (e.node.isTextblock || !yi(n.doc, e.from))
      return !1;
    r = e.from;
  } else if (r = qa(n.doc, e.from, -1), r == null)
    return !1;
  if (t) {
    let s = n.tr.join(r);
    i && s.setSelection(ot.create(s.doc, r - n.doc.resolve(r).nodeBefore.nodeSize)), t(s.scrollIntoView());
  }
  return !0;
}, gx = (n, t) => {
  let e = n.selection, i;
  if (e instanceof ot) {
    if (e.node.isTextblock || !yi(n.doc, e.to))
      return !1;
    i = e.to;
  } else if (i = qa(n.doc, e.to, 1), i == null)
    return !1;
  return t && t(n.tr.join(i).scrollIntoView()), !0;
}, _x = (n, t) => {
  let { $from: e, $to: i } = n.selection, r = e.blockRange(i), s = r && Wr(r);
  return s == null ? !1 : (t && t(n.tr.lift(r, s).scrollIntoView()), !0);
}, bx = (n, t) => {
  let { $head: e, $anchor: i } = n.selection;
  return !e.parent.type.spec.code || !e.sameParent(i) ? !1 : (t && t(n.tr.insertText(`
`).scrollIntoView()), !0);
};
function qm(n) {
  for (let t = 0; t < n.edgeCount; t++) {
    let { type: e } = n.edge(t);
    if (e.isTextblock && !e.hasRequiredAttrs())
      return e;
  }
  return null;
}
const yx = (n, t) => {
  let { $head: e, $anchor: i } = n.selection;
  if (!e.parent.type.spec.code || !e.sameParent(i))
    return !1;
  let r = e.node(-1), s = e.indexAfter(-1), o = qm(r.contentMatchAt(s));
  if (!o || !r.canReplaceWith(s, s, o))
    return !1;
  if (t) {
    let a = e.after(), l = n.tr.replaceWith(a, a, o.createAndFill());
    l.setSelection(ft.near(l.doc.resolve(a), 1)), t(l.scrollIntoView());
  }
  return !0;
}, vx = (n, t) => {
  let e = n.selection, { $from: i, $to: r } = e;
  if (e instanceof Xe || i.parent.inlineContent || r.parent.inlineContent)
    return !1;
  let s = qm(r.parent.contentMatchAt(r.indexAfter()));
  if (!s || !s.isTextblock)
    return !1;
  if (t) {
    let o = (!i.parentOffset && r.index() < r.parent.childCount ? i : r).pos, a = n.tr.insert(o, s.createAndFill());
    a.setSelection(ct.create(a.doc, o + 1)), t(a.scrollIntoView());
  }
  return !0;
}, xx = (n, t) => {
  let { $cursor: e } = n.selection;
  if (!e || e.parent.content.size)
    return !1;
  if (e.depth > 1 && e.after() != e.end(-1)) {
    let s = e.before();
    if (yr(n.doc, s))
      return t && t(n.tr.split(s).scrollIntoView()), !0;
  }
  let i = e.blockRange(), r = i && Wr(i);
  return r == null ? !1 : (t && t(n.tr.lift(i, r).scrollIntoView()), !0);
}, wx = (n, t) => {
  let { $from: e, to: i } = n.selection, r, s = e.sharedDepth(i);
  return s == 0 ? !1 : (r = e.before(s), t && t(n.tr.setSelection(ot.create(n.doc, r))), !0);
};
function kx(n, t, e) {
  let i = t.nodeBefore, r = t.nodeAfter, s = t.index();
  return !i || !r || !i.type.compatibleContent(r.type) ? !1 : !i.content.size && t.parent.canReplace(s - 1, s) ? (e && e(n.tr.delete(t.pos - i.nodeSize, t.pos).scrollIntoView()), !0) : !t.parent.canReplace(s, s + 1) || !(r.isTextblock || yi(n.doc, t.pos)) ? !1 : (e && e(n.tr.join(t.pos).scrollIntoView()), !0);
}
function Gm(n, t, e, i) {
  let r = t.nodeBefore, s = t.nodeAfter, o, a, l = r.type.spec.isolating || s.type.spec.isolating;
  if (!l && kx(n, t, e))
    return !0;
  let c = !l && t.parent.canReplace(t.index(), t.index() + 1);
  if (c && (o = (a = r.contentMatchAt(r.childCount)).findWrapping(s.type)) && a.matchType(o[0] || s.type).validEnd) {
    if (e) {
      let h = t.pos + s.nodeSize, p = B.empty;
      for (let m = o.length - 1; m >= 0; m--)
        p = B.from(o[m].create(null, p));
      p = B.from(r.copy(p));
      let _ = n.tr.step(new fe(t.pos - 1, h, t.pos, h, new Y(p, 1, 0), o.length, !0)), g = _.doc.resolve(h + 2 * o.length);
      g.nodeAfter && g.nodeAfter.type == r.type && yi(_.doc, g.pos) && _.join(g.pos), e(_.scrollIntoView());
    }
    return !0;
  }
  let u = s.type.spec.isolating || i > 0 && l ? null : ft.findFrom(t, 1), d = u && u.$from.blockRange(u.$to), f = d && Wr(d);
  if (f != null && f >= t.depth)
    return e && e(n.tr.lift(d, f).scrollIntoView()), !0;
  if (c && $r(s, "start", !0) && $r(r, "end")) {
    let h = r, p = [];
    for (; p.push(h), !h.isTextblock; )
      h = h.lastChild;
    let _ = s, g = 1;
    for (; !_.isTextblock; _ = _.firstChild)
      g++;
    if (h.canReplace(h.childCount, h.childCount, _.content)) {
      if (e) {
        let m = B.empty;
        for (let x = p.length - 1; x >= 0; x--)
          m = B.from(p[x].copy(m));
        let y = n.tr.step(new fe(t.pos - p.length, t.pos + s.nodeSize, t.pos + g, t.pos + s.nodeSize - g, new Y(m, p.length, 0), 0, !0));
        e(y.scrollIntoView());
      }
      return !0;
    }
  }
  return !1;
}
function Jm(n) {
  return function(t, e) {
    let i = t.selection, r = n < 0 ? i.$from : i.$to, s = r.depth;
    for (; r.node(s).isInline; ) {
      if (!s)
        return !1;
      s--;
    }
    return r.node(s).isTextblock ? (e && e(t.tr.setSelection(ct.create(t.doc, n < 0 ? r.start(s) : r.end(s)))), !0) : !1;
  };
}
const Sx = Jm(-1), Cx = Jm(1);
function Tx(n, t = null) {
  return function(e, i) {
    let { $from: r, $to: s } = e.selection, o = r.blockRange(s), a = o && pu(o, n, t);
    return a ? (i && i(e.tr.wrap(o, a).scrollIntoView()), !0) : !1;
  };
}
function zf(n, t = null) {
  return function(e, i) {
    let r = !1;
    for (let s = 0; s < e.selection.ranges.length && !r; s++) {
      let { $from: { pos: o }, $to: { pos: a } } = e.selection.ranges[s];
      e.doc.nodesBetween(o, a, (l, c) => {
        if (r)
          return !1;
        if (!(!l.isTextblock || l.hasMarkup(n, t)))
          if (l.type == n)
            r = !0;
          else {
            let u = e.doc.resolve(c), d = u.index();
            r = u.parent.canReplaceWith(d, d + 1, n);
          }
      });
    }
    if (!r)
      return !1;
    if (i) {
      let s = e.tr;
      for (let o = 0; o < e.selection.ranges.length; o++) {
        let { $from: { pos: a }, $to: { pos: l } } = e.selection.ranges[o];
        s.setBlockType(a, l, n, t);
      }
      i(s.scrollIntoView());
    }
    return !0;
  };
}
typeof navigator < "u" ? /Mac|iP(hone|[oa]d)/.test(navigator.platform) : typeof os < "u" && os.platform && os.platform() == "darwin";
function Ex(n, t = null) {
  return function(e, i) {
    let { $from: r, $to: s } = e.selection, o = r.blockRange(s);
    if (!o)
      return !1;
    let a = i ? e.tr : null;
    return Ox(a, o, n, t) ? (i && i(a.scrollIntoView()), !0) : !1;
  };
}
function Ox(n, t, e, i = null) {
  let r = !1, s = t, o = t.$from.doc;
  if (t.depth >= 2 && t.$from.node(t.depth - 1).type.compatibleContent(e) && t.startIndex == 0) {
    if (t.$from.index(t.depth - 1) == 0)
      return !1;
    let l = o.resolve(t.start - 2);
    s = new na(l, l, t.depth), t.endIndex < t.parent.childCount && (t = new na(t.$from, o.resolve(t.$to.end(t.depth)), t.depth)), r = !0;
  }
  let a = pu(s, e, i, t);
  return a ? (n && Mx(n, t, a, r, e), !0) : !1;
}
function Mx(n, t, e, i, r) {
  let s = B.empty;
  for (let u = e.length - 1; u >= 0; u--)
    s = B.from(e[u].type.create(e[u].attrs, s));
  n.step(new fe(t.start - (i ? 2 : 0), t.end, t.start, t.end, new Y(s, 0, 0), e.length, !0));
  let o = 0;
  for (let u = 0; u < e.length; u++)
    e[u].type == r && (o = u + 1);
  let a = e.length - o, l = t.start + e.length - (i ? 2 : 0), c = t.parent;
  for (let u = t.startIndex, d = t.endIndex, f = !0; u < d; u++, f = !1)
    !f && yr(n.doc, l, a) && (n.split(l, a), l += 2 * a), l += c.child(u).nodeSize;
  return n;
}
function Ax(n) {
  return function(t, e) {
    let { $from: i, $to: r } = t.selection, s = i.blockRange(r, (o) => o.childCount > 0 && o.firstChild.type == n);
    return s ? e ? i.node(s.depth - 1).type == n ? Nx(t, e, n, s) : Lx(t, e, s) : !0 : !1;
  };
}
function Nx(n, t, e, i) {
  let r = n.tr, s = i.end, o = i.$to.end(i.depth);
  s < o && (r.step(new fe(s - 1, o, s, o, new Y(B.from(e.create(null, i.parent.copy())), 1, 0), 1, !0)), i = new na(r.doc.resolve(i.$from.pos), r.doc.resolve(o), i.depth));
  const a = Wr(i);
  if (a == null)
    return !1;
  r.lift(i, a);
  let l = r.mapping.map(s, -1) - 1;
  return yi(r.doc, l) && r.join(l), t(r.scrollIntoView()), !0;
}
function Lx(n, t, e) {
  let i = n.tr, r = e.parent;
  for (let h = e.end, p = e.endIndex - 1, _ = e.startIndex; p > _; p--)
    h -= r.child(p).nodeSize, i.delete(h - 1, h + 1);
  let s = i.doc.resolve(e.start), o = s.nodeAfter;
  if (i.mapping.map(e.end) != e.start + s.nodeAfter.nodeSize)
    return !1;
  let a = e.startIndex == 0, l = e.endIndex == r.childCount, c = s.node(-1), u = s.index(-1);
  if (!c.canReplace(u + (a ? 0 : 1), u + 1, o.content.append(l ? B.empty : B.from(r))))
    return !1;
  let d = s.pos, f = d + o.nodeSize;
  return i.step(new fe(d - (a ? 1 : 0), f + (l ? 1 : 0), d + 1, f - 1, new Y((a ? B.empty : B.from(r.copy(B.empty))).append(l ? B.empty : B.from(r.copy(B.empty))), a ? 0 : 1, l ? 0 : 1), a ? 0 : 1)), t(i.scrollIntoView()), !0;
}
function Rx(n) {
  return function(t, e) {
    let { $from: i, $to: r } = t.selection, s = i.blockRange(r, (c) => c.childCount > 0 && c.firstChild.type == n);
    if (!s)
      return !1;
    let o = s.startIndex;
    if (o == 0)
      return !1;
    let a = s.parent, l = a.child(o - 1);
    if (l.type != n)
      return !1;
    if (e) {
      let c = l.lastChild && l.lastChild.type == a.type, u = B.from(c ? n.create() : null), d = new Y(B.from(n.create(null, B.from(a.type.create(null, u)))), c ? 3 : 1, 0), f = s.start, h = s.end;
      e(t.tr.step(new fe(f - (c ? 3 : 1), h, f, h, d, 1, !0)).scrollIntoView());
    }
    return !0;
  };
}
function Qs(n) {
  const { state: t, transaction: e } = n;
  let { selection: i } = e, { doc: r } = e, { storedMarks: s } = e;
  return {
    ...t,
    apply: t.apply.bind(t),
    applyTransaction: t.applyTransaction.bind(t),
    plugins: t.plugins,
    schema: t.schema,
    reconfigure: t.reconfigure.bind(t),
    toJSON: t.toJSON.bind(t),
    get storedMarks() {
      return s;
    },
    get selection() {
      return i;
    },
    get doc() {
      return r;
    },
    get tr() {
      return i = e.selection, r = e.doc, s = e.storedMarks, e;
    }
  };
}
class to {
  constructor(t) {
    this.editor = t.editor, this.rawCommands = this.editor.extensionManager.commands, this.customState = t.state;
  }
  get hasCustomState() {
    return !!this.customState;
  }
  get state() {
    return this.customState || this.editor.state;
  }
  get commands() {
    const { rawCommands: t, editor: e, state: i } = this, { view: r } = e, { tr: s } = i, o = this.buildProps(s);
    return Object.fromEntries(Object.entries(t).map(([a, l]) => [a, (...u) => {
      const d = l(...u)(o);
      return !s.getMeta("preventDispatch") && !this.hasCustomState && r.dispatch(s), d;
    }]));
  }
  get chain() {
    return () => this.createChain();
  }
  get can() {
    return () => this.createCan();
  }
  createChain(t, e = !0) {
    const { rawCommands: i, editor: r, state: s } = this, { view: o } = r, a = [], l = !!t, c = t || s.tr, u = () => (!l && e && !c.getMeta("preventDispatch") && !this.hasCustomState && o.dispatch(c), a.every((f) => f === !0)), d = {
      ...Object.fromEntries(Object.entries(i).map(([f, h]) => [f, (..._) => {
        const g = this.buildProps(c, e), m = h(..._)(g);
        return a.push(m), d;
      }])),
      run: u
    };
    return d;
  }
  createCan(t) {
    const { rawCommands: e, state: i } = this, r = !1, s = t || i.tr, o = this.buildProps(s, r);
    return {
      ...Object.fromEntries(Object.entries(e).map(([l, c]) => [l, (...u) => c(...u)({ ...o, dispatch: void 0 })])),
      chain: () => this.createChain(s, r)
    };
  }
  buildProps(t, e = !0) {
    const { rawCommands: i, editor: r, state: s } = this, { view: o } = r, a = {
      tr: t,
      editor: r,
      view: o,
      state: Qs({
        state: s,
        transaction: t
      }),
      dispatch: e ? () => {
      } : void 0,
      chain: () => this.createChain(t, e),
      can: () => this.createCan(t),
      get commands() {
        return Object.fromEntries(Object.entries(i).map(([l, c]) => [l, (...u) => c(...u)(a)]));
      }
    };
    return a;
  }
}
class Ix {
  constructor() {
    this.callbacks = {};
  }
  on(t, e) {
    return this.callbacks[t] || (this.callbacks[t] = []), this.callbacks[t].push(e), this;
  }
  emit(t, ...e) {
    const i = this.callbacks[t];
    return i && i.forEach((r) => r.apply(this, e)), this;
  }
  off(t, e) {
    const i = this.callbacks[t];
    return i && (e ? this.callbacks[t] = i.filter((r) => r !== e) : delete this.callbacks[t]), this;
  }
  once(t, e) {
    const i = (...r) => {
      this.off(t, i), e.apply(this, r);
    };
    return this.on(t, i);
  }
  removeAllListeners() {
    this.callbacks = {};
  }
}
function tt(n, t, e) {
  return n.config[t] === void 0 && n.parent ? tt(n.parent, t, e) : typeof n.config[t] == "function" ? n.config[t].bind({
    ...e,
    parent: n.parent ? tt(n.parent, t, e) : null
  }) : n.config[t];
}
function eo(n) {
  const t = n.filter((r) => r.type === "extension"), e = n.filter((r) => r.type === "node"), i = n.filter((r) => r.type === "mark");
  return {
    baseExtensions: t,
    nodeExtensions: e,
    markExtensions: i
  };
}
function Ou(n) {
  const t = [], { nodeExtensions: e, markExtensions: i } = eo(n), r = [...e, ...i], s = {
    default: null,
    rendered: !0,
    renderHTML: null,
    parseHTML: null,
    keepOnSplit: !0,
    isRequired: !1
  };
  return n.forEach((o) => {
    const a = {
      name: o.name,
      options: o.options,
      storage: o.storage,
      extensions: r
    }, l = tt(o, "addGlobalAttributes", a);
    if (!l)
      return;
    l().forEach((u) => {
      u.types.forEach((d) => {
        Object.entries(u.attributes).forEach(([f, h]) => {
          t.push({
            type: d,
            name: f,
            attribute: {
              ...s,
              ...h
            }
          });
        });
      });
    });
  }), r.forEach((o) => {
    const a = {
      name: o.name,
      options: o.options,
      storage: o.storage
    }, l = tt(o, "addAttributes", a);
    if (!l)
      return;
    const c = l();
    Object.entries(c).forEach(([u, d]) => {
      const f = {
        ...s,
        ...d
      };
      typeof (f == null ? void 0 : f.default) == "function" && (f.default = f.default()), f != null && f.isRequired && (f == null ? void 0 : f.default) === void 0 && delete f.default, t.push({
        type: o.name,
        name: u,
        attribute: f
      });
    });
  }), t;
}
function oe(n, t) {
  if (typeof n == "string") {
    if (!t.nodes[n])
      throw Error(`There is no node type named '${n}'. Maybe you forgot to add the extension?`);
    return t.nodes[n];
  }
  return n;
}
function Mt(...n) {
  return n.filter((t) => !!t).reduce((t, e) => {
    const i = { ...t };
    return Object.entries(e).forEach(([r, s]) => {
      if (!i[r]) {
        i[r] = s;
        return;
      }
      if (r === "class") {
        const a = s ? String(s).split(" ") : [], l = i[r] ? i[r].split(" ") : [], c = a.filter((u) => !l.includes(u));
        i[r] = [...l, ...c].join(" ");
      } else if (r === "style") {
        const a = s ? s.split(";").map((u) => u.trim()).filter(Boolean) : [], l = i[r] ? i[r].split(";").map((u) => u.trim()).filter(Boolean) : [], c = /* @__PURE__ */ new Map();
        l.forEach((u) => {
          const [d, f] = u.split(":").map((h) => h.trim());
          c.set(d, f);
        }), a.forEach((u) => {
          const [d, f] = u.split(":").map((h) => h.trim());
          c.set(d, f);
        }), i[r] = Array.from(c.entries()).map(([u, d]) => `${u}: ${d}`).join("; ");
      } else
        i[r] = s;
    }), i;
  }, {});
}
function ua(n, t) {
  return t.filter((e) => e.type === n.type.name).filter((e) => e.attribute.rendered).map((e) => e.attribute.renderHTML ? e.attribute.renderHTML(n.attrs) || {} : {
    [e.name]: n.attrs[e.name]
  }).reduce((e, i) => Mt(e, i), {});
}
function Mu(n) {
  return typeof n == "function";
}
function bt(n, t = void 0, ...e) {
  return Mu(n) ? t ? n.bind(t)(...e) : n(...e) : n;
}
function Xm(n = {}) {
  return Object.keys(n).length === 0 && n.constructor === Object;
}
function Ym(n) {
  return typeof n != "string" ? n : n.match(/^[+-]?(?:\d*\.)?\d+$/) ? Number(n) : n === "true" ? !0 : n === "false" ? !1 : n;
}
function Lc(n, t) {
  return "style" in n ? n : {
    ...n,
    getAttrs: (e) => {
      const i = n.getAttrs ? n.getAttrs(e) : n.attrs;
      if (i === !1)
        return !1;
      const r = t.reduce((s, o) => {
        const a = o.attribute.parseHTML ? o.attribute.parseHTML(e) : Ym(e.getAttribute(o.name));
        return a == null ? s : {
          ...s,
          [o.name]: a
        };
      }, {});
      return { ...i, ...r };
    }
  };
}
function Hf(n) {
  return Object.fromEntries(
    // @ts-ignore
    Object.entries(n).filter(([t, e]) => t === "attrs" && Xm(e) ? !1 : e != null)
  );
}
function Au(n, t) {
  var e;
  const i = Ou(n), { nodeExtensions: r, markExtensions: s } = eo(n), o = (e = r.find((c) => tt(c, "topNode"))) === null || e === void 0 ? void 0 : e.name, a = Object.fromEntries(r.map((c) => {
    const u = i.filter((m) => m.type === c.name), d = {
      name: c.name,
      options: c.options,
      storage: c.storage,
      editor: t
    }, f = n.reduce((m, y) => {
      const x = tt(y, "extendNodeSchema", d);
      return {
        ...m,
        ...x ? x(c) : {}
      };
    }, {}), h = Hf({
      ...f,
      content: bt(tt(c, "content", d)),
      marks: bt(tt(c, "marks", d)),
      group: bt(tt(c, "group", d)),
      inline: bt(tt(c, "inline", d)),
      atom: bt(tt(c, "atom", d)),
      selectable: bt(tt(c, "selectable", d)),
      draggable: bt(tt(c, "draggable", d)),
      code: bt(tt(c, "code", d)),
      whitespace: bt(tt(c, "whitespace", d)),
      linebreakReplacement: bt(tt(c, "linebreakReplacement", d)),
      defining: bt(tt(c, "defining", d)),
      isolating: bt(tt(c, "isolating", d)),
      attrs: Object.fromEntries(u.map((m) => {
        var y;
        return [m.name, { default: (y = m == null ? void 0 : m.attribute) === null || y === void 0 ? void 0 : y.default }];
      }))
    }), p = bt(tt(c, "parseHTML", d));
    p && (h.parseDOM = p.map((m) => Lc(m, u)));
    const _ = tt(c, "renderHTML", d);
    _ && (h.toDOM = (m) => _({
      node: m,
      HTMLAttributes: ua(m, u)
    }));
    const g = tt(c, "renderText", d);
    return g && (h.toText = g), [c.name, h];
  })), l = Object.fromEntries(s.map((c) => {
    const u = i.filter((g) => g.type === c.name), d = {
      name: c.name,
      options: c.options,
      storage: c.storage,
      editor: t
    }, f = n.reduce((g, m) => {
      const y = tt(m, "extendMarkSchema", d);
      return {
        ...g,
        ...y ? y(c) : {}
      };
    }, {}), h = Hf({
      ...f,
      inclusive: bt(tt(c, "inclusive", d)),
      excludes: bt(tt(c, "excludes", d)),
      group: bt(tt(c, "group", d)),
      spanning: bt(tt(c, "spanning", d)),
      code: bt(tt(c, "code", d)),
      attrs: Object.fromEntries(u.map((g) => {
        var m;
        return [g.name, { default: (m = g == null ? void 0 : g.attribute) === null || m === void 0 ? void 0 : m.default }];
      }))
    }), p = bt(tt(c, "parseHTML", d));
    p && (h.parseDOM = p.map((g) => Lc(g, u)));
    const _ = tt(c, "renderHTML", d);
    return _ && (h.toDOM = (g) => _({
      mark: g,
      HTMLAttributes: ua(g, u)
    })), [c.name, h];
  }));
  return new Up({
    topNode: o,
    nodes: a,
    marks: l
  });
}
function Vo(n, t) {
  return t.nodes[n] || t.marks[n] || null;
}
function Rc(n, t) {
  return Array.isArray(t) ? t.some((e) => (typeof e == "string" ? e : e.name) === n.name) : t;
}
function no(n, t) {
  const e = Xi.fromSchema(t).serializeFragment(n), r = document.implementation.createHTMLDocument().createElement("div");
  return r.appendChild(e), r.innerHTML;
}
const Zm = (n, t = 500) => {
  let e = "";
  const i = n.parentOffset;
  return n.parent.nodesBetween(Math.max(0, i - t), i, (r, s, o, a) => {
    var l, c;
    const u = ((c = (l = r.type.spec).toText) === null || c === void 0 ? void 0 : c.call(l, {
      node: r,
      pos: s,
      parent: o,
      index: a
    })) || r.textContent || "%leaf%";
    e += r.isAtom && !r.isText ? u : u.slice(0, Math.max(0, i - s));
  }), e;
};
function Qa(n) {
  return Object.prototype.toString.call(n) === "[object RegExp]";
}
class Yi {
  constructor(t) {
    this.find = t.find, this.handler = t.handler;
  }
}
const Px = (n, t) => {
  if (Qa(t))
    return t.exec(n);
  const e = t(n);
  if (!e)
    return null;
  const i = [e.text];
  return i.index = e.index, i.input = n, i.data = e.data, e.replaceWith && (e.text.includes(e.replaceWith) || console.warn('[tiptap warn]: "inputRuleMatch.replaceWith" must be part of "inputRuleMatch.text".'), i.push(e.replaceWith)), i;
};
function bo(n) {
  var t;
  const { editor: e, from: i, to: r, text: s, rules: o, plugin: a } = n, { view: l } = e;
  if (l.composing)
    return !1;
  const c = l.state.doc.resolve(i);
  if (
    // check for code node
    c.parent.type.spec.code || !((t = c.nodeBefore || c.nodeAfter) === null || t === void 0) && t.marks.find((f) => f.type.spec.code)
  )
    return !1;
  let u = !1;
  const d = Zm(c) + s;
  return o.forEach((f) => {
    if (u)
      return;
    const h = Px(d, f.find);
    if (!h)
      return;
    const p = l.state.tr, _ = Qs({
      state: l.state,
      transaction: p
    }), g = {
      from: i - (h[0].length - s.length),
      to: r
    }, { commands: m, chain: y, can: x } = new to({
      editor: e,
      state: _
    });
    f.handler({
      state: _,
      range: g,
      match: h,
      commands: m,
      chain: y,
      can: x
    }) === null || !p.steps.length || (p.setMeta(a, {
      transform: p,
      from: i,
      to: r,
      text: s
    }), l.dispatch(p), u = !0);
  }), u;
}
function Qm(n) {
  const { editor: t, rules: e } = n, i = new pe({
    state: {
      init() {
        return null;
      },
      apply(r, s, o) {
        const a = r.getMeta(i);
        if (a)
          return a;
        const l = r.getMeta("applyInputRules");
        return !!l && setTimeout(() => {
          let { text: u } = l;
          typeof u == "string" ? u = u : u = no(B.from(u), o.schema);
          const { from: d } = l, f = d + u.length;
          bo({
            editor: t,
            from: d,
            to: f,
            text: u,
            rules: e,
            plugin: i
          });
        }), r.selectionSet || r.docChanged ? null : s;
      }
    },
    props: {
      handleTextInput(r, s, o, a) {
        return bo({
          editor: t,
          from: s,
          to: o,
          text: a,
          rules: e,
          plugin: i
        });
      },
      handleDOMEvents: {
        compositionend: (r) => (setTimeout(() => {
          const { $cursor: s } = r.state.selection;
          s && bo({
            editor: t,
            from: s.pos,
            to: s.pos,
            text: "",
            rules: e,
            plugin: i
          });
        }), !1)
      },
      // add support for input rules to trigger on enter
      // this is useful for example for code blocks
      handleKeyDown(r, s) {
        if (s.key !== "Enter")
          return !1;
        const { $cursor: o } = r.state.selection;
        return o ? bo({
          editor: t,
          from: o.pos,
          to: o.pos,
          text: `
`,
          rules: e,
          plugin: i
        }) : !1;
      }
    },
    // @ts-ignore
    isInputRules: !0
  });
  return i;
}
function Dx(n) {
  return Object.prototype.toString.call(n).slice(8, -1);
}
function ds(n) {
  return Dx(n) !== "Object" ? !1 : n.constructor === Object && Object.getPrototypeOf(n) === Object.prototype;
}
function io(n, t) {
  const e = { ...n };
  return ds(n) && ds(t) && Object.keys(t).forEach((i) => {
    ds(t[i]) && ds(n[i]) ? e[i] = io(n[i], t[i]) : e[i] = t[i];
  }), e;
}
class Ve {
  constructor(t = {}) {
    this.type = "mark", this.name = "mark", this.parent = null, this.child = null, this.config = {
      name: this.name,
      defaultOptions: {}
    }, this.config = {
      ...this.config,
      ...t
    }, this.name = this.config.name, t.defaultOptions && Object.keys(t.defaultOptions).length > 0 && console.warn(`[tiptap warn]: BREAKING CHANGE: "defaultOptions" is deprecated. Please use "addOptions" instead. Found in extension: "${this.name}".`), this.options = this.config.defaultOptions, this.config.addOptions && (this.options = bt(tt(this, "addOptions", {
      name: this.name
    }))), this.storage = bt(tt(this, "addStorage", {
      name: this.name,
      options: this.options
    })) || {};
  }
  static create(t = {}) {
    return new Ve(t);
  }
  configure(t = {}) {
    const e = this.extend({
      ...this.config,
      addOptions: () => io(this.options, t)
    });
    return e.name = this.name, e.parent = this.parent, e;
  }
  extend(t = {}) {
    const e = new Ve(t);
    return e.parent = this, this.child = e, e.name = t.name ? t.name : e.parent.name, t.defaultOptions && Object.keys(t.defaultOptions).length > 0 && console.warn(`[tiptap warn]: BREAKING CHANGE: "defaultOptions" is deprecated. Please use "addOptions" instead. Found in extension: "${e.name}".`), e.options = bt(tt(e, "addOptions", {
      name: e.name
    })), e.storage = bt(tt(e, "addStorage", {
      name: e.name,
      options: e.options
    })), e;
  }
  static handleExit({ editor: t, mark: e }) {
    const { tr: i } = t.state, r = t.state.selection.$from;
    if (r.pos === r.end()) {
      const o = r.marks();
      if (!!!o.find((c) => (c == null ? void 0 : c.type.name) === e.name))
        return !1;
      const l = o.find((c) => (c == null ? void 0 : c.type.name) === e.name);
      return l && i.removeStoredMark(l), i.insertText(" ", r.pos), t.view.dispatch(i), !0;
    }
    return !1;
  }
}
function tg(n) {
  return typeof n == "number";
}
class tl {
  constructor(t) {
    this.find = t.find, this.handler = t.handler;
  }
}
const $x = (n, t, e) => {
  if (Qa(t))
    return [...n.matchAll(t)];
  const i = t(n, e);
  return i ? i.map((r) => {
    const s = [r.text];
    return s.index = r.index, s.input = n, s.data = r.data, r.replaceWith && (r.text.includes(r.replaceWith) || console.warn('[tiptap warn]: "pasteRuleMatch.replaceWith" must be part of "pasteRuleMatch.text".'), s.push(r.replaceWith)), s;
  }) : [];
};
function Bx(n) {
  const { editor: t, state: e, from: i, to: r, rule: s, pasteEvent: o, dropEvent: a } = n, { commands: l, chain: c, can: u } = new to({
    editor: t,
    state: e
  }), d = [];
  return e.doc.nodesBetween(i, r, (h, p) => {
    if (!h.isTextblock || h.type.spec.code)
      return;
    const _ = Math.max(i, p), g = Math.min(r, p + h.content.size), m = h.textBetween(_ - p, g - p, void 0, "￼");
    $x(m, s.find, o).forEach((x) => {
      if (x.index === void 0)
        return;
      const k = _ + x.index + 1, S = k + x[0].length, w = {
        from: e.tr.mapping.map(k),
        to: e.tr.mapping.map(S)
      }, O = s.handler({
        state: e,
        range: w,
        match: x,
        commands: l,
        chain: c,
        can: u,
        pasteEvent: o,
        dropEvent: a
      });
      d.push(O);
    });
  }), d.every((h) => h !== null);
}
let yo = null;
const zx = (n) => {
  var t;
  const e = new ClipboardEvent("paste", {
    clipboardData: new DataTransfer()
  });
  return (t = e.clipboardData) === null || t === void 0 || t.setData("text/html", n), e;
};
function eg(n) {
  const { editor: t, rules: e } = n;
  let i = null, r = !1, s = !1, o = typeof ClipboardEvent < "u" ? new ClipboardEvent("paste") : null, a;
  try {
    a = typeof DragEvent < "u" ? new DragEvent("drop") : null;
  } catch {
    a = null;
  }
  const l = ({ state: u, from: d, to: f, rule: h, pasteEvt: p }) => {
    const _ = u.tr, g = Qs({
      state: u,
      transaction: _
    });
    if (!(!Bx({
      editor: t,
      state: g,
      from: Math.max(d - 1, 0),
      to: f.b - 1,
      rule: h,
      pasteEvent: p,
      dropEvent: a
    }) || !_.steps.length)) {
      try {
        a = typeof DragEvent < "u" ? new DragEvent("drop") : null;
      } catch {
        a = null;
      }
      return o = typeof ClipboardEvent < "u" ? new ClipboardEvent("paste") : null, _;
    }
  };
  return e.map((u) => new pe({
    // we register a global drag handler to track the current drag source element
    view(d) {
      const f = (p) => {
        var _;
        i = !((_ = d.dom.parentElement) === null || _ === void 0) && _.contains(p.target) ? d.dom.parentElement : null, i && (yo = t);
      }, h = () => {
        yo && (yo = null);
      };
      return window.addEventListener("dragstart", f), window.addEventListener("dragend", h), {
        destroy() {
          window.removeEventListener("dragstart", f), window.removeEventListener("dragend", h);
        }
      };
    },
    props: {
      handleDOMEvents: {
        drop: (d, f) => {
          if (s = i === d.dom.parentElement, a = f, !s) {
            const h = yo;
            h && setTimeout(() => {
              const p = h.state.selection;
              p && h.commands.deleteRange({ from: p.from, to: p.to });
            }, 10);
          }
          return !1;
        },
        paste: (d, f) => {
          var h;
          const p = (h = f.clipboardData) === null || h === void 0 ? void 0 : h.getData("text/html");
          return o = f, r = !!(p != null && p.includes("data-pm-slice")), !1;
        }
      }
    },
    appendTransaction: (d, f, h) => {
      const p = d[0], _ = p.getMeta("uiEvent") === "paste" && !r, g = p.getMeta("uiEvent") === "drop" && !s, m = p.getMeta("applyPasteRules"), y = !!m;
      if (!_ && !g && !y)
        return;
      if (y) {
        let { text: S } = m;
        typeof S == "string" ? S = S : S = no(B.from(S), h.schema);
        const { from: w } = m, O = w + S.length, v = zx(S);
        return l({
          rule: u,
          state: h,
          from: w,
          to: { b: O },
          pasteEvt: v
        });
      }
      const x = f.doc.content.findDiffStart(h.doc.content), k = f.doc.content.findDiffEnd(h.doc.content);
      if (!(!tg(x) || !k || x === k.b))
        return l({
          rule: u,
          state: h,
          from: x,
          to: k,
          pasteEvt: o
        });
    }
  }));
}
function ng(n) {
  const t = n.filter((e, i) => n.indexOf(e) !== i);
  return Array.from(new Set(t));
}
class Ei {
  constructor(t, e) {
    this.splittableMarks = [], this.editor = e, this.extensions = Ei.resolve(t), this.schema = Au(this.extensions, e), this.setupExtensions();
  }
  /**
   * Returns a flattened and sorted extension list while
   * also checking for duplicated extensions and warns the user.
   * @param extensions An array of Tiptap extensions
   * @returns An flattened and sorted array of Tiptap extensions
   */
  static resolve(t) {
    const e = Ei.sort(Ei.flatten(t)), i = ng(e.map((r) => r.name));
    return i.length && console.warn(`[tiptap warn]: Duplicate extension names found: [${i.map((r) => `'${r}'`).join(", ")}]. This can lead to issues.`), e;
  }
  /**
   * Create a flattened array of extensions by traversing the `addExtensions` field.
   * @param extensions An array of Tiptap extensions
   * @returns A flattened array of Tiptap extensions
   */
  static flatten(t) {
    return t.map((e) => {
      const i = {
        name: e.name,
        options: e.options,
        storage: e.storage
      }, r = tt(e, "addExtensions", i);
      return r ? [e, ...this.flatten(r())] : e;
    }).flat(10);
  }
  /**
   * Sort extensions by priority.
   * @param extensions An array of Tiptap extensions
   * @returns A sorted array of Tiptap extensions by priority
   */
  static sort(t) {
    return t.sort((i, r) => {
      const s = tt(i, "priority") || 100, o = tt(r, "priority") || 100;
      return s > o ? -1 : s < o ? 1 : 0;
    });
  }
  /**
   * Get all commands from the extensions.
   * @returns An object with all commands where the key is the command name and the value is the command function
   */
  get commands() {
    return this.extensions.reduce((t, e) => {
      const i = {
        name: e.name,
        options: e.options,
        storage: e.storage,
        editor: this.editor,
        type: Vo(e.name, this.schema)
      }, r = tt(e, "addCommands", i);
      return r ? {
        ...t,
        ...r()
      } : t;
    }, {});
  }
  /**
   * Get all registered Prosemirror plugins from the extensions.
   * @returns An array of Prosemirror plugins
   */
  get plugins() {
    const { editor: t } = this, e = Ei.sort([...this.extensions].reverse()), i = [], r = [], s = e.map((o) => {
      const a = {
        name: o.name,
        options: o.options,
        storage: o.storage,
        editor: t,
        type: Vo(o.name, this.schema)
      }, l = [], c = tt(o, "addKeyboardShortcuts", a);
      let u = {};
      if (o.type === "mark" && tt(o, "exitable", a) && (u.ArrowRight = () => Ve.handleExit({ editor: t, mark: o })), c) {
        const _ = Object.fromEntries(Object.entries(c()).map(([g, m]) => [g, () => m({ editor: t })]));
        u = { ...u, ..._ };
      }
      const d = ax(u);
      l.push(d);
      const f = tt(o, "addInputRules", a);
      Rc(o, t.options.enableInputRules) && f && i.push(...f());
      const h = tt(o, "addPasteRules", a);
      Rc(o, t.options.enablePasteRules) && h && r.push(...h());
      const p = tt(o, "addProseMirrorPlugins", a);
      if (p) {
        const _ = p();
        l.push(..._);
      }
      return l;
    }).flat();
    return [
      Qm({
        editor: t,
        rules: i
      }),
      ...eg({
        editor: t,
        rules: r
      }),
      ...s
    ];
  }
  /**
   * Get all attributes from the extensions.
   * @returns An array of attributes
   */
  get attributes() {
    return Ou(this.extensions);
  }
  /**
   * Get all node views from the extensions.
   * @returns An object with all node views where the key is the node name and the value is the node view function
   */
  get nodeViews() {
    const { editor: t } = this, { nodeExtensions: e } = eo(this.extensions);
    return Object.fromEntries(e.filter((i) => !!tt(i, "addNodeView")).map((i) => {
      const r = this.attributes.filter((l) => l.type === i.name), s = {
        name: i.name,
        options: i.options,
        storage: i.storage,
        editor: t,
        type: oe(i.name, this.schema)
      }, o = tt(i, "addNodeView", s);
      if (!o)
        return [];
      const a = (l, c, u, d, f) => {
        const h = ua(l, r);
        return o()({
          // pass-through
          node: l,
          view: c,
          getPos: u,
          decorations: d,
          innerDecorations: f,
          // tiptap-specific
          editor: t,
          extension: i,
          HTMLAttributes: h
        });
      };
      return [i.name, a];
    }));
  }
  /**
   * Go through all extensions, create extension storages & setup marks
   * & bind editor event listener.
   */
  setupExtensions() {
    this.extensions.forEach((t) => {
      var e;
      this.editor.extensionStorage[t.name] = t.storage;
      const i = {
        name: t.name,
        options: t.options,
        storage: t.storage,
        editor: this.editor,
        type: Vo(t.name, this.schema)
      };
      t.type === "mark" && (!((e = bt(tt(t, "keepOnSplit", i))) !== null && e !== void 0) || e) && this.splittableMarks.push(t.name);
      const r = tt(t, "onBeforeCreate", i), s = tt(t, "onCreate", i), o = tt(t, "onUpdate", i), a = tt(t, "onSelectionUpdate", i), l = tt(t, "onTransaction", i), c = tt(t, "onFocus", i), u = tt(t, "onBlur", i), d = tt(t, "onDestroy", i);
      r && this.editor.on("beforeCreate", r), s && this.editor.on("create", s), o && this.editor.on("update", o), a && this.editor.on("selectionUpdate", a), l && this.editor.on("transaction", l), c && this.editor.on("focus", c), u && this.editor.on("blur", u), d && this.editor.on("destroy", d);
    });
  }
}
let ee = class Ic {
  constructor(t = {}) {
    this.type = "extension", this.name = "extension", this.parent = null, this.child = null, this.config = {
      name: this.name,
      defaultOptions: {}
    }, this.config = {
      ...this.config,
      ...t
    }, this.name = this.config.name, t.defaultOptions && Object.keys(t.defaultOptions).length > 0 && console.warn(`[tiptap warn]: BREAKING CHANGE: "defaultOptions" is deprecated. Please use "addOptions" instead. Found in extension: "${this.name}".`), this.options = this.config.defaultOptions, this.config.addOptions && (this.options = bt(tt(this, "addOptions", {
      name: this.name
    }))), this.storage = bt(tt(this, "addStorage", {
      name: this.name,
      options: this.options
    })) || {};
  }
  static create(t = {}) {
    return new Ic(t);
  }
  configure(t = {}) {
    const e = this.extend({
      ...this.config,
      addOptions: () => io(this.options, t)
    });
    return e.name = this.name, e.parent = this.parent, e;
  }
  extend(t = {}) {
    const e = new Ic({ ...this.config, ...t });
    return e.parent = this, this.child = e, e.name = t.name ? t.name : e.parent.name, t.defaultOptions && Object.keys(t.defaultOptions).length > 0 && console.warn(`[tiptap warn]: BREAKING CHANGE: "defaultOptions" is deprecated. Please use "addOptions" instead. Found in extension: "${e.name}".`), e.options = bt(tt(e, "addOptions", {
      name: e.name
    })), e.storage = bt(tt(e, "addStorage", {
      name: e.name,
      options: e.options
    })), e;
  }
};
function Nu(n, t, e) {
  const { from: i, to: r } = t, { blockSeparator: s = `

`, textSerializers: o = {} } = e || {};
  let a = "";
  return n.nodesBetween(i, r, (l, c, u, d) => {
    var f;
    l.isBlock && c > i && (a += s);
    const h = o == null ? void 0 : o[l.type.name];
    if (h)
      return u && (a += h({
        node: l,
        pos: c,
        parent: u,
        index: d,
        range: t
      })), !1;
    l.isText && (a += (f = l == null ? void 0 : l.text) === null || f === void 0 ? void 0 : f.slice(Math.max(i, c) - c, r - c));
  }), a;
}
function el(n) {
  return Object.fromEntries(Object.entries(n.nodes).filter(([, t]) => t.spec.toText).map(([t, e]) => [t, e.spec.toText]));
}
const ig = ee.create({
  name: "clipboardTextSerializer",
  addOptions() {
    return {
      blockSeparator: void 0
    };
  },
  addProseMirrorPlugins() {
    return [
      new pe({
        key: new $e("clipboardTextSerializer"),
        props: {
          clipboardTextSerializer: () => {
            const { editor: n } = this, { state: t, schema: e } = n, { doc: i, selection: r } = t, { ranges: s } = r, o = Math.min(...s.map((u) => u.$from.pos)), a = Math.max(...s.map((u) => u.$to.pos)), l = el(e);
            return Nu(i, { from: o, to: a }, {
              ...this.options.blockSeparator !== void 0 ? { blockSeparator: this.options.blockSeparator } : {},
              textSerializers: l
            });
          }
        }
      })
    ];
  }
}), Hx = () => ({ editor: n, view: t }) => (requestAnimationFrame(() => {
  var e;
  n.isDestroyed || (t.dom.blur(), (e = window == null ? void 0 : window.getSelection()) === null || e === void 0 || e.removeAllRanges());
}), !0), Fx = (n = !1) => ({ commands: t }) => t.setContent("", n), Vx = () => ({ state: n, tr: t, dispatch: e }) => {
  const { selection: i } = t, { ranges: r } = i;
  return e && r.forEach(({ $from: s, $to: o }) => {
    n.doc.nodesBetween(s.pos, o.pos, (a, l) => {
      if (a.type.isText)
        return;
      const { doc: c, mapping: u } = t, d = c.resolve(u.map(l)), f = c.resolve(u.map(l + a.nodeSize)), h = d.blockRange(f);
      if (!h)
        return;
      const p = Wr(h);
      if (a.type.isTextblock) {
        const { defaultType: _ } = d.parent.contentMatchAt(d.index());
        t.setNodeMarkup(h.start, _);
      }
      (p || p === 0) && t.lift(h, p);
    });
  }), !0;
}, jx = (n) => (t) => n(t), Wx = () => ({ state: n, dispatch: t }) => vx(n, t), Ux = (n, t) => ({ editor: e, tr: i }) => {
  const { state: r } = e, s = r.doc.slice(n.from, n.to);
  i.deleteRange(n.from, n.to);
  const o = i.mapping.map(t);
  return i.insert(o, s.content), i.setSelection(new ct(i.doc.resolve(o - 1))), !0;
}, Kx = () => ({ tr: n, dispatch: t }) => {
  const { selection: e } = n, i = e.$anchor.node();
  if (i.content.size > 0)
    return !1;
  const r = n.selection.$anchor;
  for (let s = r.depth; s > 0; s -= 1)
    if (r.node(s).type === i.type) {
      if (t) {
        const a = r.before(s), l = r.after(s);
        n.delete(a, l).scrollIntoView();
      }
      return !0;
    }
  return !1;
}, qx = (n) => ({ tr: t, state: e, dispatch: i }) => {
  const r = oe(n, e.schema), s = t.selection.$anchor;
  for (let o = s.depth; o > 0; o -= 1)
    if (s.node(o).type === r) {
      if (i) {
        const l = s.before(o), c = s.after(o);
        t.delete(l, c).scrollIntoView();
      }
      return !0;
    }
  return !1;
}, Gx = (n) => ({ tr: t, dispatch: e }) => {
  const { from: i, to: r } = n;
  return e && t.delete(i, r), !0;
}, Jx = () => ({ state: n, dispatch: t }) => lx(n, t), Xx = () => ({ commands: n }) => n.keyboardShortcut("Enter"), Yx = () => ({ state: n, dispatch: t }) => yx(n, t);
function Bs(n, t, e = { strict: !0 }) {
  const i = Object.keys(t);
  return i.length ? i.every((r) => e.strict ? t[r] === n[r] : Qa(t[r]) ? t[r].test(n[r]) : t[r] === n[r]) : !0;
}
function rg(n, t, e = {}) {
  return n.find((i) => i.type === t && Bs(
    // Only check equality for the attributes that are provided
    Object.fromEntries(Object.keys(e).map((r) => [r, i.attrs[r]])),
    e
  ));
}
function Ff(n, t, e = {}) {
  return !!rg(n, t, e);
}
function nl(n, t, e) {
  var i;
  if (!n || !t)
    return;
  let r = n.parent.childAfter(n.parentOffset);
  if ((!r.node || !r.node.marks.some((u) => u.type === t)) && (r = n.parent.childBefore(n.parentOffset)), !r.node || !r.node.marks.some((u) => u.type === t) || (e = e || ((i = r.node.marks[0]) === null || i === void 0 ? void 0 : i.attrs), !rg([...r.node.marks], t, e)))
    return;
  let o = r.index, a = n.start() + r.offset, l = o + 1, c = a + r.node.nodeSize;
  for (; o > 0 && Ff([...n.parent.child(o - 1).marks], t, e); )
    o -= 1, a -= n.parent.child(o).nodeSize;
  for (; l < n.parent.childCount && Ff([...n.parent.child(l).marks], t, e); )
    c += n.parent.child(l).nodeSize, l += 1;
  return {
    from: a,
    to: c
  };
}
function Xn(n, t) {
  if (typeof n == "string") {
    if (!t.marks[n])
      throw Error(`There is no mark type named '${n}'. Maybe you forgot to add the extension?`);
    return t.marks[n];
  }
  return n;
}
const Zx = (n, t = {}) => ({ tr: e, state: i, dispatch: r }) => {
  const s = Xn(n, i.schema), { doc: o, selection: a } = e, { $from: l, from: c, to: u } = a;
  if (r) {
    const d = nl(l, s, t);
    if (d && d.from <= c && d.to >= u) {
      const f = ct.create(o, d.from, d.to);
      e.setSelection(f);
    }
  }
  return !0;
}, Qx = (n) => (t) => {
  const e = typeof n == "function" ? n(t) : n;
  for (let i = 0; i < e.length; i += 1)
    if (e[i](t))
      return !0;
  return !1;
};
function Lu(n) {
  return n instanceof ct;
}
function In(n = 0, t = 0, e = 0) {
  return Math.min(Math.max(n, t), e);
}
function Ru(n, t = null) {
  if (!t)
    return null;
  const e = ft.atStart(n), i = ft.atEnd(n);
  if (t === "start" || t === !0)
    return e;
  if (t === "end")
    return i;
  const r = e.from, s = i.to;
  return t === "all" ? ct.create(n, In(0, r, s), In(n.content.size, r, s)) : ct.create(n, In(t, r, s), In(t, r, s));
}
function sg() {
  return navigator.platform === "Android" || /android/i.test(navigator.userAgent);
}
function ro() {
  return [
    "iPad Simulator",
    "iPhone Simulator",
    "iPod Simulator",
    "iPad",
    "iPhone",
    "iPod"
  ].includes(navigator.platform) || navigator.userAgent.includes("Mac") && "ontouchend" in document;
}
const tw = (n = null, t = {}) => ({ editor: e, view: i, tr: r, dispatch: s }) => {
  t = {
    scrollIntoView: !0,
    ...t
  };
  const o = () => {
    (ro() || sg()) && i.dom.focus(), requestAnimationFrame(() => {
      e.isDestroyed || (i.focus(), t != null && t.scrollIntoView && e.commands.scrollIntoView());
    });
  };
  if (i.hasFocus() && n === null || n === !1)
    return !0;
  if (s && n === null && !Lu(e.state.selection))
    return o(), !0;
  const a = Ru(r.doc, n) || e.state.selection, l = e.state.selection.eq(a);
  return s && (l || r.setSelection(a), l && r.storedMarks && r.setStoredMarks(r.storedMarks), o()), !0;
}, ew = (n, t) => (e) => n.every((i, r) => t(i, { ...e, index: r })), nw = (n, t) => ({ tr: e, commands: i }) => i.insertContentAt({ from: e.selection.from, to: e.selection.to }, n, t), og = (n) => {
  const t = n.childNodes;
  for (let e = t.length - 1; e >= 0; e -= 1) {
    const i = t[e];
    i.nodeType === 3 && i.nodeValue && /^(\n\s\s|\n)$/.test(i.nodeValue) ? n.removeChild(i) : i.nodeType === 1 && og(i);
  }
  return n;
};
function fr(n) {
  const t = `<body>${n}</body>`, e = new window.DOMParser().parseFromString(t, "text/html").body;
  return og(e);
}
function zs(n, t, e) {
  if (n instanceof Pn || n instanceof B)
    return n;
  e = {
    slice: !0,
    parseOptions: {},
    ...e
  };
  const i = typeof n == "object" && n !== null, r = typeof n == "string";
  if (i)
    try {
      if (Array.isArray(n) && n.length > 0)
        return B.fromArray(n.map((a) => t.nodeFromJSON(a)));
      const o = t.nodeFromJSON(n);
      return e.errorOnInvalidContent && o.check(), o;
    } catch (s) {
      if (e.errorOnInvalidContent)
        throw new Error("[tiptap error]: Invalid JSON content", { cause: s });
      return console.warn("[tiptap warn]: Invalid content.", "Passed value:", n, "Error:", s), zs("", t, e);
    }
  if (r) {
    if (e.errorOnInvalidContent) {
      let o = !1, a = "";
      const l = new Up({
        topNode: t.spec.topNode,
        marks: t.spec.marks,
        // Prosemirror's schemas are executed such that: the last to execute, matches last
        // This means that we can add a catch-all node at the end of the schema to catch any content that we don't know how to handle
        nodes: t.spec.nodes.append({
          __tiptap__private__unknown__catch__all__node: {
            content: "inline*",
            group: "block",
            parseDOM: [
              {
                tag: "*",
                getAttrs: (c) => (o = !0, a = typeof c == "string" ? c : c.outerHTML, null)
              }
            ]
          }
        })
      });
      if (e.slice ? _r.fromSchema(l).parseSlice(fr(n), e.parseOptions) : _r.fromSchema(l).parse(fr(n), e.parseOptions), e.errorOnInvalidContent && o)
        throw new Error("[tiptap error]: Invalid HTML content", { cause: new Error(`Invalid element found: ${a}`) });
    }
    const s = _r.fromSchema(t);
    return e.slice ? s.parseSlice(fr(n), e.parseOptions).content : s.parse(fr(n), e.parseOptions);
  }
  return zs("", t, e);
}
function ag(n, t, e) {
  const i = n.steps.length - 1;
  if (i < t)
    return;
  const r = n.steps[i];
  if (!(r instanceof ue || r instanceof fe))
    return;
  const s = n.mapping.maps[i];
  let o = 0;
  s.forEach((a, l, c, u) => {
    o === 0 && (o = u);
  }), n.setSelection(ft.near(n.doc.resolve(o), e));
}
const iw = (n) => !("type" in n), rw = (n, t, e) => ({ tr: i, dispatch: r, editor: s }) => {
  var o;
  if (r) {
    e = {
      parseOptions: s.options.parseOptions,
      updateSelection: !0,
      applyInputRules: !1,
      applyPasteRules: !1,
      ...e
    };
    let a;
    try {
      a = zs(t, s.schema, {
        parseOptions: {
          preserveWhitespace: "full",
          ...e.parseOptions
        },
        errorOnInvalidContent: (o = e.errorOnInvalidContent) !== null && o !== void 0 ? o : s.options.enableContentCheck
      });
    } catch (p) {
      return s.emit("contentError", {
        editor: s,
        error: p,
        disableCollaboration: () => {
          s.storage.collaboration && (s.storage.collaboration.isDisabled = !0);
        }
      }), !1;
    }
    let { from: l, to: c } = typeof n == "number" ? { from: n, to: n } : { from: n.from, to: n.to }, u = !0, d = !0;
    if ((iw(a) ? a : [a]).forEach((p) => {
      p.check(), u = u ? p.isText && p.marks.length === 0 : !1, d = d ? p.isBlock : !1;
    }), l === c && d) {
      const { parent: p } = i.doc.resolve(l);
      p.isTextblock && !p.type.spec.code && !p.childCount && (l -= 1, c += 1);
    }
    let h;
    if (u) {
      if (Array.isArray(t))
        h = t.map((p) => p.text || "").join("");
      else if (t instanceof B) {
        let p = "";
        t.forEach((_) => {
          _.text && (p += _.text);
        }), h = p;
      } else typeof t == "object" && t && t.text ? h = t.text : h = t;
      i.insertText(h, l, c);
    } else
      h = a, i.replaceWith(l, c, h);
    e.updateSelection && ag(i, i.steps.length - 1, -1), e.applyInputRules && i.setMeta("applyInputRules", { from: l, text: h }), e.applyPasteRules && i.setMeta("applyPasteRules", { from: l, text: h });
  }
  return !0;
}, sw = () => ({ state: n, dispatch: t }) => mx(n, t), ow = () => ({ state: n, dispatch: t }) => gx(n, t), aw = () => ({ state: n, dispatch: t }) => cx(n, t), lw = () => ({ state: n, dispatch: t }) => hx(n, t), cw = () => ({ state: n, dispatch: t, tr: e }) => {
  try {
    const i = qa(n.doc, n.selection.$from.pos, -1);
    return i == null ? !1 : (e.join(i, 2), t && t(e), !0);
  } catch {
    return !1;
  }
}, uw = () => ({ state: n, dispatch: t, tr: e }) => {
  try {
    const i = qa(n.doc, n.selection.$from.pos, 1);
    return i == null ? !1 : (e.join(i, 2), t && t(e), !0);
  } catch {
    return !1;
  }
}, dw = () => ({ state: n, dispatch: t }) => ux(n, t), fw = () => ({ state: n, dispatch: t }) => dx(n, t);
function Iu() {
  return typeof navigator < "u" ? /Mac/.test(navigator.platform) : !1;
}
function hw(n) {
  const t = n.split(/-(?!$)/);
  let e = t[t.length - 1];
  e === "Space" && (e = " ");
  let i, r, s, o;
  for (let a = 0; a < t.length - 1; a += 1) {
    const l = t[a];
    if (/^(cmd|meta|m)$/i.test(l))
      o = !0;
    else if (/^a(lt)?$/i.test(l))
      i = !0;
    else if (/^(c|ctrl|control)$/i.test(l))
      r = !0;
    else if (/^s(hift)?$/i.test(l))
      s = !0;
    else if (/^mod$/i.test(l))
      ro() || Iu() ? o = !0 : r = !0;
    else
      throw new Error(`Unrecognized modifier name: ${l}`);
  }
  return i && (e = `Alt-${e}`), r && (e = `Ctrl-${e}`), o && (e = `Meta-${e}`), s && (e = `Shift-${e}`), e;
}
const pw = (n) => ({ editor: t, view: e, tr: i, dispatch: r }) => {
  const s = hw(n).split(/-(?!$)/), o = s.find((c) => !["Alt", "Ctrl", "Meta", "Shift"].includes(c)), a = new KeyboardEvent("keydown", {
    key: o === "Space" ? " " : o,
    altKey: s.includes("Alt"),
    ctrlKey: s.includes("Ctrl"),
    metaKey: s.includes("Meta"),
    shiftKey: s.includes("Shift"),
    bubbles: !0,
    cancelable: !0
  }), l = t.captureTransaction(() => {
    e.someProp("handleKeyDown", (c) => c(e, a));
  });
  return l == null || l.steps.forEach((c) => {
    const u = c.map(i.mapping);
    u && r && i.maybeStep(u);
  }), !0;
};
function Br(n, t, e = {}) {
  const { from: i, to: r, empty: s } = n.selection, o = t ? oe(t, n.schema) : null, a = [];
  n.doc.nodesBetween(i, r, (d, f) => {
    if (d.isText)
      return;
    const h = Math.max(i, f), p = Math.min(r, f + d.nodeSize);
    a.push({
      node: d,
      from: h,
      to: p
    });
  });
  const l = r - i, c = a.filter((d) => o ? o.name === d.node.type.name : !0).filter((d) => Bs(d.node.attrs, e, { strict: !1 }));
  return s ? !!c.length : c.reduce((d, f) => d + f.to - f.from, 0) >= l;
}
const mw = (n, t = {}) => ({ state: e, dispatch: i }) => {
  const r = oe(n, e.schema);
  return Br(e, r, t) ? _x(e, i) : !1;
}, gw = () => ({ state: n, dispatch: t }) => xx(n, t), _w = (n) => ({ state: t, dispatch: e }) => {
  const i = oe(n, t.schema);
  return Ax(i)(t, e);
}, bw = () => ({ state: n, dispatch: t }) => bx(n, t);
function so(n, t) {
  return t.nodes[n] ? "node" : t.marks[n] ? "mark" : null;
}
function Pc(n, t) {
  const e = typeof t == "string" ? [t] : t;
  return Object.keys(n).reduce((i, r) => (e.includes(r) || (i[r] = n[r]), i), {});
}
const yw = (n, t) => ({ tr: e, state: i, dispatch: r }) => {
  let s = null, o = null;
  const a = so(typeof n == "string" ? n : n.name, i.schema);
  return a ? (a === "node" && (s = oe(n, i.schema)), a === "mark" && (o = Xn(n, i.schema)), r && e.selection.ranges.forEach((l) => {
    i.doc.nodesBetween(l.$from.pos, l.$to.pos, (c, u) => {
      s && s === c.type && e.setNodeMarkup(u, void 0, Pc(c.attrs, t)), o && c.marks.length && c.marks.forEach((d) => {
        o === d.type && e.addMark(u, u + c.nodeSize, o.create(Pc(d.attrs, t)));
      });
    });
  }), !0) : !1;
}, vw = () => ({ tr: n, dispatch: t }) => (t && n.scrollIntoView(), !0), xw = () => ({ tr: n, dispatch: t }) => {
  if (t) {
    const e = new Xe(n.doc);
    n.setSelection(e);
  }
  return !0;
}, ww = () => ({ state: n, dispatch: t }) => fx(n, t), kw = () => ({ state: n, dispatch: t }) => px(n, t), Sw = () => ({ state: n, dispatch: t }) => wx(n, t), Cw = () => ({ state: n, dispatch: t }) => Cx(n, t), Tw = () => ({ state: n, dispatch: t }) => Sx(n, t);
function da(n, t, e = {}, i = {}) {
  return zs(n, t, {
    slice: !1,
    parseOptions: e,
    errorOnInvalidContent: i.errorOnInvalidContent
  });
}
const Ew = (n, t = !1, e = {}, i = {}) => ({ editor: r, tr: s, dispatch: o, commands: a }) => {
  var l, c;
  const { doc: u } = s;
  if (e.preserveWhitespace !== "full") {
    const d = da(n, r.schema, e, {
      errorOnInvalidContent: (l = i.errorOnInvalidContent) !== null && l !== void 0 ? l : r.options.enableContentCheck
    });
    return o && s.replaceWith(0, u.content.size, d).setMeta("preventUpdate", !t), !0;
  }
  return o && s.setMeta("preventUpdate", !t), a.insertContentAt({ from: 0, to: u.content.size }, n, {
    parseOptions: e,
    errorOnInvalidContent: (c = i.errorOnInvalidContent) !== null && c !== void 0 ? c : r.options.enableContentCheck
  });
};
function il(n, t) {
  const e = Xn(t, n.schema), { from: i, to: r, empty: s } = n.selection, o = [];
  s ? (n.storedMarks && o.push(...n.storedMarks), o.push(...n.selection.$head.marks())) : n.doc.nodesBetween(i, r, (l) => {
    o.push(...l.marks);
  });
  const a = o.find((l) => l.type.name === e.name);
  return a ? { ...a.attrs } : {};
}
function lg(n, t) {
  const e = new mu(n);
  return t.forEach((i) => {
    i.steps.forEach((r) => {
      e.step(r);
    });
  }), e;
}
function cg(n) {
  for (let t = 0; t < n.edgeCount; t += 1) {
    const { type: e } = n.edge(t);
    if (e.isTextblock && !e.hasRequiredAttrs())
      return e;
  }
  return null;
}
function Ow(n, t) {
  const e = [];
  return n.descendants((i, r) => {
    t(i) && e.push({
      node: i,
      pos: r
    });
  }), e;
}
function ug(n, t, e) {
  const i = [];
  return n.nodesBetween(t.from, t.to, (r, s) => {
    e(r) && i.push({
      node: r,
      pos: s
    });
  }), i;
}
function Pu(n, t) {
  for (let e = n.depth; e > 0; e -= 1) {
    const i = n.node(e);
    if (t(i))
      return {
        pos: e > 0 ? n.before(e) : 0,
        start: n.start(e),
        depth: e,
        node: i
      };
  }
}
function Zi(n) {
  return (t) => Pu(t.$from, n);
}
function rl(n, t) {
  const e = Ei.resolve(n);
  return Au(e, t);
}
function Mw(n, t) {
  const e = rl(t), i = Pn.fromJSON(e, n);
  return no(i.content, e);
}
function dg(n, t) {
  const e = rl(t), i = fr(n);
  return _r.fromSchema(e).parse(i).toJSON();
}
function Du(n, t) {
  const e = {
    from: 0,
    to: n.content.size
  };
  return Nu(n, e, t);
}
function Aw(n, t, e) {
  const { blockSeparator: i = `

`, textSerializers: r = {} } = e || {}, s = rl(t), o = Pn.fromJSON(s, n);
  return Du(o, {
    blockSeparator: i,
    textSerializers: {
      ...el(s),
      ...r
    }
  });
}
function fg(n, t) {
  const e = oe(t, n.schema), { from: i, to: r } = n.selection, s = [];
  n.doc.nodesBetween(i, r, (a) => {
    s.push(a);
  });
  const o = s.reverse().find((a) => a.type.name === e.name);
  return o ? { ...o.attrs } : {};
}
function $u(n, t) {
  const e = so(typeof t == "string" ? t : t.name, n.schema);
  return e === "node" ? fg(n, t) : e === "mark" ? il(n, t) : {};
}
function hg(n, t = JSON.stringify) {
  const e = {};
  return n.filter((i) => {
    const r = t(i);
    return Object.prototype.hasOwnProperty.call(e, r) ? !1 : e[r] = !0;
  });
}
function Nw(n) {
  const t = hg(n);
  return t.length === 1 ? t : t.filter((e, i) => !t.filter((s, o) => o !== i).some((s) => e.oldRange.from >= s.oldRange.from && e.oldRange.to <= s.oldRange.to && e.newRange.from >= s.newRange.from && e.newRange.to <= s.newRange.to));
}
function pg(n) {
  const { mapping: t, steps: e } = n, i = [];
  return t.maps.forEach((r, s) => {
    const o = [];
    if (r.ranges.length)
      r.forEach((a, l) => {
        o.push({ from: a, to: l });
      });
    else {
      const { from: a, to: l } = e[s];
      if (a === void 0 || l === void 0)
        return;
      o.push({ from: a, to: l });
    }
    o.forEach(({ from: a, to: l }) => {
      const c = t.slice(s).map(a, -1), u = t.slice(s).map(l), d = t.invert().map(c, -1), f = t.invert().map(u);
      i.push({
        oldRange: {
          from: d,
          to: f
        },
        newRange: {
          from: c,
          to: u
        }
      });
    });
  }), Nw(i);
}
function mg(n, t = 0) {
  const i = n.type === n.type.schema.topNodeType ? 0 : 1, r = t, s = r + n.nodeSize, o = n.marks.map((c) => {
    const u = {
      type: c.type.name
    };
    return Object.keys(c.attrs).length && (u.attrs = { ...c.attrs }), u;
  }), a = { ...n.attrs }, l = {
    type: n.type.name,
    from: r,
    to: s
  };
  return Object.keys(a).length && (l.attrs = a), o.length && (l.marks = o), n.content.childCount && (l.content = [], n.forEach((c, u) => {
    var d;
    (d = l.content) === null || d === void 0 || d.push(mg(c, t + u + i));
  })), n.text && (l.text = n.text), l;
}
function sl(n, t, e) {
  const i = [];
  return n === t ? e.resolve(n).marks().forEach((r) => {
    const s = e.resolve(n), o = nl(s, r.type);
    o && i.push({
      mark: r,
      ...o
    });
  }) : e.nodesBetween(n, t, (r, s) => {
    !r || (r == null ? void 0 : r.nodeSize) === void 0 || i.push(...r.marks.map((o) => ({
      from: s,
      to: s + r.nodeSize,
      mark: o
    })));
  }), i;
}
const Lw = (n, t, e, i = 20) => {
  const r = n.doc.resolve(e);
  let s = i, o = null;
  for (; s > 0 && o === null; ) {
    const a = r.node(s);
    (a == null ? void 0 : a.type.name) === t ? o = a : s -= 1;
  }
  return [o, s];
};
function ys(n, t, e) {
  return Object.fromEntries(Object.entries(e).filter(([i]) => {
    const r = n.find((s) => s.type === t && s.name === i);
    return r ? r.attribute.keepOnSplit : !1;
  }));
}
function fa(n, t, e = {}) {
  const { empty: i, ranges: r } = n.selection, s = t ? Xn(t, n.schema) : null;
  if (i)
    return !!(n.storedMarks || n.selection.$from.marks()).filter((d) => s ? s.name === d.type.name : !0).find((d) => Bs(d.attrs, e, { strict: !1 }));
  let o = 0;
  const a = [];
  if (r.forEach(({ $from: d, $to: f }) => {
    const h = d.pos, p = f.pos;
    n.doc.nodesBetween(h, p, (_, g) => {
      if (!_.isText && !_.marks.length)
        return;
      const m = Math.max(h, g), y = Math.min(p, g + _.nodeSize), x = y - m;
      o += x, a.push(..._.marks.map((k) => ({
        mark: k,
        from: m,
        to: y
      })));
    });
  }), o === 0)
    return !1;
  const l = a.filter((d) => s ? s.name === d.mark.type.name : !0).filter((d) => Bs(d.mark.attrs, e, { strict: !1 })).reduce((d, f) => d + f.to - f.from, 0), c = a.filter((d) => s ? d.mark.type !== s && d.mark.type.excludes(s) : !0).reduce((d, f) => d + f.to - f.from, 0);
  return (l > 0 ? l + c : l) >= o;
}
function gg(n, t, e = {}) {
  if (!t)
    return Br(n, null, e) || fa(n, null, e);
  const i = so(t, n.schema);
  return i === "node" ? Br(n, t, e) : i === "mark" ? fa(n, t, e) : !1;
}
const Rw = (n, t) => {
  const { $from: e, $to: i, $anchor: r } = n.selection;
  if (t) {
    const s = Zi((a) => a.type.name === t)(n.selection);
    if (!s)
      return !1;
    const o = n.doc.resolve(s.pos + 1);
    return r.pos + 1 === o.end();
  }
  return !(i.parentOffset < i.parent.nodeSize - 2 || e.pos !== i.pos);
}, Iw = (n) => {
  const { $from: t, $to: e } = n.selection;
  return !(t.parentOffset > 0 || t.pos !== e.pos);
};
function Dc(n, t) {
  const { nodeExtensions: e } = eo(t), i = e.find((o) => o.name === n);
  if (!i)
    return !1;
  const r = {
    name: i.name,
    options: i.options,
    storage: i.storage
  }, s = bt(tt(i, "group", r));
  return typeof s != "string" ? !1 : s.split(" ").includes("list");
}
function ol(n, { checkChildren: t = !0, ignoreWhitespace: e = !1 } = {}) {
  var i;
  if (e) {
    if (n.type.name === "hardBreak")
      return !0;
    if (n.isText)
      return /^\s*$/m.test((i = n.text) !== null && i !== void 0 ? i : "");
  }
  if (n.isText)
    return !n.text;
  if (n.isAtom || n.isLeaf)
    return !1;
  if (n.content.childCount === 0)
    return !0;
  if (t) {
    let r = !0;
    return n.content.forEach((s) => {
      r !== !1 && (ol(s, { ignoreWhitespace: e, checkChildren: t }) || (r = !1));
    }), r;
  }
  return !1;
}
function _g(n) {
  return n instanceof ot;
}
function Pw(n, t, e) {
  const r = n.state.doc.content.size, s = In(t, 0, r), o = In(e, 0, r), a = n.coordsAtPos(s), l = n.coordsAtPos(o, -1), c = Math.min(a.top, l.top), u = Math.max(a.bottom, l.bottom), d = Math.min(a.left, l.left), f = Math.max(a.right, l.right), h = f - d, p = u - c, m = {
    top: c,
    bottom: u,
    left: d,
    right: f,
    width: h,
    height: p,
    x: d,
    y: c
  };
  return {
    ...m,
    toJSON: () => m
  };
}
function bg({ json: n, validMarks: t, validNodes: e, options: i, rewrittenContent: r = [] }) {
  return n.marks && Array.isArray(n.marks) && (n.marks = n.marks.filter((s) => {
    const o = typeof s == "string" ? s : s.type;
    return t.has(o) ? !0 : (r.push({
      original: JSON.parse(JSON.stringify(s)),
      unsupported: o
    }), !1);
  })), n.content && Array.isArray(n.content) && (n.content = n.content.map((s) => bg({
    json: s,
    validMarks: t,
    validNodes: e,
    options: i,
    rewrittenContent: r
  }).json).filter((s) => s != null)), n.type && !e.has(n.type) ? (r.push({
    original: JSON.parse(JSON.stringify(n)),
    unsupported: n.type
  }), n.content && Array.isArray(n.content) && (i == null ? void 0 : i.fallbackToParagraph) !== !1 ? (n.type = "paragraph", {
    json: n,
    rewrittenContent: r
  }) : {
    json: null,
    rewrittenContent: r
  }) : { json: n, rewrittenContent: r };
}
function Dw(n, t, e) {
  return bg({
    json: n,
    validNodes: new Set(Object.keys(t.nodes)),
    validMarks: new Set(Object.keys(t.marks)),
    options: e
  });
}
function $w(n, t, e) {
  var i;
  const { selection: r } = t;
  let s = null;
  if (Lu(r) && (s = r.$cursor), s) {
    const a = (i = n.storedMarks) !== null && i !== void 0 ? i : s.marks();
    return !!e.isInSet(a) || !a.some((l) => l.type.excludes(e));
  }
  const { ranges: o } = r;
  return o.some(({ $from: a, $to: l }) => {
    let c = a.depth === 0 ? n.doc.inlineContent && n.doc.type.allowsMarkType(e) : !1;
    return n.doc.nodesBetween(a.pos, l.pos, (u, d, f) => {
      if (c)
        return !1;
      if (u.isInline) {
        const h = !f || f.type.allowsMarkType(e), p = !!e.isInSet(u.marks) || !u.marks.some((_) => _.type.excludes(e));
        c = h && p;
      }
      return !c;
    }), c;
  });
}
const Bw = (n, t = {}) => ({ tr: e, state: i, dispatch: r }) => {
  const { selection: s } = e, { empty: o, ranges: a } = s, l = Xn(n, i.schema);
  if (r)
    if (o) {
      const c = il(i, l);
      e.addStoredMark(l.create({
        ...c,
        ...t
      }));
    } else
      a.forEach((c) => {
        const u = c.$from.pos, d = c.$to.pos;
        i.doc.nodesBetween(u, d, (f, h) => {
          const p = Math.max(h, u), _ = Math.min(h + f.nodeSize, d);
          f.marks.find((m) => m.type === l) ? f.marks.forEach((m) => {
            l === m.type && e.addMark(p, _, l.create({
              ...m.attrs,
              ...t
            }));
          }) : e.addMark(p, _, l.create(t));
        });
      });
  return $w(i, e, l);
}, zw = (n, t) => ({ tr: e }) => (e.setMeta(n, t), !0), Hw = (n, t = {}) => ({ state: e, dispatch: i, chain: r }) => {
  const s = oe(n, e.schema);
  let o;
  return e.selection.$anchor.sameParent(e.selection.$head) && (o = e.selection.$anchor.parent.attrs), s.isTextblock ? r().command(({ commands: a }) => zf(s, { ...o, ...t })(e) ? !0 : a.clearNodes()).command(({ state: a }) => zf(s, { ...o, ...t })(a, i)).run() : (console.warn('[tiptap warn]: Currently "setNode()" only supports text block nodes.'), !1);
}, Fw = (n) => ({ tr: t, dispatch: e }) => {
  if (e) {
    const { doc: i } = t, r = In(n, 0, i.content.size), s = ot.create(i, r);
    t.setSelection(s);
  }
  return !0;
}, Vw = (n) => ({ tr: t, dispatch: e }) => {
  if (e) {
    const { doc: i } = t, { from: r, to: s } = typeof n == "number" ? { from: n, to: n } : n, o = ct.atStart(i).from, a = ct.atEnd(i).to, l = In(r, o, a), c = In(s, o, a), u = ct.create(i, l, c);
    t.setSelection(u);
  }
  return !0;
}, jw = (n) => ({ state: t, dispatch: e }) => {
  const i = oe(n, t.schema);
  return Rx(i)(t, e);
};
function Vf(n, t) {
  const e = n.storedMarks || n.selection.$to.parentOffset && n.selection.$from.marks();
  if (e) {
    const i = e.filter((r) => t == null ? void 0 : t.includes(r.type.name));
    n.tr.ensureMarks(i);
  }
}
const Ww = ({ keepMarks: n = !0 } = {}) => ({ tr: t, state: e, dispatch: i, editor: r }) => {
  const { selection: s, doc: o } = t, { $from: a, $to: l } = s, c = r.extensionManager.attributes, u = ys(c, a.node().type.name, a.node().attrs);
  if (s instanceof ot && s.node.isBlock)
    return !a.parentOffset || !yr(o, a.pos) ? !1 : (i && (n && Vf(e, r.extensionManager.splittableMarks), t.split(a.pos).scrollIntoView()), !0);
  if (!a.parent.isBlock)
    return !1;
  const d = l.parentOffset === l.parent.content.size, f = a.depth === 0 ? void 0 : cg(a.node(-1).contentMatchAt(a.indexAfter(-1)));
  let h = d && f ? [
    {
      type: f,
      attrs: u
    }
  ] : void 0, p = yr(t.doc, t.mapping.map(a.pos), 1, h);
  if (!h && !p && yr(t.doc, t.mapping.map(a.pos), 1, f ? [{ type: f }] : void 0) && (p = !0, h = f ? [
    {
      type: f,
      attrs: u
    }
  ] : void 0), i) {
    if (p && (s instanceof ct && t.deleteSelection(), t.split(t.mapping.map(a.pos), 1, h), f && !d && !a.parentOffset && a.parent.type !== f)) {
      const _ = t.mapping.map(a.before()), g = t.doc.resolve(_);
      a.node(-1).canReplaceWith(g.index(), g.index() + 1, f) && t.setNodeMarkup(t.mapping.map(a.before()), f);
    }
    n && Vf(e, r.extensionManager.splittableMarks), t.scrollIntoView();
  }
  return p;
}, Uw = (n, t = {}) => ({ tr: e, state: i, dispatch: r, editor: s }) => {
  var o;
  const a = oe(n, i.schema), { $from: l, $to: c } = i.selection, u = i.selection.node;
  if (u && u.isBlock || l.depth < 2 || !l.sameParent(c))
    return !1;
  const d = l.node(-1);
  if (d.type !== a)
    return !1;
  const f = s.extensionManager.attributes;
  if (l.parent.content.size === 0 && l.node(-1).childCount === l.indexAfter(-1)) {
    if (l.depth === 2 || l.node(-3).type !== a || l.index(-2) !== l.node(-2).childCount - 1)
      return !1;
    if (r) {
      let m = B.empty;
      const y = l.index(-1) ? 1 : l.index(-2) ? 2 : 3;
      for (let v = l.depth - y; v >= l.depth - 3; v -= 1)
        m = B.from(l.node(v).copy(m));
      const x = l.indexAfter(-1) < l.node(-2).childCount ? 1 : l.indexAfter(-2) < l.node(-3).childCount ? 2 : 3, k = {
        ...ys(f, l.node().type.name, l.node().attrs),
        ...t
      }, S = ((o = a.contentMatch.defaultType) === null || o === void 0 ? void 0 : o.createAndFill(k)) || void 0;
      m = m.append(B.from(a.createAndFill(null, S) || void 0));
      const w = l.before(l.depth - (y - 1));
      e.replace(w, l.after(-x), new Y(m, 4 - y, 0));
      let O = -1;
      e.doc.nodesBetween(w, e.doc.content.size, (v, E) => {
        if (O > -1)
          return !1;
        v.isTextblock && v.content.size === 0 && (O = E + 1);
      }), O > -1 && e.setSelection(ct.near(e.doc.resolve(O))), e.scrollIntoView();
    }
    return !0;
  }
  const h = c.pos === l.end() ? d.contentMatchAt(0).defaultType : null, p = {
    ...ys(f, d.type.name, d.attrs),
    ...t
  }, _ = {
    ...ys(f, l.node().type.name, l.node().attrs),
    ...t
  };
  e.delete(l.pos, c.pos);
  const g = h ? [
    { type: a, attrs: p },
    { type: h, attrs: _ }
  ] : [{ type: a, attrs: p }];
  if (!yr(e.doc, l.pos, 2))
    return !1;
  if (r) {
    const { selection: m, storedMarks: y } = i, { splittableMarks: x } = s.extensionManager, k = y || m.$to.parentOffset && m.$from.marks();
    if (e.split(l.pos, 2, g).scrollIntoView(), !k || !r)
      return !0;
    const S = k.filter((w) => x.includes(w.type.name));
    e.ensureMarks(S);
  }
  return !0;
}, Al = (n, t) => {
  const e = Zi((o) => o.type === t)(n.selection);
  if (!e)
    return !0;
  const i = n.doc.resolve(Math.max(0, e.pos - 1)).before(e.depth);
  if (i === void 0)
    return !0;
  const r = n.doc.nodeAt(i);
  return e.node.type === (r == null ? void 0 : r.type) && yi(n.doc, e.pos) && n.join(e.pos), !0;
}, Nl = (n, t) => {
  const e = Zi((o) => o.type === t)(n.selection);
  if (!e)
    return !0;
  const i = n.doc.resolve(e.start).after(e.depth);
  if (i === void 0)
    return !0;
  const r = n.doc.nodeAt(i);
  return e.node.type === (r == null ? void 0 : r.type) && yi(n.doc, i) && n.join(i), !0;
}, Kw = (n, t, e, i = {}) => ({ editor: r, tr: s, state: o, dispatch: a, chain: l, commands: c, can: u }) => {
  const { extensions: d, splittableMarks: f } = r.extensionManager, h = oe(n, o.schema), p = oe(t, o.schema), { selection: _, storedMarks: g } = o, { $from: m, $to: y } = _, x = m.blockRange(y), k = g || _.$to.parentOffset && _.$from.marks();
  if (!x)
    return !1;
  const S = Zi((w) => Dc(w.type.name, d))(_);
  if (x.depth >= 1 && S && x.depth - S.depth <= 1) {
    if (S.node.type === h)
      return c.liftListItem(p);
    if (Dc(S.node.type.name, d) && h.validContent(S.node.content) && a)
      return l().command(() => (s.setNodeMarkup(S.pos, h), !0)).command(() => Al(s, h)).command(() => Nl(s, h)).run();
  }
  return !e || !k || !a ? l().command(() => u().wrapInList(h, i) ? !0 : c.clearNodes()).wrapInList(h, i).command(() => Al(s, h)).command(() => Nl(s, h)).run() : l().command(() => {
    const w = u().wrapInList(h, i), O = k.filter((v) => f.includes(v.type.name));
    return s.ensureMarks(O), w ? !0 : c.clearNodes();
  }).wrapInList(h, i).command(() => Al(s, h)).command(() => Nl(s, h)).run();
}, qw = (n, t = {}, e = {}) => ({ state: i, commands: r }) => {
  const { extendEmptyMarkRange: s = !1 } = e, o = Xn(n, i.schema);
  return fa(i, o, t) ? r.unsetMark(o, { extendEmptyMarkRange: s }) : r.setMark(o, t);
}, Gw = (n, t, e = {}) => ({ state: i, commands: r }) => {
  const s = oe(n, i.schema), o = oe(t, i.schema), a = Br(i, s, e);
  let l;
  return i.selection.$anchor.sameParent(i.selection.$head) && (l = i.selection.$anchor.parent.attrs), a ? r.setNode(o, l) : r.setNode(s, { ...l, ...e });
}, Jw = (n, t = {}) => ({ state: e, commands: i }) => {
  const r = oe(n, e.schema);
  return Br(e, r, t) ? i.lift(r) : i.wrapIn(r, t);
}, Xw = () => ({ state: n, dispatch: t }) => {
  const e = n.plugins;
  for (let i = 0; i < e.length; i += 1) {
    const r = e[i];
    let s;
    if (r.spec.isInputRules && (s = r.getState(n))) {
      if (t) {
        const o = n.tr, a = s.transform;
        for (let l = a.steps.length - 1; l >= 0; l -= 1)
          o.step(a.steps[l].invert(a.docs[l]));
        if (s.text) {
          const l = o.doc.resolve(s.from).marks();
          o.replaceWith(s.from, s.to, n.schema.text(s.text, l));
        } else
          o.delete(s.from, s.to);
      }
      return !0;
    }
  }
  return !1;
}, Yw = () => ({ tr: n, dispatch: t }) => {
  const { selection: e } = n, { empty: i, ranges: r } = e;
  return i || t && r.forEach((s) => {
    n.removeMark(s.$from.pos, s.$to.pos);
  }), !0;
}, Zw = (n, t = {}) => ({ tr: e, state: i, dispatch: r }) => {
  var s;
  const { extendEmptyMarkRange: o = !1 } = t, { selection: a } = e, l = Xn(n, i.schema), { $from: c, empty: u, ranges: d } = a;
  if (!r)
    return !0;
  if (u && o) {
    let { from: f, to: h } = a;
    const p = (s = c.marks().find((g) => g.type === l)) === null || s === void 0 ? void 0 : s.attrs, _ = nl(c, l, p);
    _ && (f = _.from, h = _.to), e.removeMark(f, h, l);
  } else
    d.forEach((f) => {
      e.removeMark(f.$from.pos, f.$to.pos, l);
    });
  return e.removeStoredMark(l), !0;
}, Qw = (n, t = {}) => ({ tr: e, state: i, dispatch: r }) => {
  let s = null, o = null;
  const a = so(typeof n == "string" ? n : n.name, i.schema);
  return a ? (a === "node" && (s = oe(n, i.schema)), a === "mark" && (o = Xn(n, i.schema)), r && e.selection.ranges.forEach((l) => {
    const c = l.$from.pos, u = l.$to.pos;
    let d, f, h, p;
    e.selection.empty ? i.doc.nodesBetween(c, u, (_, g) => {
      s && s === _.type && (h = Math.max(g, c), p = Math.min(g + _.nodeSize, u), d = g, f = _);
    }) : i.doc.nodesBetween(c, u, (_, g) => {
      g < c && s && s === _.type && (h = Math.max(g, c), p = Math.min(g + _.nodeSize, u), d = g, f = _), g >= c && g <= u && (s && s === _.type && e.setNodeMarkup(g, void 0, {
        ..._.attrs,
        ...t
      }), o && _.marks.length && _.marks.forEach((m) => {
        if (o === m.type) {
          const y = Math.max(g, c), x = Math.min(g + _.nodeSize, u);
          e.addMark(y, x, o.create({
            ...m.attrs,
            ...t
          }));
        }
      }));
    }), f && (d !== void 0 && e.setNodeMarkup(d, void 0, {
      ...f.attrs,
      ...t
    }), o && f.marks.length && f.marks.forEach((_) => {
      o === _.type && e.addMark(h, p, o.create({
        ..._.attrs,
        ...t
      }));
    }));
  }), !0) : !1;
}, t2 = (n, t = {}) => ({ state: e, dispatch: i }) => {
  const r = oe(n, e.schema);
  return Tx(r, t)(e, i);
}, e2 = (n, t = {}) => ({ state: e, dispatch: i }) => {
  const r = oe(n, e.schema);
  return Ex(r, t)(e, i);
};
var n2 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  blur: Hx,
  clearContent: Fx,
  clearNodes: Vx,
  command: jx,
  createParagraphNear: Wx,
  cut: Ux,
  deleteCurrentNode: Kx,
  deleteNode: qx,
  deleteRange: Gx,
  deleteSelection: Jx,
  enter: Xx,
  exitCode: Yx,
  extendMarkRange: Zx,
  first: Qx,
  focus: tw,
  forEach: ew,
  insertContent: nw,
  insertContentAt: rw,
  joinBackward: aw,
  joinDown: ow,
  joinForward: lw,
  joinItemBackward: cw,
  joinItemForward: uw,
  joinTextblockBackward: dw,
  joinTextblockForward: fw,
  joinUp: sw,
  keyboardShortcut: pw,
  lift: mw,
  liftEmptyBlock: gw,
  liftListItem: _w,
  newlineInCode: bw,
  resetAttributes: yw,
  scrollIntoView: vw,
  selectAll: xw,
  selectNodeBackward: ww,
  selectNodeForward: kw,
  selectParentNode: Sw,
  selectTextblockEnd: Cw,
  selectTextblockStart: Tw,
  setContent: Ew,
  setMark: Bw,
  setMeta: zw,
  setNode: Hw,
  setNodeSelection: Fw,
  setTextSelection: Vw,
  sinkListItem: jw,
  splitBlock: Ww,
  splitListItem: Uw,
  toggleList: Kw,
  toggleMark: qw,
  toggleNode: Gw,
  toggleWrap: Jw,
  undoInputRule: Xw,
  unsetAllMarks: Yw,
  unsetMark: Zw,
  updateAttributes: Qw,
  wrapIn: t2,
  wrapInList: e2
});
const yg = ee.create({
  name: "commands",
  addCommands() {
    return {
      ...n2
    };
  }
}), vg = ee.create({
  name: "drop",
  addProseMirrorPlugins() {
    return [
      new pe({
        key: new $e("tiptapDrop"),
        props: {
          handleDrop: (n, t, e, i) => {
            this.editor.emit("drop", {
              editor: this.editor,
              event: t,
              slice: e,
              moved: i
            });
          }
        }
      })
    ];
  }
}), xg = ee.create({
  name: "editable",
  addProseMirrorPlugins() {
    return [
      new pe({
        key: new $e("editable"),
        props: {
          editable: () => this.editor.options.editable
        }
      })
    ];
  }
}), wg = ee.create({
  name: "focusEvents",
  addProseMirrorPlugins() {
    const { editor: n } = this;
    return [
      new pe({
        key: new $e("focusEvents"),
        props: {
          handleDOMEvents: {
            focus: (t, e) => {
              n.isFocused = !0;
              const i = n.state.tr.setMeta("focus", { event: e }).setMeta("addToHistory", !1);
              return t.dispatch(i), !1;
            },
            blur: (t, e) => {
              n.isFocused = !1;
              const i = n.state.tr.setMeta("blur", { event: e }).setMeta("addToHistory", !1);
              return t.dispatch(i), !1;
            }
          }
        }
      })
    ];
  }
}), kg = ee.create({
  name: "keymap",
  addKeyboardShortcuts() {
    const n = () => this.editor.commands.first(({ commands: o }) => [
      () => o.undoInputRule(),
      // maybe convert first text block node to default node
      () => o.command(({ tr: a }) => {
        const { selection: l, doc: c } = a, { empty: u, $anchor: d } = l, { pos: f, parent: h } = d, p = d.parent.isTextblock && f > 0 ? a.doc.resolve(f - 1) : d, _ = p.parent.type.spec.isolating, g = d.pos - d.parentOffset, m = _ && p.parent.childCount === 1 ? g === d.pos : ft.atStart(c).from === f;
        return !u || !h.type.isTextblock || h.textContent.length || !m || m && d.parent.type.name === "paragraph" ? !1 : o.clearNodes();
      }),
      () => o.deleteSelection(),
      () => o.joinBackward(),
      () => o.selectNodeBackward()
    ]), t = () => this.editor.commands.first(({ commands: o }) => [
      () => o.deleteSelection(),
      () => o.deleteCurrentNode(),
      () => o.joinForward(),
      () => o.selectNodeForward()
    ]), i = {
      Enter: () => this.editor.commands.first(({ commands: o }) => [
        () => o.newlineInCode(),
        () => o.createParagraphNear(),
        () => o.liftEmptyBlock(),
        () => o.splitBlock()
      ]),
      "Mod-Enter": () => this.editor.commands.exitCode(),
      Backspace: n,
      "Mod-Backspace": n,
      "Shift-Backspace": n,
      Delete: t,
      "Mod-Delete": t,
      "Mod-a": () => this.editor.commands.selectAll()
    }, r = {
      ...i
    }, s = {
      ...i,
      "Ctrl-h": n,
      "Alt-Backspace": n,
      "Ctrl-d": t,
      "Ctrl-Alt-Backspace": t,
      "Alt-Delete": t,
      "Alt-d": t,
      "Ctrl-a": () => this.editor.commands.selectTextblockStart(),
      "Ctrl-e": () => this.editor.commands.selectTextblockEnd()
    };
    return ro() || Iu() ? s : r;
  },
  addProseMirrorPlugins() {
    return [
      // With this plugin we check if the whole document was selected and deleted.
      // In this case we will additionally call `clearNodes()` to convert e.g. a heading
      // to a paragraph if necessary.
      // This is an alternative to ProseMirror's `AllSelection`, which doesn’t work well
      // with many other commands.
      new pe({
        key: new $e("clearDocument"),
        appendTransaction: (n, t, e) => {
          if (n.some((_) => _.getMeta("composition")))
            return;
          const i = n.some((_) => _.docChanged) && !t.doc.eq(e.doc), r = n.some((_) => _.getMeta("preventClearDocument"));
          if (!i || r)
            return;
          const { empty: s, from: o, to: a } = t.selection, l = ft.atStart(t.doc).from, c = ft.atEnd(t.doc).to;
          if (s || !(o === l && a === c) || !ol(e.doc))
            return;
          const f = e.tr, h = Qs({
            state: e,
            transaction: f
          }), { commands: p } = new to({
            editor: this.editor,
            state: h
          });
          if (p.clearNodes(), !!f.steps.length)
            return f;
        }
      })
    ];
  }
}), Sg = ee.create({
  name: "paste",
  addProseMirrorPlugins() {
    return [
      new pe({
        key: new $e("tiptapPaste"),
        props: {
          handlePaste: (n, t, e) => {
            this.editor.emit("paste", {
              editor: this.editor,
              event: t,
              slice: e
            });
          }
        }
      })
    ];
  }
}), Cg = ee.create({
  name: "tabindex",
  addProseMirrorPlugins() {
    return [
      new pe({
        key: new $e("tabindex"),
        props: {
          attributes: () => this.editor.isEditable ? { tabindex: "0" } : {}
        }
      })
    ];
  }
});
var i2 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  ClipboardTextSerializer: ig,
  Commands: yg,
  Drop: vg,
  Editable: xg,
  FocusEvents: wg,
  Keymap: kg,
  Paste: Sg,
  Tabindex: Cg
});
class oi {
  get name() {
    return this.node.type.name;
  }
  constructor(t, e, i = !1, r = null) {
    this.currentNode = null, this.actualDepth = null, this.isBlock = i, this.resolvedPos = t, this.editor = e, this.currentNode = r;
  }
  get node() {
    return this.currentNode || this.resolvedPos.node();
  }
  get element() {
    return this.editor.view.domAtPos(this.pos).node;
  }
  get depth() {
    var t;
    return (t = this.actualDepth) !== null && t !== void 0 ? t : this.resolvedPos.depth;
  }
  get pos() {
    return this.resolvedPos.pos;
  }
  get content() {
    return this.node.content;
  }
  set content(t) {
    let e = this.from, i = this.to;
    if (this.isBlock) {
      if (this.content.size === 0) {
        console.error(`You can’t set content on a block node. Tried to set content on ${this.name} at ${this.pos}`);
        return;
      }
      e = this.from + 1, i = this.to - 1;
    }
    this.editor.commands.insertContentAt({ from: e, to: i }, t);
  }
  get attributes() {
    return this.node.attrs;
  }
  get textContent() {
    return this.node.textContent;
  }
  get size() {
    return this.node.nodeSize;
  }
  get from() {
    return this.isBlock ? this.pos : this.resolvedPos.start(this.resolvedPos.depth);
  }
  get range() {
    return {
      from: this.from,
      to: this.to
    };
  }
  get to() {
    return this.isBlock ? this.pos + this.size : this.resolvedPos.end(this.resolvedPos.depth) + (this.node.isText ? 0 : 1);
  }
  get parent() {
    if (this.depth === 0)
      return null;
    const t = this.resolvedPos.start(this.resolvedPos.depth - 1), e = this.resolvedPos.doc.resolve(t);
    return new oi(e, this.editor);
  }
  get before() {
    let t = this.resolvedPos.doc.resolve(this.from - (this.isBlock ? 1 : 2));
    return t.depth !== this.depth && (t = this.resolvedPos.doc.resolve(this.from - 3)), new oi(t, this.editor);
  }
  get after() {
    let t = this.resolvedPos.doc.resolve(this.to + (this.isBlock ? 2 : 1));
    return t.depth !== this.depth && (t = this.resolvedPos.doc.resolve(this.to + 3)), new oi(t, this.editor);
  }
  get children() {
    const t = [];
    return this.node.content.forEach((e, i) => {
      const r = e.isBlock && !e.isTextblock, s = e.isAtom && !e.isText, o = this.pos + i + (s ? 0 : 1), a = this.resolvedPos.doc.resolve(o);
      if (!r && a.depth <= this.depth)
        return;
      const l = new oi(a, this.editor, r, r ? e : null);
      r && (l.actualDepth = this.depth + 1), t.push(new oi(a, this.editor, r, r ? e : null));
    }), t;
  }
  get firstChild() {
    return this.children[0] || null;
  }
  get lastChild() {
    const t = this.children;
    return t[t.length - 1] || null;
  }
  closest(t, e = {}) {
    let i = null, r = this.parent;
    for (; r && !i; ) {
      if (r.node.type.name === t)
        if (Object.keys(e).length > 0) {
          const s = r.node.attrs, o = Object.keys(e);
          for (let a = 0; a < o.length; a += 1) {
            const l = o[a];
            if (s[l] !== e[l])
              break;
          }
        } else
          i = r;
      r = r.parent;
    }
    return i;
  }
  querySelector(t, e = {}) {
    return this.querySelectorAll(t, e, !0)[0] || null;
  }
  querySelectorAll(t, e = {}, i = !1) {
    let r = [];
    if (!this.children || this.children.length === 0)
      return r;
    const s = Object.keys(e);
    return this.children.forEach((o) => {
      i && r.length > 0 || (o.node.type.name === t && s.every((l) => e[l] === o.node.attrs[l]) && r.push(o), !(i && r.length > 0) && (r = r.concat(o.querySelectorAll(t, e, i))));
    }), r;
  }
  setAttribute(t) {
    const { tr: e } = this.editor.state;
    e.setNodeMarkup(this.from, void 0, {
      ...this.node.attrs,
      ...t
    }), this.editor.view.dispatch(e);
  }
}
const r2 = `.ProseMirror {
  position: relative;
}

.ProseMirror {
  word-wrap: break-word;
  white-space: pre-wrap;
  white-space: break-spaces;
  -webkit-font-variant-ligatures: none;
  font-variant-ligatures: none;
  font-feature-settings: "liga" 0; /* the above doesn't seem to work in Edge */
}

.ProseMirror [contenteditable="false"] {
  white-space: normal;
}

.ProseMirror [contenteditable="false"] [contenteditable="true"] {
  white-space: pre-wrap;
}

.ProseMirror pre {
  white-space: pre-wrap;
}

img.ProseMirror-separator {
  display: inline !important;
  border: none !important;
  margin: 0 !important;
  width: 0 !important;
  height: 0 !important;
}

.ProseMirror-gapcursor {
  display: none;
  pointer-events: none;
  position: absolute;
  margin: 0;
}

.ProseMirror-gapcursor:after {
  content: "";
  display: block;
  position: absolute;
  top: -2px;
  width: 20px;
  border-top: 1px solid black;
  animation: ProseMirror-cursor-blink 1.1s steps(2, start) infinite;
}

@keyframes ProseMirror-cursor-blink {
  to {
    visibility: hidden;
  }
}

.ProseMirror-hideselection *::selection {
  background: transparent;
}

.ProseMirror-hideselection *::-moz-selection {
  background: transparent;
}

.ProseMirror-hideselection * {
  caret-color: transparent;
}

.ProseMirror-focused .ProseMirror-gapcursor {
  display: block;
}

.tippy-box[data-animation=fade][data-state=hidden] {
  opacity: 0
}`;
function Tg(n, t, e) {
  const i = document.querySelector(`style[data-tiptap-style${e ? `-${e}` : ""}]`);
  if (i !== null)
    return i;
  const r = document.createElement("style");
  return t && r.setAttribute("nonce", t), r.setAttribute(`data-tiptap-style${e ? `-${e}` : ""}`, ""), r.innerHTML = n, document.getElementsByTagName("head")[0].appendChild(r), r;
}
let Eg = class extends Ix {
  constructor(t = {}) {
    super(), this.isFocused = !1, this.isInitialized = !1, this.extensionStorage = {}, this.options = {
      element: document.createElement("div"),
      content: "",
      injectCSS: !0,
      injectNonce: void 0,
      extensions: [],
      autofocus: !1,
      editable: !0,
      editorProps: {},
      parseOptions: {},
      coreExtensionOptions: {},
      enableInputRules: !0,
      enablePasteRules: !0,
      enableCoreExtensions: !0,
      enableContentCheck: !1,
      onBeforeCreate: () => null,
      onCreate: () => null,
      onUpdate: () => null,
      onSelectionUpdate: () => null,
      onTransaction: () => null,
      onFocus: () => null,
      onBlur: () => null,
      onDestroy: () => null,
      onContentError: ({ error: e }) => {
        throw e;
      },
      onPaste: () => null,
      onDrop: () => null
    }, this.isCapturingTransaction = !1, this.capturedTransaction = null, this.setOptions(t), this.createExtensionManager(), this.createCommandManager(), this.createSchema(), this.on("beforeCreate", this.options.onBeforeCreate), this.emit("beforeCreate", { editor: this }), this.on("contentError", this.options.onContentError), this.createView(), this.injectCSS(), this.on("create", this.options.onCreate), this.on("update", this.options.onUpdate), this.on("selectionUpdate", this.options.onSelectionUpdate), this.on("transaction", this.options.onTransaction), this.on("focus", this.options.onFocus), this.on("blur", this.options.onBlur), this.on("destroy", this.options.onDestroy), this.on("drop", ({ event: e, slice: i, moved: r }) => this.options.onDrop(e, i, r)), this.on("paste", ({ event: e, slice: i }) => this.options.onPaste(e, i)), window.setTimeout(() => {
      this.isDestroyed || (this.commands.focus(this.options.autofocus), this.emit("create", { editor: this }), this.isInitialized = !0);
    }, 0);
  }
  /**
   * Returns the editor storage.
   */
  get storage() {
    return this.extensionStorage;
  }
  /**
   * An object of all registered commands.
   */
  get commands() {
    return this.commandManager.commands;
  }
  /**
   * Create a command chain to call multiple commands at once.
   */
  chain() {
    return this.commandManager.chain();
  }
  /**
   * Check if a command or a command chain can be executed. Without executing it.
   */
  can() {
    return this.commandManager.can();
  }
  /**
   * Inject CSS styles.
   */
  injectCSS() {
    this.options.injectCSS && document && (this.css = Tg(r2, this.options.injectNonce));
  }
  /**
   * Update editor options.
   *
   * @param options A list of options
   */
  setOptions(t = {}) {
    this.options = {
      ...this.options,
      ...t
    }, !(!this.view || !this.state || this.isDestroyed) && (this.options.editorProps && this.view.setProps(this.options.editorProps), this.view.updateState(this.state));
  }
  /**
   * Update editable state of the editor.
   */
  setEditable(t, e = !0) {
    this.setOptions({ editable: t }), e && this.emit("update", { editor: this, transaction: this.state.tr });
  }
  /**
   * Returns whether the editor is editable.
   */
  get isEditable() {
    return this.options.editable && this.view && this.view.editable;
  }
  /**
   * Returns the editor state.
   */
  get state() {
    return this.view.state;
  }
  /**
   * Register a ProseMirror plugin.
   *
   * @param plugin A ProseMirror plugin
   * @param handlePlugins Control how to merge the plugin into the existing plugins.
   * @returns The new editor state
   */
  registerPlugin(t, e) {
    const i = Mu(e) ? e(t, [...this.state.plugins]) : [...this.state.plugins, t], r = this.state.reconfigure({ plugins: i });
    return this.view.updateState(r), r;
  }
  /**
   * Unregister a ProseMirror plugin.
   *
   * @param nameOrPluginKeyToRemove The plugins name
   * @returns The new editor state or undefined if the editor is destroyed
   */
  unregisterPlugin(t) {
    if (this.isDestroyed)
      return;
    const e = this.state.plugins;
    let i = e;
    if ([].concat(t).forEach((s) => {
      const o = typeof s == "string" ? `${s}$` : s.key;
      i = e.filter((a) => !a.key.startsWith(o));
    }), e.length === i.length)
      return;
    const r = this.state.reconfigure({
      plugins: i
    });
    return this.view.updateState(r), r;
  }
  /**
   * Creates an extension manager.
   */
  createExtensionManager() {
    var t, e;
    const r = [...this.options.enableCoreExtensions ? [
      xg,
      ig.configure({
        blockSeparator: (e = (t = this.options.coreExtensionOptions) === null || t === void 0 ? void 0 : t.clipboardTextSerializer) === null || e === void 0 ? void 0 : e.blockSeparator
      }),
      yg,
      wg,
      kg,
      Cg,
      vg,
      Sg
    ].filter((s) => typeof this.options.enableCoreExtensions == "object" ? this.options.enableCoreExtensions[s.name] !== !1 : !0) : [], ...this.options.extensions].filter((s) => ["extension", "node", "mark"].includes(s == null ? void 0 : s.type));
    this.extensionManager = new Ei(r, this);
  }
  /**
   * Creates an command manager.
   */
  createCommandManager() {
    this.commandManager = new to({
      editor: this
    });
  }
  /**
   * Creates a ProseMirror schema.
   */
  createSchema() {
    this.schema = this.extensionManager.schema;
  }
  /**
   * Creates a ProseMirror view.
   */
  createView() {
    var t;
    let e;
    try {
      e = da(this.options.content, this.schema, this.options.parseOptions, { errorOnInvalidContent: this.options.enableContentCheck });
    } catch (o) {
      if (!(o instanceof Error) || !["[tiptap error]: Invalid JSON content", "[tiptap error]: Invalid HTML content"].includes(o.message))
        throw o;
      this.emit("contentError", {
        editor: this,
        error: o,
        disableCollaboration: () => {
          this.storage.collaboration && (this.storage.collaboration.isDisabled = !0), this.options.extensions = this.options.extensions.filter((a) => a.name !== "collaboration"), this.createExtensionManager();
        }
      }), e = da(this.options.content, this.schema, this.options.parseOptions, { errorOnInvalidContent: !1 });
    }
    const i = Ru(e, this.options.autofocus);
    this.view = new Zv(this.options.element, {
      ...this.options.editorProps,
      attributes: {
        // add `role="textbox"` to the editor element
        role: "textbox",
        ...(t = this.options.editorProps) === null || t === void 0 ? void 0 : t.attributes
      },
      dispatchTransaction: this.dispatchTransaction.bind(this),
      state: dr.create({
        doc: e,
        selection: i || void 0
      })
    });
    const r = this.state.reconfigure({
      plugins: this.extensionManager.plugins
    });
    this.view.updateState(r), this.createNodeViews(), this.prependClass();
    const s = this.view.dom;
    s.editor = this;
  }
  /**
   * Creates all node views.
   */
  createNodeViews() {
    this.view.isDestroyed || this.view.setProps({
      nodeViews: this.extensionManager.nodeViews
    });
  }
  /**
   * Prepend class name to element.
   */
  prependClass() {
    this.view.dom.className = `tiptap ${this.view.dom.className}`;
  }
  captureTransaction(t) {
    this.isCapturingTransaction = !0, t(), this.isCapturingTransaction = !1;
    const e = this.capturedTransaction;
    return this.capturedTransaction = null, e;
  }
  /**
   * The callback over which to send transactions (state updates) produced by the view.
   *
   * @param transaction An editor state transaction
   */
  dispatchTransaction(t) {
    if (this.view.isDestroyed)
      return;
    if (this.isCapturingTransaction) {
      if (!this.capturedTransaction) {
        this.capturedTransaction = t;
        return;
      }
      t.steps.forEach((o) => {
        var a;
        return (a = this.capturedTransaction) === null || a === void 0 ? void 0 : a.step(o);
      });
      return;
    }
    const e = this.state.apply(t), i = !this.state.selection.eq(e.selection);
    this.emit("beforeTransaction", {
      editor: this,
      transaction: t,
      nextState: e
    }), this.view.updateState(e), this.emit("transaction", {
      editor: this,
      transaction: t
    }), i && this.emit("selectionUpdate", {
      editor: this,
      transaction: t
    });
    const r = t.getMeta("focus"), s = t.getMeta("blur");
    r && this.emit("focus", {
      editor: this,
      event: r.event,
      transaction: t
    }), s && this.emit("blur", {
      editor: this,
      event: s.event,
      transaction: t
    }), !(!t.docChanged || t.getMeta("preventUpdate")) && this.emit("update", {
      editor: this,
      transaction: t
    });
  }
  /**
   * Get attributes of the currently selected node or mark.
   */
  getAttributes(t) {
    return $u(this.state, t);
  }
  isActive(t, e) {
    const i = typeof t == "string" ? t : null, r = typeof t == "string" ? e : t;
    return gg(this.state, i, r);
  }
  /**
   * Get the document as JSON.
   */
  getJSON() {
    return this.state.doc.toJSON();
  }
  /**
   * Get the document as HTML.
   */
  getHTML() {
    return no(this.state.doc.content, this.schema);
  }
  /**
   * Get the document as text.
   */
  getText(t) {
    const { blockSeparator: e = `

`, textSerializers: i = {} } = t || {};
    return Du(this.state.doc, {
      blockSeparator: e,
      textSerializers: {
        ...el(this.schema),
        ...i
      }
    });
  }
  /**
   * Check if there is no content.
   */
  get isEmpty() {
    return ol(this.state.doc);
  }
  /**
   * Get the number of characters for the current document.
   *
   * @deprecated
   */
  getCharacterCount() {
    return console.warn('[tiptap warn]: "editor.getCharacterCount()" is deprecated. Please use "editor.storage.characterCount.characters()" instead.'), this.state.doc.content.size - 2;
  }
  /**
   * Destroy the editor.
   */
  destroy() {
    if (this.emit("destroy"), this.view) {
      const t = this.view.dom;
      t && t.editor && delete t.editor, this.view.destroy();
    }
    this.removeAllListeners();
  }
  /**
   * Check if the editor is already destroyed.
   */
  get isDestroyed() {
    var t;
    return !(!((t = this.view) === null || t === void 0) && t.docView);
  }
  $node(t, e) {
    var i;
    return ((i = this.$doc) === null || i === void 0 ? void 0 : i.querySelector(t, e)) || null;
  }
  $nodes(t, e) {
    var i;
    return ((i = this.$doc) === null || i === void 0 ? void 0 : i.querySelectorAll(t, e)) || null;
  }
  $pos(t) {
    const e = this.state.doc.resolve(t);
    return new oi(e, this);
  }
  get $doc() {
    return this.$pos(0);
  }
};
function zr(n) {
  return new Yi({
    find: n.find,
    handler: ({ state: t, range: e, match: i }) => {
      const r = bt(n.getAttributes, void 0, i);
      if (r === !1 || r === null)
        return null;
      const { tr: s } = t, o = i[i.length - 1], a = i[0];
      if (o) {
        const l = a.search(/\S/), c = e.from + a.indexOf(o), u = c + o.length;
        if (sl(e.from, e.to, t.doc).filter((h) => h.mark.type.excluded.find((_) => _ === n.type && _ !== h.mark.type)).filter((h) => h.to > c).length)
          return null;
        u < e.to && s.delete(u, e.to), c > e.from && s.delete(e.from + l, c);
        const f = e.from + l + o.length;
        s.addMark(e.from + l, f, n.type.create(r || {})), s.removeStoredMark(n.type);
      }
    }
  });
}
function Bu(n) {
  return new Yi({
    find: n.find,
    handler: ({ state: t, range: e, match: i }) => {
      const r = bt(n.getAttributes, void 0, i) || {}, { tr: s } = t, o = e.from;
      let a = e.to;
      const l = n.type.create(r);
      if (i[1]) {
        const c = i[0].lastIndexOf(i[1]);
        let u = o + c;
        u > a ? u = a : a = u + i[1].length;
        const d = i[0][i[0].length - 1];
        s.insertText(d, o + i[0].length - 1), s.replaceWith(u, a, l);
      } else if (i[0]) {
        const c = n.type.isInline ? o : o - 1;
        s.insert(c, n.type.create(r)).delete(s.mapping.map(o), s.mapping.map(a));
      }
      s.scrollIntoView();
    }
  });
}
function Og(n) {
  return new Yi({
    find: n.find,
    handler: ({ state: t, range: e, match: i }) => {
      const r = t.doc.resolve(e.from), s = bt(n.getAttributes, void 0, i) || {};
      if (!r.node(-1).canReplaceWith(r.index(-1), r.indexAfter(-1), n.type))
        return null;
      t.tr.delete(e.from, e.to).setBlockType(e.from, e.from, n.type, s);
    }
  });
}
function s2(n) {
  return new Yi({
    find: n.find,
    handler: ({ state: t, range: e, match: i }) => {
      let r = n.replace, s = e.from;
      const o = e.to;
      if (i[1]) {
        const a = i[0].lastIndexOf(i[1]);
        r += i[0].slice(a + i[1].length), s += a;
        const l = s - o;
        l > 0 && (r = i[0].slice(a - l, a) + r, s = o);
      }
      t.tr.insertText(r, s, o);
    }
  });
}
function Hr(n) {
  return new Yi({
    find: n.find,
    handler: ({ state: t, range: e, match: i, chain: r }) => {
      const s = bt(n.getAttributes, void 0, i) || {}, o = t.tr.delete(e.from, e.to), l = o.doc.resolve(e.from).blockRange(), c = l && pu(l, n.type, s);
      if (!c)
        return null;
      if (o.wrap(l, c), n.keepMarks && n.editor) {
        const { selection: d, storedMarks: f } = t, { splittableMarks: h } = n.editor.extensionManager, p = f || d.$to.parentOffset && d.$from.marks();
        if (p) {
          const _ = p.filter((g) => h.includes(g.type.name));
          o.ensureMarks(_);
        }
      }
      if (n.keepAttributes) {
        const d = n.type.name === "bulletList" || n.type.name === "orderedList" ? "listItem" : "taskList";
        r().updateAttributes(d, s).run();
      }
      const u = o.doc.resolve(e.from - 1).nodeBefore;
      u && u.type === n.type && yi(o.doc, e.from - 1) && (!n.joinPredicate || n.joinPredicate(i, u)) && o.join(e.from - 1);
    }
  });
}
let Bt = class $c {
  constructor(t = {}) {
    this.type = "node", this.name = "node", this.parent = null, this.child = null, this.config = {
      name: this.name,
      defaultOptions: {}
    }, this.config = {
      ...this.config,
      ...t
    }, this.name = this.config.name, t.defaultOptions && Object.keys(t.defaultOptions).length > 0 && console.warn(`[tiptap warn]: BREAKING CHANGE: "defaultOptions" is deprecated. Please use "addOptions" instead. Found in extension: "${this.name}".`), this.options = this.config.defaultOptions, this.config.addOptions && (this.options = bt(tt(this, "addOptions", {
      name: this.name
    }))), this.storage = bt(tt(this, "addStorage", {
      name: this.name,
      options: this.options
    })) || {};
  }
  static create(t = {}) {
    return new $c(t);
  }
  configure(t = {}) {
    const e = this.extend({
      ...this.config,
      addOptions: () => io(this.options, t)
    });
    return e.name = this.name, e.parent = this.parent, e;
  }
  extend(t = {}) {
    const e = new $c(t);
    return e.parent = this, this.child = e, e.name = t.name ? t.name : e.parent.name, t.defaultOptions && Object.keys(t.defaultOptions).length > 0 && console.warn(`[tiptap warn]: BREAKING CHANGE: "defaultOptions" is deprecated. Please use "addOptions" instead. Found in extension: "${e.name}".`), e.options = bt(tt(e, "addOptions", {
      name: e.name
    })), e.storage = bt(tt(e, "addStorage", {
      name: e.name,
      options: e.options
    })), e;
  }
};
class o2 {
  constructor(t, e, i) {
    this.isDragging = !1, this.component = t, this.editor = e.editor, this.options = {
      stopEvent: null,
      ignoreMutation: null,
      ...i
    }, this.extension = e.extension, this.node = e.node, this.decorations = e.decorations, this.innerDecorations = e.innerDecorations, this.view = e.view, this.HTMLAttributes = e.HTMLAttributes, this.getPos = e.getPos, this.mount();
  }
  mount() {
  }
  get dom() {
    return this.editor.view.dom;
  }
  get contentDOM() {
    return null;
  }
  onDragStart(t) {
    var e, i, r, s, o, a, l;
    const { view: c } = this.editor, u = t.target, d = u.nodeType === 3 ? (e = u.parentElement) === null || e === void 0 ? void 0 : e.closest("[data-drag-handle]") : u.closest("[data-drag-handle]");
    if (!this.dom || !((i = this.contentDOM) === null || i === void 0) && i.contains(u) || !d)
      return;
    let f = 0, h = 0;
    if (this.dom !== d) {
      const m = this.dom.getBoundingClientRect(), y = d.getBoundingClientRect(), x = (r = t.offsetX) !== null && r !== void 0 ? r : (s = t.nativeEvent) === null || s === void 0 ? void 0 : s.offsetX, k = (o = t.offsetY) !== null && o !== void 0 ? o : (a = t.nativeEvent) === null || a === void 0 ? void 0 : a.offsetY;
      f = y.x - m.x + x, h = y.y - m.y + k;
    }
    (l = t.dataTransfer) === null || l === void 0 || l.setDragImage(this.dom, f, h);
    const p = this.getPos();
    if (typeof p != "number")
      return;
    const _ = ot.create(c.state.doc, p), g = c.state.tr.setSelection(_);
    c.dispatch(g);
  }
  stopEvent(t) {
    var e;
    if (!this.dom)
      return !1;
    if (typeof this.options.stopEvent == "function")
      return this.options.stopEvent({ event: t });
    const i = t.target;
    if (!(this.dom.contains(i) && !(!((e = this.contentDOM) === null || e === void 0) && e.contains(i))))
      return !1;
    const s = t.type.startsWith("drag"), o = t.type === "drop";
    if ((["INPUT", "BUTTON", "SELECT", "TEXTAREA"].includes(i.tagName) || i.isContentEditable) && !o && !s)
      return !0;
    const { isEditable: l } = this.editor, { isDragging: c } = this, u = !!this.node.type.spec.draggable, d = ot.isSelectable(this.node), f = t.type === "copy", h = t.type === "paste", p = t.type === "cut", _ = t.type === "mousedown";
    if (!u && d && s && t.target === this.dom && t.preventDefault(), u && s && !c && t.target === this.dom)
      return t.preventDefault(), !1;
    if (u && l && !c && _) {
      const g = i.closest("[data-drag-handle]");
      g && (this.dom === g || this.dom.contains(g)) && (this.isDragging = !0, document.addEventListener("dragend", () => {
        this.isDragging = !1;
      }, { once: !0 }), document.addEventListener("drop", () => {
        this.isDragging = !1;
      }, { once: !0 }), document.addEventListener("mouseup", () => {
        this.isDragging = !1;
      }, { once: !0 }));
    }
    return !(c || o || f || h || p || _ && d);
  }
  /**
   * Called when a DOM [mutation](https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver) or a selection change happens within the view.
   * @return `false` if the editor should re-read the selection or re-parse the range around the mutation
   * @return `true` if it can safely be ignored.
   */
  ignoreMutation(t) {
    return !this.dom || !this.contentDOM ? !0 : typeof this.options.ignoreMutation == "function" ? this.options.ignoreMutation({ mutation: t }) : this.node.isLeaf || this.node.isAtom ? !0 : t.type === "selection" || this.dom.contains(t.target) && t.type === "childList" && (ro() || sg()) && this.editor.isFocused && [
      ...Array.from(t.addedNodes),
      ...Array.from(t.removedNodes)
    ].every((i) => i.isContentEditable) ? !1 : this.contentDOM === t.target && t.type === "attributes" ? !0 : !this.contentDOM.contains(t.target);
  }
  /**
   * Update the attributes of the prosemirror node.
   */
  updateAttributes(t) {
    this.editor.commands.command(({ tr: e }) => {
      const i = this.getPos();
      return typeof i != "number" ? !1 : (e.setNodeMarkup(i, void 0, {
        ...this.node.attrs,
        ...t
      }), !0);
    });
  }
  /**
   * Delete the node.
   */
  deleteNode() {
    const t = this.getPos();
    if (typeof t != "number")
      return;
    const e = t + this.node.nodeSize;
    this.editor.commands.deleteRange({ from: t, to: e });
  }
}
function Ki(n) {
  return new tl({
    find: n.find,
    handler: ({ state: t, range: e, match: i, pasteEvent: r }) => {
      const s = bt(n.getAttributes, void 0, i, r);
      if (s === !1 || s === null)
        return null;
      const { tr: o } = t, a = i[i.length - 1], l = i[0];
      let c = e.to;
      if (a) {
        const u = l.search(/\S/), d = e.from + l.indexOf(a), f = d + a.length;
        if (sl(e.from, e.to, t.doc).filter((p) => p.mark.type.excluded.find((g) => g === n.type && g !== p.mark.type)).filter((p) => p.to > d).length)
          return null;
        f < e.to && o.delete(f, e.to), d > e.from && o.delete(e.from + u, d), c = e.from + u + a.length, o.addMark(e.from + u, c, n.type.create(s || {})), o.removeStoredMark(n.type);
      }
    }
  });
}
function a2(n) {
  return n.replace(/[-/\\^$*+?.()|[\]{}]/g, "\\$&");
}
function l2(n) {
  return typeof n == "string";
}
function c2(n) {
  return new tl({
    find: n.find,
    handler({ match: t, chain: e, range: i, pasteEvent: r }) {
      const s = bt(n.getAttributes, void 0, t, r), o = bt(n.getContent, void 0, s);
      if (s === !1 || s === null)
        return null;
      const a = { type: n.type.name, attrs: s };
      o && (a.content = o), t.input && e().deleteRange(i).insertContentAt(i.from, a);
    }
  });
}
function u2(n) {
  return new tl({
    find: n.find,
    handler: ({ state: t, range: e, match: i }) => {
      let r = n.replace, s = e.from;
      const o = e.to;
      if (i[1]) {
        const a = i[0].lastIndexOf(i[1]);
        r += i[0].slice(a + i[1].length), s += a;
        const l = s - o;
        l > 0 && (r = i[0].slice(a - l, a) + r, s = o);
      }
      t.tr.insertText(r, s, o);
    }
  });
}
class d2 {
  constructor(t) {
    this.transaction = t, this.currentStep = this.transaction.steps.length;
  }
  map(t) {
    let e = !1;
    return {
      position: this.transaction.steps.slice(this.currentStep).reduce((r, s) => {
        const o = s.getMap().mapResult(r);
        return o.deleted && (e = !0), o.pos;
      }, t),
      deleted: e
    };
  }
}
const f2 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  CommandManager: to,
  Editor: Eg,
  Extension: ee,
  InputRule: Yi,
  Mark: Ve,
  Node: Bt,
  NodePos: oi,
  NodeView: o2,
  PasteRule: tl,
  Tracker: d2,
  callOrReturn: bt,
  combineTransactionSteps: lg,
  createChainableState: Qs,
  createDocument: da,
  createNodeFromContent: zs,
  createStyleTag: Tg,
  defaultBlockAt: cg,
  deleteProps: Pc,
  elementFromString: fr,
  escapeForRegEx: a2,
  extensions: i2,
  findChildren: Ow,
  findChildrenInRange: ug,
  findDuplicates: ng,
  findParentNode: Zi,
  findParentNodeClosestToPos: Pu,
  fromString: Ym,
  generateHTML: Mw,
  generateJSON: dg,
  generateText: Aw,
  getAttributes: $u,
  getAttributesFromExtensions: Ou,
  getChangedRanges: pg,
  getDebugJSON: mg,
  getExtensionField: tt,
  getHTMLFromFragment: no,
  getMarkAttributes: il,
  getMarkRange: nl,
  getMarkType: Xn,
  getMarksBetween: sl,
  getNodeAtPosition: Lw,
  getNodeAttributes: fg,
  getNodeType: oe,
  getRenderedAttributes: ua,
  getSchema: rl,
  getSchemaByResolvedExtensions: Au,
  getSchemaTypeByName: Vo,
  getSchemaTypeNameByName: so,
  getSplittedAttributes: ys,
  getText: Du,
  getTextBetween: Nu,
  getTextContentFromNodes: Zm,
  getTextSerializersFromSchema: el,
  injectExtensionAttributesToParseRule: Lc,
  inputRulesPlugin: Qm,
  isActive: gg,
  isAtEndOfNode: Rw,
  isAtStartOfNode: Iw,
  isEmptyObject: Xm,
  isExtensionRulesEnabled: Rc,
  isFunction: Mu,
  isList: Dc,
  isMacOS: Iu,
  isMarkActive: fa,
  isNodeActive: Br,
  isNodeEmpty: ol,
  isNodeSelection: _g,
  isNumber: tg,
  isPlainObject: ds,
  isRegExp: Qa,
  isString: l2,
  isTextSelection: Lu,
  isiOS: ro,
  markInputRule: zr,
  markPasteRule: Ki,
  mergeAttributes: Mt,
  mergeDeep: io,
  minMax: In,
  nodeInputRule: Bu,
  nodePasteRule: c2,
  objectIncludes: Bs,
  pasteRulesPlugin: eg,
  posToDOMRect: Pw,
  removeDuplicates: hg,
  resolveFocusPosition: Ru,
  rewriteUnknownContent: Dw,
  selectionToInsertionEnd: ag,
  splitExtensions: eo,
  textInputRule: s2,
  textPasteRule: u2,
  textblockTypeInputRule: Og,
  wrappingInputRule: Hr
}, Symbol.toStringTag, { value: "Module" })), h2 = Bt.create({
  name: "doc",
  topNode: !0,
  content: "block+"
}), p2 = Bt.create({
  name: "text",
  group: "inline"
}), m2 = Ve.create({
  name: "subscript",
  addOptions() {
    return {
      HTMLAttributes: {}
    };
  },
  parseHTML() {
    return [
      {
        tag: "sub"
      },
      {
        style: "vertical-align",
        getAttrs(n) {
          return n !== "sub" ? !1 : null;
        }
      }
    ];
  },
  renderHTML({ HTMLAttributes: n }) {
    return ["sub", Mt(this.options.HTMLAttributes, n), 0];
  },
  addCommands() {
    return {
      setSubscript: () => ({ commands: n }) => n.setMark(this.name),
      toggleSubscript: () => ({ commands: n }) => n.toggleMark(this.name),
      unsetSubscript: () => ({ commands: n }) => n.unsetMark(this.name)
    };
  },
  addKeyboardShortcuts() {
    return {
      "Mod-,": () => this.editor.commands.toggleSubscript()
    };
  }
}), g2 = Ve.create({
  name: "superscript",
  addOptions() {
    return {
      HTMLAttributes: {}
    };
  },
  parseHTML() {
    return [
      {
        tag: "sup"
      },
      {
        style: "vertical-align",
        getAttrs(n) {
          return n !== "super" ? !1 : null;
        }
      }
    ];
  },
  renderHTML({ HTMLAttributes: n }) {
    return ["sup", Mt(this.options.HTMLAttributes, n), 0];
  },
  addCommands() {
    return {
      setSuperscript: () => ({ commands: n }) => n.setMark(this.name),
      toggleSuperscript: () => ({ commands: n }) => n.toggleMark(this.name),
      unsetSuperscript: () => ({ commands: n }) => n.unsetMark(this.name)
    };
  },
  addKeyboardShortcuts() {
    return {
      "Mod-.": () => this.editor.commands.toggleSuperscript()
    };
  }
}), _2 = /(?:^|\s)(!\[(.+|:?)]\((\S+)(?:(?:\s+)["'](\S+)["'])?\))$/, b2 = Bt.create({
  name: "image",
  addOptions() {
    return {
      inline: !1,
      allowBase64: !1,
      HTMLAttributes: {}
    };
  },
  inline() {
    return this.options.inline;
  },
  group() {
    return this.options.inline ? "inline" : "block";
  },
  draggable: !0,
  addAttributes() {
    return {
      src: {
        default: null
      },
      alt: {
        default: null
      },
      title: {
        default: null
      }
    };
  },
  parseHTML() {
    return [
      {
        tag: this.options.allowBase64 ? "img[src]" : 'img[src]:not([src^="data:"])'
      }
    ];
  },
  renderHTML({ HTMLAttributes: n }) {
    return ["img", Mt(this.options.HTMLAttributes, n)];
  },
  addCommands() {
    return {
      setImage: (n) => ({ commands: t }) => t.insertContent({
        type: this.name,
        attrs: n
      })
    };
  },
  addInputRules() {
    return [
      Bu({
        find: _2,
        type: this.type,
        getAttributes: (n) => {
          const [, , t, e, i] = n;
          return { src: e, alt: t, title: i };
        }
      })
    ];
  }
}), y2 = Bt.create({
  name: "hardBreak",
  addOptions() {
    return {
      keepMarks: !0,
      HTMLAttributes: {}
    };
  },
  inline: !0,
  group: "inline",
  selectable: !1,
  linebreakReplacement: !0,
  parseHTML() {
    return [
      { tag: "br" }
    ];
  },
  renderHTML({ HTMLAttributes: n }) {
    return ["br", Mt(this.options.HTMLAttributes, n)];
  },
  renderText() {
    return `
`;
  },
  addCommands() {
    return {
      setHardBreak: () => ({ commands: n, chain: t, state: e, editor: i }) => n.first([
        () => n.exitCode(),
        () => n.command(() => {
          const { selection: r, storedMarks: s } = e;
          if (r.$from.parent.type.spec.isolating)
            return !1;
          const { keepMarks: o } = this.options, { splittableMarks: a } = i.extensionManager, l = s || r.$to.parentOffset && r.$from.marks();
          return t().insertContent({ type: this.name }).command(({ tr: c, dispatch: u }) => {
            if (u && l && o) {
              const d = l.filter((f) => a.includes(f.type.name));
              c.ensureMarks(d);
            }
            return !0;
          }).run();
        })
      ])
    };
  },
  addKeyboardShortcuts() {
    return {
      "Mod-Enter": () => this.editor.commands.setHardBreak(),
      "Shift-Enter": () => this.editor.commands.setHardBreak()
    };
  }
}), v2 = /(?:^|\s)(\*(?!\s+\*)((?:[^*]+))\*(?!\s+\*))$/, x2 = /(?:^|\s)(\*(?!\s+\*)((?:[^*]+))\*(?!\s+\*))/g, w2 = /(?:^|\s)(_(?!\s+_)((?:[^_]+))_(?!\s+_))$/, k2 = /(?:^|\s)(_(?!\s+_)((?:[^_]+))_(?!\s+_))/g, S2 = Ve.create({
  name: "italic",
  addOptions() {
    return {
      HTMLAttributes: {}
    };
  },
  parseHTML() {
    return [
      {
        tag: "em"
      },
      {
        tag: "i",
        getAttrs: (n) => n.style.fontStyle !== "normal" && null
      },
      {
        style: "font-style=normal",
        clearMark: (n) => n.type.name === this.name
      },
      {
        style: "font-style=italic"
      }
    ];
  },
  renderHTML({ HTMLAttributes: n }) {
    return ["em", Mt(this.options.HTMLAttributes, n), 0];
  },
  addCommands() {
    return {
      setItalic: () => ({ commands: n }) => n.setMark(this.name),
      toggleItalic: () => ({ commands: n }) => n.toggleMark(this.name),
      unsetItalic: () => ({ commands: n }) => n.unsetMark(this.name)
    };
  },
  addKeyboardShortcuts() {
    return {
      "Mod-i": () => this.editor.commands.toggleItalic(),
      "Mod-I": () => this.editor.commands.toggleItalic()
    };
  },
  addInputRules() {
    return [
      zr({
        find: v2,
        type: this.type
      }),
      zr({
        find: w2,
        type: this.type
      })
    ];
  },
  addPasteRules() {
    return [
      Ki({
        find: x2,
        type: this.type
      }),
      Ki({
        find: k2,
        type: this.type
      })
    ];
  }
}), C2 = Ve.create({
  name: "underline",
  addOptions() {
    return {
      HTMLAttributes: {}
    };
  },
  parseHTML() {
    return [
      {
        tag: "u"
      },
      {
        style: "text-decoration",
        consuming: !1,
        getAttrs: (n) => n.includes("underline") ? {} : !1
      }
    ];
  },
  renderHTML({ HTMLAttributes: n }) {
    return ["u", Mt(this.options.HTMLAttributes, n), 0];
  },
  addCommands() {
    return {
      setUnderline: () => ({ commands: n }) => n.setMark(this.name),
      toggleUnderline: () => ({ commands: n }) => n.toggleMark(this.name),
      unsetUnderline: () => ({ commands: n }) => n.unsetMark(this.name)
    };
  },
  addKeyboardShortcuts() {
    return {
      "Mod-u": () => this.editor.commands.toggleUnderline(),
      "Mod-U": () => this.editor.commands.toggleUnderline()
    };
  }
}), T2 = /^\s*>\s$/, E2 = Bt.create({
  name: "blockquote",
  addOptions() {
    return {
      HTMLAttributes: {}
    };
  },
  content: "block+",
  group: "block",
  defining: !0,
  parseHTML() {
    return [
      { tag: "blockquote" }
    ];
  },
  renderHTML({ HTMLAttributes: n }) {
    return ["blockquote", Mt(this.options.HTMLAttributes, n), 0];
  },
  addCommands() {
    return {
      setBlockquote: () => ({ commands: n }) => n.wrapIn(this.name),
      toggleBlockquote: () => ({ commands: n }) => n.toggleWrap(this.name),
      unsetBlockquote: () => ({ commands: n }) => n.lift(this.name)
    };
  },
  addKeyboardShortcuts() {
    return {
      "Mod-Shift-b": () => this.editor.commands.toggleBlockquote()
    };
  },
  addInputRules() {
    return [
      Hr({
        find: T2,
        type: this.type
      })
    ];
  }
}), O2 = "listItem", jf = "textStyle", Wf = /^\s*([-+*])\s$/, M2 = Bt.create({
  name: "bulletList",
  addOptions() {
    return {
      itemTypeName: "listItem",
      HTMLAttributes: {},
      keepMarks: !1,
      keepAttributes: !1
    };
  },
  group: "block list",
  content() {
    return `${this.options.itemTypeName}+`;
  },
  parseHTML() {
    return [
      { tag: "ul" }
    ];
  },
  renderHTML({ HTMLAttributes: n }) {
    return ["ul", Mt(this.options.HTMLAttributes, n), 0];
  },
  addCommands() {
    return {
      toggleBulletList: () => ({ commands: n, chain: t }) => this.options.keepAttributes ? t().toggleList(this.name, this.options.itemTypeName, this.options.keepMarks).updateAttributes(O2, this.editor.getAttributes(jf)).run() : n.toggleList(this.name, this.options.itemTypeName, this.options.keepMarks)
    };
  },
  addKeyboardShortcuts() {
    return {
      "Mod-Shift-8": () => this.editor.commands.toggleBulletList()
    };
  },
  addInputRules() {
    let n = Hr({
      find: Wf,
      type: this.type
    });
    return (this.options.keepMarks || this.options.keepAttributes) && (n = Hr({
      find: Wf,
      type: this.type,
      keepMarks: this.options.keepMarks,
      keepAttributes: this.options.keepAttributes,
      getAttributes: () => this.editor.getAttributes(jf),
      editor: this.editor
    })), [
      n
    ];
  }
}), A2 = Bt.create({
  name: "heading",
  addOptions() {
    return {
      levels: [1, 2, 3, 4, 5, 6],
      HTMLAttributes: {}
    };
  },
  content: "inline*",
  group: "block",
  defining: !0,
  addAttributes() {
    return {
      level: {
        default: 1,
        rendered: !1
      }
    };
  },
  parseHTML() {
    return this.options.levels.map((n) => ({
      tag: `h${n}`,
      attrs: { level: n }
    }));
  },
  renderHTML({ node: n, HTMLAttributes: t }) {
    return [`h${this.options.levels.includes(n.attrs.level) ? n.attrs.level : this.options.levels[0]}`, Mt(this.options.HTMLAttributes, t), 0];
  },
  addCommands() {
    return {
      setHeading: (n) => ({ commands: t }) => this.options.levels.includes(n.level) ? t.setNode(this.name, n) : !1,
      toggleHeading: (n) => ({ commands: t }) => this.options.levels.includes(n.level) ? t.toggleNode(this.name, "paragraph", n) : !1
    };
  },
  addKeyboardShortcuts() {
    return this.options.levels.reduce((n, t) => ({
      ...n,
      [`Mod-Alt-${t}`]: () => this.editor.commands.toggleHeading({ level: t })
    }), {});
  },
  addInputRules() {
    return this.options.levels.map((n) => Og({
      find: new RegExp(`^(#{${Math.min(...this.options.levels)},${n}})\\s$`),
      type: this.type,
      getAttributes: {
        level: n
      }
    }));
  }
}), N2 = Bt.create({
  name: "horizontalRule",
  addOptions() {
    return {
      HTMLAttributes: {}
    };
  },
  group: "block",
  parseHTML() {
    return [{ tag: "hr" }];
  },
  renderHTML({ HTMLAttributes: n }) {
    return ["hr", Mt(this.options.HTMLAttributes, n)];
  },
  addCommands() {
    return {
      setHorizontalRule: () => ({ chain: n, state: t }) => {
        const { selection: e } = t, { $from: i, $to: r } = e, s = n();
        return i.parentOffset === 0 ? s.insertContentAt({
          from: Math.max(i.pos - 1, 0),
          to: r.pos
        }, {
          type: this.name
        }) : _g(e) ? s.insertContentAt(r.pos, {
          type: this.name
        }) : s.insertContent({ type: this.name }), s.command(({ tr: o, dispatch: a }) => {
          var l;
          if (a) {
            const { $to: c } = o.selection, u = c.end();
            if (c.nodeAfter)
              c.nodeAfter.isTextblock ? o.setSelection(ct.create(o.doc, c.pos + 1)) : c.nodeAfter.isBlock ? o.setSelection(ot.create(o.doc, c.pos)) : o.setSelection(ct.create(o.doc, c.pos));
            else {
              const d = (l = c.parent.type.contentMatch.defaultType) === null || l === void 0 ? void 0 : l.create();
              d && (o.insert(u, d), o.setSelection(ct.create(o.doc, u + 1)));
            }
            o.scrollIntoView();
          }
          return !0;
        }).run();
      }
    };
  },
  addInputRules() {
    return [
      Bu({
        find: /^(?:---|—-|___\s|\*\*\*\s)$/,
        type: this.type
      })
    ];
  }
}), L2 = "listItem", Uf = "textStyle", Kf = /^(\d+)\.\s$/, R2 = Bt.create({
  name: "orderedList",
  addOptions() {
    return {
      itemTypeName: "listItem",
      HTMLAttributes: {},
      keepMarks: !1,
      keepAttributes: !1
    };
  },
  group: "block list",
  content() {
    return `${this.options.itemTypeName}+`;
  },
  addAttributes() {
    return {
      start: {
        default: 1,
        parseHTML: (n) => n.hasAttribute("start") ? parseInt(n.getAttribute("start") || "", 10) : 1
      },
      type: {
        default: void 0,
        parseHTML: (n) => n.getAttribute("type")
      }
    };
  },
  parseHTML() {
    return [
      {
        tag: "ol"
      }
    ];
  },
  renderHTML({ HTMLAttributes: n }) {
    const { start: t, ...e } = n;
    return t === 1 ? ["ol", Mt(this.options.HTMLAttributes, e), 0] : ["ol", Mt(this.options.HTMLAttributes, n), 0];
  },
  addCommands() {
    return {
      toggleOrderedList: () => ({ commands: n, chain: t }) => this.options.keepAttributes ? t().toggleList(this.name, this.options.itemTypeName, this.options.keepMarks).updateAttributes(L2, this.editor.getAttributes(Uf)).run() : n.toggleList(this.name, this.options.itemTypeName, this.options.keepMarks)
    };
  },
  addKeyboardShortcuts() {
    return {
      "Mod-Shift-7": () => this.editor.commands.toggleOrderedList()
    };
  },
  addInputRules() {
    let n = Hr({
      find: Kf,
      type: this.type,
      getAttributes: (t) => ({ start: +t[1] }),
      joinPredicate: (t, e) => e.childCount + e.attrs.start === +t[1]
    });
    return (this.options.keepMarks || this.options.keepAttributes) && (n = Hr({
      find: Kf,
      type: this.type,
      keepMarks: this.options.keepMarks,
      keepAttributes: this.options.keepAttributes,
      getAttributes: (t) => ({ start: +t[1], ...this.editor.getAttributes(Uf) }),
      joinPredicate: (t, e) => e.childCount + e.attrs.start === +t[1],
      editor: this.editor
    })), [
      n
    ];
  }
}), I2 = /(?:^|\s)(~~(?!\s+~~)((?:[^~]+))~~(?!\s+~~))$/, P2 = /(?:^|\s)(~~(?!\s+~~)((?:[^~]+))~~(?!\s+~~))/g, D2 = Ve.create({
  name: "strike",
  addOptions() {
    return {
      HTMLAttributes: {}
    };
  },
  parseHTML() {
    return [
      {
        tag: "s"
      },
      {
        tag: "del"
      },
      {
        tag: "strike"
      },
      {
        style: "text-decoration",
        consuming: !1,
        getAttrs: (n) => n.includes("line-through") ? {} : !1
      }
    ];
  },
  renderHTML({ HTMLAttributes: n }) {
    return ["s", Mt(this.options.HTMLAttributes, n), 0];
  },
  addCommands() {
    return {
      setStrike: () => ({ commands: n }) => n.setMark(this.name),
      toggleStrike: () => ({ commands: n }) => n.toggleMark(this.name),
      unsetStrike: () => ({ commands: n }) => n.unsetMark(this.name)
    };
  },
  addKeyboardShortcuts() {
    return {
      "Mod-Shift-s": () => this.editor.commands.toggleStrike()
    };
  },
  addInputRules() {
    return [
      zr({
        find: I2,
        type: this.type
      })
    ];
  },
  addPasteRules() {
    return [
      Ki({
        find: P2,
        type: this.type
      })
    ];
  }
});
function $2(n = {}) {
  return new pe({
    view(t) {
      return new B2(t, n);
    }
  });
}
class B2 {
  constructor(t, e) {
    var i;
    this.editorView = t, this.cursorPos = null, this.element = null, this.timeout = -1, this.width = (i = e.width) !== null && i !== void 0 ? i : 1, this.color = e.color === !1 ? void 0 : e.color || "black", this.class = e.class, this.handlers = ["dragover", "dragend", "drop", "dragleave"].map((r) => {
      let s = (o) => {
        this[r](o);
      };
      return t.dom.addEventListener(r, s), { name: r, handler: s };
    });
  }
  destroy() {
    this.handlers.forEach(({ name: t, handler: e }) => this.editorView.dom.removeEventListener(t, e));
  }
  update(t, e) {
    this.cursorPos != null && e.doc != t.state.doc && (this.cursorPos > t.state.doc.content.size ? this.setCursor(null) : this.updateOverlay());
  }
  setCursor(t) {
    t != this.cursorPos && (this.cursorPos = t, t == null ? (this.element.parentNode.removeChild(this.element), this.element = null) : this.updateOverlay());
  }
  updateOverlay() {
    let t = this.editorView.state.doc.resolve(this.cursorPos), e = !t.parent.inlineContent, i;
    if (e) {
      let a = t.nodeBefore, l = t.nodeAfter;
      if (a || l) {
        let c = this.editorView.nodeDOM(this.cursorPos - (a ? a.nodeSize : 0));
        if (c) {
          let u = c.getBoundingClientRect(), d = a ? u.bottom : u.top;
          a && l && (d = (d + this.editorView.nodeDOM(this.cursorPos).getBoundingClientRect().top) / 2), i = { left: u.left, right: u.right, top: d - this.width / 2, bottom: d + this.width / 2 };
        }
      }
    }
    if (!i) {
      let a = this.editorView.coordsAtPos(this.cursorPos);
      i = { left: a.left - this.width / 2, right: a.left + this.width / 2, top: a.top, bottom: a.bottom };
    }
    let r = this.editorView.dom.offsetParent;
    this.element || (this.element = r.appendChild(document.createElement("div")), this.class && (this.element.className = this.class), this.element.style.cssText = "position: absolute; z-index: 50; pointer-events: none;", this.color && (this.element.style.backgroundColor = this.color)), this.element.classList.toggle("prosemirror-dropcursor-block", e), this.element.classList.toggle("prosemirror-dropcursor-inline", !e);
    let s, o;
    if (!r || r == document.body && getComputedStyle(r).position == "static")
      s = -pageXOffset, o = -pageYOffset;
    else {
      let a = r.getBoundingClientRect();
      s = a.left - r.scrollLeft, o = a.top - r.scrollTop;
    }
    this.element.style.left = i.left - s + "px", this.element.style.top = i.top - o + "px", this.element.style.width = i.right - i.left + "px", this.element.style.height = i.bottom - i.top + "px";
  }
  scheduleRemoval(t) {
    clearTimeout(this.timeout), this.timeout = setTimeout(() => this.setCursor(null), t);
  }
  dragover(t) {
    if (!this.editorView.editable)
      return;
    let e = this.editorView.posAtCoords({ left: t.clientX, top: t.clientY }), i = e && e.inside >= 0 && this.editorView.state.doc.nodeAt(e.inside), r = i && i.type.spec.disableDropCursor, s = typeof r == "function" ? r(this.editorView, e, t) : r;
    if (e && !s) {
      let o = e.pos;
      if (this.editorView.dragging && this.editorView.dragging.slice) {
        let a = nm(this.editorView.state.doc, o, this.editorView.dragging.slice);
        a != null && (o = a);
      }
      this.setCursor(o), this.scheduleRemoval(5e3);
    }
  }
  dragend() {
    this.scheduleRemoval(20);
  }
  drop() {
    this.scheduleRemoval(20);
  }
  dragleave(t) {
    (t.target == this.editorView.dom || !this.editorView.dom.contains(t.relatedTarget)) && this.setCursor(null);
  }
}
const z2 = ee.create({
  name: "dropCursor",
  addOptions() {
    return {
      color: "currentColor",
      width: 1,
      class: void 0
    };
  },
  addProseMirrorPlugins() {
    return [
      $2(this.options)
    ];
  }
});
class Gt extends ft {
  /**
  Create a gap cursor.
  */
  constructor(t) {
    super(t, t);
  }
  map(t, e) {
    let i = t.resolve(e.map(this.head));
    return Gt.valid(i) ? new Gt(i) : ft.near(i);
  }
  content() {
    return Y.empty;
  }
  eq(t) {
    return t instanceof Gt && t.head == this.head;
  }
  toJSON() {
    return { type: "gapcursor", pos: this.head };
  }
  /**
  @internal
  */
  static fromJSON(t, e) {
    if (typeof e.pos != "number")
      throw new RangeError("Invalid input for GapCursor.fromJSON");
    return new Gt(t.resolve(e.pos));
  }
  /**
  @internal
  */
  getBookmark() {
    return new zu(this.anchor);
  }
  /**
  @internal
  */
  static valid(t) {
    let e = t.parent;
    if (e.isTextblock || !H2(t) || !F2(t))
      return !1;
    let i = e.type.spec.allowGapCursor;
    if (i != null)
      return i;
    let r = e.contentMatchAt(t.index()).defaultType;
    return r && r.isTextblock;
  }
  /**
  @internal
  */
  static findGapCursorFrom(t, e, i = !1) {
    t: for (; ; ) {
      if (!i && Gt.valid(t))
        return t;
      let r = t.pos, s = null;
      for (let o = t.depth; ; o--) {
        let a = t.node(o);
        if (e > 0 ? t.indexAfter(o) < a.childCount : t.index(o) > 0) {
          s = a.child(e > 0 ? t.indexAfter(o) : t.index(o) - 1);
          break;
        } else if (o == 0)
          return null;
        r += e;
        let l = t.doc.resolve(r);
        if (Gt.valid(l))
          return l;
      }
      for (; ; ) {
        let o = e > 0 ? s.firstChild : s.lastChild;
        if (!o) {
          if (s.isAtom && !s.isText && !ot.isSelectable(s)) {
            t = t.doc.resolve(r + s.nodeSize * e), i = !1;
            continue t;
          }
          break;
        }
        s = o, r += e;
        let a = t.doc.resolve(r);
        if (Gt.valid(a))
          return a;
      }
      return null;
    }
  }
}
Gt.prototype.visible = !1;
Gt.findFrom = Gt.findGapCursorFrom;
ft.jsonID("gapcursor", Gt);
class zu {
  constructor(t) {
    this.pos = t;
  }
  map(t) {
    return new zu(t.map(this.pos));
  }
  resolve(t) {
    let e = t.resolve(this.pos);
    return Gt.valid(e) ? new Gt(e) : ft.near(e);
  }
}
function H2(n) {
  for (let t = n.depth; t >= 0; t--) {
    let e = n.index(t), i = n.node(t);
    if (e == 0) {
      if (i.type.spec.isolating)
        return !0;
      continue;
    }
    for (let r = i.child(e - 1); ; r = r.lastChild) {
      if (r.childCount == 0 && !r.inlineContent || r.isAtom || r.type.spec.isolating)
        return !0;
      if (r.inlineContent)
        return !1;
    }
  }
  return !0;
}
function F2(n) {
  for (let t = n.depth; t >= 0; t--) {
    let e = n.indexAfter(t), i = n.node(t);
    if (e == i.childCount) {
      if (i.type.spec.isolating)
        return !0;
      continue;
    }
    for (let r = i.child(e); ; r = r.firstChild) {
      if (r.childCount == 0 && !r.inlineContent || r.isAtom || r.type.spec.isolating)
        return !0;
      if (r.inlineContent)
        return !1;
    }
  }
  return !0;
}
function V2() {
  return new pe({
    props: {
      decorations: K2,
      createSelectionBetween(n, t, e) {
        return t.pos == e.pos && Gt.valid(e) ? new Gt(e) : null;
      },
      handleClick: W2,
      handleKeyDown: j2,
      handleDOMEvents: { beforeinput: U2 }
    }
  });
}
const j2 = Cu({
  ArrowLeft: vo("horiz", -1),
  ArrowRight: vo("horiz", 1),
  ArrowUp: vo("vert", -1),
  ArrowDown: vo("vert", 1)
});
function vo(n, t) {
  const e = n == "vert" ? t > 0 ? "down" : "up" : t > 0 ? "right" : "left";
  return function(i, r, s) {
    let o = i.selection, a = t > 0 ? o.$to : o.$from, l = o.empty;
    if (o instanceof ct) {
      if (!s.endOfTextblock(e) || a.depth == 0)
        return !1;
      l = !1, a = i.doc.resolve(t > 0 ? a.after() : a.before());
    }
    let c = Gt.findGapCursorFrom(a, t, l);
    return c ? (r && r(i.tr.setSelection(new Gt(c))), !0) : !1;
  };
}
function W2(n, t, e) {
  if (!n || !n.editable)
    return !1;
  let i = n.state.doc.resolve(t);
  if (!Gt.valid(i))
    return !1;
  let r = n.posAtCoords({ left: e.clientX, top: e.clientY });
  return r && r.inside > -1 && ot.isSelectable(n.state.doc.nodeAt(r.inside)) ? !1 : (n.dispatch(n.state.tr.setSelection(new Gt(i))), !0);
}
function U2(n, t) {
  if (t.inputType != "insertCompositionText" || !(n.state.selection instanceof Gt))
    return !1;
  let { $from: e } = n.state.selection, i = e.parent.contentMatchAt(e.index()).findWrapping(n.state.schema.nodes.text);
  if (!i)
    return !1;
  let r = B.empty;
  for (let o = i.length - 1; o >= 0; o--)
    r = B.from(i[o].createAndFill(null, r));
  let s = n.state.tr.replace(e.pos, e.pos, new Y(r, 0, 0));
  return s.setSelection(ct.near(s.doc.resolve(e.pos + 1))), n.dispatch(s), !1;
}
function K2(n) {
  if (!(n.selection instanceof Gt))
    return null;
  let t = document.createElement("div");
  return t.className = "ProseMirror-gapcursor", qt.create(n.doc, [Ne.widget(n.selection.head, t, { key: "gapcursor" })]);
}
const q2 = ee.create({
  name: "gapCursor",
  addProseMirrorPlugins() {
    return [
      V2()
    ];
  },
  extendNodeSchema(n) {
    var t;
    const e = {
      name: n.name,
      options: n.options,
      storage: n.storage
    };
    return {
      allowGapCursor: (t = bt(tt(n, "allowGapCursor", e))) !== null && t !== void 0 ? t : null
    };
  }
}), G2 = ee.create({
  name: "textAlign",
  addOptions() {
    return {
      types: [],
      alignments: ["left", "center", "right", "justify"],
      defaultAlignment: null
    };
  },
  addGlobalAttributes() {
    return [
      {
        types: this.options.types,
        attributes: {
          textAlign: {
            default: this.options.defaultAlignment,
            parseHTML: (n) => {
              const t = n.style.textAlign;
              return this.options.alignments.includes(t) ? t : this.options.defaultAlignment;
            },
            renderHTML: (n) => n.textAlign ? { style: `text-align: ${n.textAlign}` } : {}
          }
        }
      }
    ];
  },
  addCommands() {
    return {
      setTextAlign: (n) => ({ commands: t }) => this.options.alignments.includes(n) ? this.options.types.map((e) => t.updateAttributes(e, { textAlign: n })).every((e) => e) : !1,
      unsetTextAlign: () => ({ commands: n }) => this.options.types.map((t) => n.resetAttributes(t, "textAlign")).every((t) => t)
    };
  },
  addKeyboardShortcuts() {
    return {
      "Mod-Shift-l": () => this.editor.commands.setTextAlign("left"),
      "Mod-Shift-e": () => this.editor.commands.setTextAlign("center"),
      "Mod-Shift-r": () => this.editor.commands.setTextAlign("right"),
      "Mod-Shift-j": () => this.editor.commands.setTextAlign("justify")
    };
  }
}), J2 = Ve.create({
  name: "textStyle",
  priority: 101,
  addOptions() {
    return {
      HTMLAttributes: {}
    };
  },
  parseHTML() {
    return [
      {
        tag: "span",
        getAttrs: (n) => n.hasAttribute("style") ? {} : !1
      }
    ];
  },
  renderHTML({ HTMLAttributes: n }) {
    return ["span", Mt(this.options.HTMLAttributes, n), 0];
  },
  addCommands() {
    return {
      removeEmptyTextStyle: () => ({ state: n, commands: t }) => {
        const e = il(n, this.type);
        return Object.entries(e).some(([, r]) => !!r) ? !0 : t.unsetMark(this.name);
      }
    };
  }
}), X2 = ee.create({
  name: "color",
  addOptions() {
    return {
      types: ["textStyle"]
    };
  },
  addGlobalAttributes() {
    return [
      {
        types: this.options.types,
        attributes: {
          color: {
            default: null,
            parseHTML: (n) => {
              var t;
              return (t = n.style.color) === null || t === void 0 ? void 0 : t.replace(/['"]+/g, "");
            },
            renderHTML: (n) => n.color ? {
              style: `color: ${n.color}`
            } : {}
          }
        }
      }
    ];
  },
  addCommands() {
    return {
      setColor: (n) => ({ chain: t }) => t().setMark("textStyle", { color: n }).run(),
      unsetColor: () => ({ chain: n }) => n().setMark("textStyle", { color: null }).removeEmptyTextStyle().run()
    };
  }
}), Y2 = Bt.create({
  name: "iframe",
  group: "inline",
  content: "text*",
  inline: !0,
  atom: !0,
  parseHTML() {
    return [
      {
        tag: "iframe"
      }
    ];
  },
  renderHTML({ HTMLAttributes: n }) {
    return ["iframe", n];
  }
});
var Bc, zc;
if (typeof WeakMap < "u") {
  let n = /* @__PURE__ */ new WeakMap();
  Bc = (t) => n.get(t), zc = (t, e) => (n.set(t, e), e);
} else {
  const n = [];
  let e = 0;
  Bc = (i) => {
    for (let r = 0; r < n.length; r += 2)
      if (n[r] == i)
        return n[r + 1];
  }, zc = (i, r) => (e == 10 && (e = 0), n[e++] = i, n[e++] = r);
}
var Jt = class {
  constructor(n, t, e, i) {
    this.width = n, this.height = t, this.map = e, this.problems = i;
  }
  // Find the dimensions of the cell at the given position.
  findCell(n) {
    for (let t = 0; t < this.map.length; t++) {
      const e = this.map[t];
      if (e != n)
        continue;
      const i = t % this.width, r = t / this.width | 0;
      let s = i + 1, o = r + 1;
      for (let a = 1; s < this.width && this.map[t + a] == e; a++)
        s++;
      for (let a = 1; o < this.height && this.map[t + this.width * a] == e; a++)
        o++;
      return { left: i, top: r, right: s, bottom: o };
    }
    throw new RangeError(`No cell with offset ${n} found`);
  }
  // Find the left side of the cell at the given position.
  colCount(n) {
    for (let t = 0; t < this.map.length; t++)
      if (this.map[t] == n)
        return t % this.width;
    throw new RangeError(`No cell with offset ${n} found`);
  }
  // Find the next cell in the given direction, starting from the cell
  // at `pos`, if any.
  nextCell(n, t, e) {
    const { left: i, right: r, top: s, bottom: o } = this.findCell(n);
    return t == "horiz" ? (e < 0 ? i == 0 : r == this.width) ? null : this.map[s * this.width + (e < 0 ? i - 1 : r)] : (e < 0 ? s == 0 : o == this.height) ? null : this.map[i + this.width * (e < 0 ? s - 1 : o)];
  }
  // Get the rectangle spanning the two given cells.
  rectBetween(n, t) {
    const {
      left: e,
      right: i,
      top: r,
      bottom: s
    } = this.findCell(n), {
      left: o,
      right: a,
      top: l,
      bottom: c
    } = this.findCell(t);
    return {
      left: Math.min(e, o),
      top: Math.min(r, l),
      right: Math.max(i, a),
      bottom: Math.max(s, c)
    };
  }
  // Return the position of all cells that have the top left corner in
  // the given rectangle.
  cellsInRect(n) {
    const t = [], e = {};
    for (let i = n.top; i < n.bottom; i++)
      for (let r = n.left; r < n.right; r++) {
        const s = i * this.width + r, o = this.map[s];
        e[o] || (e[o] = !0, !(r == n.left && r && this.map[s - 1] == o || i == n.top && i && this.map[s - this.width] == o) && t.push(o));
      }
    return t;
  }
  // Return the position at which the cell at the given row and column
  // starts, or would start, if a cell started there.
  positionAt(n, t, e) {
    for (let i = 0, r = 0; ; i++) {
      const s = r + e.child(i).nodeSize;
      if (i == n) {
        let o = t + n * this.width;
        const a = (n + 1) * this.width;
        for (; o < a && this.map[o] < r; )
          o++;
        return o == a ? s - 1 : this.map[o];
      }
      r = s;
    }
  }
  // Find the table map for the given table node.
  static get(n) {
    return Bc(n) || zc(n, Z2(n));
  }
};
function Z2(n) {
  if (n.type.spec.tableRole != "table")
    throw new RangeError("Not a table node: " + n.type.name);
  const t = Q2(n), e = n.childCount, i = [];
  let r = 0, s = null;
  const o = [];
  for (let c = 0, u = t * e; c < u; c++)
    i[c] = 0;
  for (let c = 0, u = 0; c < e; c++) {
    const d = n.child(c);
    u++;
    for (let p = 0; ; p++) {
      for (; r < i.length && i[r] != 0; )
        r++;
      if (p == d.childCount)
        break;
      const _ = d.child(p), { colspan: g, rowspan: m, colwidth: y } = _.attrs;
      for (let x = 0; x < m; x++) {
        if (x + c >= e) {
          (s || (s = [])).push({
            type: "overlong_rowspan",
            pos: u,
            n: m - x
          });
          break;
        }
        const k = r + x * t;
        for (let S = 0; S < g; S++) {
          i[k + S] == 0 ? i[k + S] = u : (s || (s = [])).push({
            type: "collision",
            row: c,
            pos: u,
            n: g - S
          });
          const w = y && y[S];
          if (w) {
            const O = (k + S) % t * 2, v = o[O];
            v == null || v != w && o[O + 1] == 1 ? (o[O] = w, o[O + 1] = 1) : v == w && o[O + 1]++;
          }
        }
      }
      r += g, u += _.nodeSize;
    }
    const f = (c + 1) * t;
    let h = 0;
    for (; r < f; )
      i[r++] == 0 && h++;
    h && (s || (s = [])).push({ type: "missing", row: c, n: h }), u++;
  }
  const a = new Jt(t, e, i, s);
  let l = !1;
  for (let c = 0; !l && c < o.length; c += 2)
    o[c] != null && o[c + 1] < e && (l = !0);
  return l && tk(a, o, n), a;
}
function Q2(n) {
  let t = -1, e = !1;
  for (let i = 0; i < n.childCount; i++) {
    const r = n.child(i);
    let s = 0;
    if (e)
      for (let o = 0; o < i; o++) {
        const a = n.child(o);
        for (let l = 0; l < a.childCount; l++) {
          const c = a.child(l);
          o + c.attrs.rowspan > i && (s += c.attrs.colspan);
        }
      }
    for (let o = 0; o < r.childCount; o++) {
      const a = r.child(o);
      s += a.attrs.colspan, a.attrs.rowspan > 1 && (e = !0);
    }
    t == -1 ? t = s : t != s && (t = Math.max(t, s));
  }
  return t;
}
function tk(n, t, e) {
  n.problems || (n.problems = []);
  const i = {};
  for (let r = 0; r < n.map.length; r++) {
    const s = n.map[r];
    if (i[s])
      continue;
    i[s] = !0;
    const o = e.nodeAt(s);
    if (!o)
      throw new RangeError(`No cell with offset ${s} found`);
    let a = null;
    const l = o.attrs;
    for (let c = 0; c < l.colspan; c++) {
      const u = (r + c) % n.width, d = t[u * 2];
      d != null && (!l.colwidth || l.colwidth[c] != d) && ((a || (a = ek(l)))[c] = d);
    }
    a && n.problems.unshift({
      type: "colwidth mismatch",
      pos: s,
      colwidth: a
    });
  }
}
function ek(n) {
  if (n.colwidth)
    return n.colwidth.slice();
  const t = [];
  for (let e = 0; e < n.colspan; e++)
    t.push(0);
  return t;
}
function Se(n) {
  let t = n.cached.tableNodeTypes;
  if (!t) {
    t = n.cached.tableNodeTypes = {};
    for (const e in n.nodes) {
      const i = n.nodes[e], r = i.spec.tableRole;
      r && (t[r] = i);
    }
  }
  return t;
}
var ai = new $e("selectingCells");
function Ur(n) {
  for (let t = n.depth - 1; t > 0; t--)
    if (n.node(t).type.spec.tableRole == "row")
      return n.node(0).resolve(n.before(t + 1));
  return null;
}
function nk(n) {
  for (let t = n.depth; t > 0; t--) {
    const e = n.node(t).type.spec.tableRole;
    if (e === "cell" || e === "header_cell")
      return n.node(t);
  }
  return null;
}
function vn(n) {
  const t = n.selection.$head;
  for (let e = t.depth; e > 0; e--)
    if (t.node(e).type.spec.tableRole == "row")
      return !0;
  return !1;
}
function al(n) {
  const t = n.selection;
  if ("$anchorCell" in t && t.$anchorCell)
    return t.$anchorCell.pos > t.$headCell.pos ? t.$anchorCell : t.$headCell;
  if ("node" in t && t.node && t.node.type.spec.tableRole == "cell")
    return t.$anchor;
  const e = Ur(t.$head) || ik(t.$head);
  if (e)
    return e;
  throw new RangeError(`No cell found around position ${t.head}`);
}
function ik(n) {
  for (let t = n.nodeAfter, e = n.pos; t; t = t.firstChild, e++) {
    const i = t.type.spec.tableRole;
    if (i == "cell" || i == "header_cell")
      return n.doc.resolve(e);
  }
  for (let t = n.nodeBefore, e = n.pos; t; t = t.lastChild, e--) {
    const i = t.type.spec.tableRole;
    if (i == "cell" || i == "header_cell")
      return n.doc.resolve(e - t.nodeSize);
  }
}
function Hc(n) {
  return n.parent.type.spec.tableRole == "row" && !!n.nodeAfter;
}
function rk(n) {
  return n.node(0).resolve(n.pos + n.nodeAfter.nodeSize);
}
function Hu(n, t) {
  return n.depth == t.depth && n.pos >= t.start(-1) && n.pos <= t.end(-1);
}
function Mg(n, t, e) {
  const i = n.node(-1), r = Jt.get(i), s = n.start(-1), o = r.nextCell(n.pos - s, t, e);
  return o == null ? null : n.node(0).resolve(s + o);
}
function qi(n, t, e = 1) {
  const i = { ...n, colspan: n.colspan - e };
  return i.colwidth && (i.colwidth = i.colwidth.slice(), i.colwidth.splice(t, e), i.colwidth.some((r) => r > 0) || (i.colwidth = null)), i;
}
function Ag(n, t, e = 1) {
  const i = { ...n, colspan: n.colspan + e };
  if (i.colwidth) {
    i.colwidth = i.colwidth.slice();
    for (let r = 0; r < e; r++)
      i.colwidth.splice(t, 0, 0);
  }
  return i;
}
function sk(n, t, e) {
  const i = Se(t.type.schema).header_cell;
  for (let r = 0; r < n.height; r++)
    if (t.nodeAt(n.map[e + r * n.width]).type != i)
      return !1;
  return !0;
}
var Vt = class jn extends ft {
  // A table selection is identified by its anchor and head cells. The
  // positions given to this constructor should point _before_ two
  // cells in the same table. They may be the same, to select a single
  // cell.
  constructor(t, e = t) {
    const i = t.node(-1), r = Jt.get(i), s = t.start(-1), o = r.rectBetween(
      t.pos - s,
      e.pos - s
    ), a = t.node(0), l = r.cellsInRect(o).filter((u) => u != e.pos - s);
    l.unshift(e.pos - s);
    const c = l.map((u) => {
      const d = i.nodeAt(u);
      if (!d)
        throw RangeError(`No cell with offset ${u} found`);
      const f = s + u + 1;
      return new am(
        a.resolve(f),
        a.resolve(f + d.content.size)
      );
    });
    super(c[0].$from, c[0].$to, c), this.$anchorCell = t, this.$headCell = e;
  }
  map(t, e) {
    const i = t.resolve(e.map(this.$anchorCell.pos)), r = t.resolve(e.map(this.$headCell.pos));
    if (Hc(i) && Hc(r) && Hu(i, r)) {
      const s = this.$anchorCell.node(-1) != i.node(-1);
      return s && this.isRowSelection() ? jn.rowSelection(i, r) : s && this.isColSelection() ? jn.colSelection(i, r) : new jn(i, r);
    }
    return ct.between(i, r);
  }
  // Returns a rectangular slice of table rows containing the selected
  // cells.
  content() {
    const t = this.$anchorCell.node(-1), e = Jt.get(t), i = this.$anchorCell.start(-1), r = e.rectBetween(
      this.$anchorCell.pos - i,
      this.$headCell.pos - i
    ), s = {}, o = [];
    for (let l = r.top; l < r.bottom; l++) {
      const c = [];
      for (let u = l * e.width + r.left, d = r.left; d < r.right; d++, u++) {
        const f = e.map[u];
        if (s[f])
          continue;
        s[f] = !0;
        const h = e.findCell(f);
        let p = t.nodeAt(f);
        if (!p)
          throw RangeError(`No cell with offset ${f} found`);
        const _ = r.left - h.left, g = h.right - r.right;
        if (_ > 0 || g > 0) {
          let m = p.attrs;
          if (_ > 0 && (m = qi(m, 0, _)), g > 0 && (m = qi(
            m,
            m.colspan - g,
            g
          )), h.left < r.left) {
            if (p = p.type.createAndFill(m), !p)
              throw RangeError(
                `Could not create cell with attrs ${JSON.stringify(m)}`
              );
          } else
            p = p.type.create(m, p.content);
        }
        if (h.top < r.top || h.bottom > r.bottom) {
          const m = {
            ...p.attrs,
            rowspan: Math.min(h.bottom, r.bottom) - Math.max(h.top, r.top)
          };
          h.top < r.top ? p = p.type.createAndFill(m) : p = p.type.create(m, p.content);
        }
        c.push(p);
      }
      o.push(t.child(l).copy(B.from(c)));
    }
    const a = this.isColSelection() && this.isRowSelection() ? t : o;
    return new Y(B.from(a), 1, 1);
  }
  replace(t, e = Y.empty) {
    const i = t.steps.length, r = this.ranges;
    for (let o = 0; o < r.length; o++) {
      const { $from: a, $to: l } = r[o], c = t.mapping.slice(i);
      t.replace(
        c.map(a.pos),
        c.map(l.pos),
        o ? Y.empty : e
      );
    }
    const s = ft.findFrom(
      t.doc.resolve(t.mapping.slice(i).map(this.to)),
      -1
    );
    s && t.setSelection(s);
  }
  replaceWith(t, e) {
    this.replace(t, new Y(B.from(e), 0, 0));
  }
  forEachCell(t) {
    const e = this.$anchorCell.node(-1), i = Jt.get(e), r = this.$anchorCell.start(-1), s = i.cellsInRect(
      i.rectBetween(
        this.$anchorCell.pos - r,
        this.$headCell.pos - r
      )
    );
    for (let o = 0; o < s.length; o++)
      t(e.nodeAt(s[o]), r + s[o]);
  }
  // True if this selection goes all the way from the top to the
  // bottom of the table.
  isColSelection() {
    const t = this.$anchorCell.index(-1), e = this.$headCell.index(-1);
    if (Math.min(t, e) > 0)
      return !1;
    const i = t + this.$anchorCell.nodeAfter.attrs.rowspan, r = e + this.$headCell.nodeAfter.attrs.rowspan;
    return Math.max(i, r) == this.$headCell.node(-1).childCount;
  }
  // Returns the smallest column selection that covers the given anchor
  // and head cell.
  static colSelection(t, e = t) {
    const i = t.node(-1), r = Jt.get(i), s = t.start(-1), o = r.findCell(t.pos - s), a = r.findCell(e.pos - s), l = t.node(0);
    return o.top <= a.top ? (o.top > 0 && (t = l.resolve(s + r.map[o.left])), a.bottom < r.height && (e = l.resolve(
      s + r.map[r.width * (r.height - 1) + a.right - 1]
    ))) : (a.top > 0 && (e = l.resolve(s + r.map[a.left])), o.bottom < r.height && (t = l.resolve(
      s + r.map[r.width * (r.height - 1) + o.right - 1]
    ))), new jn(t, e);
  }
  // True if this selection goes all the way from the left to the
  // right of the table.
  isRowSelection() {
    const t = this.$anchorCell.node(-1), e = Jt.get(t), i = this.$anchorCell.start(-1), r = e.colCount(this.$anchorCell.pos - i), s = e.colCount(this.$headCell.pos - i);
    if (Math.min(r, s) > 0)
      return !1;
    const o = r + this.$anchorCell.nodeAfter.attrs.colspan, a = s + this.$headCell.nodeAfter.attrs.colspan;
    return Math.max(o, a) == e.width;
  }
  eq(t) {
    return t instanceof jn && t.$anchorCell.pos == this.$anchorCell.pos && t.$headCell.pos == this.$headCell.pos;
  }
  // Returns the smallest row selection that covers the given anchor
  // and head cell.
  static rowSelection(t, e = t) {
    const i = t.node(-1), r = Jt.get(i), s = t.start(-1), o = r.findCell(t.pos - s), a = r.findCell(e.pos - s), l = t.node(0);
    return o.left <= a.left ? (o.left > 0 && (t = l.resolve(
      s + r.map[o.top * r.width]
    )), a.right < r.width && (e = l.resolve(
      s + r.map[r.width * (a.top + 1) - 1]
    ))) : (a.left > 0 && (e = l.resolve(s + r.map[a.top * r.width])), o.right < r.width && (t = l.resolve(
      s + r.map[r.width * (o.top + 1) - 1]
    ))), new jn(t, e);
  }
  toJSON() {
    return {
      type: "cell",
      anchor: this.$anchorCell.pos,
      head: this.$headCell.pos
    };
  }
  static fromJSON(t, e) {
    return new jn(t.resolve(e.anchor), t.resolve(e.head));
  }
  static create(t, e, i = e) {
    return new jn(t.resolve(e), t.resolve(i));
  }
  getBookmark() {
    return new ok(this.$anchorCell.pos, this.$headCell.pos);
  }
};
Vt.prototype.visible = !1;
ft.jsonID("cell", Vt);
var ok = class Ng {
  constructor(t, e) {
    this.anchor = t, this.head = e;
  }
  map(t) {
    return new Ng(t.map(this.anchor), t.map(this.head));
  }
  resolve(t) {
    const e = t.resolve(this.anchor), i = t.resolve(this.head);
    return e.parent.type.spec.tableRole == "row" && i.parent.type.spec.tableRole == "row" && e.index() < e.parent.childCount && i.index() < i.parent.childCount && Hu(e, i) ? new Vt(e, i) : ft.near(i, 1);
  }
};
function ak(n) {
  if (!(n.selection instanceof Vt))
    return null;
  const t = [];
  return n.selection.forEachCell((e, i) => {
    t.push(
      Ne.node(i, i + e.nodeSize, { class: "selectedCell" })
    );
  }), qt.create(n.doc, t);
}
function lk({ $from: n, $to: t }) {
  if (n.pos == t.pos || n.pos < t.pos - 6)
    return !1;
  let e = n.pos, i = t.pos, r = n.depth;
  for (; r >= 0 && !(n.after(r + 1) < n.end(r)); r--, e++)
    ;
  for (let s = t.depth; s >= 0 && !(t.before(s + 1) > t.start(s)); s--, i--)
    ;
  return e == i && /row|table/.test(n.node(r).type.spec.tableRole);
}
function ck({ $from: n, $to: t }) {
  let e, i;
  for (let r = n.depth; r > 0; r--) {
    const s = n.node(r);
    if (s.type.spec.tableRole === "cell" || s.type.spec.tableRole === "header_cell") {
      e = s;
      break;
    }
  }
  for (let r = t.depth; r > 0; r--) {
    const s = t.node(r);
    if (s.type.spec.tableRole === "cell" || s.type.spec.tableRole === "header_cell") {
      i = s;
      break;
    }
  }
  return e !== i && t.parentOffset === 0;
}
function uk(n, t, e) {
  const i = (t || n).selection, r = (t || n).doc;
  let s, o;
  if (i instanceof ot && (o = i.node.type.spec.tableRole)) {
    if (o == "cell" || o == "header_cell")
      s = Vt.create(r, i.from);
    else if (o == "row") {
      const a = r.resolve(i.from + 1);
      s = Vt.rowSelection(a, a);
    } else if (!e) {
      const a = Jt.get(i.node), l = i.from + 1, c = l + a.map[a.width * a.height - 1];
      s = Vt.create(r, l + 1, c);
    }
  } else i instanceof ct && lk(i) ? s = ct.create(r, i.from) : i instanceof ct && ck(i) && (s = ct.create(r, i.$from.start(), i.$from.end()));
  return s && (t || (t = n.tr)).setSelection(s), t;
}
var dk = new $e("fix-tables");
function Lg(n, t, e, i) {
  const r = n.childCount, s = t.childCount;
  t:
    for (let o = 0, a = 0; o < s; o++) {
      const l = t.child(o);
      for (let c = a, u = Math.min(r, o + 3); c < u; c++)
        if (n.child(c) == l) {
          a = c + 1, e += l.nodeSize;
          continue t;
        }
      i(l, e), a < r && n.child(a).sameMarkup(l) ? Lg(n.child(a), l, e + 1, i) : l.nodesBetween(0, l.content.size, i, e + 1), e += l.nodeSize;
    }
}
function Rg(n, t) {
  let e;
  const i = (r, s) => {
    r.type.spec.tableRole == "table" && (e = fk(n, r, s, e));
  };
  return t ? t.doc != n.doc && Lg(t.doc, n.doc, 0, i) : n.doc.descendants(i), e;
}
function fk(n, t, e, i) {
  const r = Jt.get(t);
  if (!r.problems)
    return i;
  i || (i = n.tr);
  const s = [];
  for (let l = 0; l < r.height; l++)
    s.push(0);
  for (let l = 0; l < r.problems.length; l++) {
    const c = r.problems[l];
    if (c.type == "collision") {
      const u = t.nodeAt(c.pos);
      if (!u)
        continue;
      const d = u.attrs;
      for (let f = 0; f < d.rowspan; f++)
        s[c.row + f] += c.n;
      i.setNodeMarkup(
        i.mapping.map(e + 1 + c.pos),
        null,
        qi(d, d.colspan - c.n, c.n)
      );
    } else if (c.type == "missing")
      s[c.row] += c.n;
    else if (c.type == "overlong_rowspan") {
      const u = t.nodeAt(c.pos);
      if (!u)
        continue;
      i.setNodeMarkup(i.mapping.map(e + 1 + c.pos), null, {
        ...u.attrs,
        rowspan: u.attrs.rowspan - c.n
      });
    } else if (c.type == "colwidth mismatch") {
      const u = t.nodeAt(c.pos);
      if (!u)
        continue;
      i.setNodeMarkup(i.mapping.map(e + 1 + c.pos), null, {
        ...u.attrs,
        colwidth: c.colwidth
      });
    }
  }
  let o, a;
  for (let l = 0; l < s.length; l++)
    s[l] && (o == null && (o = l), a = l);
  for (let l = 0, c = e + 1; l < r.height; l++) {
    const u = t.child(l), d = c + u.nodeSize, f = s[l];
    if (f > 0) {
      let h = "cell";
      u.firstChild && (h = u.firstChild.type.spec.tableRole);
      const p = [];
      for (let g = 0; g < f; g++) {
        const m = Se(n.schema)[h].createAndFill();
        m && p.push(m);
      }
      const _ = (l == 0 || o == l - 1) && a == l ? c + 1 : d - 1;
      i.insert(i.mapping.map(_), p);
    }
    c = d;
  }
  return i.setMeta(dk, { fixTables: !0 });
}
function un(n) {
  const t = n.selection, e = al(n), i = e.node(-1), r = e.start(-1), s = Jt.get(i);
  return { ...t instanceof Vt ? s.rectBetween(
    t.$anchorCell.pos - r,
    t.$headCell.pos - r
  ) : s.findCell(e.pos - r), tableStart: r, map: s, table: i };
}
function Ig(n, { map: t, tableStart: e, table: i }, r) {
  let s = r > 0 ? -1 : 0;
  sk(t, i, r + s) && (s = r == 0 || r == t.width ? null : 0);
  for (let o = 0; o < t.height; o++) {
    const a = o * t.width + r;
    if (r > 0 && r < t.width && t.map[a - 1] == t.map[a]) {
      const l = t.map[a], c = i.nodeAt(l);
      n.setNodeMarkup(
        n.mapping.map(e + l),
        null,
        Ag(c.attrs, r - t.colCount(l))
      ), o += c.attrs.rowspan - 1;
    } else {
      const l = s == null ? Se(i.type.schema).cell : i.nodeAt(t.map[a + s]).type, c = t.positionAt(o, r, i);
      n.insert(n.mapping.map(e + c), l.createAndFill());
    }
  }
  return n;
}
function hk(n, t) {
  if (!vn(n))
    return !1;
  if (t) {
    const e = un(n);
    t(Ig(n.tr, e, e.left));
  }
  return !0;
}
function pk(n, t) {
  if (!vn(n))
    return !1;
  if (t) {
    const e = un(n);
    t(Ig(n.tr, e, e.right));
  }
  return !0;
}
function mk(n, { map: t, table: e, tableStart: i }, r) {
  const s = n.mapping.maps.length;
  for (let o = 0; o < t.height; ) {
    const a = o * t.width + r, l = t.map[a], c = e.nodeAt(l), u = c.attrs;
    if (r > 0 && t.map[a - 1] == l || r < t.width - 1 && t.map[a + 1] == l)
      n.setNodeMarkup(
        n.mapping.slice(s).map(i + l),
        null,
        qi(u, r - t.colCount(l))
      );
    else {
      const d = n.mapping.slice(s).map(i + l);
      n.delete(d, d + c.nodeSize);
    }
    o += u.rowspan;
  }
}
function gk(n, t) {
  if (!vn(n))
    return !1;
  if (t) {
    const e = un(n), i = n.tr;
    if (e.left == 0 && e.right == e.map.width)
      return !1;
    for (let r = e.right - 1; mk(i, e, r), r != e.left; r--) {
      const s = e.tableStart ? i.doc.nodeAt(e.tableStart - 1) : i.doc;
      if (!s)
        throw RangeError("No table found");
      e.table = s, e.map = Jt.get(s);
    }
    t(i);
  }
  return !0;
}
function _k(n, t, e) {
  var i;
  const r = Se(t.type.schema).header_cell;
  for (let s = 0; s < n.width; s++)
    if (((i = t.nodeAt(n.map[s + e * n.width])) == null ? void 0 : i.type) != r)
      return !1;
  return !0;
}
function Pg(n, { map: t, tableStart: e, table: i }, r) {
  var s;
  let o = e;
  for (let c = 0; c < r; c++)
    o += i.child(c).nodeSize;
  const a = [];
  let l = r > 0 ? -1 : 0;
  _k(t, i, r + l) && (l = r == 0 || r == t.height ? null : 0);
  for (let c = 0, u = t.width * r; c < t.width; c++, u++)
    if (r > 0 && r < t.height && t.map[u] == t.map[u - t.width]) {
      const d = t.map[u], f = i.nodeAt(d).attrs;
      n.setNodeMarkup(e + d, null, {
        ...f,
        rowspan: f.rowspan + 1
      }), c += f.colspan - 1;
    } else {
      const d = l == null ? Se(i.type.schema).cell : (s = i.nodeAt(t.map[u + l * t.width])) == null ? void 0 : s.type, f = d == null ? void 0 : d.createAndFill();
      f && a.push(f);
    }
  return n.insert(o, Se(i.type.schema).row.create(null, a)), n;
}
function bk(n, t) {
  if (!vn(n))
    return !1;
  if (t) {
    const e = un(n);
    t(Pg(n.tr, e, e.top));
  }
  return !0;
}
function yk(n, t) {
  if (!vn(n))
    return !1;
  if (t) {
    const e = un(n);
    t(Pg(n.tr, e, e.bottom));
  }
  return !0;
}
function vk(n, { map: t, table: e, tableStart: i }, r) {
  let s = 0;
  for (let c = 0; c < r; c++)
    s += e.child(c).nodeSize;
  const o = s + e.child(r).nodeSize, a = n.mapping.maps.length;
  n.delete(s + i, o + i);
  const l = /* @__PURE__ */ new Set();
  for (let c = 0, u = r * t.width; c < t.width; c++, u++) {
    const d = t.map[u];
    if (!l.has(d)) {
      if (l.add(d), r > 0 && d == t.map[u - t.width]) {
        const f = e.nodeAt(d).attrs;
        n.setNodeMarkup(n.mapping.slice(a).map(d + i), null, {
          ...f,
          rowspan: f.rowspan - 1
        }), c += f.colspan - 1;
      } else if (r < t.height && d == t.map[u + t.width]) {
        const f = e.nodeAt(d), h = f.attrs, p = f.type.create(
          { ...h, rowspan: f.attrs.rowspan - 1 },
          f.content
        ), _ = t.positionAt(r + 1, c, e);
        n.insert(n.mapping.slice(a).map(i + _), p), c += h.colspan - 1;
      }
    }
  }
}
function xk(n, t) {
  if (!vn(n))
    return !1;
  if (t) {
    const e = un(n), i = n.tr;
    if (e.top == 0 && e.bottom == e.map.height)
      return !1;
    for (let r = e.bottom - 1; vk(i, e, r), r != e.top; r--) {
      const s = e.tableStart ? i.doc.nodeAt(e.tableStart - 1) : i.doc;
      if (!s)
        throw RangeError("No table found");
      e.table = s, e.map = Jt.get(e.table);
    }
    t(i);
  }
  return !0;
}
function qf(n) {
  const t = n.content;
  return t.childCount == 1 && t.child(0).isTextblock && t.child(0).childCount == 0;
}
function wk({ width: n, height: t, map: e }, i) {
  let r = i.top * n + i.left, s = r, o = (i.bottom - 1) * n + i.left, a = r + (i.right - i.left - 1);
  for (let l = i.top; l < i.bottom; l++) {
    if (i.left > 0 && e[s] == e[s - 1] || i.right < n && e[a] == e[a + 1])
      return !0;
    s += n, a += n;
  }
  for (let l = i.left; l < i.right; l++) {
    if (i.top > 0 && e[r] == e[r - n] || i.bottom < t && e[o] == e[o + n])
      return !0;
    r++, o++;
  }
  return !1;
}
function Gf(n, t) {
  const e = n.selection;
  if (!(e instanceof Vt) || e.$anchorCell.pos == e.$headCell.pos)
    return !1;
  const i = un(n), { map: r } = i;
  if (wk(r, i))
    return !1;
  if (t) {
    const s = n.tr, o = {};
    let a = B.empty, l, c;
    for (let u = i.top; u < i.bottom; u++)
      for (let d = i.left; d < i.right; d++) {
        const f = r.map[u * r.width + d], h = i.table.nodeAt(f);
        if (!(o[f] || !h))
          if (o[f] = !0, l == null)
            l = f, c = h;
          else {
            qf(h) || (a = a.append(h.content));
            const p = s.mapping.map(f + i.tableStart);
            s.delete(p, p + h.nodeSize);
          }
      }
    if (l == null || c == null)
      return !0;
    if (s.setNodeMarkup(l + i.tableStart, null, {
      ...Ag(
        c.attrs,
        c.attrs.colspan,
        i.right - i.left - c.attrs.colspan
      ),
      rowspan: i.bottom - i.top
    }), a.size) {
      const u = l + 1 + c.content.size, d = qf(c) ? l + 1 : u;
      s.replaceWith(d + i.tableStart, u + i.tableStart, a);
    }
    s.setSelection(
      new Vt(s.doc.resolve(l + i.tableStart))
    ), t(s);
  }
  return !0;
}
function Jf(n, t) {
  const e = Se(n.schema);
  return kk(({ node: i }) => e[i.type.spec.tableRole])(n, t);
}
function kk(n) {
  return (t, e) => {
    var i;
    const r = t.selection;
    let s, o;
    if (r instanceof Vt) {
      if (r.$anchorCell.pos != r.$headCell.pos)
        return !1;
      s = r.$anchorCell.nodeAfter, o = r.$anchorCell.pos;
    } else {
      if (s = nk(r.$from), !s)
        return !1;
      o = (i = Ur(r.$from)) == null ? void 0 : i.pos;
    }
    if (s == null || o == null || s.attrs.colspan == 1 && s.attrs.rowspan == 1)
      return !1;
    if (e) {
      let a = s.attrs;
      const l = [], c = a.colwidth;
      a.rowspan > 1 && (a = { ...a, rowspan: 1 }), a.colspan > 1 && (a = { ...a, colspan: 1 });
      const u = un(t), d = t.tr;
      for (let h = 0; h < u.right - u.left; h++)
        l.push(
          c ? {
            ...a,
            colwidth: c && c[h] ? [c[h]] : null
          } : a
        );
      let f;
      for (let h = u.top; h < u.bottom; h++) {
        let p = u.map.positionAt(h, u.left, u.table);
        h == u.top && (p += s.nodeSize);
        for (let _ = u.left, g = 0; _ < u.right; _++, g++)
          _ == u.left && h == u.top || d.insert(
            f = d.mapping.map(p + u.tableStart, 1),
            n({ node: s, row: h, col: _ }).createAndFill(l[g])
          );
      }
      d.setNodeMarkup(
        o,
        n({ node: s, row: u.top, col: u.left }),
        l[0]
      ), r instanceof Vt && d.setSelection(
        new Vt(
          d.doc.resolve(r.$anchorCell.pos),
          f ? d.doc.resolve(f) : void 0
        )
      ), e(d);
    }
    return !0;
  };
}
function Sk(n, t) {
  return function(e, i) {
    if (!vn(e))
      return !1;
    const r = al(e);
    if (r.nodeAfter.attrs[n] === t)
      return !1;
    if (i) {
      const s = e.tr;
      e.selection instanceof Vt ? e.selection.forEachCell((o, a) => {
        o.attrs[n] !== t && s.setNodeMarkup(a, null, {
          ...o.attrs,
          [n]: t
        });
      }) : s.setNodeMarkup(r.pos, null, {
        ...r.nodeAfter.attrs,
        [n]: t
      }), i(s);
    }
    return !0;
  };
}
function Ck(n) {
  return function(t, e) {
    if (!vn(t))
      return !1;
    if (e) {
      const i = Se(t.schema), r = un(t), s = t.tr, o = r.map.cellsInRect(
        n == "column" ? {
          left: r.left,
          top: 0,
          right: r.right,
          bottom: r.map.height
        } : n == "row" ? {
          left: 0,
          top: r.top,
          right: r.map.width,
          bottom: r.bottom
        } : r
      ), a = o.map((l) => r.table.nodeAt(l));
      for (let l = 0; l < o.length; l++)
        a[l].type == i.header_cell && s.setNodeMarkup(
          r.tableStart + o[l],
          i.cell,
          a[l].attrs
        );
      if (s.steps.length == 0)
        for (let l = 0; l < o.length; l++)
          s.setNodeMarkup(
            r.tableStart + o[l],
            i.header_cell,
            a[l].attrs
          );
      e(s);
    }
    return !0;
  };
}
function Xf(n, t, e) {
  const i = t.map.cellsInRect({
    left: 0,
    top: 0,
    right: n == "row" ? t.map.width : 1,
    bottom: n == "column" ? t.map.height : 1
  });
  for (let r = 0; r < i.length; r++) {
    const s = t.table.nodeAt(i[r]);
    if (s && s.type !== e.header_cell)
      return !1;
  }
  return !0;
}
function Hs(n, t) {
  return t = t || { useDeprecatedLogic: !1 }, t.useDeprecatedLogic ? Ck(n) : function(e, i) {
    if (!vn(e))
      return !1;
    if (i) {
      const r = Se(e.schema), s = un(e), o = e.tr, a = Xf("row", s, r), l = Xf(
        "column",
        s,
        r
      ), u = (n === "column" ? a : n === "row" ? l : !1) ? 1 : 0, d = n == "column" ? {
        left: 0,
        top: u,
        right: 1,
        bottom: s.map.height
      } : n == "row" ? {
        left: u,
        top: 0,
        right: s.map.width,
        bottom: 1
      } : s, f = n == "column" ? l ? r.cell : r.header_cell : n == "row" ? a ? r.cell : r.header_cell : r.cell;
      s.map.cellsInRect(d).forEach((h) => {
        const p = h + s.tableStart, _ = o.doc.nodeAt(p);
        _ && o.setNodeMarkup(p, f, _.attrs);
      }), i(o);
    }
    return !0;
  };
}
Hs("row", {
  useDeprecatedLogic: !0
});
Hs("column", {
  useDeprecatedLogic: !0
});
var Tk = Hs("cell", {
  useDeprecatedLogic: !0
});
function Ek(n, t) {
  if (t < 0) {
    const e = n.nodeBefore;
    if (e)
      return n.pos - e.nodeSize;
    for (let i = n.index(-1) - 1, r = n.before(); i >= 0; i--) {
      const s = n.node(-1).child(i), o = s.lastChild;
      if (o)
        return r - 1 - o.nodeSize;
      r -= s.nodeSize;
    }
  } else {
    if (n.index() < n.parent.childCount - 1)
      return n.pos + n.nodeAfter.nodeSize;
    const e = n.node(-1);
    for (let i = n.indexAfter(-1), r = n.after(); i < e.childCount; i++) {
      const s = e.child(i);
      if (s.childCount)
        return r + 1;
      r += s.nodeSize;
    }
  }
  return null;
}
function Yf(n) {
  return function(t, e) {
    if (!vn(t))
      return !1;
    const i = Ek(al(t), n);
    if (i == null)
      return !1;
    if (e) {
      const r = t.doc.resolve(i);
      e(
        t.tr.setSelection(ct.between(r, rk(r))).scrollIntoView()
      );
    }
    return !0;
  };
}
function Ok(n, t) {
  const e = n.selection.$anchor;
  for (let i = e.depth; i > 0; i--)
    if (e.node(i).type.spec.tableRole == "table")
      return t && t(
        n.tr.delete(e.before(i), e.after(i)).scrollIntoView()
      ), !0;
  return !1;
}
function xo(n, t) {
  const e = n.selection;
  if (!(e instanceof Vt))
    return !1;
  if (t) {
    const i = n.tr, r = Se(n.schema).cell.createAndFill().content;
    e.forEachCell((s, o) => {
      s.content.eq(r) || i.replace(
        i.mapping.map(o + 1),
        i.mapping.map(o + s.nodeSize - 1),
        new Y(r, 0, 0)
      );
    }), i.docChanged && t(i);
  }
  return !0;
}
function Mk(n) {
  if (!n.size)
    return null;
  let { content: t, openStart: e, openEnd: i } = n;
  for (; t.childCount == 1 && (e > 0 && i > 0 || t.child(0).type.spec.tableRole == "table"); )
    e--, i--, t = t.child(0).content;
  const r = t.child(0), s = r.type.spec.tableRole, o = r.type.schema, a = [];
  if (s == "row")
    for (let l = 0; l < t.childCount; l++) {
      let c = t.child(l).content;
      const u = l ? 0 : Math.max(0, e - 1), d = l < t.childCount - 1 ? 0 : Math.max(0, i - 1);
      (u || d) && (c = Fc(
        Se(o).row,
        new Y(c, u, d)
      ).content), a.push(c);
    }
  else if (s == "cell" || s == "header_cell")
    a.push(
      e || i ? Fc(
        Se(o).row,
        new Y(t, e, i)
      ).content : t
    );
  else
    return null;
  return Ak(o, a);
}
function Ak(n, t) {
  const e = [];
  for (let r = 0; r < t.length; r++) {
    const s = t[r];
    for (let o = s.childCount - 1; o >= 0; o--) {
      const { rowspan: a, colspan: l } = s.child(o).attrs;
      for (let c = r; c < r + a; c++)
        e[c] = (e[c] || 0) + l;
    }
  }
  let i = 0;
  for (let r = 0; r < e.length; r++)
    i = Math.max(i, e[r]);
  for (let r = 0; r < e.length; r++)
    if (r >= t.length && t.push(B.empty), e[r] < i) {
      const s = Se(n).cell.createAndFill(), o = [];
      for (let a = e[r]; a < i; a++)
        o.push(s);
      t[r] = t[r].append(B.from(o));
    }
  return { height: t.length, width: i, rows: t };
}
function Fc(n, t) {
  const e = n.createAndFill();
  return new mu(e).replace(0, e.content.size, t).doc;
}
function Nk({ width: n, height: t, rows: e }, i, r) {
  if (n != i) {
    const s = [], o = [];
    for (let a = 0; a < e.length; a++) {
      const l = e[a], c = [];
      for (let u = s[a] || 0, d = 0; u < i; d++) {
        let f = l.child(d % l.childCount);
        u + f.attrs.colspan > i && (f = f.type.createChecked(
          qi(
            f.attrs,
            f.attrs.colspan,
            u + f.attrs.colspan - i
          ),
          f.content
        )), c.push(f), u += f.attrs.colspan;
        for (let h = 1; h < f.attrs.rowspan; h++)
          s[a + h] = (s[a + h] || 0) + f.attrs.colspan;
      }
      o.push(B.from(c));
    }
    e = o, n = i;
  }
  if (t != r) {
    const s = [];
    for (let o = 0, a = 0; o < r; o++, a++) {
      const l = [], c = e[a % t];
      for (let u = 0; u < c.childCount; u++) {
        let d = c.child(u);
        o + d.attrs.rowspan > r && (d = d.type.create(
          {
            ...d.attrs,
            rowspan: Math.max(1, r - d.attrs.rowspan)
          },
          d.content
        )), l.push(d);
      }
      s.push(B.from(l));
    }
    e = s, t = r;
  }
  return { width: n, height: t, rows: e };
}
function Lk(n, t, e, i, r, s, o) {
  const a = n.doc.type.schema, l = Se(a);
  let c, u;
  if (r > t.width)
    for (let d = 0, f = 0; d < t.height; d++) {
      const h = e.child(d);
      f += h.nodeSize;
      const p = [];
      let _;
      h.lastChild == null || h.lastChild.type == l.cell ? _ = c || (c = l.cell.createAndFill()) : _ = u || (u = l.header_cell.createAndFill());
      for (let g = t.width; g < r; g++)
        p.push(_);
      n.insert(n.mapping.slice(o).map(f - 1 + i), p);
    }
  if (s > t.height) {
    const d = [];
    for (let p = 0, _ = (t.height - 1) * t.width; p < Math.max(t.width, r); p++) {
      const g = p >= t.width ? !1 : e.nodeAt(t.map[_ + p]).type == l.header_cell;
      d.push(
        g ? u || (u = l.header_cell.createAndFill()) : c || (c = l.cell.createAndFill())
      );
    }
    const f = l.row.create(null, B.from(d)), h = [];
    for (let p = t.height; p < s; p++)
      h.push(f);
    n.insert(n.mapping.slice(o).map(i + e.nodeSize - 2), h);
  }
  return !!(c || u);
}
function Zf(n, t, e, i, r, s, o, a) {
  if (o == 0 || o == t.height)
    return !1;
  let l = !1;
  for (let c = r; c < s; c++) {
    const u = o * t.width + c, d = t.map[u];
    if (t.map[u - t.width] == d) {
      l = !0;
      const f = e.nodeAt(d), { top: h, left: p } = t.findCell(d);
      n.setNodeMarkup(n.mapping.slice(a).map(d + i), null, {
        ...f.attrs,
        rowspan: o - h
      }), n.insert(
        n.mapping.slice(a).map(t.positionAt(o, p, e)),
        f.type.createAndFill({
          ...f.attrs,
          rowspan: h + f.attrs.rowspan - o
        })
      ), c += f.attrs.colspan - 1;
    }
  }
  return l;
}
function Qf(n, t, e, i, r, s, o, a) {
  if (o == 0 || o == t.width)
    return !1;
  let l = !1;
  for (let c = r; c < s; c++) {
    const u = c * t.width + o, d = t.map[u];
    if (t.map[u - 1] == d) {
      l = !0;
      const f = e.nodeAt(d), h = t.colCount(d), p = n.mapping.slice(a).map(d + i);
      n.setNodeMarkup(
        p,
        null,
        qi(
          f.attrs,
          o - h,
          f.attrs.colspan - (o - h)
        )
      ), n.insert(
        p + f.nodeSize,
        f.type.createAndFill(
          qi(f.attrs, 0, o - h)
        )
      ), c += f.attrs.rowspan - 1;
    }
  }
  return l;
}
function th(n, t, e, i, r) {
  let s = e ? n.doc.nodeAt(e - 1) : n.doc;
  if (!s)
    throw new Error("No table found");
  let o = Jt.get(s);
  const { top: a, left: l } = i, c = l + r.width, u = a + r.height, d = n.tr;
  let f = 0;
  function h() {
    if (s = e ? d.doc.nodeAt(e - 1) : d.doc, !s)
      throw new Error("No table found");
    o = Jt.get(s), f = d.mapping.maps.length;
  }
  Lk(d, o, s, e, c, u, f) && h(), Zf(d, o, s, e, l, c, a, f) && h(), Zf(d, o, s, e, l, c, u, f) && h(), Qf(d, o, s, e, a, u, l, f) && h(), Qf(d, o, s, e, a, u, c, f) && h();
  for (let p = a; p < u; p++) {
    const _ = o.positionAt(p, l, s), g = o.positionAt(p, c, s);
    d.replace(
      d.mapping.slice(f).map(_ + e),
      d.mapping.slice(f).map(g + e),
      new Y(r.rows[p - a], 0, 0)
    );
  }
  h(), d.setSelection(
    new Vt(
      d.doc.resolve(e + o.positionAt(a, l, s)),
      d.doc.resolve(e + o.positionAt(u - 1, c - 1, s))
    )
  ), t(d);
}
var Rk = Cu({
  ArrowLeft: wo("horiz", -1),
  ArrowRight: wo("horiz", 1),
  ArrowUp: wo("vert", -1),
  ArrowDown: wo("vert", 1),
  "Shift-ArrowLeft": ko("horiz", -1),
  "Shift-ArrowRight": ko("horiz", 1),
  "Shift-ArrowUp": ko("vert", -1),
  "Shift-ArrowDown": ko("vert", 1),
  Backspace: xo,
  "Mod-Backspace": xo,
  Delete: xo,
  "Mod-Delete": xo
});
function jo(n, t, e) {
  return e.eq(n.selection) ? !1 : (t && t(n.tr.setSelection(e).scrollIntoView()), !0);
}
function wo(n, t) {
  return (e, i, r) => {
    if (!r)
      return !1;
    const s = e.selection;
    if (s instanceof Vt)
      return jo(
        e,
        i,
        ft.near(s.$headCell, t)
      );
    if (n != "horiz" && !s.empty)
      return !1;
    const o = Dg(r, n, t);
    if (o == null)
      return !1;
    if (n == "horiz")
      return jo(
        e,
        i,
        ft.near(e.doc.resolve(s.head + t), t)
      );
    {
      const a = e.doc.resolve(o), l = Mg(a, n, t);
      let c;
      return l ? c = ft.near(l, 1) : t < 0 ? c = ft.near(e.doc.resolve(a.before(-1)), -1) : c = ft.near(e.doc.resolve(a.after(-1)), 1), jo(e, i, c);
    }
  };
}
function ko(n, t) {
  return (e, i, r) => {
    if (!r)
      return !1;
    const s = e.selection;
    let o;
    if (s instanceof Vt)
      o = s;
    else {
      const l = Dg(r, n, t);
      if (l == null)
        return !1;
      o = new Vt(e.doc.resolve(l));
    }
    const a = Mg(o.$headCell, n, t);
    return a ? jo(
      e,
      i,
      new Vt(o.$anchorCell, a)
    ) : !1;
  };
}
function Ik(n, t) {
  const e = n.state.doc, i = Ur(e.resolve(t));
  return i ? (n.dispatch(n.state.tr.setSelection(new Vt(i))), !0) : !1;
}
function Pk(n, t, e) {
  if (!vn(n.state))
    return !1;
  let i = Mk(e);
  const r = n.state.selection;
  if (r instanceof Vt) {
    i || (i = {
      width: 1,
      height: 1,
      rows: [
        B.from(
          Fc(Se(n.state.schema).cell, e)
        )
      ]
    });
    const s = r.$anchorCell.node(-1), o = r.$anchorCell.start(-1), a = Jt.get(s).rectBetween(
      r.$anchorCell.pos - o,
      r.$headCell.pos - o
    );
    return i = Nk(i, a.right - a.left, a.bottom - a.top), th(n.state, n.dispatch, o, a, i), !0;
  } else if (i) {
    const s = al(n.state), o = s.start(-1);
    return th(
      n.state,
      n.dispatch,
      o,
      Jt.get(s.node(-1)).findCell(s.pos - o),
      i
    ), !0;
  } else
    return !1;
}
function Dk(n, t) {
  var e;
  if (t.ctrlKey || t.metaKey)
    return;
  const i = eh(n, t.target);
  let r;
  if (t.shiftKey && n.state.selection instanceof Vt)
    s(n.state.selection.$anchorCell, t), t.preventDefault();
  else if (t.shiftKey && i && (r = Ur(n.state.selection.$anchor)) != null && ((e = Ll(n, t)) == null ? void 0 : e.pos) != r.pos)
    s(r, t), t.preventDefault();
  else if (!i)
    return;
  function s(l, c) {
    let u = Ll(n, c);
    const d = ai.getState(n.state) == null;
    if (!u || !Hu(l, u))
      if (d)
        u = l;
      else
        return;
    const f = new Vt(l, u);
    if (d || !n.state.selection.eq(f)) {
      const h = n.state.tr.setSelection(f);
      d && h.setMeta(ai, l.pos), n.dispatch(h);
    }
  }
  function o() {
    n.root.removeEventListener("mouseup", o), n.root.removeEventListener("dragstart", o), n.root.removeEventListener("mousemove", a), ai.getState(n.state) != null && n.dispatch(n.state.tr.setMeta(ai, -1));
  }
  function a(l) {
    const c = l, u = ai.getState(n.state);
    let d;
    if (u != null)
      d = n.state.doc.resolve(u);
    else if (eh(n, c.target) != i && (d = Ll(n, t), !d))
      return o();
    d && s(d, c);
  }
  n.root.addEventListener("mouseup", o), n.root.addEventListener("dragstart", o), n.root.addEventListener("mousemove", a);
}
function Dg(n, t, e) {
  if (!(n.state.selection instanceof ct))
    return null;
  const { $head: i } = n.state.selection;
  for (let r = i.depth - 1; r >= 0; r--) {
    const s = i.node(r);
    if ((e < 0 ? i.index(r) : i.indexAfter(r)) != (e < 0 ? 0 : s.childCount))
      return null;
    if (s.type.spec.tableRole == "cell" || s.type.spec.tableRole == "header_cell") {
      const a = i.before(r), l = t == "vert" ? e > 0 ? "down" : "up" : e > 0 ? "right" : "left";
      return n.endOfTextblock(l) ? a : null;
    }
  }
  return null;
}
function eh(n, t) {
  for (; t && t != n.dom; t = t.parentNode)
    if (t.nodeName == "TD" || t.nodeName == "TH")
      return t;
  return null;
}
function Ll(n, t) {
  const e = n.posAtCoords({
    left: t.clientX,
    top: t.clientY
  });
  return e && e ? Ur(n.state.doc.resolve(e.pos)) : null;
}
var $k = class {
  constructor(t, e) {
    this.node = t, this.defaultCellMinWidth = e, this.dom = document.createElement("div"), this.dom.className = "tableWrapper", this.table = this.dom.appendChild(document.createElement("table")), this.table.style.setProperty(
      "--default-cell-min-width",
      `${e}px`
    ), this.colgroup = this.table.appendChild(document.createElement("colgroup")), Vc(t, this.colgroup, this.table, e), this.contentDOM = this.table.appendChild(document.createElement("tbody"));
  }
  update(t) {
    return t.type != this.node.type ? !1 : (this.node = t, Vc(
      t,
      this.colgroup,
      this.table,
      this.defaultCellMinWidth
    ), !0);
  }
  ignoreMutation(t) {
    return t.type == "attributes" && (t.target == this.table || this.colgroup.contains(t.target));
  }
};
function Vc(n, t, e, i, r, s) {
  var o;
  let a = 0, l = !0, c = t.firstChild;
  const u = n.firstChild;
  if (u) {
    for (let d = 0, f = 0; d < u.childCount; d++) {
      const { colspan: h, colwidth: p } = u.child(d).attrs;
      for (let _ = 0; _ < h; _++, f++) {
        const g = r == f ? s : p && p[_], m = g ? g + "px" : "";
        if (a += g || i, g || (l = !1), c)
          c.style.width != m && (c.style.width = m), c = c.nextSibling;
        else {
          const y = document.createElement("col");
          y.style.width = m, t.appendChild(y);
        }
      }
    }
    for (; c; ) {
      const d = c.nextSibling;
      (o = c.parentNode) == null || o.removeChild(c), c = d;
    }
    l ? (e.style.width = a + "px", e.style.minWidth = "") : (e.style.width = "", e.style.minWidth = a + "px");
  }
}
var Je = new $e(
  "tableColumnResizing"
);
function Bk({
  handleWidth: n = 5,
  cellMinWidth: t = 25,
  defaultCellMinWidth: e = 100,
  View: i = $k,
  lastColumnResizable: r = !0
} = {}) {
  const s = new pe({
    key: Je,
    state: {
      init(o, a) {
        var l, c;
        const u = (c = (l = s.spec) == null ? void 0 : l.props) == null ? void 0 : c.nodeViews, d = Se(a.schema).table.name;
        return i && u && (u[d] = (f, h) => new i(f, e, h)), new zk(-1, !1);
      },
      apply(o, a) {
        return a.apply(o);
      }
    },
    props: {
      attributes: (o) => {
        const a = Je.getState(o);
        return a && a.activeHandle > -1 ? { class: "resize-cursor" } : {};
      },
      handleDOMEvents: {
        mousemove: (o, a) => {
          Hk(o, a, n, r);
        },
        mouseleave: (o) => {
          Fk(o);
        },
        mousedown: (o, a) => {
          Vk(o, a, t, e);
        }
      },
      decorations: (o) => {
        const a = Je.getState(o);
        if (a && a.activeHandle > -1)
          return qk(o, a.activeHandle);
      },
      nodeViews: {}
    }
  });
  return s;
}
var zk = class Wo {
  constructor(t, e) {
    this.activeHandle = t, this.dragging = e;
  }
  apply(t) {
    const e = this, i = t.getMeta(Je);
    if (i && i.setHandle != null)
      return new Wo(i.setHandle, !1);
    if (i && i.setDragging !== void 0)
      return new Wo(e.activeHandle, i.setDragging);
    if (e.activeHandle > -1 && t.docChanged) {
      let r = t.mapping.map(e.activeHandle, -1);
      return Hc(t.doc.resolve(r)) || (r = -1), new Wo(r, e.dragging);
    }
    return e;
  }
};
function Hk(n, t, e, i) {
  if (!n.editable)
    return;
  const r = Je.getState(n.state);
  if (r && !r.dragging) {
    const s = Wk(t.target);
    let o = -1;
    if (s) {
      const { left: a, right: l } = s.getBoundingClientRect();
      t.clientX - a <= e ? o = nh(n, t, "left", e) : l - t.clientX <= e && (o = nh(n, t, "right", e));
    }
    if (o != r.activeHandle) {
      if (!i && o !== -1) {
        const a = n.state.doc.resolve(o), l = a.node(-1), c = Jt.get(l), u = a.start(-1);
        if (c.colCount(a.pos - u) + a.nodeAfter.attrs.colspan - 1 == c.width - 1)
          return;
      }
      $g(n, o);
    }
  }
}
function Fk(n) {
  if (!n.editable)
    return;
  const t = Je.getState(n.state);
  t && t.activeHandle > -1 && !t.dragging && $g(n, -1);
}
function Vk(n, t, e, i) {
  var r;
  if (!n.editable)
    return !1;
  const s = (r = n.dom.ownerDocument.defaultView) != null ? r : window, o = Je.getState(n.state);
  if (!o || o.activeHandle == -1 || o.dragging)
    return !1;
  const a = n.state.doc.nodeAt(o.activeHandle), l = jk(n, o.activeHandle, a.attrs);
  n.dispatch(
    n.state.tr.setMeta(Je, {
      setDragging: { startX: t.clientX, startWidth: l }
    })
  );
  function c(d) {
    s.removeEventListener("mouseup", c), s.removeEventListener("mousemove", u);
    const f = Je.getState(n.state);
    f != null && f.dragging && (Uk(
      n,
      f.activeHandle,
      ih(f.dragging, d, e)
    ), n.dispatch(
      n.state.tr.setMeta(Je, { setDragging: null })
    ));
  }
  function u(d) {
    if (!d.which)
      return c(d);
    const f = Je.getState(n.state);
    if (f && f.dragging) {
      const h = ih(f.dragging, d, e);
      rh(
        n,
        f.activeHandle,
        h,
        i
      );
    }
  }
  return rh(
    n,
    o.activeHandle,
    l,
    i
  ), s.addEventListener("mouseup", c), s.addEventListener("mousemove", u), t.preventDefault(), !0;
}
function jk(n, t, { colspan: e, colwidth: i }) {
  const r = i && i[i.length - 1];
  if (r)
    return r;
  const s = n.domAtPos(t);
  let a = s.node.childNodes[s.offset].offsetWidth, l = e;
  if (i)
    for (let c = 0; c < e; c++)
      i[c] && (a -= i[c], l--);
  return a / l;
}
function Wk(n) {
  for (; n && n.nodeName != "TD" && n.nodeName != "TH"; )
    n = n.classList && n.classList.contains("ProseMirror") ? null : n.parentNode;
  return n;
}
function nh(n, t, e, i) {
  const r = e == "right" ? -i : i, s = n.posAtCoords({
    left: t.clientX + r,
    top: t.clientY
  });
  if (!s)
    return -1;
  const { pos: o } = s, a = Ur(n.state.doc.resolve(o));
  if (!a)
    return -1;
  if (e == "right")
    return a.pos;
  const l = Jt.get(a.node(-1)), c = a.start(-1), u = l.map.indexOf(a.pos - c);
  return u % l.width == 0 ? -1 : c + l.map[u - 1];
}
function ih(n, t, e) {
  const i = t.clientX - n.startX;
  return Math.max(e, n.startWidth + i);
}
function $g(n, t) {
  n.dispatch(
    n.state.tr.setMeta(Je, { setHandle: t })
  );
}
function Uk(n, t, e) {
  const i = n.state.doc.resolve(t), r = i.node(-1), s = Jt.get(r), o = i.start(-1), a = s.colCount(i.pos - o) + i.nodeAfter.attrs.colspan - 1, l = n.state.tr;
  for (let c = 0; c < s.height; c++) {
    const u = c * s.width + a;
    if (c && s.map[u] == s.map[u - s.width])
      continue;
    const d = s.map[u], f = r.nodeAt(d).attrs, h = f.colspan == 1 ? 0 : a - s.colCount(d);
    if (f.colwidth && f.colwidth[h] == e)
      continue;
    const p = f.colwidth ? f.colwidth.slice() : Kk(f.colspan);
    p[h] = e, l.setNodeMarkup(o + d, null, { ...f, colwidth: p });
  }
  l.docChanged && n.dispatch(l);
}
function rh(n, t, e, i) {
  const r = n.state.doc.resolve(t), s = r.node(-1), o = r.start(-1), a = Jt.get(s).colCount(r.pos - o) + r.nodeAfter.attrs.colspan - 1;
  let l = n.domAtPos(r.start(-1)).node;
  for (; l && l.nodeName != "TABLE"; )
    l = l.parentNode;
  l && Vc(
    s,
    l.firstChild,
    l,
    i,
    a,
    e
  );
}
function Kk(n) {
  return Array(n).fill(0);
}
function qk(n, t) {
  var e;
  const i = [], r = n.doc.resolve(t), s = r.node(-1);
  if (!s)
    return qt.empty;
  const o = Jt.get(s), a = r.start(-1), l = o.colCount(r.pos - a) + r.nodeAfter.attrs.colspan - 1;
  for (let c = 0; c < o.height; c++) {
    const u = l + c * o.width;
    if ((l == o.width - 1 || o.map[u] != o.map[u + 1]) && (c == 0 || o.map[u] != o.map[u - o.width])) {
      const d = o.map[u], f = a + d + s.nodeAt(d).nodeSize - 1, h = document.createElement("div");
      h.className = "column-resize-handle", (e = Je.getState(n)) != null && e.dragging && i.push(
        Ne.node(
          a + d,
          a + d + s.nodeAt(d).nodeSize,
          {
            class: "column-resize-dragging"
          }
        )
      ), i.push(Ne.widget(f, h));
    }
  }
  return qt.create(n.doc, i);
}
function Gk({
  allowTableNodeSelection: n = !1
} = {}) {
  return new pe({
    key: ai,
    // This piece of state is used to remember when a mouse-drag
    // cell-selection is happening, so that it can continue even as
    // transactions (which might move its anchor cell) come in.
    state: {
      init() {
        return null;
      },
      apply(t, e) {
        const i = t.getMeta(ai);
        if (i != null)
          return i == -1 ? null : i;
        if (e == null || !t.docChanged)
          return e;
        const { deleted: r, pos: s } = t.mapping.mapResult(e);
        return r ? null : s;
      }
    },
    props: {
      decorations: ak,
      handleDOMEvents: {
        mousedown: Dk
      },
      createSelectionBetween(t) {
        return ai.getState(t.state) != null ? t.state.selection : null;
      },
      handleTripleClick: Ik,
      handleKeyDown: Rk,
      handlePaste: Pk
    },
    appendTransaction(t, e, i) {
      return uk(
        i,
        Rg(i, e),
        n
      );
    }
  });
}
function jc(n, t) {
  return t ? ["width", `${Math.max(t, n)}px`] : ["min-width", `${n}px`];
}
function sh(n, t, e, i, r, s) {
  var o;
  let a = 0, l = !0, c = t.firstChild;
  const u = n.firstChild;
  if (u !== null)
    for (let d = 0, f = 0; d < u.childCount; d += 1) {
      const { colspan: h, colwidth: p } = u.child(d).attrs;
      for (let _ = 0; _ < h; _ += 1, f += 1) {
        const g = r === f ? s : p && p[_], m = g ? `${g}px` : "";
        if (a += g || i, g || (l = !1), c) {
          if (c.style.width !== m) {
            const [y, x] = jc(i, g);
            c.style.setProperty(y, x);
          }
          c = c.nextSibling;
        } else {
          const y = document.createElement("col"), [x, k] = jc(i, g);
          y.style.setProperty(x, k), t.appendChild(y);
        }
      }
    }
  for (; c; ) {
    const d = c.nextSibling;
    (o = c.parentNode) === null || o === void 0 || o.removeChild(c), c = d;
  }
  l ? (e.style.width = `${a}px`, e.style.minWidth = "") : (e.style.width = "", e.style.minWidth = `${a}px`);
}
class Jk {
  constructor(t, e) {
    this.node = t, this.cellMinWidth = e, this.dom = document.createElement("div"), this.dom.className = "tableWrapper", this.table = this.dom.appendChild(document.createElement("table")), this.colgroup = this.table.appendChild(document.createElement("colgroup")), sh(t, this.colgroup, this.table, e), this.contentDOM = this.table.appendChild(document.createElement("tbody"));
  }
  update(t) {
    return t.type !== this.node.type ? !1 : (this.node = t, sh(t, this.colgroup, this.table, this.cellMinWidth), !0);
  }
  ignoreMutation(t) {
    return t.type === "attributes" && (t.target === this.table || this.colgroup.contains(t.target));
  }
}
function Xk(n, t, e, i) {
  let r = 0, s = !0;
  const o = [], a = n.firstChild;
  if (!a)
    return {};
  for (let d = 0, f = 0; d < a.childCount; d += 1) {
    const { colspan: h, colwidth: p } = a.child(d).attrs;
    for (let _ = 0; _ < h; _ += 1, f += 1) {
      const g = e === f ? i : p && p[_];
      r += g || t, g || (s = !1);
      const [m, y] = jc(t, g);
      o.push([
        "col",
        { style: `${m}: ${y}` }
      ]);
    }
  }
  const l = s ? `${r}px` : "", c = s ? "" : `${r}px`;
  return { colgroup: ["colgroup", {}, ...o], tableWidth: l, tableMinWidth: c };
}
function oh(n, t) {
  return n.createAndFill();
}
function Yk(n) {
  if (n.cached.tableNodeTypes)
    return n.cached.tableNodeTypes;
  const t = {};
  return Object.keys(n.nodes).forEach((e) => {
    const i = n.nodes[e];
    i.spec.tableRole && (t[i.spec.tableRole] = i);
  }), n.cached.tableNodeTypes = t, t;
}
function Zk(n, t, e, i, r) {
  const s = Yk(n), o = [], a = [];
  for (let c = 0; c < e; c += 1) {
    const u = oh(s.cell);
    if (u && a.push(u), i) {
      const d = oh(s.header_cell);
      d && o.push(d);
    }
  }
  const l = [];
  for (let c = 0; c < t; c += 1)
    l.push(s.row.createChecked(null, i && c === 0 ? o : a));
  return s.table.createChecked(null, l);
}
function Qk(n) {
  return n instanceof Vt;
}
const So = ({ editor: n }) => {
  const { selection: t } = n.state;
  if (!Qk(t))
    return !1;
  let e = 0;
  const i = Pu(t.ranges[0].$from, (s) => s.type.name === "table");
  return i == null || i.node.descendants((s) => {
    if (s.type.name === "table")
      return !1;
    ["tableCell", "tableHeader"].includes(s.type.name) && (e += 1);
  }), e === t.ranges.length ? (n.commands.deleteTable(), !0) : !1;
}, tS = Bt.create({
  name: "table",
  // @ts-ignore
  addOptions() {
    return {
      HTMLAttributes: {},
      resizable: !1,
      handleWidth: 5,
      cellMinWidth: 25,
      // TODO: fix
      View: Jk,
      lastColumnResizable: !0,
      allowTableNodeSelection: !1
    };
  },
  content: "tableRow+",
  tableRole: "table",
  isolating: !0,
  group: "block",
  parseHTML() {
    return [{ tag: "table" }];
  },
  renderHTML({ node: n, HTMLAttributes: t }) {
    const { colgroup: e, tableWidth: i, tableMinWidth: r } = Xk(n, this.options.cellMinWidth);
    return [
      "table",
      Mt(this.options.HTMLAttributes, t, {
        style: i ? `width: ${i}` : `min-width: ${r}`
      }),
      e,
      ["tbody", 0]
    ];
  },
  addCommands() {
    return {
      insertTable: ({ rows: n = 3, cols: t = 3, withHeaderRow: e = !0 } = {}) => ({ tr: i, dispatch: r, editor: s }) => {
        const o = Zk(s.schema, n, t, e);
        if (r) {
          const a = i.selection.from + 1;
          i.replaceSelectionWith(o).scrollIntoView().setSelection(ct.near(i.doc.resolve(a)));
        }
        return !0;
      },
      addColumnBefore: () => ({ state: n, dispatch: t }) => hk(n, t),
      addColumnAfter: () => ({ state: n, dispatch: t }) => pk(n, t),
      deleteColumn: () => ({ state: n, dispatch: t }) => gk(n, t),
      addRowBefore: () => ({ state: n, dispatch: t }) => bk(n, t),
      addRowAfter: () => ({ state: n, dispatch: t }) => yk(n, t),
      deleteRow: () => ({ state: n, dispatch: t }) => xk(n, t),
      deleteTable: () => ({ state: n, dispatch: t }) => Ok(n, t),
      mergeCells: () => ({ state: n, dispatch: t }) => Gf(n, t),
      splitCell: () => ({ state: n, dispatch: t }) => Jf(n, t),
      toggleHeaderColumn: () => ({ state: n, dispatch: t }) => Hs("column")(n, t),
      toggleHeaderRow: () => ({ state: n, dispatch: t }) => Hs("row")(n, t),
      toggleHeaderCell: () => ({ state: n, dispatch: t }) => Tk(n, t),
      mergeOrSplit: () => ({ state: n, dispatch: t }) => Gf(n, t) ? !0 : Jf(n, t),
      setCellAttribute: (n, t) => ({ state: e, dispatch: i }) => Sk(n, t)(e, i),
      goToNextCell: () => ({ state: n, dispatch: t }) => Yf(1)(n, t),
      goToPreviousCell: () => ({ state: n, dispatch: t }) => Yf(-1)(n, t),
      fixTables: () => ({ state: n, dispatch: t }) => (t && Rg(n), !0),
      setCellSelection: (n) => ({ tr: t, dispatch: e }) => {
        if (e) {
          const i = Vt.create(t.doc, n.anchorCell, n.headCell);
          t.setSelection(i);
        }
        return !0;
      }
    };
  },
  addKeyboardShortcuts() {
    return {
      Tab: () => this.editor.commands.goToNextCell() ? !0 : this.editor.can().addRowAfter() ? this.editor.chain().addRowAfter().goToNextCell().run() : !1,
      "Shift-Tab": () => this.editor.commands.goToPreviousCell(),
      Backspace: So,
      "Mod-Backspace": So,
      Delete: So,
      "Mod-Delete": So
    };
  },
  addProseMirrorPlugins() {
    return [
      ...this.options.resizable && this.editor.isEditable ? [
        Bk({
          handleWidth: this.options.handleWidth,
          cellMinWidth: this.options.cellMinWidth,
          defaultCellMinWidth: this.options.cellMinWidth,
          View: this.options.View,
          lastColumnResizable: this.options.lastColumnResizable
        })
      ] : [],
      Gk({
        allowTableNodeSelection: this.options.allowTableNodeSelection
      })
    ];
  },
  extendNodeSchema(n) {
    const t = {
      name: n.name,
      options: n.options,
      storage: n.storage
    };
    return {
      tableRole: bt(tt(n, "tableRole", t))
    };
  }
}), eS = tS.extend({
  addAttributes() {
    var n;
    return {
      ...(n = this.parent) == null ? void 0 : n.call(this),
      style: {
        default: "width: 100%;"
      }
    };
  },
  addOptions() {
    var t;
    const n = (t = this.parent) == null ? void 0 : t.call(this);
    return n && (n.View = class extends n.View {
      update(e) {
        return super.update(e), this.table.style.cssText = e.attrs.style, !0;
      }
    }), n;
  },
  // FIXME: renderHTML with customized attributes
  renderHTML({ HTMLAttributes: n }) {
    return ["table", n, 0];
  }
}), nS = Bt.create({
  name: "tableCell",
  addOptions() {
    return {
      HTMLAttributes: {}
    };
  },
  content: "block+",
  addAttributes() {
    return {
      colspan: {
        default: 1
      },
      rowspan: {
        default: 1
      },
      colwidth: {
        default: null,
        parseHTML: (n) => {
          const t = n.getAttribute("colwidth");
          return t ? t.split(",").map((i) => parseInt(i, 10)) : null;
        }
      }
    };
  },
  tableRole: "cell",
  isolating: !0,
  parseHTML() {
    return [
      { tag: "td" }
    ];
  },
  renderHTML({ HTMLAttributes: n }) {
    return ["td", Mt(this.options.HTMLAttributes, n), 0];
  }
}), iS = nS.extend({
  content: "inline*",
  addAttributes() {
    var n;
    return {
      ...(n = this.parent) == null ? void 0 : n.call(this),
      style: {
        default: ""
      }
    };
  },
  renderHTML({ HTMLAttributes: n }) {
    const { colspan: t, rowspan: e, style: i, ...r } = n;
    return [
      "td",
      Mt(r, {
        colspan: t === 1 ? void 0 : t,
        rowspan: e === 1 ? void 0 : e,
        style: i === "" ? void 0 : i
      }),
      0
    ];
  }
}), rS = Bt.create({
  name: "tableHeader",
  addOptions() {
    return {
      HTMLAttributes: {}
    };
  },
  content: "block+",
  addAttributes() {
    return {
      colspan: {
        default: 1
      },
      rowspan: {
        default: 1
      },
      colwidth: {
        default: null,
        parseHTML: (n) => {
          const t = n.getAttribute("colwidth");
          return t ? t.split(",").map((i) => parseInt(i, 10)) : null;
        }
      }
    };
  },
  tableRole: "header_cell",
  isolating: !0,
  parseHTML() {
    return [
      { tag: "th" }
    ];
  },
  renderHTML({ HTMLAttributes: n }) {
    return ["th", Mt(this.options.HTMLAttributes, n), 0];
  }
}), sS = rS.extend({
  content: "inline*",
  addAttributes() {
    var n;
    return {
      ...(n = this.parent) == null ? void 0 : n.call(this),
      scope: {
        default: ""
      },
      style: {
        default: ""
      }
    };
  },
  renderHTML({ HTMLAttributes: n }) {
    const { colspan: t, rowspan: e, scope: i, style: r, ...s } = n;
    return [
      "th",
      Mt(s, {
        colspan: t === 1 ? void 0 : t,
        rowspan: e === 1 ? void 0 : e,
        scope: i === "" ? void 0 : i,
        style: r === "" ? void 0 : r
      }),
      0
    ];
  }
}), oS = Bt.create({
  name: "tableRow",
  addOptions() {
    return {
      HTMLAttributes: {}
    };
  },
  content: "(tableCell | tableHeader)*",
  tableRole: "row",
  parseHTML() {
    return [
      { tag: "tr" }
    ];
  },
  renderHTML({ HTMLAttributes: n }) {
    return ["tr", Mt(this.options.HTMLAttributes, n), 0];
  }
}), aS = ee.create({
  name: "indent",
  addOptions() {
    return {
      types: ["listItem", "paragraph"]
    };
  },
  addGlobalAttributes() {
    return [
      {
        types: this.options.types,
        attributes: {
          "data-mt-indent": {
            default: null,
            renderHTML: ({ "data-mt-indent": n }) => n && n !== "0" ? {
              style: `padding-left: ${n * 80}px`
            } : {},
            parseHTML: (n) => Number(n.getAttribute("data-mt-indent"))
          }
        }
      }
    ];
  },
  addCommands() {
    const n = (i, r, s) => {
      var a;
      const o = (a = i == null ? void 0 : i.doc) == null ? void 0 : a.nodeAt(r);
      if (o) {
        let { "data-mt-indent": l, ...c } = o.attrs;
        return l = (l || 0) + s, l > 0 && (c = { ...c, "data-mt-indent": l }), i.setNodeMarkup(r, o.type, c, o.marks);
      }
      return i;
    }, t = (i, r) => {
      const { doc: s, selection: o } = i;
      if (s && o && (o instanceof ct || o instanceof Xe)) {
        const { from: a, to: l } = o;
        s.nodesBetween(a, l, (c, u) => this.options.types.includes(c.type.name) ? (i = n(i, u, r), !1) : !0);
      }
      return i;
    }, e = (i) => () => ({ tr: r, state: s, dispatch: o }) => {
      const { selection: a } = s;
      return r = r.setSelection(a), r = t(r, i), r.docChanged ? (o == null || o(r), !0) : !1;
    };
    return {
      indent: e(1),
      outdent: e(-1)
    };
  }
}), lS = Bt.create({
  name: "div",
  priority: 1e3,
  group: "block",
  content: "block+",
  defining: !0,
  parseHTML() {
    return [
      { tag: "div" },
      { tag: "main" },
      { tag: "article" },
      { tag: "section" },
      { tag: "aside" },
      { tag: "nav" },
      { tag: "header" },
      { tag: "footer" },
      { tag: "figure" },
      { tag: "details" },
      { tag: "dialog" }
    ];
  },
  renderHTML({ HTMLAttributes: n, node: t }) {
    return [
      t.attrs["data-tag"] || "div",
      Mt(this.options.HTMLAttributes, n, {
        "data-tag": void 0
      }),
      0
    ];
  },
  addAttributes() {
    return {
      "data-tag": {
        default: "div",
        parseHTML: (n) => n.tagName.toLowerCase()
      }
    };
  }
}), cS = Ve.create({
  name: "span",
  priority: 1e3,
  content: "inline*",
  parseHTML() {
    return [
      {
        tag: "span"
      }
    ];
  },
  renderHTML({ HTMLAttributes: n }) {
    return ["span", n, 0];
  }
}), uS = /(?:^|\s)(\*\*(?!\s+\*\*)((?:[^*]+))\*\*(?!\s+\*\*))$/, dS = /(?:^|\s)(\*\*(?!\s+\*\*)((?:[^*]+))\*\*(?!\s+\*\*))/g, fS = /(?:^|\s)(__(?!\s+__)((?:[^_]+))__(?!\s+__))$/, hS = /(?:^|\s)(__(?!\s+__)((?:[^_]+))__(?!\s+__))/g, pS = Ve.create({
  name: "bold",
  addOptions() {
    return {
      HTMLAttributes: {}
    };
  },
  parseHTML() {
    return [
      {
        tag: "strong"
      },
      {
        tag: "b",
        getAttrs: (n) => n.style.fontWeight !== "normal" && null
      },
      {
        style: "font-weight=400",
        clearMark: (n) => n.type.name === this.name
      },
      {
        style: "font-weight",
        getAttrs: (n) => /^(bold(er)?|[5-9]\d{2,})$/.test(n) && null
      }
    ];
  },
  renderHTML({ HTMLAttributes: n }) {
    return ["strong", Mt(this.options.HTMLAttributes, n), 0];
  },
  addCommands() {
    return {
      setBold: () => ({ commands: n }) => n.setMark(this.name),
      toggleBold: () => ({ commands: n }) => n.toggleMark(this.name),
      unsetBold: () => ({ commands: n }) => n.unsetMark(this.name)
    };
  },
  addKeyboardShortcuts() {
    return {
      "Mod-b": () => this.editor.commands.toggleBold(),
      "Mod-B": () => this.editor.commands.toggleBold()
    };
  },
  addInputRules() {
    return [
      zr({
        find: uS,
        type: this.type
      }),
      zr({
        find: fS,
        type: this.type
      })
    ];
  },
  addPasteRules() {
    return [
      Ki({
        find: dS,
        type: this.type
      }),
      Ki({
        find: hS,
        type: this.type
      })
    ];
  }
}), mS = pS.extend({
  priority: 1e3,
  content: "inline*"
}), gS = Bt.create({
  name: "blockLink",
  priority: 1e3,
  group: "block",
  content: "block+",
  defining: !0,
  addAttributes() {
    return {
      HTMLAttributes: {
        default: {},
        parseHTML: (n) => {
          const t = {};
          return Array.from(n.attributes).forEach((e) => {
            t[e.name] = e.value;
          }), t;
        },
        renderHTML: (n) => n.HTMLAttributes
      },
      "data-mt-rich-text-editor-block": {
        default: null,
        renderHTML: () => null
      }
    };
  },
  parseHTML() {
    return [
      {
        tag: "a[data-mt-rich-text-editor-block]",
        getAttrs: (n) => n instanceof HTMLElement ? {
          href: n.getAttribute("href"),
          "data-mt-rich-text-editor-block": n.getAttribute(
            "data-mt-rich-text-editor-block"
          )
        } : !1
      }
    ];
  },
  renderHTML({ HTMLAttributes: n }) {
    const { href: t } = n;
    return ["a", Mt(this.options.HTMLAttributes, { href: t }), 0];
  },
  addCommands() {
    return {
      setBlockLink: (n = {}) => ({ commands: t }) => t.wrapIn(this.name, n),
      unsetBlockLink: () => ({ commands: n }) => n.lift(this.name)
    };
  }
}), _S = "aaa1rp3bb0ott3vie4c1le2ogado5udhabi7c0ademy5centure6ountant0s9o1tor4d0s1ult4e0g1ro2tna4f0l1rica5g0akhan5ency5i0g1rbus3force5tel5kdn3l0ibaba4pay4lfinanz6state5y2sace3tom5m0azon4ericanexpress7family11x2fam3ica3sterdam8nalytics7droid5quan4z2o0l2partments8p0le4q0uarelle8r0ab1mco4chi3my2pa2t0e3s0da2ia2sociates9t0hleta5torney7u0ction5di0ble3o3spost5thor3o0s4w0s2x0a2z0ure5ba0by2idu3namex4d1k2r0celona5laycard4s5efoot5gains6seball5ketball8uhaus5yern5b0c1t1va3cg1n2d1e0ats2uty4er2ntley5rlin4st0buy5t2f1g1h0arti5i0ble3d1ke2ng0o3o1z2j1lack0friday9ockbuster8g1omberg7ue3m0s1w2n0pparibas9o0ats3ehringer8fa2m1nd2o0k0ing5sch2tik2on4t1utique6x2r0adesco6idgestone9oadway5ker3ther5ussels7s1t1uild0ers6siness6y1zz3v1w1y1z0h3ca0b1fe2l0l1vinklein9m0era3p2non3petown5ital0one8r0avan4ds2e0er0s4s2sa1e1h1ino4t0ering5holic7ba1n1re3c1d1enter4o1rn3f0a1d2g1h0anel2nel4rity4se2t2eap3intai5ristmas6ome4urch5i0priani6rcle4sco3tadel4i0c2y3k1l0aims4eaning6ick2nic1que6othing5ud3ub0med6m1n1o0ach3des3ffee4llege4ogne5m0mbank4unity6pany2re3uter5sec4ndos3struction8ulting7tact3ractors9oking4l1p2rsica5untry4pon0s4rses6pa2r0edit0card4union9icket5own3s1uise0s6u0isinella9v1w1x1y0mru3ou3z2dad1nce3ta1e1ing3sun4y2clk3ds2e0al0er2s3gree4livery5l1oitte5ta3mocrat6ntal2ist5si0gn4v2hl2iamonds6et2gital5rect0ory7scount3ver5h2y2j1k1m1np2o0cs1tor4g1mains5t1wnload7rive4tv2ubai3nlop4pont4rban5vag2r2z2earth3t2c0o2deka3u0cation8e1g1mail3erck5nergy4gineer0ing9terprises10pson4quipment8r0icsson6ni3s0q1tate5t1u0rovision8s2vents5xchange6pert3osed4ress5traspace10fage2il1rwinds6th3mily4n0s2rm0ers5shion4t3edex3edback6rrari3ero6i0delity5o2lm2nal1nce1ial7re0stone6mdale6sh0ing5t0ness6j1k1lickr3ghts4r2orist4wers5y2m1o0o0d1tball6rd1ex2sale4um3undation8x2r0ee1senius7l1ogans4ntier7tr2ujitsu5n0d2rniture7tbol5yi3ga0l0lery3o1up4me0s3p1rden4y2b0iz3d0n2e0a1nt0ing5orge5f1g0ee3h1i0ft0s3ves2ing5l0ass3e1obal2o4m0ail3bh2o1x2n1odaddy5ld0point6f2o0dyear5g0le4p1t1v2p1q1r0ainger5phics5tis4een3ipe3ocery4up4s1t1u0cci3ge2ide2tars5ru3w1y2hair2mburg5ngout5us3bo2dfc0bank7ealth0care8lp1sinki6re1mes5iphop4samitsu7tachi5v2k0t2m1n1ockey4ldings5iday5medepot5goods5s0ense7nda3rse3spital5t0ing5t0els3mail5use3w2r1sbc3t1u0ghes5yatt3undai7ibm2cbc2e1u2d1e0ee3fm2kano4l1m0amat4db2mo0bilien9n0c1dustries8finiti5o2g1k1stitute6urance4e4t0ernational10uit4vestments10o1piranga7q1r0ish4s0maili5t0anbul7t0au2v3jaguar4va3cb2e0ep2tzt3welry6io2ll2m0p2nj2o0bs1urg4t1y2p0morgan6rs3uegos4niper7kaufen5ddi3e0rryhotels6logistics9properties14fh2g1h1i0a1ds2m1ndle4tchen5wi3m1n1oeln3matsu5sher5p0mg2n2r0d1ed3uokgroup8w1y0oto4z2la0caixa5mborghini8er3ncaster6d0rover6xess5salle5t0ino3robe5w0yer5b1c1ds2ease3clerc5frak4gal2o2xus4gbt3i0dl2fe0insurance9style7ghting6ke2lly3mited4o2ncoln4k2psy3ve1ing5k1lc1p2oan0s3cker3us3l1ndon4tte1o3ve3pl0financial11r1s1t0d0a3u0ndbeck6xe1ury5v1y2ma0drid4if1son4keup4n0agement7go3p1rket0ing3s4riott5shalls7ttel5ba2c0kinsey7d1e0d0ia3et2lbourne7me1orial6n0u2rckmsd7g1h1iami3crosoft7l1ni1t2t0subishi9k1l0b1s2m0a2n1o0bi0le4da2e1i1m1nash3ey2ster5rmon3tgage6scow4to0rcycles9v0ie4p1q1r1s0d2t0n1r2u0seum3ic4v1w1x1y1z2na0b1goya4me2vy3ba2c1e0c1t0bank4flix4work5ustar5w0s2xt0direct7us4f0l2g0o2hk2i0co2ke1on3nja3ssan1y5l1o0kia3rton4w0ruz3tv4p1r0a1w2tt2u1yc2z2obi1server7ffice5kinawa6layan0group9lo3m0ega4ne1g1l0ine5oo2pen3racle3nge4g0anic5igins6saka4tsuka4t2vh3pa0ge2nasonic7ris2s1tners4s1y3y2ccw3e0t2f0izer5g1h0armacy6d1ilips5one2to0graphy6s4ysio5ics1tet2ures6d1n0g1k2oneer5zza4k1l0ace2y0station9umbing5s3m1n0c2ohl2ker3litie5rn2st3r0america6xi3ess3ime3o0d0uctions8f1gressive8mo2perties3y5tection8u0dential9s1t1ub2w0c2y2qa1pon3uebec3st5racing4dio4e0ad1lestate6tor2y4cipes5d0stone5umbrella9hab3ise0n3t2liance6n0t0als5pair3ort3ublican8st0aurant8view0s5xroth6ich0ardli6oh3l1o1p2o0cks3deo3gers4om3s0vp3u0gby3hr2n2w0e2yukyu6sa0arland6fe0ty4kura4le1on3msclub4ung5ndvik0coromant12ofi4p1rl2s1ve2xo3b0i1s2c0b1haeffler7midt4olarships8ol3ule3warz5ience5ot3d1e0arch3t2cure1ity6ek2lect4ner3rvices6ven3w1x0y3fr2g1h0angrila6rp3ell3ia1ksha5oes2p0ping5uji3w3i0lk2na1gles5te3j1k0i0n2y0pe4l0ing4m0art3ile4n0cf3o0ccer3ial4ftbank4ware6hu2lar2utions7ng1y2y2pa0ce3ort2t3r0l2s1t0ada2ples4r1tebank4farm7c0group6ockholm6rage3e3ream4udio2y3yle4u0cks3pplies3y2ort5rf1gery5zuki5v1watch4iss4x1y0dney4stems6z2tab1ipei4lk2obao4rget4tamotors6r2too4x0i3c0i2d0k2eam2ch0nology8l1masek5nnis4va3f1g1h0d1eater2re6iaa2ckets5enda4ps2res2ol4j0maxx4x2k0maxx5l1m0all4n1o0day3kyo3ols3p1ray3shiba5tal3urs3wn2yota3s3r0ade1ing4ining5vel0ers0insurance16ust3v2t1ube2i1nes3shu4v0s2w1z2ua1bank3s2g1k1nicom3versity8o2ol2ps2s1y1z2va0cations7na1guard7c1e0gas3ntures6risign5mögensberater2ung14sicherung10t2g1i0ajes4deo3g1king4llas4n1p1rgin4sa1ion4va1o3laanderen9n1odka3lvo3te1ing3o2yage5u2wales2mart4ter4ng0gou5tch0es6eather0channel12bcam3er2site5d0ding5ibo2r3f1hoswho6ien2ki2lliamhill9n0dows4e1ners6me2olterskluwer11odside6rk0s2ld3w2s1tc1f3xbox3erox4ihuan4n2xx2yz3yachts4hoo3maxun5ndex5e1odobashi7ga2kohama6u0tube6t1un3za0ppos4ra3ero3ip2m1one3uerich6w2", bS = "ελ1υ2бг1ел3дети4ею2католик6ом3мкд2он1сква6онлайн5рг3рус2ф2сайт3рб3укр3қаз3հայ3ישראל5קום3ابوظبي5رامكو5لاردن4بحرين5جزائر5سعودية6عليان5مغرب5مارات5یران5بارت2زار4يتك3ھارت5تونس4سودان3رية5شبكة4عراق2ب2مان4فلسطين6قطر3كاثوليك6وم3مصر2ليسيا5وريتانيا7قع4همراه5پاکستان7ڀارت4कॉम3नेट3भारत0म्3ोत5संगठन5বাংলা5ভারত2ৰত4ਭਾਰਤ4ભારત4ଭାରତ4இந்தியா6லங்கை6சிங்கப்பூர்11భారత్5ಭಾರತ4ഭാരതം5ලංකා4คอม3ไทย3ລາວ3გე2みんな3アマゾン4クラウド4グーグル4コム2ストア3セール3ファッション6ポイント4世界2中信1国1國1文网3亚马逊3企业2佛山2信息2健康2八卦2公司1益2台湾1灣2商城1店1标2嘉里0大酒店5在线2大拿2天主教3娱乐2家電2广东2微博2慈善2我爱你3手机2招聘2政务1府2新加坡2闻2时尚2書籍2机构2淡马锡3游戏2澳門2点看2移动2组织机构4网址1店1站1络2联通2谷歌2购物2通販2集团2電訊盈科4飞利浦3食品2餐厅2香格里拉3港2닷넷1컴2삼성2한국2", Fr = (n, t) => {
  for (const e in t)
    n[e] = t[e];
  return n;
}, Wc = "numeric", Uc = "ascii", Kc = "alpha", vs = "asciinumeric", fs = "alphanumeric", qc = "domain", Bg = "emoji", yS = "scheme", vS = "slashscheme", Rl = "whitespace";
function xS(n, t) {
  return n in t || (t[n] = []), t[n];
}
function Oi(n, t, e) {
  t[Wc] && (t[vs] = !0, t[fs] = !0), t[Uc] && (t[vs] = !0, t[Kc] = !0), t[vs] && (t[fs] = !0), t[Kc] && (t[fs] = !0), t[fs] && (t[qc] = !0), t[Bg] && (t[qc] = !0);
  for (const i in t) {
    const r = xS(i, e);
    r.indexOf(n) < 0 && r.push(n);
  }
}
function wS(n, t) {
  const e = {};
  for (const i in t)
    t[i].indexOf(n) >= 0 && (e[i] = !0);
  return e;
}
function He(n = null) {
  this.j = {}, this.jr = [], this.jd = null, this.t = n;
}
He.groups = {};
He.prototype = {
  accepts() {
    return !!this.t;
  },
  /**
   * Follow an existing transition from the given input to the next state.
   * Does not mutate.
   * @param {string} input character or token type to transition on
   * @returns {?State<T>} the next state, if any
   */
  go(n) {
    const t = this, e = t.j[n];
    if (e)
      return e;
    for (let i = 0; i < t.jr.length; i++) {
      const r = t.jr[i][0], s = t.jr[i][1];
      if (s && r.test(n))
        return s;
    }
    return t.jd;
  },
  /**
   * Whether the state has a transition for the given input. Set the second
   * argument to true to only look for an exact match (and not a default or
   * regular-expression-based transition)
   * @param {string} input
   * @param {boolean} exactOnly
   */
  has(n, t = !1) {
    return t ? n in this.j : !!this.go(n);
  },
  /**
   * Short for "transition all"; create a transition from the array of items
   * in the given list to the same final resulting state.
   * @param {string | string[]} inputs Group of inputs to transition on
   * @param {Transition<T> | State<T>} [next] Transition options
   * @param {Flags} [flags] Collections flags to add token to
   * @param {Collections<T>} [groups] Master list of token groups
   */
  ta(n, t, e, i) {
    for (let r = 0; r < n.length; r++)
      this.tt(n[r], t, e, i);
  },
  /**
   * Short for "take regexp transition"; defines a transition for this state
   * when it encounters a token which matches the given regular expression
   * @param {RegExp} regexp Regular expression transition (populate first)
   * @param {T | State<T>} [next] Transition options
   * @param {Flags} [flags] Collections flags to add token to
   * @param {Collections<T>} [groups] Master list of token groups
   * @returns {State<T>} taken after the given input
   */
  tr(n, t, e, i) {
    i = i || He.groups;
    let r;
    return t && t.j ? r = t : (r = new He(t), e && i && Oi(t, e, i)), this.jr.push([n, r]), r;
  },
  /**
   * Short for "take transitions", will take as many sequential transitions as
   * the length of the given input and returns the
   * resulting final state.
   * @param {string | string[]} input
   * @param {T | State<T>} [next] Transition options
   * @param {Flags} [flags] Collections flags to add token to
   * @param {Collections<T>} [groups] Master list of token groups
   * @returns {State<T>} taken after the given input
   */
  ts(n, t, e, i) {
    let r = this;
    const s = n.length;
    if (!s)
      return r;
    for (let o = 0; o < s - 1; o++)
      r = r.tt(n[o]);
    return r.tt(n[s - 1], t, e, i);
  },
  /**
   * Short for "take transition", this is a method for building/working with
   * state machines.
   *
   * If a state already exists for the given input, returns it.
   *
   * If a token is specified, that state will emit that token when reached by
   * the linkify engine.
   *
   * If no state exists, it will be initialized with some default transitions
   * that resemble existing default transitions.
   *
   * If a state is given for the second argument, that state will be
   * transitioned to on the given input regardless of what that input
   * previously did.
   *
   * Specify a token group flags to define groups that this token belongs to.
   * The token will be added to corresponding entires in the given groups
   * object.
   *
   * @param {string} input character, token type to transition on
   * @param {T | State<T>} [next] Transition options
   * @param {Flags} [flags] Collections flags to add token to
   * @param {Collections<T>} [groups] Master list of groups
   * @returns {State<T>} taken after the given input
   */
  tt(n, t, e, i) {
    i = i || He.groups;
    const r = this;
    if (t && t.j)
      return r.j[n] = t, t;
    const s = t;
    let o, a = r.go(n);
    if (a ? (o = new He(), Fr(o.j, a.j), o.jr.push.apply(o.jr, a.jr), o.jd = a.jd, o.t = a.t) : o = new He(), s) {
      if (i)
        if (o.t && typeof o.t == "string") {
          const l = Fr(wS(o.t, i), e);
          Oi(s, l, i);
        } else e && Oi(s, e, i);
      o.t = s;
    }
    return r.j[n] = o, o;
  }
};
const St = (n, t, e, i, r) => n.ta(t, e, i, r), Kt = (n, t, e, i, r) => n.tr(t, e, i, r), ah = (n, t, e, i, r) => n.ts(t, e, i, r), W = (n, t, e, i, r) => n.tt(t, e, i, r), Wn = "WORD", Gc = "UWORD", zg = "ASCIINUMERICAL", Hg = "ALPHANUMERICAL", Fs = "LOCALHOST", Jc = "TLD", Xc = "UTLD", Uo = "SCHEME", ur = "SLASH_SCHEME", Fu = "NUM", Yc = "WS", Vu = "NL", xs = "OPENBRACE", ws = "CLOSEBRACE", ha = "OPENBRACKET", pa = "CLOSEBRACKET", ma = "OPENPAREN", ga = "CLOSEPAREN", _a = "OPENANGLEBRACKET", ba = "CLOSEANGLEBRACKET", ya = "FULLWIDTHLEFTPAREN", va = "FULLWIDTHRIGHTPAREN", xa = "LEFTCORNERBRACKET", wa = "RIGHTCORNERBRACKET", ka = "LEFTWHITECORNERBRACKET", Sa = "RIGHTWHITECORNERBRACKET", Ca = "FULLWIDTHLESSTHAN", Ta = "FULLWIDTHGREATERTHAN", Ea = "AMPERSAND", ju = "APOSTROPHE", Oa = "ASTERISK", ni = "AT", Ma = "BACKSLASH", Aa = "BACKTICK", Na = "CARET", li = "COLON", Wu = "COMMA", La = "DOLLAR", On = "DOT", Ra = "EQUALS", Uu = "EXCLAMATION", sn = "HYPHEN", ks = "PERCENT", Ia = "PIPE", Pa = "PLUS", Da = "POUND", Ss = "QUERY", Ku = "QUOTE", Fg = "FULLWIDTHMIDDLEDOT", qu = "SEMI", Mn = "SLASH", Cs = "TILDE", $a = "UNDERSCORE", Vg = "EMOJI", Ba = "SYM";
var jg = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  WORD: Wn,
  UWORD: Gc,
  ASCIINUMERICAL: zg,
  ALPHANUMERICAL: Hg,
  LOCALHOST: Fs,
  TLD: Jc,
  UTLD: Xc,
  SCHEME: Uo,
  SLASH_SCHEME: ur,
  NUM: Fu,
  WS: Yc,
  NL: Vu,
  OPENBRACE: xs,
  CLOSEBRACE: ws,
  OPENBRACKET: ha,
  CLOSEBRACKET: pa,
  OPENPAREN: ma,
  CLOSEPAREN: ga,
  OPENANGLEBRACKET: _a,
  CLOSEANGLEBRACKET: ba,
  FULLWIDTHLEFTPAREN: ya,
  FULLWIDTHRIGHTPAREN: va,
  LEFTCORNERBRACKET: xa,
  RIGHTCORNERBRACKET: wa,
  LEFTWHITECORNERBRACKET: ka,
  RIGHTWHITECORNERBRACKET: Sa,
  FULLWIDTHLESSTHAN: Ca,
  FULLWIDTHGREATERTHAN: Ta,
  AMPERSAND: Ea,
  APOSTROPHE: ju,
  ASTERISK: Oa,
  AT: ni,
  BACKSLASH: Ma,
  BACKTICK: Aa,
  CARET: Na,
  COLON: li,
  COMMA: Wu,
  DOLLAR: La,
  DOT: On,
  EQUALS: Ra,
  EXCLAMATION: Uu,
  HYPHEN: sn,
  PERCENT: ks,
  PIPE: Ia,
  PLUS: Pa,
  POUND: Da,
  QUERY: Ss,
  QUOTE: Ku,
  FULLWIDTHMIDDLEDOT: Fg,
  SEMI: qu,
  SLASH: Mn,
  TILDE: Cs,
  UNDERSCORE: $a,
  EMOJI: Vg,
  SYM: Ba
});
const Fn = /[a-z]/, Qr = new RegExp("\\p{L}", "u"), Il = new RegExp("\\p{Emoji}", "u"), Vn = /\d/, Pl = /\s/, lh = "\r", Dl = `
`, kS = "️", SS = "‍", $l = "￼";
let Co = null, To = null;
function CS(n = []) {
  const t = {};
  He.groups = t;
  const e = new He();
  Co == null && (Co = ch(_S)), To == null && (To = ch(bS)), W(e, "'", ju), W(e, "{", xs), W(e, "}", ws), W(e, "[", ha), W(e, "]", pa), W(e, "(", ma), W(e, ")", ga), W(e, "<", _a), W(e, ">", ba), W(e, "（", ya), W(e, "）", va), W(e, "「", xa), W(e, "」", wa), W(e, "『", ka), W(e, "』", Sa), W(e, "＜", Ca), W(e, "＞", Ta), W(e, "&", Ea), W(e, "*", Oa), W(e, "@", ni), W(e, "`", Aa), W(e, "^", Na), W(e, ":", li), W(e, ",", Wu), W(e, "$", La), W(e, ".", On), W(e, "=", Ra), W(e, "!", Uu), W(e, "-", sn), W(e, "%", ks), W(e, "|", Ia), W(e, "+", Pa), W(e, "#", Da), W(e, "?", Ss), W(e, '"', Ku), W(e, "/", Mn), W(e, ";", qu), W(e, "~", Cs), W(e, "_", $a), W(e, "\\", Ma), W(e, "・", Fg);
  const i = Kt(e, Vn, Fu, {
    [Wc]: !0
  });
  Kt(i, Vn, i);
  const r = Kt(i, Fn, zg, {
    [vs]: !0
  }), s = Kt(i, Qr, Hg, {
    [fs]: !0
  }), o = Kt(e, Fn, Wn, {
    [Uc]: !0
  });
  Kt(o, Vn, r), Kt(o, Fn, o), Kt(r, Vn, r), Kt(r, Fn, r);
  const a = Kt(e, Qr, Gc, {
    [Kc]: !0
  });
  Kt(a, Fn), Kt(a, Vn, s), Kt(a, Qr, a), Kt(s, Vn, s), Kt(s, Fn), Kt(s, Qr, s);
  const l = W(e, Dl, Vu, {
    [Rl]: !0
  }), c = W(e, lh, Yc, {
    [Rl]: !0
  }), u = Kt(e, Pl, Yc, {
    [Rl]: !0
  });
  W(e, $l, u), W(c, Dl, l), W(c, $l, u), Kt(c, Pl, u), W(u, lh), W(u, Dl), Kt(u, Pl, u), W(u, $l, u);
  const d = Kt(e, Il, Vg, {
    [Bg]: !0
  });
  W(d, "#"), Kt(d, Il, d), W(d, kS, d);
  const f = W(d, SS);
  W(f, "#"), Kt(f, Il, d);
  const h = [[Fn, o], [Vn, r]], p = [[Fn, null], [Qr, a], [Vn, s]];
  for (let _ = 0; _ < Co.length; _++)
    Qn(e, Co[_], Jc, Wn, h);
  for (let _ = 0; _ < To.length; _++)
    Qn(e, To[_], Xc, Gc, p);
  Oi(Jc, {
    tld: !0,
    ascii: !0
  }, t), Oi(Xc, {
    utld: !0,
    alpha: !0
  }, t), Qn(e, "file", Uo, Wn, h), Qn(e, "mailto", Uo, Wn, h), Qn(e, "http", ur, Wn, h), Qn(e, "https", ur, Wn, h), Qn(e, "ftp", ur, Wn, h), Qn(e, "ftps", ur, Wn, h), Oi(Uo, {
    scheme: !0,
    ascii: !0
  }, t), Oi(ur, {
    slashscheme: !0,
    ascii: !0
  }, t), n = n.sort((_, g) => _[0] > g[0] ? 1 : -1);
  for (let _ = 0; _ < n.length; _++) {
    const g = n[_][0], y = n[_][1] ? {
      [yS]: !0
    } : {
      [vS]: !0
    };
    g.indexOf("-") >= 0 ? y[qc] = !0 : Fn.test(g) ? Vn.test(g) ? y[vs] = !0 : y[Uc] = !0 : y[Wc] = !0, ah(e, g, g, y);
  }
  return ah(e, "localhost", Fs, {
    ascii: !0
  }), e.jd = new He(Ba), {
    start: e,
    tokens: Fr({
      groups: t
    }, jg)
  };
}
function Wg(n, t) {
  const e = TS(t.replace(/[A-Z]/g, (a) => a.toLowerCase())), i = e.length, r = [];
  let s = 0, o = 0;
  for (; o < i; ) {
    let a = n, l = null, c = 0, u = null, d = -1, f = -1;
    for (; o < i && (l = a.go(e[o])); )
      a = l, a.accepts() ? (d = 0, f = 0, u = a) : d >= 0 && (d += e[o].length, f++), c += e[o].length, s += e[o].length, o++;
    s -= d, o -= f, c -= d, r.push({
      t: u.t,
      // token type/name
      v: t.slice(s - c, s),
      // string value
      s: s - c,
      // start index
      e: s
      // end index (excluding)
    });
  }
  return r;
}
function TS(n) {
  const t = [], e = n.length;
  let i = 0;
  for (; i < e; ) {
    let r = n.charCodeAt(i), s, o = r < 55296 || r > 56319 || i + 1 === e || (s = n.charCodeAt(i + 1)) < 56320 || s > 57343 ? n[i] : n.slice(i, i + 2);
    t.push(o), i += o.length;
  }
  return t;
}
function Qn(n, t, e, i, r) {
  let s;
  const o = t.length;
  for (let a = 0; a < o - 1; a++) {
    const l = t[a];
    n.j[l] ? s = n.j[l] : (s = new He(i), s.jr = r.slice(), n.j[l] = s), n = s;
  }
  return s = new He(e), s.jr = r.slice(), n.j[t[o - 1]] = s, s;
}
function ch(n) {
  const t = [], e = [];
  let i = 0, r = "0123456789";
  for (; i < n.length; ) {
    let s = 0;
    for (; r.indexOf(n[i + s]) >= 0; )
      s++;
    if (s > 0) {
      t.push(e.join(""));
      for (let o = parseInt(n.substring(i, i + s), 10); o > 0; o--)
        e.pop();
      i += s;
    } else
      e.push(n[i]), i++;
  }
  return t;
}
const Vs = {
  defaultProtocol: "http",
  events: null,
  format: uh,
  formatHref: uh,
  nl2br: !1,
  tagName: "a",
  target: null,
  rel: null,
  validate: !0,
  truncate: 1 / 0,
  className: null,
  attributes: null,
  ignoreTags: [],
  render: null
};
function Gu(n, t = null) {
  let e = Fr({}, Vs);
  n && (e = Fr(e, n instanceof Gu ? n.o : n));
  const i = e.ignoreTags, r = [];
  for (let s = 0; s < i.length; s++)
    r.push(i[s].toUpperCase());
  this.o = e, t && (this.defaultRender = t), this.ignoreTags = r;
}
Gu.prototype = {
  o: Vs,
  /**
   * @type string[]
   */
  ignoreTags: [],
  /**
   * @param {IntermediateRepresentation} ir
   * @returns {any}
   */
  defaultRender(n) {
    return n;
  },
  /**
   * Returns true or false based on whether a token should be displayed as a
   * link based on the user options.
   * @param {MultiToken} token
   * @returns {boolean}
   */
  check(n) {
    return this.get("validate", n.toString(), n);
  },
  // Private methods
  /**
   * Resolve an option's value based on the value of the option and the given
   * params. If operator and token are specified and the target option is
   * callable, automatically calls the function with the given argument.
   * @template {keyof Opts} K
   * @param {K} key Name of option to use
   * @param {string} [operator] will be passed to the target option if it's a
   * function. If not specified, RAW function value gets returned
   * @param {MultiToken} [token] The token from linkify.tokenize
   * @returns {Opts[K] | any}
   */
  get(n, t, e) {
    const i = t != null;
    let r = this.o[n];
    return r && (typeof r == "object" ? (r = e.t in r ? r[e.t] : Vs[n], typeof r == "function" && i && (r = r(t, e))) : typeof r == "function" && i && (r = r(t, e.t, e)), r);
  },
  /**
   * @template {keyof Opts} L
   * @param {L} key Name of options object to use
   * @param {string} [operator]
   * @param {MultiToken} [token]
   * @returns {Opts[L] | any}
   */
  getObj(n, t, e) {
    let i = this.o[n];
    return typeof i == "function" && t != null && (i = i(t, e.t, e)), i;
  },
  /**
   * Convert the given token to a rendered element that may be added to the
   * calling-interface's DOM
   * @param {MultiToken} token Token to render to an HTML element
   * @returns {any} Render result; e.g., HTML string, DOM element, React
   *   Component, etc.
   */
  render(n) {
    const t = n.render(this);
    return (this.get("render", null, n) || this.defaultRender)(t, n.t, n);
  }
};
function uh(n) {
  return n;
}
function Ug(n, t) {
  this.t = "token", this.v = n, this.tk = t;
}
Ug.prototype = {
  isLink: !1,
  /**
   * Return the string this token represents.
   * @return {string}
   */
  toString() {
    return this.v;
  },
  /**
   * What should the value for this token be in the `href` HTML attribute?
   * Returns the `.toString` value by default.
   * @param {string} [scheme]
   * @return {string}
   */
  toHref(n) {
    return this.toString();
  },
  /**
   * @param {Options} options Formatting options
   * @returns {string}
   */
  toFormattedString(n) {
    const t = this.toString(), e = n.get("truncate", t, this), i = n.get("format", t, this);
    return e && i.length > e ? i.substring(0, e) + "…" : i;
  },
  /**
   *
   * @param {Options} options
   * @returns {string}
   */
  toFormattedHref(n) {
    return n.get("formatHref", this.toHref(n.get("defaultProtocol")), this);
  },
  /**
   * The start index of this token in the original input string
   * @returns {number}
   */
  startIndex() {
    return this.tk[0].s;
  },
  /**
   * The end index of this token in the original input string (up to this
   * index but not including it)
   * @returns {number}
   */
  endIndex() {
    return this.tk[this.tk.length - 1].e;
  },
  /**
  	Returns an object  of relevant values for this token, which includes keys
  	* type - Kind of token ('url', 'email', etc.)
  	* value - Original text
  	* href - The value that should be added to the anchor tag's href
  		attribute
  		@method toObject
  	@param {string} [protocol] `'http'` by default
  */
  toObject(n = Vs.defaultProtocol) {
    return {
      type: this.t,
      value: this.toString(),
      isLink: this.isLink,
      href: this.toHref(n),
      start: this.startIndex(),
      end: this.endIndex()
    };
  },
  /**
   *
   * @param {Options} options Formatting option
   */
  toFormattedObject(n) {
    return {
      type: this.t,
      value: this.toFormattedString(n),
      isLink: this.isLink,
      href: this.toFormattedHref(n),
      start: this.startIndex(),
      end: this.endIndex()
    };
  },
  /**
   * Whether this token should be rendered as a link according to the given options
   * @param {Options} options
   * @returns {boolean}
   */
  validate(n) {
    return n.get("validate", this.toString(), this);
  },
  /**
   * Return an object that represents how this link should be rendered.
   * @param {Options} options Formattinng options
   */
  render(n) {
    const t = this, e = this.toHref(n.get("defaultProtocol")), i = n.get("formatHref", e, this), r = n.get("tagName", e, t), s = this.toFormattedString(n), o = {}, a = n.get("className", e, t), l = n.get("target", e, t), c = n.get("rel", e, t), u = n.getObj("attributes", e, t), d = n.getObj("events", e, t);
    return o.href = i, a && (o.class = a), l && (o.target = l), c && (o.rel = c), u && Fr(o, u), {
      tagName: r,
      attributes: o,
      content: s,
      eventListeners: d
    };
  }
};
function ll(n, t) {
  class e extends Ug {
    constructor(r, s) {
      super(r, s), this.t = n;
    }
  }
  for (const i in t)
    e.prototype[i] = t[i];
  return e.t = n, e;
}
const dh = ll("email", {
  isLink: !0,
  toHref() {
    return "mailto:" + this.toString();
  }
}), fh = ll("text"), ES = ll("nl"), Eo = ll("url", {
  isLink: !0,
  /**
  	Lowercases relevant parts of the domain and adds the protocol if
  	required. Note that this will not escape unsafe HTML characters in the
  	URL.
  		@param {string} [scheme] default scheme (e.g., 'https')
  	@return {string} the full href
  */
  toHref(n = Vs.defaultProtocol) {
    return this.hasProtocol() ? this.v : `${n}://${this.v}`;
  },
  /**
   * Check whether this URL token has a protocol
   * @return {boolean}
   */
  hasProtocol() {
    const n = this.tk;
    return n.length >= 2 && n[0].t !== Fs && n[1].t === li;
  }
}), rn = (n) => new He(n);
function OS({
  groups: n
}) {
  const t = n.domain.concat([Ea, Oa, ni, Ma, Aa, Na, La, Ra, sn, Fu, ks, Ia, Pa, Da, Mn, Ba, Cs, $a]), e = [li, Wu, On, Uu, ks, Ss, Ku, qu, _a, ba, xs, ws, pa, ha, ma, ga, ya, va, xa, wa, ka, Sa, Ca, Ta], i = [Ea, ju, Oa, Ma, Aa, Na, La, Ra, sn, xs, ws, ks, Ia, Pa, Da, Ss, Mn, Ba, Cs, $a], r = rn(), s = W(r, Cs);
  St(s, i, s), St(s, n.domain, s);
  const o = rn(), a = rn(), l = rn();
  St(r, n.domain, o), St(r, n.scheme, a), St(r, n.slashscheme, l), St(o, i, s), St(o, n.domain, o);
  const c = W(o, ni);
  W(s, ni, c), W(a, ni, c), W(l, ni, c);
  const u = W(s, On);
  St(u, i, s), St(u, n.domain, s);
  const d = rn();
  St(c, n.domain, d), St(d, n.domain, d);
  const f = W(d, On);
  St(f, n.domain, d);
  const h = rn(dh);
  St(f, n.tld, h), St(f, n.utld, h), W(c, Fs, h);
  const p = W(d, sn);
  W(p, sn, p), St(p, n.domain, d), St(h, n.domain, d), W(h, On, f), W(h, sn, p);
  const _ = W(h, li);
  St(_, n.numeric, dh);
  const g = W(o, sn), m = W(o, On);
  W(g, sn, g), St(g, n.domain, o), St(m, i, s), St(m, n.domain, o);
  const y = rn(Eo);
  St(m, n.tld, y), St(m, n.utld, y), St(y, n.domain, o), St(y, i, s), W(y, On, m), W(y, sn, g), W(y, ni, c);
  const x = W(y, li), k = rn(Eo);
  St(x, n.numeric, k);
  const S = rn(Eo), w = rn();
  St(S, t, S), St(S, e, w), St(w, t, S), St(w, e, w), W(y, Mn, S), W(k, Mn, S);
  const O = W(a, li), v = W(l, li), E = W(v, Mn), b = W(E, Mn);
  St(a, n.domain, o), W(a, On, m), W(a, sn, g), St(l, n.domain, o), W(l, On, m), W(l, sn, g), St(O, n.domain, S), W(O, Mn, S), W(O, Ss, S), St(b, n.domain, S), St(b, t, S), W(b, Mn, S);
  const T = [
    [xs, ws],
    // {}
    [ha, pa],
    // []
    [ma, ga],
    // ()
    [_a, ba],
    // <>
    [ya, va],
    // （）
    [xa, wa],
    // 「」
    [ka, Sa],
    // 『』
    [Ca, Ta]
    // ＜＞
  ];
  for (let M = 0; M < T.length; M++) {
    const [F, D] = T[M], U = W(S, F);
    W(w, F, U), W(U, D, S);
    const q = rn(Eo);
    St(U, t, q);
    const Q = rn();
    St(U, e), St(q, t, q), St(q, e, Q), St(Q, t, q), St(Q, e, Q), W(q, D, S), W(Q, D, S);
  }
  return W(r, Fs, y), W(r, Vu, ES), {
    start: r,
    tokens: jg
  };
}
function MS(n, t, e) {
  let i = e.length, r = 0, s = [], o = [];
  for (; r < i; ) {
    let a = n, l = null, c = null, u = 0, d = null, f = -1;
    for (; r < i && !(l = a.go(e[r].t)); )
      o.push(e[r++]);
    for (; r < i && (c = l || a.go(e[r].t)); )
      l = null, a = c, a.accepts() ? (f = 0, d = a) : f >= 0 && f++, r++, u++;
    if (f < 0)
      r -= u, r < i && (o.push(e[r]), r++);
    else {
      o.length > 0 && (s.push(Bl(fh, t, o)), o = []), r -= f, u -= f;
      const h = d.t, p = e.slice(r - u, r);
      s.push(Bl(h, t, p));
    }
  }
  return o.length > 0 && s.push(Bl(fh, t, o)), s;
}
function Bl(n, t, e) {
  const i = e[0].s, r = e[e.length - 1].e, s = t.slice(i, r);
  return new n(s, e);
}
const AS = typeof console < "u" && console && console.warn || (() => {
}), NS = "until manual call of linkify.init(). Register all schemes and plugins before invoking linkify the first time.", Wt = {
  scanner: null,
  parser: null,
  tokenQueue: [],
  pluginQueue: [],
  customSchemes: [],
  initialized: !1
};
function LS() {
  return He.groups = {}, Wt.scanner = null, Wt.parser = null, Wt.tokenQueue = [], Wt.pluginQueue = [], Wt.customSchemes = [], Wt.initialized = !1, Wt;
}
function hh(n, t = !1) {
  if (Wt.initialized && AS(`linkifyjs: already initialized - will not register custom scheme "${n}" ${NS}`), !/^[0-9a-z]+(-[0-9a-z]+)*$/.test(n))
    throw new Error(`linkifyjs: incorrect scheme format.
1. Must only contain digits, lowercase ASCII letters or "-"
2. Cannot start or end with "-"
3. "-" cannot repeat`);
  Wt.customSchemes.push([n, t]);
}
function RS() {
  Wt.scanner = CS(Wt.customSchemes);
  for (let n = 0; n < Wt.tokenQueue.length; n++)
    Wt.tokenQueue[n][1]({
      scanner: Wt.scanner
    });
  Wt.parser = OS(Wt.scanner.tokens);
  for (let n = 0; n < Wt.pluginQueue.length; n++)
    Wt.pluginQueue[n][1]({
      scanner: Wt.scanner,
      parser: Wt.parser
    });
  return Wt.initialized = !0, Wt;
}
function Ju(n) {
  return Wt.initialized || RS(), MS(Wt.parser.start, n, Wg(Wt.scanner.start, n));
}
Ju.scan = Wg;
function Kg(n, t = null, e = null) {
  if (t && typeof t == "object") {
    if (e)
      throw Error(`linkifyjs: Invalid link type ${t}; must be a string`);
    e = t, t = null;
  }
  const i = new Gu(e), r = Ju(n), s = [];
  for (let o = 0; o < r.length; o++) {
    const a = r[o];
    a.isLink && (!t || a.t === t) && i.check(a) && s.push(a.toFormattedObject(i));
  }
  return s;
}
function IS(n) {
  return n.length === 1 ? n[0].isLink : n.length === 3 && n[1].isLink ? ["()", "[]"].includes(n[0].value + n[2].value) : !1;
}
function PS(n) {
  return new pe({
    key: new $e("autolink"),
    appendTransaction: (t, e, i) => {
      const r = t.some((c) => c.docChanged) && !e.doc.eq(i.doc), s = t.some((c) => c.getMeta("preventAutolink"));
      if (!r || s)
        return;
      const { tr: o } = i, a = lg(e.doc, [...t]);
      if (pg(a).forEach(({ newRange: c }) => {
        const u = ug(i.doc, c, (h) => h.isTextblock);
        let d, f;
        if (u.length > 1 ? (d = u[0], f = i.doc.textBetween(d.pos, d.pos + d.node.nodeSize, void 0, " ")) : u.length && i.doc.textBetween(c.from, c.to, " ", " ").endsWith(" ") && (d = u[0], f = i.doc.textBetween(d.pos, c.to, void 0, " ")), d && f) {
          const h = f.split(" ").filter((m) => m !== "");
          if (h.length <= 0)
            return !1;
          const p = h[h.length - 1], _ = d.pos + f.lastIndexOf(p);
          if (!p)
            return !1;
          const g = Ju(p).map((m) => m.toObject(n.defaultProtocol));
          if (!IS(g))
            return !1;
          g.filter((m) => m.isLink).map((m) => ({
            ...m,
            from: _ + m.start + 1,
            to: _ + m.end + 1
          })).filter((m) => i.schema.marks.code ? !i.doc.rangeHasMark(m.from, m.to, i.schema.marks.code) : !0).filter((m) => n.validate(m.value)).filter((m) => n.shouldAutoLink(m.value)).forEach((m) => {
            sl(m.from, m.to, i.doc).some((y) => y.mark.type === n.type) || o.addMark(m.from, m.to, n.type.create({
              href: m.href
            }));
          });
        }
      }), !!o.steps.length)
        return o;
    }
  });
}
function DS(n) {
  return new pe({
    key: new $e("handleClickLink"),
    props: {
      handleClick: (t, e, i) => {
        var r, s;
        if (i.button !== 0 || !t.editable)
          return !1;
        let o = i.target;
        const a = [];
        for (; o.nodeName !== "DIV"; )
          a.push(o), o = o.parentNode;
        if (!a.find((f) => f.nodeName === "A"))
          return !1;
        const l = $u(t.state, n.type.name), c = i.target, u = (r = c == null ? void 0 : c.href) !== null && r !== void 0 ? r : l.href, d = (s = c == null ? void 0 : c.target) !== null && s !== void 0 ? s : l.target;
        return c && u ? (window.open(u, d), !0) : !1;
      }
    }
  });
}
function $S(n) {
  return new pe({
    key: new $e("handlePasteLink"),
    props: {
      handlePaste: (t, e, i) => {
        const { state: r } = t, { selection: s } = r, { empty: o } = s;
        if (o)
          return !1;
        let a = "";
        i.content.forEach((c) => {
          a += c.textContent;
        });
        const l = Kg(a, { defaultProtocol: n.defaultProtocol }).find((c) => c.isLink && c.value === a);
        return !a || !l ? !1 : n.editor.commands.setMark(n.type, {
          href: l.href
        });
      }
    }
  });
}
const BS = /[\u0000-\u0020\u00A0\u1680\u180E\u2000-\u2029\u205F\u3000]/g;
function wi(n, t) {
  const e = [
    "http",
    "https",
    "ftp",
    "ftps",
    "mailto",
    "tel",
    "callto",
    "sms",
    "cid",
    "xmpp"
  ];
  return t && t.forEach((i) => {
    const r = typeof i == "string" ? i : i.scheme;
    r && e.push(r);
  }), !n || n.replace(BS, "").match(new RegExp(
    // eslint-disable-next-line no-useless-escape
    `^(?:(?:${e.join("|")}):|[^a-z]|[a-z0-9+.-]+(?:[^a-z+.-:]|$))`,
    "i"
  ));
}
const zS = Ve.create({
  name: "link",
  priority: 1e3,
  keepOnSplit: !1,
  exitable: !0,
  onCreate() {
    this.options.validate && !this.options.shouldAutoLink && (this.options.shouldAutoLink = this.options.validate, console.warn("The `validate` option is deprecated. Rename to the `shouldAutoLink` option instead.")), this.options.protocols.forEach((n) => {
      if (typeof n == "string") {
        hh(n);
        return;
      }
      hh(n.scheme, n.optionalSlashes);
    });
  },
  onDestroy() {
    LS();
  },
  inclusive() {
    return this.options.autolink;
  },
  addOptions() {
    return {
      openOnClick: !0,
      linkOnPaste: !0,
      autolink: !0,
      protocols: [],
      defaultProtocol: "http",
      HTMLAttributes: {
        target: "_blank",
        rel: "noopener noreferrer nofollow",
        class: null
      },
      isAllowedUri: (n, t) => !!wi(n, t.protocols),
      validate: (n) => !!n,
      shouldAutoLink: (n) => !!n
    };
  },
  addAttributes() {
    return {
      href: {
        default: null,
        parseHTML(n) {
          return n.getAttribute("href");
        }
      },
      target: {
        default: this.options.HTMLAttributes.target
      },
      rel: {
        default: this.options.HTMLAttributes.rel
      },
      class: {
        default: this.options.HTMLAttributes.class
      }
    };
  },
  parseHTML() {
    return [
      {
        tag: "a[href]",
        getAttrs: (n) => {
          const t = n.getAttribute("href");
          return !t || !this.options.isAllowedUri(t, {
            defaultValidate: (e) => !!wi(e, this.options.protocols),
            protocols: this.options.protocols,
            defaultProtocol: this.options.defaultProtocol
          }) ? !1 : null;
        }
      }
    ];
  },
  renderHTML({ HTMLAttributes: n }) {
    return this.options.isAllowedUri(n.href, {
      defaultValidate: (t) => !!wi(t, this.options.protocols),
      protocols: this.options.protocols,
      defaultProtocol: this.options.defaultProtocol
    }) ? ["a", Mt(this.options.HTMLAttributes, n), 0] : [
      "a",
      Mt(this.options.HTMLAttributes, { ...n, href: "" }),
      0
    ];
  },
  addCommands() {
    return {
      setLink: (n) => ({ chain: t }) => {
        const { href: e } = n;
        return this.options.isAllowedUri(e, {
          defaultValidate: (i) => !!wi(i, this.options.protocols),
          protocols: this.options.protocols,
          defaultProtocol: this.options.defaultProtocol
        }) ? t().setMark(this.name, n).setMeta("preventAutolink", !0).run() : !1;
      },
      toggleLink: (n) => ({ chain: t }) => {
        const { href: e } = n;
        return this.options.isAllowedUri(e, {
          defaultValidate: (i) => !!wi(i, this.options.protocols),
          protocols: this.options.protocols,
          defaultProtocol: this.options.defaultProtocol
        }) ? t().toggleMark(this.name, n, { extendEmptyMarkRange: !0 }).setMeta("preventAutolink", !0).run() : !1;
      },
      unsetLink: () => ({ chain: n }) => n().unsetMark(this.name, { extendEmptyMarkRange: !0 }).setMeta("preventAutolink", !0).run()
    };
  },
  addPasteRules() {
    return [
      Ki({
        find: (n) => {
          const t = [];
          if (n) {
            const { protocols: e, defaultProtocol: i } = this.options, r = Kg(n).filter((s) => s.isLink && this.options.isAllowedUri(s.value, {
              defaultValidate: (o) => !!wi(o, e),
              protocols: e,
              defaultProtocol: i
            }));
            r.length && r.forEach((s) => t.push({
              text: s.value,
              data: {
                href: s.href
              },
              index: s.start
            }));
          }
          return t;
        },
        type: this.type,
        getAttributes: (n) => {
          var t;
          return {
            href: (t = n.data) === null || t === void 0 ? void 0 : t.href
          };
        }
      })
    ];
  },
  addProseMirrorPlugins() {
    const n = [], { protocols: t, defaultProtocol: e } = this.options;
    return this.options.autolink && n.push(PS({
      type: this.type,
      defaultProtocol: this.options.defaultProtocol,
      validate: (i) => this.options.isAllowedUri(i, {
        defaultValidate: (r) => !!wi(r, t),
        protocols: t,
        defaultProtocol: e
      }),
      shouldAutoLink: this.options.shouldAutoLink
    })), this.options.openOnClick === !0 && n.push(DS({
      type: this.type
    })), this.options.linkOnPaste && n.push($S({
      editor: this.editor,
      defaultProtocol: this.options.defaultProtocol,
      type: this.type
    })), n;
  }
}), HS = zS.extend({
  addOptions() {
    var n;
    return {
      ...(n = this.parent) == null ? void 0 : n.call(this),
      shortcutHandler: void 0
    };
  },
  addAttributes() {
    return {
      href: {
        default: null,
        parseHTML(n) {
          return n.getAttribute("href");
        }
      },
      target: {
        default: null
      },
      title: {
        default: null
      },
      rel: {
        default: null
      },
      class: {
        default: null
      },
      "data-inline": {
        default: "true",
        renderHTML: () => null
      }
    };
  },
  parseHTML() {
    return [
      {
        tag: "a:not([data-mt-rich-text-editor-block])",
        getAttrs: (n) => {
          if (!(n instanceof HTMLElement))
            return !1;
          const t = {};
          return Array.from(n.attributes).forEach((e) => {
            t[e.name] = e.value;
          }), {
            HTMLAttributes: t,
            "data-inline": n.getAttribute("data-inline")
          };
        }
      }
    ];
  },
  renderHTML({ HTMLAttributes: n }) {
    const { HTMLAttributes: t = {}, ...e } = n;
    return ["a", { ...t, ...e, "data-inline": void 0 }, 0];
  },
  addKeyboardShortcuts() {
    return {
      "Mod-k": () => {
        var n, t;
        return (t = (n = this.options).shortcutHandler) == null || t.call(n), !0;
      }
    };
  },
  addCommands() {
    var n;
    return {
      ...(n = this.parent) == null ? void 0 : n.call(this),
      setInlineLinkShortcutHandler: (t) => () => {
        this.options.shortcutHandler = t;
      }
    };
  }
}), FS = Bt.create({
  name: "paragraph",
  priority: 1e3,
  addOptions() {
    return {
      HTMLAttributes: {}
    };
  },
  group: "block",
  content: "inline*",
  parseHTML() {
    return [
      { tag: "p" }
    ];
  },
  renderHTML({ HTMLAttributes: n }) {
    return ["p", Mt(this.options.HTMLAttributes, n), 0];
  },
  addCommands() {
    return {
      setParagraph: () => ({ commands: n }) => n.setNode(this.name)
    };
  },
  addKeyboardShortcuts() {
    return {
      "Mod-Alt-0": () => this.editor.commands.setParagraph()
    };
  }
}), VS = FS.extend({
  name: "paragraph",
  priority: 1e3,
  group: "block",
  content: "inline*",
  addOptions() {
    return {
      HTMLAttributes: {}
    };
  },
  parseHTML() {
    return [{ tag: "p" }];
  },
  renderHTML({ node: n, HTMLAttributes: t }) {
    const { MTRichTextEditorHTMLAttributes: e, textAlign: i, ...r } = n.attrs;
    return ["p", Mt(this.options.HTMLAttributes, r, t), 0];
  },
  addCommands() {
    return {
      setParagraph: () => ({ commands: n }) => n.setNode(this.name)
    };
  }
}), jS = Bt.create({
  name: "textBlock",
  group: "block",
  content: "inline*",
  parseHTML() {
    return [
      {
        tag: "mt-text-block",
        getAttrs: (n) => n instanceof HTMLElement ? {} : !1
      }
    ];
  },
  renderHTML() {
    return ["mt-text-block", 0];
  },
  addKeyboardShortcuts() {
    return {
      Enter: ({ editor: n }) => {
        if (!n.isActive(this.name))
          return !1;
        const { state: t } = n, { selection: e } = t, { $from: i } = e, r = i.node(-1);
        if (!r) return !1;
        const s = i.after(-1), o = i.parent.content.cut(i.parentOffset).toJSON();
        if (!n.chain().insertContentAt(s, {
          type: r.type.name,
          content: [
            {
              type: this.name,
              content: o
            }
          ]
        }).deleteRange({ from: i.pos, to: i.after() }).run()) return !1;
        const u = n.state.doc.resolve(s + 1).start();
        return n.chain().setTextSelection(u).focus().run(), !0;
      }
    };
  },
  addStorage() {
    return {
      originalText: ""
    };
  }
}), WS = Bt.create({
  name: "pre",
  priority: 1e3,
  group: "block",
  content: "inline*|text*",
  defining: !0,
  parseHTML() {
    return [
      {
        tag: "pre",
        preserveWhitespace: "full"
      }
    ];
  },
  renderHTML({ HTMLAttributes: n }) {
    return ["pre", n, 0];
  },
  addCommands() {
    return {
      setPre: () => ({ commands: n }) => n.setNode(this.name),
      unsetPre: () => ({ commands: n }) => n.setNode("paragraph")
    };
  }
}), US = Bt.create({
  name: "code",
  priority: 1e3,
  group: "inline",
  inline: !0,
  content: "text*",
  defining: !0,
  parseHTML() {
    return [
      {
        tag: "code",
        preserveWhitespace: "full"
      }
    ];
  },
  renderHTML({ HTMLAttributes: n }) {
    return ["code", n, 0];
  }
}), KS = Bt.create({
  name: "descriptionList",
  priority: 1e3,
  group: "block",
  content: "(descriptionTerm|descriptionDetails)+",
  defining: !0,
  parseHTML() {
    return [{ tag: "dl" }];
  },
  renderHTML({ HTMLAttributes: n }) {
    return ["dl", n, 0];
  }
}), qS = Bt.create({
  name: "descriptionTerm",
  priority: 1e3,
  group: "block",
  content: "(textBlock|paragraph) block*",
  defining: !0,
  parseHTML() {
    return [{ tag: "dt" }];
  },
  renderHTML({ HTMLAttributes: n }) {
    return ["dt", n, 0];
  }
}), GS = Bt.create({
  name: "descriptionDetails",
  priority: 1e3,
  group: "block",
  content: "(textBlock|paragraph) block*",
  defining: !0,
  parseHTML() {
    return [{ tag: "dd" }];
  },
  renderHTML({ HTMLAttributes: n }) {
    return ["dd", n, 0];
  }
}), JS = Bt.create({
  name: "summary",
  priority: 1e3,
  group: "block",
  content: "inline*",
  defining: !0,
  parseHTML() {
    return [{ tag: "summary" }];
  },
  renderHTML({ HTMLAttributes: n }) {
    return ["summary", n, 0];
  }
}), XS = Bt.create({
  name: "listItem",
  addOptions() {
    return {
      HTMLAttributes: {},
      bulletListTypeName: "bulletList",
      orderedListTypeName: "orderedList"
    };
  },
  content: "paragraph block*",
  defining: !0,
  parseHTML() {
    return [
      {
        tag: "li"
      }
    ];
  },
  renderHTML({ HTMLAttributes: n }) {
    return ["li", Mt(this.options.HTMLAttributes, n), 0];
  },
  addKeyboardShortcuts() {
    return {
      Enter: () => this.editor.commands.splitListItem(this.name),
      Tab: () => this.editor.commands.sinkListItem(this.name),
      "Shift-Tab": () => this.editor.commands.liftListItem(this.name)
    };
  }
}), YS = XS.extend({
  name: "listItem",
  priority: 1e3,
  content: "(textBlock|block)*",
  parseHTML() {
    return [
      {
        tag: "li"
      }
    ];
  },
  renderHTML({ HTMLAttributes: n }) {
    return ["li", Mt(this.options.HTMLAttributes, n), 0];
  }
}), ZS = ee.create({
  name: "backgroundColor",
  addOptions() {
    return {
      types: ["textStyle"]
    };
  },
  addGlobalAttributes() {
    return [
      {
        types: this.options.types,
        attributes: {
          backgroundColor: {
            default: null,
            parseHTML: (n) => {
              var t;
              return (t = n.style.backgroundColor) == null ? void 0 : t.replace(/['"]+/g, "");
            },
            renderHTML: (n) => n.backgroundColor ? {
              style: `background-color: ${n.backgroundColor}`
            } : {}
          }
        }
      }
    ];
  },
  addCommands() {
    return {
      setBackgroundColor: (n) => ({ chain: t }) => t().setMark("textStyle", { backgroundColor: n }).run(),
      unsetBackgroundColor: () => ({ chain: n }) => n().setMark("textStyle", { backgroundColor: null }).removeEmptyTextStyle().run()
    };
  }
}), QS = Bt.create({
  name: "script",
  group: "inline",
  content: "text*",
  inline: !0,
  atom: !0,
  parseHTML() {
    return [
      {
        tag: "mt-rich-text-editor-script",
        preserveWhitespace: "full"
      }
    ];
  },
  addNodeView() {
    const n = ["https://gist.github.com"];
    return ({ node: t }) => {
      const e = document.createElement("div");
      e.classList.add("mt-rich-text-editor-script");
      const i = t.attrs.MTRichTextEditorHTMLAttributes || {};
      e.dataset.mtRichTextEditorScriptTitle = "<script " + Object.entries(i).map(([o, a]) => `${o}="${a}"`).join(" ") + "/>";
      const r = i.src, s = r && (() => {
        try {
          return new URL(r).origin;
        } catch {
          return;
        }
      })();
      if (s && n.some((o) => s === o)) {
        e.classList.add("mt-rich-text-editor-script--preview");
        const o = document.createElement("iframe");
        o.style.width = "100%", o.style.border = "none";
        const a = `
          <!DOCTYPE html>
          <html>
            <head>
              <style>
                html, body {
                  margin: 0;
                  padding: 0;
                  overflow: hidden;
                }
                ::-webkit-scrollbar {
                  display: none;
                }
              </style>
              <script>
                const resizeObserver = new ResizeObserver((entries) => {
                  const height = document.body.scrollHeight;
                  window.frameElement.style.height = \`\${height}px\`;
                });

                window.addEventListener('load', () => {
                  resizeObserver.observe(document.body);
                });

                const events = ['mousedown', 'mouseup', 'click', 'dblclick', 'contextmenu', 'mousemove'];
                events.forEach(eventName => {
                  document.addEventListener(eventName, (e) => {
                    e.stopPropagation();
                    e.preventDefault();
                    window.frameElement.click();
                  }, true);
                });
              <\/script>
              <script src="${r}"><\/script>
            </head>
            <body></body>
          </html>
        `;
        return o.srcdoc = a, e.appendChild(o), {
          dom: e
        };
      }
      return e.innerText = t.content.content.map((o) => o.text).join("").replace(/^\n/, "").replace(/\s+$/, ""), {
        dom: e
      };
    };
  },
  renderHTML({ HTMLAttributes: n }) {
    return ["mt-rich-text-editor-script", n, 0];
  }
}), tC = Bt.create({
  name: "embedObject",
  priority: 1e3,
  group: "block",
  content: "block*",
  defining: !0,
  addAttributes() {
    return {
      "data-mt-rich-text-editor-block": {
        default: null,
        renderHTML: () => null
      },
      content: {
        default: null
      }
    };
  },
  parseHTML() {
    return [
      {
        tag: "mt-rich-text-editor-embed-object",
        getAttrs: (n) => n instanceof HTMLElement ? {
          href: n.getAttribute("href"),
          "data-mt-rich-text-editor-block": n.getAttribute(
            "data-mt-rich-text-editor-block"
          ),
          content: n.getAttribute("data-mt-rich-text-editor-content") || n.innerHTML
        } : !1
      }
    ];
  },
  renderHTML({ HTMLAttributes: n }) {
    return [
      "mt-rich-text-editor-embed-object",
      Mt(this.options.HTMLAttributes, {
        "data-mt-rich-text-editor-content": n.content
      }),
      0
    ];
  },
  addNodeView() {
    return ({ node: n }) => {
      const t = document.createElement("iframe");
      t.setAttribute("frameborder", "0"), t.setAttribute("allowfullscreen", "true"), t.style.width = "100%";
      const e = `
      <!DOCTYPE html>
      <html>
        <head>
          <style>
            html, body {
              margin: 0;
              padding: 0;
              overflow: hidden;
            }
            ::-webkit-scrollbar {
              display: none;
            }
          </style>
          <script>
            const resizeObserver = new ResizeObserver((entries) => {
              const height = document.body.scrollHeight;
              const width = document.body.scrollWidth;
              window.frameElement.style.height = \`\${height}px\`;
              window.frameElement.style.width = \`\${width}px\`;
            });
            
            window.addEventListener('load', () => {
              resizeObserver.observe(document.body);
            });

            const events = ['mousedown', 'mouseup', 'click', 'dblclick', 'contextmenu', 'mousemove'];
            events.forEach(eventName => {
              document.addEventListener(eventName, (e) => {
                e.stopPropagation();
                e.preventDefault();
                window.frameElement.click();
              }, true);
            });
          <\/script>
        </head>
        <body>
          ${n.attrs.content}
        </body>
      </html>
    `;
      return t.srcdoc = e, {
        dom: t,
        update: () => !0
      };
    };
  },
  addCommands() {
    return {
      getEmbedObject: (n) => () => this.options.resolver(n),
      insertEmbedObject: (n) => {
        const { state: t } = this.editor, e = t.selection.$anchor.pos;
        return this.editor.commands.insertContent({
          type: this.name,
          attrs: {
            content: n
          }
        }), this.editor.commands.setTextSelection(e + 2), !0;
      }
    };
  }
}), eC = ee.create({
  name: "markdown",
  addCommands() {
    return {
      // FIXME: fix type error
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      isMarkdownConversionAvailable: () => () => !!this.options.toHtml,
      // FIXME: fix type error
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      markdownToHtml: (n) => () => this.options.toHtml(n)
    };
  }
});
var za = 200, he = function() {
};
he.prototype.append = function(t) {
  return t.length ? (t = he.from(t), !this.length && t || t.length < za && this.leafAppend(t) || this.length < za && t.leafPrepend(this) || this.appendInner(t)) : this;
};
he.prototype.prepend = function(t) {
  return t.length ? he.from(t).append(this) : this;
};
he.prototype.appendInner = function(t) {
  return new nC(this, t);
};
he.prototype.slice = function(t, e) {
  return t === void 0 && (t = 0), e === void 0 && (e = this.length), t >= e ? he.empty : this.sliceInner(Math.max(0, t), Math.min(this.length, e));
};
he.prototype.get = function(t) {
  if (!(t < 0 || t >= this.length))
    return this.getInner(t);
};
he.prototype.forEach = function(t, e, i) {
  e === void 0 && (e = 0), i === void 0 && (i = this.length), e <= i ? this.forEachInner(t, e, i, 0) : this.forEachInvertedInner(t, e, i, 0);
};
he.prototype.map = function(t, e, i) {
  e === void 0 && (e = 0), i === void 0 && (i = this.length);
  var r = [];
  return this.forEach(function(s, o) {
    return r.push(t(s, o));
  }, e, i), r;
};
he.from = function(t) {
  return t instanceof he ? t : t && t.length ? new qg(t) : he.empty;
};
var qg = /* @__PURE__ */ function(n) {
  function t(i) {
    n.call(this), this.values = i;
  }
  n && (t.__proto__ = n), t.prototype = Object.create(n && n.prototype), t.prototype.constructor = t;
  var e = { length: { configurable: !0 }, depth: { configurable: !0 } };
  return t.prototype.flatten = function() {
    return this.values;
  }, t.prototype.sliceInner = function(r, s) {
    return r == 0 && s == this.length ? this : new t(this.values.slice(r, s));
  }, t.prototype.getInner = function(r) {
    return this.values[r];
  }, t.prototype.forEachInner = function(r, s, o, a) {
    for (var l = s; l < o; l++)
      if (r(this.values[l], a + l) === !1)
        return !1;
  }, t.prototype.forEachInvertedInner = function(r, s, o, a) {
    for (var l = s - 1; l >= o; l--)
      if (r(this.values[l], a + l) === !1)
        return !1;
  }, t.prototype.leafAppend = function(r) {
    if (this.length + r.length <= za)
      return new t(this.values.concat(r.flatten()));
  }, t.prototype.leafPrepend = function(r) {
    if (this.length + r.length <= za)
      return new t(r.flatten().concat(this.values));
  }, e.length.get = function() {
    return this.values.length;
  }, e.depth.get = function() {
    return 0;
  }, Object.defineProperties(t.prototype, e), t;
}(he);
he.empty = new qg([]);
var nC = /* @__PURE__ */ function(n) {
  function t(e, i) {
    n.call(this), this.left = e, this.right = i, this.length = e.length + i.length, this.depth = Math.max(e.depth, i.depth) + 1;
  }
  return n && (t.__proto__ = n), t.prototype = Object.create(n && n.prototype), t.prototype.constructor = t, t.prototype.flatten = function() {
    return this.left.flatten().concat(this.right.flatten());
  }, t.prototype.getInner = function(i) {
    return i < this.left.length ? this.left.get(i) : this.right.get(i - this.left.length);
  }, t.prototype.forEachInner = function(i, r, s, o) {
    var a = this.left.length;
    if (r < a && this.left.forEachInner(i, r, Math.min(s, a), o) === !1 || s > a && this.right.forEachInner(i, Math.max(r - a, 0), Math.min(this.length, s) - a, o + a) === !1)
      return !1;
  }, t.prototype.forEachInvertedInner = function(i, r, s, o) {
    var a = this.left.length;
    if (r > a && this.right.forEachInvertedInner(i, r - a, Math.max(s, a) - a, o + a) === !1 || s < a && this.left.forEachInvertedInner(i, Math.min(r, a), s, o) === !1)
      return !1;
  }, t.prototype.sliceInner = function(i, r) {
    if (i == 0 && r == this.length)
      return this;
    var s = this.left.length;
    return r <= s ? this.left.slice(i, r) : i >= s ? this.right.slice(i - s, r - s) : this.left.slice(i, s).append(this.right.slice(0, r - s));
  }, t.prototype.leafAppend = function(i) {
    var r = this.right.leafAppend(i);
    if (r)
      return new t(this.left, r);
  }, t.prototype.leafPrepend = function(i) {
    var r = this.left.leafPrepend(i);
    if (r)
      return new t(r, this.right);
  }, t.prototype.appendInner = function(i) {
    return this.left.depth >= Math.max(this.right.depth, i.depth) + 1 ? new t(this.left, new t(this.right, i)) : new t(this, i);
  }, t;
}(he);
const iC = 500;
class mn {
  constructor(t, e) {
    this.items = t, this.eventCount = e;
  }
  // Pop the latest event off the branch's history and apply it
  // to a document transform.
  popEvent(t, e) {
    if (this.eventCount == 0)
      return null;
    let i = this.items.length;
    for (; ; i--)
      if (this.items.get(i - 1).selection) {
        --i;
        break;
      }
    let r, s;
    e && (r = this.remapping(i, this.items.length), s = r.maps.length);
    let o = t.tr, a, l, c = [], u = [];
    return this.items.forEach((d, f) => {
      if (!d.step) {
        r || (r = this.remapping(i, f + 1), s = r.maps.length), s--, u.push(d);
        return;
      }
      if (r) {
        u.push(new An(d.map));
        let h = d.step.map(r.slice(s)), p;
        h && o.maybeStep(h).doc && (p = o.mapping.maps[o.mapping.maps.length - 1], c.push(new An(p, void 0, void 0, c.length + u.length))), s--, p && r.appendMap(p, s);
      } else
        o.maybeStep(d.step);
      if (d.selection)
        return a = r ? d.selection.map(r.slice(s)) : d.selection, l = new mn(this.items.slice(0, i).append(u.reverse().concat(c)), this.eventCount - 1), !1;
    }, this.items.length, 0), { remaining: l, transform: o, selection: a };
  }
  // Create a new branch with the given transform added.
  addTransform(t, e, i, r) {
    let s = [], o = this.eventCount, a = this.items, l = !r && a.length ? a.get(a.length - 1) : null;
    for (let u = 0; u < t.steps.length; u++) {
      let d = t.steps[u].invert(t.docs[u]), f = new An(t.mapping.maps[u], d, e), h;
      (h = l && l.merge(f)) && (f = h, u ? s.pop() : a = a.slice(0, a.length - 1)), s.push(f), e && (o++, e = void 0), r || (l = f);
    }
    let c = o - i.depth;
    return c > sC && (a = rC(a, c), o -= c), new mn(a.append(s), o);
  }
  remapping(t, e) {
    let i = new br();
    return this.items.forEach((r, s) => {
      let o = r.mirrorOffset != null && s - r.mirrorOffset >= t ? i.maps.length - r.mirrorOffset : void 0;
      i.appendMap(r.map, o);
    }, t, e), i;
  }
  addMaps(t) {
    return this.eventCount == 0 ? this : new mn(this.items.append(t.map((e) => new An(e))), this.eventCount);
  }
  // When the collab module receives remote changes, the history has
  // to know about those, so that it can adjust the steps that were
  // rebased on top of the remote changes, and include the position
  // maps for the remote changes in its array of items.
  rebased(t, e) {
    if (!this.eventCount)
      return this;
    let i = [], r = Math.max(0, this.items.length - e), s = t.mapping, o = t.steps.length, a = this.eventCount;
    this.items.forEach((f) => {
      f.selection && a--;
    }, r);
    let l = e;
    this.items.forEach((f) => {
      let h = s.getMirror(--l);
      if (h == null)
        return;
      o = Math.min(o, h);
      let p = s.maps[h];
      if (f.step) {
        let _ = t.steps[h].invert(t.docs[h]), g = f.selection && f.selection.map(s.slice(l + 1, h));
        g && a++, i.push(new An(p, _, g));
      } else
        i.push(new An(p));
    }, r);
    let c = [];
    for (let f = e; f < o; f++)
      c.push(new An(s.maps[f]));
    let u = this.items.slice(0, r).append(c).append(i), d = new mn(u, a);
    return d.emptyItemCount() > iC && (d = d.compress(this.items.length - i.length)), d;
  }
  emptyItemCount() {
    let t = 0;
    return this.items.forEach((e) => {
      e.step || t++;
    }), t;
  }
  // Compressing a branch means rewriting it to push the air (map-only
  // items) out. During collaboration, these naturally accumulate
  // because each remote change adds one. The `upto` argument is used
  // to ensure that only the items below a given level are compressed,
  // because `rebased` relies on a clean, untouched set of items in
  // order to associate old items with rebased steps.
  compress(t = this.items.length) {
    let e = this.remapping(0, t), i = e.maps.length, r = [], s = 0;
    return this.items.forEach((o, a) => {
      if (a >= t)
        r.push(o), o.selection && s++;
      else if (o.step) {
        let l = o.step.map(e.slice(i)), c = l && l.getMap();
        if (i--, c && e.appendMap(c, i), l) {
          let u = o.selection && o.selection.map(e.slice(i));
          u && s++;
          let d = new An(c.invert(), l, u), f, h = r.length - 1;
          (f = r.length && r[h].merge(d)) ? r[h] = f : r.push(d);
        }
      } else o.map && i--;
    }, this.items.length, 0), new mn(he.from(r.reverse()), s);
  }
}
mn.empty = new mn(he.empty, 0);
function rC(n, t) {
  let e;
  return n.forEach((i, r) => {
    if (i.selection && t-- == 0)
      return e = r, !1;
  }), n.slice(e);
}
class An {
  constructor(t, e, i, r) {
    this.map = t, this.step = e, this.selection = i, this.mirrorOffset = r;
  }
  merge(t) {
    if (this.step && t.step && !t.selection) {
      let e = t.step.merge(this.step);
      if (e)
        return new An(e.getMap().invert(), e, this.selection);
    }
  }
}
class ii {
  constructor(t, e, i, r, s) {
    this.done = t, this.undone = e, this.prevRanges = i, this.prevTime = r, this.prevComposition = s;
  }
}
const sC = 20;
function oC(n, t, e, i) {
  let r = e.getMeta(Jn), s;
  if (r)
    return r.historyState;
  e.getMeta(cC) && (n = new ii(n.done, n.undone, null, 0, -1));
  let o = e.getMeta("appendedTransaction");
  if (e.steps.length == 0)
    return n;
  if (o && o.getMeta(Jn))
    return o.getMeta(Jn).redo ? new ii(n.done.addTransform(e, void 0, i, Ko(t)), n.undone, ph(e.mapping.maps), n.prevTime, n.prevComposition) : new ii(n.done, n.undone.addTransform(e, void 0, i, Ko(t)), null, n.prevTime, n.prevComposition);
  if (e.getMeta("addToHistory") !== !1 && !(o && o.getMeta("addToHistory") === !1)) {
    let a = e.getMeta("composition"), l = n.prevTime == 0 || !o && n.prevComposition != a && (n.prevTime < (e.time || 0) - i.newGroupDelay || !aC(e, n.prevRanges)), c = o ? zl(n.prevRanges, e.mapping) : ph(e.mapping.maps);
    return new ii(n.done.addTransform(e, l ? t.selection.getBookmark() : void 0, i, Ko(t)), mn.empty, c, e.time, a ?? n.prevComposition);
  } else return (s = e.getMeta("rebased")) ? new ii(n.done.rebased(e, s), n.undone.rebased(e, s), zl(n.prevRanges, e.mapping), n.prevTime, n.prevComposition) : new ii(n.done.addMaps(e.mapping.maps), n.undone.addMaps(e.mapping.maps), zl(n.prevRanges, e.mapping), n.prevTime, n.prevComposition);
}
function aC(n, t) {
  if (!t)
    return !1;
  if (!n.docChanged)
    return !0;
  let e = !1;
  return n.mapping.maps[0].forEach((i, r) => {
    for (let s = 0; s < t.length; s += 2)
      i <= t[s + 1] && r >= t[s] && (e = !0);
  }), e;
}
function ph(n) {
  let t = [];
  for (let e = n.length - 1; e >= 0 && t.length == 0; e--)
    n[e].forEach((i, r, s, o) => t.push(s, o));
  return t;
}
function zl(n, t) {
  if (!n)
    return null;
  let e = [];
  for (let i = 0; i < n.length; i += 2) {
    let r = t.map(n[i], 1), s = t.map(n[i + 1], -1);
    r <= s && e.push(r, s);
  }
  return e;
}
function lC(n, t, e) {
  let i = Ko(t), r = Jn.get(t).spec.config, s = (e ? n.undone : n.done).popEvent(t, i);
  if (!s)
    return null;
  let o = s.selection.resolve(s.transform.doc), a = (e ? n.done : n.undone).addTransform(s.transform, t.selection.getBookmark(), r, i), l = new ii(e ? a : s.remaining, e ? s.remaining : a, null, 0, -1);
  return s.transform.setSelection(o).setMeta(Jn, { redo: e, historyState: l });
}
let Hl = !1, mh = null;
function Ko(n) {
  let t = n.plugins;
  if (mh != t) {
    Hl = !1, mh = t;
    for (let e = 0; e < t.length; e++)
      if (t[e].spec.historyPreserveItems) {
        Hl = !0;
        break;
      }
  }
  return Hl;
}
const Jn = new $e("history"), cC = new $e("closeHistory");
function uC(n = {}) {
  return n = {
    depth: n.depth || 100,
    newGroupDelay: n.newGroupDelay || 500
  }, new pe({
    key: Jn,
    state: {
      init() {
        return new ii(mn.empty, mn.empty, null, 0, -1);
      },
      apply(t, e, i) {
        return oC(e, i, t, n);
      }
    },
    config: n,
    props: {
      handleDOMEvents: {
        beforeinput(t, e) {
          let i = e.inputType, r = i == "historyUndo" ? Jg : i == "historyRedo" ? Xg : null;
          return r ? (e.preventDefault(), r(t.state, t.dispatch)) : !1;
        }
      }
    }
  });
}
function Gg(n, t) {
  return (e, i) => {
    let r = Jn.getState(e);
    if (!r || (n ? r.undone : r.done).eventCount == 0)
      return !1;
    if (i) {
      let s = lC(r, e, n);
      s && i(t ? s.scrollIntoView() : s);
    }
    return !0;
  };
}
const Jg = Gg(!1, !0), Xg = Gg(!0, !0);
function dC(n) {
  let t = Jn.getState(n);
  return t ? t.done.eventCount : 0;
}
function fC(n) {
  let t = Jn.getState(n);
  return t ? t.undone.eventCount : 0;
}
const hC = ee.create({
  name: "history",
  addOptions() {
    return {
      depth: 100,
      newGroupDelay: 500
    };
  },
  addCommands() {
    return {
      undo: () => ({ state: n, dispatch: t }) => Jg(n, t),
      redo: () => ({ state: n, dispatch: t }) => Xg(n, t)
    };
  },
  addProseMirrorPlugins() {
    return [
      uC(this.options)
    ];
  },
  addKeyboardShortcuts() {
    return {
      "Mod-z": () => this.editor.commands.undo(),
      "Shift-Mod-z": () => this.editor.commands.redo(),
      "Mod-y": () => this.editor.commands.redo(),
      // Russian keyboard layouts
      "Mod-я": () => this.editor.commands.undo(),
      "Shift-Mod-я": () => this.editor.commands.redo()
    };
  }
}), pC = hC.extend({
  addOptions() {
    var n;
    return {
      ...(n = this.parent) == null ? void 0 : n.call(this),
      registerShortcuts: !0
    };
  },
  addKeyboardShortcuts() {
    var n;
    return this.options.registerShortcuts ? ((n = this.parent) == null ? void 0 : n.call(this)) ?? {} : {};
  }
}), mC = /* @__PURE__ */ new Set([
  "onabortonblur",
  "oncancel",
  "oncanplay",
  "oncanplaythrough",
  "onchange",
  "onclick",
  "onclose",
  "oncontextmenu",
  "oncuechange",
  "ondblclick",
  "ondrag",
  "ondragend",
  "ondragenter",
  "ondragleave",
  "ondragover",
  "ondragstart",
  "ondrop",
  "ondurationchange",
  "onemptied",
  "onended",
  "onerror",
  "onfocus",
  "oninput",
  "oninvalid",
  "onkeydown",
  "onkeypress",
  "onkeyup",
  "onload",
  "onloadeddata",
  "onloadedmetadata",
  "onloadstart",
  "onmousedown",
  "onmousemove",
  "onmouseout",
  "onmouseover",
  "onmouseup",
  "onmousewheel",
  "onpause",
  "onplay",
  "onplaying",
  "onprogress",
  "onratechange",
  "onreset",
  "onscroll",
  "onseeked",
  "onseeking",
  "onseeking",
  "onselect",
  "onshow",
  "onstalled",
  "onsubmit",
  "onsuspend",
  "ontimeupdate",
  "onvolumechange",
  "onwaiting",
  "formaction",
  "action"
]), gC = ee.create({
  name: "mt-rich-text-editor-global",
  addGlobalAttributes() {
    return [
      {
        types: [
          "div",
          "pre",
          "code",
          "blockquote",
          "bulletList",
          "document",
          "embedObject",
          "hardBreak",
          "heading",
          "horizontalRule",
          "iframe",
          "image",
          "inlineLink",
          "listItem",
          "orderedList",
          "paragraph",
          "span",
          "textStyle",
          "script",
          "table",
          "tableRow",
          "tableCell",
          "tableHeader",
          "link",
          "blockLink",
          "descriptionList",
          "descriptionTerm",
          "descriptionDetails"
        ],
        attributes: {
          MTRichTextEditorHTMLAttributes: {
            default: {},
            parseHTML: (n) => {
              const t = {}, e = {};
              for (const i of n.attributes)
                /^data-mt-rich-text-editor-/.test(i.name) || (mC.has(i.name.toLowerCase()) ? e[i.name] = i.value : t[i.name] = i.value);
              return Object.keys(e).length > 0 && (t["data-mt-rich-text-editor-event-attributes"] = JSON.stringify(e)), t;
            },
            renderHTML: (n) => n.MTRichTextEditorHTMLAttributes
          }
        }
      }
    ];
  }
});
window.customElements.define(
  "mt-rich-text-editor-mt-function-tag",
  class extends HTMLElement {
    connectedCallback() {
      this.style.color = "#9333ea", this.style.fontFamily = "monospace";
      const n = ["data-tag-name", "contenteditable", "style", "class"], t = this.getAttribute("data-tag-name");
      if (!t)
        return;
      let e = "";
      Array.from(this.attributes).filter((i) => !n.includes(i.name)).forEach((i) => {
        e += ` ${i.name}="${i.value}"`;
      }), this.textContent = `<mt:${t}${e}>`;
    }
  }
);
const _C = Bt.create({
  name: "mt-rich-text-editor-mt-function-tag",
  group: "inline",
  inline: !0,
  atom: !0,
  addAttributes() {
    return {
      "data-tag-name": {
        default: null
      },
      HTMLAttributes: {
        default: {},
        parseHTML: (n) => {
          const t = {}, e = ["data-tag-name", "contenteditable", "style", "class"];
          return Array.from(n.attributes).filter((i) => !e.includes(i.name)).forEach((i) => {
            t[i.name] = i.value;
          }), t;
        },
        renderHTML: (n) => n.HTMLAttributes
      }
    };
  },
  addInputRules() {
    return [
      new Yi({
        find: /<\$?mt:?(var|include)([^>]*)\$?>$/i,
        handler: ({ state: n, range: t, match: e }) => {
          const r = new DOMParser().parseFromString(
            e[0].replace(/^<\$/, "<").replace(/\$>$/, ">"),
            "text/html"
          ).body.firstChild, s = {
            "data-tag-name": e[1],
            HTMLAttributes: {}
          };
          for (const a of r.attributes)
            a.name !== "data-tag-name" && (s.HTMLAttributes[a.name] = a.value);
          const o = this.type.create(s);
          n.tr.replaceWith(t.from, t.to, o);
        }
      })
    ];
  },
  parseHTML() {
    return [
      {
        tag: "mt-rich-text-editor-mt-function-tag",
        getAttrs: (n) => n instanceof HTMLElement ? {
          "data-tag-name": n.getAttribute("data-tag-name"),
          ...Object.fromEntries(
            Array.from(n.attributes).filter((t) => t.name !== "data-tag-name").map((t) => [t.name, t.value])
          )
        } : {}
      }
    ];
  },
  renderHTML({ HTMLAttributes: n }) {
    return ["mt-rich-text-editor-mt-function-tag", Mt(n)];
  }
}), bC = ee.create({
  name: "mt-rich-text-editor-group",
  addExtensions() {
    return [gC, _C];
  }
}), gh = {
  openOnClick: !1
}, yC = ee.create({
  name: "mt-rich-text-editor",
  addExtensions() {
    var t, e, i, r, s, o, a, l, c, u, d, f, h, p, _, g, m, y, x, k, S, w, O, v, E, b, T, M, F, D, U, q, Q, ut, rt, kt, st, Pt, ht, Yt, Ct, R, ne, mt, ie;
    const n = [];
    return this.options.movableType !== !1 && n.push(bC.configure((t = this.options) == null ? void 0 : t.movableType)), this.options.history !== !1 && n.push(pC.configure((e = this.options) == null ? void 0 : e.history)), this.options.document !== !1 && n.push(h2.configure((i = this.options) == null ? void 0 : i.document)), this.options.text !== !1 && n.push(p2.configure((r = this.options) == null ? void 0 : r.text)), this.options.subscript !== !1 && n.push(m2.configure((s = this.options) == null ? void 0 : s.subscript)), this.options.superscript !== !1 && n.push(g2.configure((o = this.options) == null ? void 0 : o.superscript)), this.options.image !== !1 && n.push(
      b2.configure(
        ((a = this.options) == null ? void 0 : a.image) ?? {
          inline: !0,
          allowBase64: !0
        }
      )
    ), this.options.hardBreak !== !1 && n.push(y2.configure((l = this.options) == null ? void 0 : l.hardBreak)), this.options.bold !== !1 && n.push(mS.configure((c = this.options) == null ? void 0 : c.bold)), this.options.italic !== !1 && n.push(S2.configure((u = this.options) == null ? void 0 : u.italic)), this.options.underline !== !1 && n.push(C2.configure((d = this.options) == null ? void 0 : d.underline)), this.options.strike !== !1 && n.push(D2.configure((f = this.options) == null ? void 0 : f.strike)), this.options.blockquote !== !1 && n.push(E2.configure((h = this.options) == null ? void 0 : h.blockquote)), this.options.table !== !1 && n.push(
      eS.configure(
        ((p = this.options) == null ? void 0 : p.table) ?? {
          resizable: !0
        }
      )
    ), this.options.tableRow !== !1 && n.push(oS.configure((_ = this.options) == null ? void 0 : _.tableRow)), this.options.tableHeader !== !1 && n.push(sS.configure((g = this.options) == null ? void 0 : g.tableHeader)), this.options.tableCell !== !1 && n.push(iS.configure((m = this.options) == null ? void 0 : m.tableCell)), this.options.bulletList !== !1 && n.push(M2.configure((y = this.options) == null ? void 0 : y.bulletList)), this.options.heading !== !1 && n.push(A2.configure((x = this.options) == null ? void 0 : x.heading)), this.options.horizontalRule !== !1 && n.push(N2.configure((k = this.options) == null ? void 0 : k.horizontalRule)), this.options.orderedList !== !1 && n.push(R2.configure((S = this.options) == null ? void 0 : S.orderedList)), this.options.dropcursor !== !1 && n.push(z2.configure((w = this.options) == null ? void 0 : w.dropcursor)), this.options.gapcursor !== !1 && n.push(q2.configure((O = this.options) == null ? void 0 : O.gapcursor)), this.options.textAlign !== !1 && n.push(
      G2.configure(
        ((v = this.options) == null ? void 0 : v.textAlign) ?? {
          types: ["heading", "paragraph"],
          defaultAlignment: ""
        }
      )
    ), this.options.color !== !1 && n.push(X2.configure((E = this.options) == null ? void 0 : E.color)), this.options.textStyle !== !1 && n.push(J2.configure((b = this.options) == null ? void 0 : b.textStyle)), this.options.iframe !== !1 && n.push(Y2.configure((T = this.options) == null ? void 0 : T.iframe)), this.options.indent !== !1 && n.push(aS.configure((M = this.options) == null ? void 0 : M.indent)), this.options.paragraph !== !1 && n.push(VS.configure((F = this.options) == null ? void 0 : F.paragraph)), this.options.textBlock !== !1 && n.push(jS.configure((D = this.options) == null ? void 0 : D.textBlock)), this.options.pre !== !1 && n.push(WS.configure((U = this.options) == null ? void 0 : U.pre)), this.options.code !== !1 && n.push(US.configure((q = this.options) == null ? void 0 : q.code)), this.options.descriptionList !== !1 && n.push(KS.configure((Q = this.options) == null ? void 0 : Q.descriptionList)), this.options.descriptionTerm !== !1 && n.push(qS.configure((ut = this.options) == null ? void 0 : ut.descriptionTerm)), this.options.descriptionDetails !== !1 && n.push(GS.configure((rt = this.options) == null ? void 0 : rt.descriptionDetails)), this.options.summary !== !1 && n.push(JS.configure((kt = this.options) == null ? void 0 : kt.summary)), this.options.listItem !== !1 && n.push(YS.configure((st = this.options) == null ? void 0 : st.listItem)), this.options.div !== !1 && n.push(lS.configure((Pt = this.options) == null ? void 0 : Pt.div)), this.options.span !== !1 && n.push(cS.configure((ht = this.options) == null ? void 0 : ht.span)), this.options.inlineLink !== !1 && n.push(HS.configure(((Yt = this.options) == null ? void 0 : Yt.inlineLink) ?? gh)), this.options.blockLink !== !1 && n.push(gS.configure(((Ct = this.options) == null ? void 0 : Ct.blockLink) ?? gh)), this.options.backgroundColor !== !1 && n.push(ZS.configure((R = this.options) == null ? void 0 : R.backgroundColor)), this.options.script !== !1 && n.push(QS.configure((ne = this.options) == null ? void 0 : ne.script)), this.options.embedObject !== !1 && n.push(tC.configure((mt = this.options) == null ? void 0 : mt.embedObject)), this.options.markdown !== !1 && n.push(eC.configure((ie = this.options) == null ? void 0 : ie.markdown)), n;
  }
});
function de(n, t, e = !1) {
  zt && Fi();
  var i = n, r = null, s = null, o = f0, a = e ? ru : 0, l = !1;
  const c = (d, f = !0) => {
    l = !0, u(f, d);
  }, u = (d, f) => {
    if (o === (o = d)) return;
    let h = !1;
    if (zt) {
      const p = (
        /** @type {Comment} */
        i.data === gp
      );
      !!o === p && (i = dc(), Ii(i), Pi(!1), h = !0);
    }
    o ? (r ? Es(r) : f && (r = Lr(() => f(i))), s && Go(s, () => {
      s = null;
    })) : (s ? Es(s) : f && (s = Lr(() => f(i))), r && Go(r, () => {
      r = null;
    })), h && Pi(!0);
  };
  Va(() => {
    l = !1, t(c), l || u(null, null);
  }, a), zt && (i = pn);
}
function gn(n, t) {
  return t;
}
function vC(n, t, e, i) {
  for (var r = [], s = t.length, o = 0; o < s; o++)
    p0(t[o].e, r, !0);
  var a = s > 0 && r.length === 0 && e !== null;
  if (a) {
    var l = (
      /** @type {Element} */
      /** @type {Element} */
      e.parentNode
    );
    m0(l), l.append(
      /** @type {Element} */
      e
    ), i.clear(), ri(n, t[0].prev, t[s - 1].next);
  }
  g0(r, () => {
    for (var c = 0; c < s; c++) {
      var u = t[c];
      a || (i.delete(u.k), ri(n, u.prev, u.next)), cu(u.e, !a);
    }
  });
}
function re(n, t, e, i, r, s = null) {
  var o = n, a = { flags: t, items: /* @__PURE__ */ new Map(), first: null }, l = (t & bp) !== 0;
  if (l) {
    var c = (
      /** @type {Element} */
      n
    );
    o = zt ? Ii(
      /** @type {Comment | Text} */
      uu(c)
    ) : c.appendChild(_p());
  }
  zt && Fi();
  var u = null, d = !1;
  Va(() => {
    var f = e(), h = su(f) ? f : f == null ? [] : yp(f), p = h.length;
    if (d && p === 0)
      return;
    d = p === 0;
    let _ = !1;
    if (zt) {
      var g = (
        /** @type {Comment} */
        o.data === gp
      );
      g !== (p === 0) && (o = dc(), Ii(o), Pi(!1), _ = !0);
    }
    if (zt) {
      for (var m = null, y, x = 0; x < p; x++) {
        if (pn.nodeType === 8 && /** @type {Comment} */
        pn.data === y0) {
          o = /** @type {Comment} */
          pn, _ = !0, Pi(!1);
          break;
        }
        var k = h[x], S = i(k, x);
        y = Yg(
          pn,
          a,
          m,
          null,
          k,
          S,
          x,
          r,
          t,
          e
        ), a.items.set(S, y), m = y;
      }
      p > 0 && Ii(dc());
    }
    if (!zt) {
      var w = (
        /** @type {Effect} */
        vp
      );
      xC(
        h,
        a,
        o,
        r,
        t,
        (w.f & zo) !== 0,
        i,
        e
      );
    }
    s !== null && (p === 0 ? u ? Es(u) : u = Lr(() => s(o)) : u !== null && Go(u, () => {
      u = null;
    })), _ && Pi(!0), e();
  }), zt && (o = pn);
}
function xC(n, t, e, i, r, s, o, a) {
  var U, q, Q, ut;
  var l = (r & _0) !== 0, c = (r & (au | lu)) !== 0, u = n.length, d = t.items, f = t.first, h = f, p, _ = null, g, m = [], y = [], x, k, S, w;
  if (l)
    for (w = 0; w < u; w += 1)
      x = n[w], k = o(x, w), S = d.get(k), S !== void 0 && ((U = S.a) == null || U.measure(), (g ?? (g = /* @__PURE__ */ new Set())).add(S));
  for (w = 0; w < u; w += 1) {
    if (x = n[w], k = o(x, w), S = d.get(k), S === void 0) {
      var O = h ? (
        /** @type {TemplateNode} */
        h.e.nodes_start
      ) : e;
      _ = Yg(
        O,
        t,
        _,
        _ === null ? t.first : _.next,
        x,
        k,
        w,
        i,
        r,
        a
      ), d.set(k, _), m = [], y = [], h = _.next;
      continue;
    }
    if (c && wC(S, x, w, r), S.e.f & zo && (Es(S.e), l && ((q = S.a) == null || q.unfix(), (g ?? (g = /* @__PURE__ */ new Set())).delete(S))), S !== h) {
      if (p !== void 0 && p.has(S)) {
        if (m.length < y.length) {
          var v = y[0], E;
          _ = v.prev;
          var b = m[0], T = m[m.length - 1];
          for (E = 0; E < m.length; E += 1)
            _h(m[E], v, e);
          for (E = 0; E < y.length; E += 1)
            p.delete(y[E]);
          ri(t, b.prev, T.next), ri(t, _, b), ri(t, T, v), h = v, _ = T, w -= 1, m = [], y = [];
        } else
          p.delete(S), _h(S, h, e), ri(t, S.prev, S.next), ri(t, S, _ === null ? t.first : _.next), ri(t, _, S), _ = S;
        continue;
      }
      for (m = [], y = []; h !== null && h.k !== k; )
        (s || !(h.e.f & zo)) && (p ?? (p = /* @__PURE__ */ new Set())).add(h), y.push(h), h = h.next;
      if (h === null)
        continue;
      S = h;
    }
    m.push(S), _ = S, h = S.next;
  }
  if (h !== null || p !== void 0) {
    for (var M = p === void 0 ? [] : yp(p); h !== null; )
      (s || !(h.e.f & zo)) && M.push(h), h = h.next;
    var F = M.length;
    if (F > 0) {
      var D = r & bp && u === 0 ? e : null;
      if (l) {
        for (w = 0; w < F; w += 1)
          (Q = M[w].a) == null || Q.measure();
        for (w = 0; w < F; w += 1)
          (ut = M[w].a) == null || ut.fix();
      }
      vC(t, M, D, d);
    }
  }
  l && ou(() => {
    var rt;
    if (g !== void 0)
      for (S of g)
        (rt = S.a) == null || rt.apply();
  }), Os.first = t.first && t.first.e, Os.last = _ && _.e;
}
function wC(n, t, e, i) {
  i & au && yd(n.v, t), i & lu ? yd(
    /** @type {Value<number>} */
    n.i,
    e
  ) : n.i = e;
}
function Yg(n, t, e, i, r, s, o, a, l, c) {
  var u = (l & au) !== 0, d = (l & b0) === 0, f = u ? d ? h0(r) : vd(r) : r, h = l & lu ? vd(o) : o;
  Vi && u && (f.debug = () => {
    var _ = typeof h == "number" ? o : h.v;
    c()[_];
  });
  var p = {
    i: h,
    v: f,
    k: s,
    a: null,
    // @ts-expect-error
    e: null,
    prev: e,
    next: i
  };
  try {
    return p.e = Lr(() => a(n, f, h), zt), p.e.prev = e && e.e, p.e.next = i && i.e, e === null ? t.first = p : (e.next = p, e.e.next = p.e), i !== null && (i.prev = p, i.e.prev = p.e), p;
  } finally {
  }
}
function _h(n, t, e) {
  for (var i = n.next ? (
    /** @type {TemplateNode} */
    n.next.e.nodes_start
  ) : e, r = t ? (
    /** @type {TemplateNode} */
    t.e.nodes_start
  ) : e, s = (
    /** @type {TemplateNode} */
    n.e.nodes_start
  ); s !== i; ) {
    var o = (
      /** @type {TemplateNode} */
      xp(s)
    );
    r.before(s), s = o;
  }
}
function ri(n, t, e) {
  t === null ? n.first = e : (t.next = e, t.e.next = e && e.e), e !== null && (e.prev = t, e.e.prev = t && t.e);
}
function kC(n, t, e) {
  var s, o;
  if (!t || t === k0(String(e ?? ""))) return;
  let i;
  const r = (s = n.__svelte_meta) == null ? void 0 : s.loc;
  r ? i = `near ${r.file}:${r.line}:${r.column}` : (o = xd) != null && o[hc] && (i = `in ${xd[hc]}`), S0(C0(i));
}
function je(n, t, e, i, r) {
  var s = n, o = "", a;
  Va(() => {
    if (o === (o = t() ?? "")) {
      zt && Fi();
      return;
    }
    a !== void 0 && (cu(a), a = void 0), o !== "" && (a = Lr(() => {
      if (zt) {
        for (var l = (
          /** @type {Comment} */
          pn.data
        ), c = Fi(), u = c; c !== null && (c.nodeType !== 8 || /** @type {Comment} */
        c.data !== ""); )
          u = c, c = /** @type {TemplateNode} */
          xp(c);
        if (c === null)
          throw v0(), x0;
        Vi && !r && kC(
          /** @type {Element} */
          c.parentNode,
          l,
          o
        ), fc(pn, u), s = Ii(c);
        return;
      }
      var d = o + "", f = w0(d);
      fc(
        /** @type {TemplateNode} */
        uu(f),
        /** @type {TemplateNode} */
        f.lastChild
      ), s.before(f);
    }));
  });
}
function wr(n, t, e, i, r) {
  var a;
  zt && Fi();
  var s = (a = t.$$slots) == null ? void 0 : a[e], o = !1;
  s === !0 && (s = t[e === "default" ? "children" : e], o = !0), s === void 0 || s(n, o ? () => i : i);
}
function SC(n) {
  const t = {};
  n.children && (t.default = !0);
  for (const e in n.$$slots)
    t[e] = !0;
  return t;
}
function oo(n, t, e, i, r, s) {
  var h;
  let o = zt;
  zt && Fi();
  var a = Vi && s && ((h = pr) == null ? void 0 : h.function[hc]), l, c, u = null;
  zt && pn.nodeType === 1 && (u = /** @type {Element} */
  pn, Fi());
  var d = (
    /** @type {TemplateNode} */
    zt ? pn : n
  ), f;
  Va(() => {
    const p = t() || null;
    var _ = p === "svg" ? Vr : null;
    p !== l && (f && (p === null ? Go(f, () => {
      f = null, c = null;
    }) : p === c ? Es(f) : (cu(f), wd(!1))), p && p !== c && (f = Lr(() => {
      if (u = zt ? (
        /** @type {Element} */
        u
      ) : _ ? document.createElementNS(_, p) : document.createElement(p), Vi && s && (u.__svelte_meta = {
        loc: {
          file: a,
          line: s[0],
          column: s[1]
        }
      }), fc(u, u), i) {
        zt && T0(p) && u.append(document.createComment(""));
        var g = (
          /** @type {TemplateNode} */
          zt ? uu(u) : u.appendChild(_p())
        );
        zt && (g === null ? Pi(!1) : Ii(g)), i(u, g);
      }
      Os.nodes_end = u, d.before(u);
    })), l = p, l && (c = l), wd(!0));
  }, ru), o && (Pi(!0), Ii(d));
}
function Oe(n, t, e) {
  Js(() => {
    var i = Ji(() => t(n, e == null ? void 0 : e()) || {});
    if (e && (i != null && i.update)) {
      var r = !1, s = (
        /** @type {any} */
        {}
      );
      ja(() => {
        var o = e();
        Wa(o), r && E0(s, o) && (s = o, i.update(o));
      }), r = !0;
    }
    if (i != null && i.destroy)
      return () => (
        /** @type {Function} */
        i.destroy()
      );
  });
}
function se(n) {
  if (zt) {
    var t = !1, e = () => {
      if (!t) {
        if (t = !0, n.hasAttribute("value")) {
          var i = n.value;
          Ot(n, "value", null), n.value = i;
        }
        if (n.hasAttribute("checked")) {
          var r = n.checked;
          Ot(n, "checked", null), n.checked = r;
        }
      }
    };
    n.__on_r = e, L0(e), R0();
  }
}
function bh(n, t) {
  var e = n.__attributes ?? (n.__attributes = {});
  e.checked !== (e.checked = // treat null and undefined the same for the initial value
  t ?? void 0) && (n.checked = t);
}
function CC(n, t) {
  t ? n.hasAttribute("selected") || n.setAttribute("selected", "") : n.removeAttribute("selected");
}
function Ot(n, t, e, i) {
  var r = n.__attributes ?? (n.__attributes = {});
  if (zt && (r[t] = n.getAttribute(t), t === "src" || t === "srcset" || t === "href" && n.nodeName === "LINK")) {
    Qg(n, t, e ?? "");
    return;
  }
  r[t] !== (r[t] = e) && (t === "style" && "__styles" in n && (n.__styles = {}), t === "loading" && (n[O0] = e), e == null ? n.removeAttribute(t) : typeof e != "string" && Zg(n).includes(t) ? n[t] = e : n.setAttribute(t, e));
}
function ao(n, t, e, i, r = !1, s = !1, o = !1) {
  var a = t || {}, l = n.tagName === "OPTION";
  for (var c in t)
    c in e || (e[c] = null);
  i !== void 0 && (e.class = e.class ? e.class + " " + i : i);
  var u = Zg(n), d = (
    /** @type {Record<string, unknown>} **/
    n.__attributes ?? (n.__attributes = {})
  );
  for (const m in e) {
    let y = e[m];
    if (l && m === "value" && y == null) {
      n.value = n.__value = "", a[m] = y;
      continue;
    }
    var f = a[m];
    if (y !== f) {
      a[m] = y;
      var h = m[0] + m[1];
      if (h !== "$$") {
        if (h === "on") {
          const x = {}, k = "$$" + m;
          let S = m.slice(2);
          var p = B0(S);
          if (I0(S) && (S = S.slice(0, -7), x.capture = !0), !p && f) {
            if (y != null) continue;
            n.removeEventListener(S, a[k], x), a[k] = null;
          }
          if (y != null)
            if (p)
              n[`__${S}`] = y, Ce([S]);
            else {
              let w = function(O) {
                a[m].call(this, O);
              };
              a[k] = P0(S, n, w, x);
            }
          else p && (n[`__${S}`] = void 0);
        } else if (m === "style" && y != null)
          n.style.cssText = y + "";
        else if (m === "autofocus")
          D0(
            /** @type {HTMLElement} */
            n,
            !!y
          );
        else if (m === "__value" || m === "value" && y != null)
          n.value = n[m] = n.__value = y;
        else if (m === "selected" && l)
          CC(
            /** @type {HTMLOptionElement} */
            n,
            y
          );
        else {
          var _ = m;
          r || (_ = $0(_));
          var g = _ === "defaultValue" || _ === "defaultChecked";
          if (y == null && !s && !g)
            if (d[m] = null, _ === "value" || _ === "checked") {
              let x = (
                /** @type {HTMLInputElement} */
                n
              );
              if (_ === "value") {
                let k = x.defaultValue;
                x.removeAttribute(_), x.defaultValue = k;
              } else {
                let k = x.defaultChecked;
                x.removeAttribute(_), x.defaultChecked = k;
              }
            } else
              n.removeAttribute(m);
          else g || u.includes(_) && (s || typeof y != "string") ? n[_] = y : typeof y != "function" && (zt && (_ === "src" || _ === "href" || _ === "srcset") ? o || Qg(n, _, y ?? "") : Ot(n, _, y));
        }
        m === "style" && "__styles" in n && (n.__styles = {});
      }
    }
  }
  return a;
}
var yh = /* @__PURE__ */ new Map();
function Zg(n) {
  var t = yh.get(n.nodeName);
  if (t) return t;
  yh.set(n.nodeName, t = []);
  for (var e, i = n, r = Element.prototype; r !== i; ) {
    e = A0(i);
    for (var s in e)
      e[s].set && t.push(s);
    i = M0(i);
  }
  return t;
}
function Qg(n, t, e) {
  Vi && (t === "srcset" && TC(n, e) || Zc(n.getAttribute(t) ?? "", e) || N0(
    t,
    n.outerHTML.replace(n.innerHTML, n.innerHTML && "..."),
    String(e)
  ));
}
function Zc(n, t) {
  return n === t ? !0 : new URL(n, document.baseURI).href === new URL(t, document.baseURI).href;
}
function vh(n) {
  return n.split(",").map((t) => t.trim().split(" ").filter(Boolean));
}
function TC(n, t) {
  var e = vh(n.srcset), i = vh(t);
  return i.length === e.length && i.every(
    ([r, s], o) => s === e[o][1] && // We need to test both ways because Vite will create an a full URL with
    // `new URL(asset, import.meta.url).href` for the client when `base: './'`, and the
    // relative URLs inside srcset are not automatically resolved to absolute URLs by
    // browsers (in contrast to img.src). This means both SSR and DOM code could
    // contain relative or absolute URLs.
    (Zc(e[o][0], r) || Zc(r, e[o][0]))
  );
}
function Gi(n, t) {
  var e = n.__className, i = EC(t);
  zt && n.className === i ? n.__className = i : (e !== i || zt && n.className !== i) && (t == null ? n.removeAttribute("class") : n.className = i, n.__className = i);
}
function EC(n) {
  return n ?? "";
}
function _i(n, t, e) {
  if (e) {
    if (n.classList.contains(t)) return;
    n.classList.add(t);
  } else {
    if (!n.classList.contains(t)) return;
    n.classList.remove(t);
  }
}
const OC = () => performance.now(), Kn = {
  // don't access requestAnimationFrame eagerly outside method
  // this allows basic testing of user code without JSDOM
  // bunder will eval and remove ternary when the user's app is built
  tick: (
    /** @param {any} _ */
    (n) => requestAnimationFrame(n)
  ),
  now: () => OC(),
  tasks: /* @__PURE__ */ new Set()
};
function t_() {
  const n = Kn.now();
  Kn.tasks.forEach((t) => {
    t.c(n) || (Kn.tasks.delete(t), t.f());
  }), Kn.tasks.size !== 0 && Kn.tick(t_);
}
function MC(n) {
  let t;
  return Kn.tasks.size === 0 && Kn.tick(t_), {
    promise: new Promise((e) => {
      Kn.tasks.add(t = { c: n, f: e });
    }),
    abort() {
      Kn.tasks.delete(t);
    }
  };
}
function Oo(n, t) {
  n.dispatchEvent(new CustomEvent(t));
}
function AC(n) {
  if (n === "float") return "cssFloat";
  if (n === "offset") return "cssOffset";
  if (n.startsWith("--")) return n;
  const t = n.split("-");
  return t.length === 1 ? t[0] : t[0] + t.slice(1).map(
    /** @param {any} word */
    (e) => e[0].toUpperCase() + e.slice(1)
  ).join("");
}
function xh(n) {
  const t = {}, e = n.split(";");
  for (const i of e) {
    const [r, s] = i.split(":");
    if (!r || s === void 0) break;
    const o = AC(r.trim());
    t[o] = s.trim();
  }
  return t;
}
const NC = (n) => n;
function Mo(n, t, e, i) {
  var r = (n & V0) !== 0, s = (n & W0) !== 0, o = r && s, a = (n & U0) !== 0, l = o ? "both" : r ? "in" : "out", c, u = t.inert, d, f;
  function h() {
    var y = vp, x = Os;
    kd(null), Sd(null);
    try {
      return c ?? (c = e()(t, (i == null ? void 0 : i()) ?? /** @type {P} */
      {}, {
        direction: l
      }));
    } finally {
      kd(y), Sd(x);
    }
  }
  var p = {
    is_global: a,
    in() {
      var y;
      if (t.inert = u, !r) {
        f == null || f.abort(), (y = f == null ? void 0 : f.reset) == null || y.call(f);
        return;
      }
      s || d == null || d.abort(), Oo(t, "introstart"), d = Qc(t, h(), f, 1, () => {
        Oo(t, "introend"), d == null || d.abort(), d = c = void 0;
      });
    },
    out(y) {
      if (!s) {
        y == null || y(), c = void 0;
        return;
      }
      t.inert = !0, Oo(t, "outrostart"), f = Qc(t, h(), d, 0, () => {
        Oo(t, "outroend"), y == null || y();
      });
    },
    stop: () => {
      d == null || d.abort(), f == null || f.abort();
    }
  }, _ = (
    /** @type {Effect} */
    Os
  );
  if ((_.transitions ?? (_.transitions = [])).push(p), r && z0) {
    var g = a;
    if (!g) {
      for (var m = (
        /** @type {Effect | null} */
        _.parent
      ); m && m.f & ru; )
        for (; (m = m.parent) && !(m.f & H0); )
          ;
      g = !m || (m.f & F0) !== 0;
    }
    g && Js(() => {
      Ji(() => p.in());
    });
  }
}
function Qc(n, t, e, i, r) {
  var s = i === 1;
  if (j0(t)) {
    var o, a = !1;
    return ou(() => {
      if (!a) {
        var g = t({ direction: s ? "in" : "out" });
        o = Qc(n, g, e, i, r);
      }
    }), {
      abort: () => {
        a = !0, o == null || o.abort();
      },
      deactivate: () => o.deactivate(),
      reset: () => o.reset(),
      t: () => o.t()
    };
  }
  if (e == null || e.deactivate(), !(t != null && t.duration))
    return r(), {
      abort: Xr,
      deactivate: Xr,
      reset: Xr,
      t: () => i
    };
  const { delay: l = 0, css: c, tick: u, easing: d = NC } = t;
  var f = [];
  if (s && e === void 0 && (u && u(0, 1), c)) {
    var h = xh(c(0, 1));
    f.push(h, h);
  }
  var p = () => 1 - i, _ = n.animate(f, { duration: l });
  return _.onfinish = () => {
    var g = (e == null ? void 0 : e.t()) ?? 1 - i;
    e == null || e.abort();
    var m = i - g, y = (
      /** @type {number} */
      t.duration * Math.abs(m)
    ), x = [];
    if (y > 0) {
      if (c)
        for (var k = Math.ceil(y / 16.666666666666668), S = 0; S <= k; S += 1) {
          var w = g + m * d(S / k), O = c(w, 1 - w);
          x.push(xh(O));
        }
      p = () => {
        var v = (
          /** @type {number} */
          /** @type {globalThis.Animation} */
          _.currentTime
        );
        return g + m * d(v / y);
      }, u && MC(() => {
        if (_.playState !== "running") return !1;
        var v = p();
        return u(v, 1 - v), !0;
      });
    }
    _ = n.animate(x, { duration: y, fill: "forwards" }), _.onfinish = () => {
      p = () => i, u == null || u(i, 1 - i), r();
    };
  }, {
    abort: () => {
      _ && (_.cancel(), _.effect = null, _.onfinish = Xr);
    },
    deactivate: () => {
      r = Xr;
    },
    reset: () => {
      i === 0 && (u == null || u(1, 0));
    },
    t: () => p()
  };
}
function ye(n, t, e = t) {
  var i = K0();
  du(n, "input", (r) => {
    Vi && n.type === "checkbox" && Cd();
    var s = r ? n.defaultValue : n.value;
    if (s = Fl(n) ? Vl(s) : s, e(s), i && s !== (s = t())) {
      var o = n.selectionStart, a = n.selectionEnd;
      n.value = s ?? "", a !== null && (n.selectionStart = o, n.selectionEnd = Math.min(a, n.value.length));
    }
  }), // If we are hydrating and the value has since changed,
  // then use the updated value from the input instead.
  (zt && n.defaultValue !== n.value || // If defaultValue is set, then value == defaultValue
  // TODO Svelte 6: remove input.value check and set to empty string?
  Ji(t) == null && n.value) && e(Fl(n) ? Vl(n.value) : n.value), ja(() => {
    Vi && n.type === "checkbox" && Cd();
    var r = t();
    Fl(n) && r === Vl(n.value) || n.type === "date" && !r && !n.value || r !== n.value && (n.value = r ?? "");
  });
}
function wh(n, t, e = t) {
  du(n, "change", (i) => {
    var r = i ? n.defaultChecked : n.checked;
    e(r);
  }), // If we are hydrating and the value has since changed,
  // then use the update value from the input instead.
  (zt && n.defaultChecked !== n.checked || // If defaultChecked is set, then checked == defaultChecked
  Ji(t) == null) && e(n.checked), ja(() => {
    var i = t();
    n.checked = !!i;
  });
}
function Fl(n) {
  var t = n.type;
  return t === "number" || t === "range";
}
function Vl(n) {
  return n === "" ? null : +n;
}
function e_(n, t, e) {
  if (n.multiple)
    return RC(n, t);
  for (var i of n.options) {
    var r = Ts(i);
    if (q0(r, t)) {
      i.selected = !0;
      return;
    }
  }
  (!e || t !== void 0) && (n.selectedIndex = -1);
}
function LC(n, t) {
  Js(() => {
    var e = new MutationObserver(() => {
      var i = n.__value;
      e_(n, i);
    });
    return e.observe(n, {
      // Listen to option element changes
      childList: !0,
      subtree: !0,
      // because of <optgroup>
      // Listen to option element value attribute changes
      // (doesn't get notified of select value changes,
      // because that property is not reflected as an attribute)
      attributes: !0,
      attributeFilter: ["value"]
    }), () => {
      e.disconnect();
    };
  });
}
function hr(n, t, e = t) {
  var i = !0;
  du(n, "change", (r) => {
    var s = r ? "[selected]" : ":checked", o;
    if (n.multiple)
      o = [].map.call(n.querySelectorAll(s), Ts);
    else {
      var a = n.querySelector(s) ?? // will fall back to first non-disabled option if no option is selected
      n.querySelector("option:not([disabled])");
      o = a && Ts(a);
    }
    e(o);
  }), Js(() => {
    var r = t();
    if (e_(n, r, i), i && r === void 0) {
      var s = n.querySelector(":checked");
      s !== null && (r = Ts(s), e(r));
    }
    n.__value = r, i = !1;
  }), LC(n);
}
function RC(n, t) {
  for (var e of n.options)
    e.selected = ~t.indexOf(Ts(e));
}
function Ts(n) {
  return "__value" in n ? n.__value : n.value;
}
function kh(n, t) {
  return n === t || (n == null ? void 0 : n[G0]) === t;
}
function Xt(n = {}, t, e, i) {
  return Js(() => {
    var r, s;
    return ja(() => {
      r = s, s = [], Ji(() => {
        n !== e(...s) && (t(n, ...s), r && kh(e(...r), n) && t(null, ...r));
      });
    }), () => {
      ou(() => {
        s && kh(e(...s), n) && t(null, ...s);
      });
    };
  }), n;
}
function Ao(n) {
  return function(...t) {
    var e = (
      /** @type {Event} */
      t[0]
    );
    return e.preventDefault(), n == null ? void 0 : n.apply(this, t);
  };
}
function lo(n = !1) {
  const t = (
    /** @type {ComponentContextLegacy} */
    pr
  ), e = t.l.u;
  if (!e) return;
  let i = () => Wa(t.s);
  if (n) {
    let r = 0, s = (
      /** @type {Record<string, any>} */
      {}
    );
    const o = Ms(() => {
      let a = !1;
      const l = t.s;
      for (const c in l)
        l[c] !== s[c] && (s[c] = l[c], a = !0);
      return a && r++, r;
    });
    i = () => C(o);
  }
  e.b.length && J0(() => {
    Sh(t, i), Td(e.b);
  }), $t(() => {
    const r = Ji(() => e.m.map(X0));
    return () => {
      for (const s of r)
        typeof s == "function" && s();
    };
  }), e.a.length && $t(() => {
    Sh(t, i), Td(e.a);
  });
}
function Sh(n, t) {
  if (n.l.s)
    for (const e of n.l.s) C(e);
  t();
}
function Xu(n, t) {
  var s;
  var e = (
    /** @type {Record<string, Function[] | Function>} */
    (s = n.$$events) == null ? void 0 : s[t.type]
  ), i = su(e) ? e.slice() : e == null ? [] : [e];
  for (var r of i)
    r.call(this, t);
}
function n_(n) {
  pr === null && wp("onMount"), Y0 && pr.l !== null ? PC(pr).m.push(n) : $t(() => {
    const t = Ji(n);
    if (typeof t == "function") return (
      /** @type {() => void} */
      t
    );
  });
}
function IC(n, t, { bubbles: e = !1, cancelable: i = !1 } = {}) {
  return new CustomEvent(n, { detail: t, bubbles: e, cancelable: i });
}
function i_() {
  const n = pr;
  return n === null && wp("createEventDispatcher"), (t, e, i) => {
    var s;
    const r = (
      /** @type {Record<string, Function | Function[]>} */
      (s = n.s.$$events) == null ? void 0 : s[
        /** @type {any} */
        t
      ]
    );
    if (r) {
      const o = su(r) ? r.slice() : [r], a = IC(
        /** @type {string} */
        t,
        e,
        i
      );
      for (const l of o)
        l.call(n.x, a);
      return !a.defaultPrevented;
    }
    return !0;
  };
}
function PC(n) {
  var t = (
    /** @type {ComponentContextLegacy} */
    n.l
  );
  return t.u ?? (t.u = { a: [], b: [], m: [] });
}
const r_ = (n, t) => {
  let e;
  return (...i) => {
    clearTimeout(e), e = setTimeout(() => n(...i), t);
  };
};
var Ch = typeof globalThis < "u" ? globalThis : typeof window < "u" ? window : typeof global < "u" ? global : typeof self < "u" ? self : {};
function DC(n) {
  return n && n.__esModule && Object.prototype.hasOwnProperty.call(n, "default") ? n.default : n;
}
var hs = { exports: {} };
/*!
 * Platform.js v1.3.6
 * Copyright 2014-2020 Benjamin Tan
 * Copyright 2011-2013 John-David Dalton
 * Available under MIT license
 */
var $C = hs.exports, Th;
function BC() {
  return Th || (Th = 1, function(n, t) {
    (function() {
      var e = {
        function: !0,
        object: !0
      }, i = e[typeof window] && window || this, r = t, s = n && !n.nodeType && n, o = r && s && typeof Ch == "object" && Ch;
      o && (o.global === o || o.window === o || o.self === o) && (i = o);
      var a = Math.pow(2, 53) - 1, l = /\bOpera/, c = Object.prototype, u = c.hasOwnProperty, d = c.toString;
      function f(v) {
        return v = String(v), v.charAt(0).toUpperCase() + v.slice(1);
      }
      function h(v, E, b) {
        var T = {
          "10.0": "10",
          "6.4": "10 Technical Preview",
          "6.3": "8.1",
          "6.2": "8",
          "6.1": "Server 2008 R2 / 7",
          "6.0": "Server 2008 / Vista",
          "5.2": "Server 2003 / XP 64-bit",
          "5.1": "XP",
          "5.01": "2000 SP1",
          "5.0": "2000",
          "4.0": "NT",
          "4.90": "ME"
        };
        return E && b && /^Win/i.test(v) && !/^Windows Phone /i.test(v) && (T = T[/[\d.]+$/.exec(v)]) && (v = "Windows " + T), v = String(v), E && b && (v = v.replace(RegExp(E, "i"), b)), v = _(
          v.replace(/ ce$/i, " CE").replace(/\bhpw/i, "web").replace(/\bMacintosh\b/, "Mac OS").replace(/_PowerPC\b/i, " OS").replace(/\b(OS X) [^ \d]+/i, "$1").replace(/\bMac (OS X)\b/, "$1").replace(/\/(\d)/, " $1").replace(/_/g, ".").replace(/(?: BePC|[ .]*fc[ \d.]+)$/i, "").replace(/\bx86\.64\b/gi, "x86_64").replace(/\b(Windows Phone) OS\b/, "$1").replace(/\b(Chrome OS \w+) [\d.]+\b/, "$1").split(" on ")[0]
        ), v;
      }
      function p(v, E) {
        var b = -1, T = v ? v.length : 0;
        if (typeof T == "number" && T > -1 && T <= a)
          for (; ++b < T; )
            E(v[b], b, v);
        else
          g(v, E);
      }
      function _(v) {
        return v = S(v), /^(?:webOS|i(?:OS|P))/.test(v) ? v : f(v);
      }
      function g(v, E) {
        for (var b in v)
          u.call(v, b) && E(v[b], b, v);
      }
      function m(v) {
        return v == null ? f(v) : d.call(v).slice(8, -1);
      }
      function y(v, E) {
        var b = v != null ? typeof v[E] : "number";
        return !/^(?:boolean|number|string|undefined)$/.test(b) && (b == "object" ? !!v[E] : !0);
      }
      function x(v) {
        return String(v).replace(/([ -])(?!$)/g, "$1?");
      }
      function k(v, E) {
        var b = null;
        return p(v, function(T, M) {
          b = E(b, T, M, v);
        }), b;
      }
      function S(v) {
        return String(v).replace(/^ +| +$/g, "");
      }
      function w(v) {
        var E = i, b = v && typeof v == "object" && m(v) != "String";
        b && (E = v, v = null);
        var T = E.navigator || {}, M = T.userAgent || "";
        v || (v = M);
        var F = b ? !!T.likeChrome : /\bChrome\b/.test(v) && !/internal|\n/i.test(d.toString()), D = "Object", U = b ? D : "ScriptBridgingProxyObject", q = b ? D : "Environment", Q = b && E.java ? "JavaPackage" : m(E.java), ut = b ? D : "RuntimeObject", rt = /\bJava/.test(Q) && E.java, kt = rt && m(E.environment) == q, st = rt ? "a" : "α", Pt = rt ? "b" : "β", ht = E.document || {}, Yt = E.operamini || E.opera, Ct = l.test(Ct = b && Yt ? Yt["[[Class]]"] : m(Yt)) ? Ct : Yt = null, R, ne = v, mt = [], ie = null, Dt = v == M, X = Dt && Yt && typeof Yt.version == "function" && Yt.version(), At, gt = kn([
          { label: "EdgeHTML", pattern: "Edge" },
          "Trident",
          { label: "WebKit", pattern: "AppleWebKit" },
          "iCab",
          "Presto",
          "NetFront",
          "Tasman",
          "KHTML",
          "Gecko"
        ]), $ = Qi([
          "Adobe AIR",
          "Arora",
          "Avant Browser",
          "Breach",
          "Camino",
          "Electron",
          "Epiphany",
          "Fennec",
          "Flock",
          "Galeon",
          "GreenBrowser",
          "iCab",
          "Iceweasel",
          "K-Meleon",
          "Konqueror",
          "Lunascape",
          "Maxthon",
          { label: "Microsoft Edge", pattern: "(?:Edge|Edg|EdgA|EdgiOS)" },
          "Midori",
          "Nook Browser",
          "PaleMoon",
          "PhantomJS",
          "Raven",
          "Rekonq",
          "RockMelt",
          { label: "Samsung Internet", pattern: "SamsungBrowser" },
          "SeaMonkey",
          { label: "Silk", pattern: "(?:Cloud9|Silk-Accelerated)" },
          "Sleipnir",
          "SlimBrowser",
          { label: "SRWare Iron", pattern: "Iron" },
          "Sunrise",
          "Swiftfox",
          "Vivaldi",
          "Waterfox",
          "WebPositive",
          { label: "Yandex Browser", pattern: "YaBrowser" },
          { label: "UC Browser", pattern: "UCBrowser" },
          "Opera Mini",
          { label: "Opera Mini", pattern: "OPiOS" },
          "Opera",
          { label: "Opera", pattern: "OPR" },
          "Chromium",
          "Chrome",
          { label: "Chrome", pattern: "(?:HeadlessChrome)" },
          { label: "Chrome Mobile", pattern: "(?:CriOS|CrMo)" },
          { label: "Firefox", pattern: "(?:Firefox|Minefield)" },
          { label: "Firefox for iOS", pattern: "FxiOS" },
          { label: "IE", pattern: "IEMobile" },
          { label: "IE", pattern: "MSIE" },
          "Safari"
        ]), dt = tr([
          { label: "BlackBerry", pattern: "BB10" },
          "BlackBerry",
          { label: "Galaxy S", pattern: "GT-I9000" },
          { label: "Galaxy S2", pattern: "GT-I9100" },
          { label: "Galaxy S3", pattern: "GT-I9300" },
          { label: "Galaxy S4", pattern: "GT-I9500" },
          { label: "Galaxy S5", pattern: "SM-G900" },
          { label: "Galaxy S6", pattern: "SM-G920" },
          { label: "Galaxy S6 Edge", pattern: "SM-G925" },
          { label: "Galaxy S7", pattern: "SM-G930" },
          { label: "Galaxy S7 Edge", pattern: "SM-G935" },
          "Google TV",
          "Lumia",
          "iPad",
          "iPod",
          "iPhone",
          "Kindle",
          { label: "Kindle Fire", pattern: "(?:Cloud9|Silk-Accelerated)" },
          "Nexus",
          "Nook",
          "PlayBook",
          "PlayStation Vita",
          "PlayStation",
          "TouchPad",
          "Transformer",
          { label: "Wii U", pattern: "WiiU" },
          "Wii",
          "Xbox One",
          { label: "Xbox 360", pattern: "Xbox" },
          "Xoom"
        ]), yt = We({
          Apple: { iPad: 1, iPhone: 1, iPod: 1 },
          Alcatel: {},
          Archos: {},
          Amazon: { Kindle: 1, "Kindle Fire": 1 },
          Asus: { Transformer: 1 },
          "Barnes & Noble": { Nook: 1 },
          BlackBerry: { PlayBook: 1 },
          Google: { "Google TV": 1, Nexus: 1 },
          HP: { TouchPad: 1 },
          HTC: {},
          Huawei: {},
          Lenovo: {},
          LG: {},
          Microsoft: { Xbox: 1, "Xbox One": 1 },
          Motorola: { Xoom: 1 },
          Nintendo: { "Wii U": 1, Wii: 1 },
          Nokia: { Lumia: 1 },
          Oppo: {},
          Samsung: { "Galaxy S": 1, "Galaxy S2": 1, "Galaxy S3": 1, "Galaxy S4": 1 },
          Sony: { PlayStation: 1, "PlayStation Vita": 1 },
          Xiaomi: { Mi: 1, Redmi: 1 }
        }), j = Sn([
          "Windows Phone",
          "KaiOS",
          "Android",
          "CentOS",
          { label: "Chrome OS", pattern: "CrOS" },
          "Debian",
          { label: "DragonFly BSD", pattern: "DragonFly" },
          "Fedora",
          "FreeBSD",
          "Gentoo",
          "Haiku",
          "Kubuntu",
          "Linux Mint",
          "OpenBSD",
          "Red Hat",
          "SuSE",
          "Ubuntu",
          "Xubuntu",
          "Cygwin",
          "Symbian OS",
          "hpwOS",
          "webOS ",
          "webOS",
          "Tablet OS",
          "Tizen",
          "Linux",
          "Mac OS X",
          "Macintosh",
          "Mac",
          "Windows 98;",
          "Windows "
        ]);
        function kn(jt) {
          return k(jt, function(Lt, Tt) {
            return Lt || RegExp("\\b" + (Tt.pattern || x(Tt)) + "\\b", "i").exec(v) && (Tt.label || Tt);
          });
        }
        function We(jt) {
          return k(jt, function(Lt, Tt, ve) {
            return Lt || (Tt[dt] || Tt[/^[a-z]+(?: +[a-z]+\b)*/i.exec(dt)] || RegExp("\\b" + x(ve) + "(?:\\b|\\w*\\d)", "i").exec(v)) && ve;
          });
        }
        function Qi(jt) {
          return k(jt, function(Lt, Tt) {
            return Lt || RegExp("\\b" + (Tt.pattern || x(Tt)) + "\\b", "i").exec(v) && (Tt.label || Tt);
          });
        }
        function Sn(jt) {
          return k(jt, function(Lt, Tt) {
            var ve = Tt.pattern || x(Tt);
            return !Lt && (Lt = RegExp("\\b" + ve + "(?:/[\\d.]+|[ \\w.]*)", "i").exec(v)) && (Lt = h(Lt, ve, Tt.label || Tt)), Lt;
          });
        }
        function tr(jt) {
          return k(jt, function(Lt, Tt) {
            var ve = Tt.pattern || x(Tt);
            return !Lt && (Lt = RegExp("\\b" + ve + " *\\d+[.\\w_]*", "i").exec(v) || RegExp("\\b" + ve + " *\\w+-[\\w]*", "i").exec(v) || RegExp("\\b" + ve + "(?:; *(?:[a-z]+[_-])?[a-z]+\\d+|[^ ();-]*)", "i").exec(v)) && ((Lt = String(Tt.label && !RegExp(ve, "i").test(Tt.label) ? Tt.label : Lt).split("/"))[1] && !/[\d.]+/.test(Lt[0]) && (Lt[0] += " " + Lt[1]), Tt = Tt.label || Tt, Lt = _(Lt[0].replace(RegExp(ve, "i"), Tt).replace(RegExp("; *(?:" + Tt + "[_-])?", "i"), " ").replace(RegExp("(" + Tt + ")[-_.]?(\\w)", "i"), "$1 $2"))), Lt;
          });
        }
        function tn(jt) {
          return k(jt, function(Lt, Tt) {
            return Lt || (RegExp(Tt + "(?:-[\\d.]+/|(?: for [\\w-]+)?[ /-])([\\d.]+[^ ();/_-]*)", "i").exec(v) || 0)[1] || null;
          });
        }
        function Bn() {
          return this.description || "";
        }
        if (gt && (gt = [gt]), /\bAndroid\b/.test(j) && !dt && (R = /\bAndroid[^;]*;(.*?)(?:Build|\) AppleWebKit)\b/i.exec(v)) && (dt = S(R[1]).replace(/^[a-z]{2}-[a-z]{2};\s*/i, "") || null), yt && !dt ? dt = tr([yt]) : yt && dt && (dt = dt.replace(RegExp("^(" + x(yt) + ")[-_.\\s]", "i"), yt + " ").replace(RegExp("^(" + x(yt) + ")[-_.]?(\\w)", "i"), yt + " $2")), (R = /\bGoogle TV\b/.exec(dt)) && (dt = R[0]), /\bSimulator\b/i.test(v) && (dt = (dt ? dt + " " : "") + "Simulator"), $ == "Opera Mini" && /\bOPiOS\b/.test(v) && mt.push("running in Turbo/Uncompressed mode"), $ == "IE" && /\blike iPhone OS\b/.test(v) ? (R = w(v.replace(/like iPhone OS/, "")), yt = R.manufacturer, dt = R.product) : /^iP/.test(dt) ? ($ || ($ = "Safari"), j = "iOS" + ((R = / OS ([\d_]+)/i.exec(v)) ? " " + R[1].replace(/_/g, ".") : "")) : $ == "Konqueror" && /^Linux\b/i.test(j) ? j = "Kubuntu" : yt && yt != "Google" && (/Chrome/.test($) && !/\bMobile Safari\b/i.test(v) || /\bVita\b/.test(dt)) || /\bAndroid\b/.test(j) && /^Chrome/.test($) && /\bVersion\//i.test(v) ? ($ = "Android Browser", j = /\bAndroid\b/.test(j) ? j : "Android") : $ == "Silk" ? (/\bMobi/i.test(v) || (j = "Android", mt.unshift("desktop mode")), /Accelerated *= *true/i.test(v) && mt.unshift("accelerated")) : $ == "UC Browser" && /\bUCWEB\b/.test(v) ? mt.push("speed mode") : $ == "PaleMoon" && (R = /\bFirefox\/([\d.]+)\b/.exec(v)) ? mt.push("identifying as Firefox " + R[1]) : $ == "Firefox" && (R = /\b(Mobile|Tablet|TV)\b/i.exec(v)) ? (j || (j = "Firefox OS"), dt || (dt = R[1])) : !$ || (R = !/\bMinefield\b/i.test(v) && /\b(?:Firefox|Safari)\b/.exec($)) ? ($ && !dt && /[\/,]|^[^(]+?\)/.test(v.slice(v.indexOf(R + "/") + 8)) && ($ = null), (R = dt || yt || j) && (dt || yt || /\b(?:Android|Symbian OS|Tablet OS|webOS)\b/.test(j)) && ($ = /[a-z]+(?: Hat)?/i.exec(/\bAndroid\b/.test(j) ? j : R) + " Browser")) : $ == "Electron" && (R = (/\bChrome\/([\d.]+)\b/.exec(v) || 0)[1]) && mt.push("Chromium " + R), X || (X = tn([
          "(?:Cloud9|CriOS|CrMo|Edge|Edg|EdgA|EdgiOS|FxiOS|HeadlessChrome|IEMobile|Iron|Opera ?Mini|OPiOS|OPR|Raven|SamsungBrowser|Silk(?!/[\\d.]+$)|UCBrowser|YaBrowser)",
          "Version",
          x($),
          "(?:Firefox|Minefield|NetFront)"
        ])), (R = gt == "iCab" && parseFloat(X) > 3 && "WebKit" || /\bOpera\b/.test($) && (/\bOPR\b/.test(v) ? "Blink" : "Presto") || /\b(?:Midori|Nook|Safari)\b/i.test(v) && !/^(?:Trident|EdgeHTML)$/.test(gt) && "WebKit" || !gt && /\bMSIE\b/i.test(v) && (j == "Mac OS" ? "Tasman" : "Trident") || gt == "WebKit" && /\bPlayStation\b(?! Vita\b)/i.test($) && "NetFront") && (gt = [R]), $ == "IE" && (R = (/; *(?:XBLWP|ZuneWP)(\d+)/i.exec(v) || 0)[1]) ? ($ += " Mobile", j = "Windows Phone " + (/\+$/.test(R) ? R : R + ".x"), mt.unshift("desktop mode")) : /\bWPDesktop\b/i.test(v) ? ($ = "IE Mobile", j = "Windows Phone 8.x", mt.unshift("desktop mode"), X || (X = (/\brv:([\d.]+)/.exec(v) || 0)[1])) : $ != "IE" && gt == "Trident" && (R = /\brv:([\d.]+)/.exec(v)) && ($ && mt.push("identifying as " + $ + (X ? " " + X : "")), $ = "IE", X = R[1]), Dt) {
          if (y(E, "global"))
            if (rt && (R = rt.lang.System, ne = R.getProperty("os.arch"), j = j || R.getProperty("os.name") + " " + R.getProperty("os.version")), kt) {
              try {
                X = E.require("ringo/engine").version.join("."), $ = "RingoJS";
              } catch {
                (R = E.system) && R.global.system == E.system && ($ = "Narwhal", j || (j = R[0].os || null));
              }
              $ || ($ = "Rhino");
            } else typeof E.process == "object" && !E.process.browser && (R = E.process) && (typeof R.versions == "object" && (typeof R.versions.electron == "string" ? (mt.push("Node " + R.versions.node), $ = "Electron", X = R.versions.electron) : typeof R.versions.nw == "string" && (mt.push("Chromium " + X, "Node " + R.versions.node), $ = "NW.js", X = R.versions.nw)), $ || ($ = "Node.js", ne = R.arch, j = R.platform, X = /[\d.]+/.exec(R.version), X = X ? X[0] : null));
          else m(R = E.runtime) == U ? ($ = "Adobe AIR", j = R.flash.system.Capabilities.os) : m(R = E.phantom) == ut ? ($ = "PhantomJS", X = (R = R.version || null) && R.major + "." + R.minor + "." + R.patch) : typeof ht.documentMode == "number" && (R = /\bTrident\/(\d+)/i.exec(v)) ? (X = [X, ht.documentMode], (R = +R[1] + 4) != X[1] && (mt.push("IE " + X[1] + " mode"), gt && (gt[1] = ""), X[1] = R), X = $ == "IE" ? String(X[1].toFixed(1)) : X[0]) : typeof ht.documentMode == "number" && /^(?:Chrome|Firefox)\b/.test($) && (mt.push("masking as " + $ + " " + X), $ = "IE", X = "11.0", gt = ["Trident"], j = "Windows");
          j = j && _(j);
        }
        if (X && (R = /(?:[ab]|dp|pre|[ab]\d+pre)(?:\d+\+?)?$/i.exec(X) || /(?:alpha|beta)(?: ?\d)?/i.exec(v + ";" + (Dt && T.appMinorVersion)) || /\bMinefield\b/i.test(v) && "a") && (ie = /b/i.test(R) ? "beta" : "alpha", X = X.replace(RegExp(R + "\\+?$"), "") + (ie == "beta" ? Pt : st) + (/\d+\+?/.exec(R) || "")), $ == "Fennec" || $ == "Firefox" && /\b(?:Android|Firefox OS|KaiOS)\b/.test(j))
          $ = "Firefox Mobile";
        else if ($ == "Maxthon" && X)
          X = X.replace(/\.[\d.]+/, ".x");
        else if (/\bXbox\b/i.test(dt))
          dt == "Xbox 360" && (j = null), dt == "Xbox 360" && /\bIEMobile\b/.test(v) && mt.unshift("mobile mode");
        else if ((/^(?:Chrome|IE|Opera)$/.test($) || $ && !dt && !/Browser|Mobi/.test($)) && (j == "Windows CE" || /Mobi/i.test(v)))
          $ += " Mobile";
        else if ($ == "IE" && Dt)
          try {
            E.external === null && mt.unshift("platform preview");
          } catch {
            mt.unshift("embedded");
          }
        else (/\bBlackBerry\b/.test(dt) || /\bBB10\b/.test(v)) && (R = (RegExp(dt.replace(/ +/g, " *") + "/([.\\d]+)", "i").exec(v) || 0)[1] || X) ? (R = [R, /BB10/.test(v)], j = (R[1] ? (dt = null, yt = "BlackBerry") : "Device Software") + " " + R[0], X = null) : this != g && dt != "Wii" && (Dt && Yt || /Opera/.test($) && /\b(?:MSIE|Firefox)\b/i.test(v) || $ == "Firefox" && /\bOS X (?:\d+\.){2,}/.test(j) || $ == "IE" && (j && !/^Win/.test(j) && X > 5.5 || /\bWindows XP\b/.test(j) && X > 8 || X == 8 && !/\bTrident\b/.test(v))) && !l.test(R = w.call(g, v.replace(l, "") + ";")) && R.name && (R = "ing as " + R.name + ((R = R.version) ? " " + R : ""), l.test($) ? (/\bIE\b/.test(R) && j == "Mac OS" && (j = null), R = "identify" + R) : (R = "mask" + R, Ct ? $ = _(Ct.replace(/([a-z])([A-Z])/g, "$1 $2")) : $ = "Opera", /\bIE\b/.test(R) && (j = null), Dt || (X = null)), gt = ["Presto"], mt.push(R));
        (R = (/\bAppleWebKit\/([\d.]+\+?)/i.exec(v) || 0)[1]) && (R = [parseFloat(R.replace(/\.(\d)$/, ".0$1")), R], $ == "Safari" && R[1].slice(-1) == "+" ? ($ = "WebKit Nightly", ie = "alpha", X = R[1].slice(0, -1)) : (X == R[1] || X == (R[2] = (/\bSafari\/([\d.]+\+?)/i.exec(v) || 0)[1])) && (X = null), R[1] = (/\b(?:Headless)?Chrome\/([\d.]+)/i.exec(v) || 0)[1], R[0] == 537.36 && R[2] == 537.36 && parseFloat(R[1]) >= 28 && gt == "WebKit" && (gt = ["Blink"]), !Dt || !F && !R[1] ? (gt && (gt[1] = "like Safari"), R = (R = R[0], R < 400 ? 1 : R < 500 ? 2 : R < 526 ? 3 : R < 533 ? 4 : R < 534 ? "4+" : R < 535 ? 5 : R < 537 ? 6 : R < 538 ? 7 : R < 601 ? 8 : R < 602 ? 9 : R < 604 ? 10 : R < 606 ? 11 : R < 608 ? 12 : "12")) : (gt && (gt[1] = "like Chrome"), R = R[1] || (R = R[0], R < 530 ? 1 : R < 532 ? 2 : R < 532.05 ? 3 : R < 533 ? 4 : R < 534.03 ? 5 : R < 534.07 ? 6 : R < 534.1 ? 7 : R < 534.13 ? 8 : R < 534.16 ? 9 : R < 534.24 ? 10 : R < 534.3 ? 11 : R < 535.01 ? 12 : R < 535.02 ? "13+" : R < 535.07 ? 15 : R < 535.11 ? 16 : R < 535.19 ? 17 : R < 536.05 ? 18 : R < 536.1 ? 19 : R < 537.01 ? 20 : R < 537.11 ? "21+" : R < 537.13 ? 23 : R < 537.18 ? 24 : R < 537.24 ? 25 : R < 537.36 ? 26 : gt != "Blink" ? "27" : "28")), gt && (gt[1] += " " + (R += typeof R == "number" ? ".x" : /[.+]/.test(R) ? "" : "+")), $ == "Safari" && (!X || parseInt(X) > 45) ? X = R : $ == "Chrome" && /\bHeadlessChrome/i.test(v) && mt.unshift("headless")), $ == "Opera" && (R = /\bzbov|zvav$/.exec(j)) ? ($ += " ", mt.unshift("desktop mode"), R == "zvav" ? ($ += "Mini", X = null) : $ += "Mobile", j = j.replace(RegExp(" *" + R + "$"), "")) : $ == "Safari" && /\bChrome\b/.exec(gt && gt[1]) ? (mt.unshift("desktop mode"), $ = "Chrome Mobile", X = null, /\bOS X\b/.test(j) ? (yt = "Apple", j = "iOS 4.3+") : j = null) : /\bSRWare Iron\b/.test($) && !X && (X = tn("Chrome")), X && X.indexOf(R = /[\d.]+$/.exec(j)) == 0 && v.indexOf("/" + R + "-") > -1 && (j = S(j.replace(R, ""))), j && j.indexOf($) != -1 && !RegExp($ + " OS").test(j) && (j = j.replace(RegExp(" *" + x($) + " *"), "")), gt && !/\b(?:Avant|Nook)\b/.test($) && (/Browser|Lunascape|Maxthon/.test($) || $ != "Safari" && /^iOS/.test(j) && /\bSafari\b/.test(gt[1]) || /^(?:Adobe|Arora|Breach|Midori|Opera|Phantom|Rekonq|Rock|Samsung Internet|Sleipnir|SRWare Iron|Vivaldi|Web)/.test($) && gt[1]) && (R = gt[gt.length - 1]) && mt.push(R), mt.length && (mt = ["(" + mt.join("; ") + ")"]), yt && dt && dt.indexOf(yt) < 0 && mt.push("on " + yt), dt && mt.push((/^on /.test(mt[mt.length - 1]) ? "" : "on ") + dt), j && (R = / ([\d.+]+)$/.exec(j), At = R && j.charAt(j.length - R[0].length - 1) == "/", j = {
          architecture: 32,
          family: R && !At ? j.replace(R[0], "") : j,
          version: R ? R[1] : null,
          toString: function() {
            var jt = this.version;
            return this.family + (jt && !At ? " " + jt : "") + (this.architecture == 64 ? " 64-bit" : "");
          }
        }), (R = /\b(?:AMD|IA|Win|WOW|x86_|x)64\b/i.exec(ne)) && !/\bi686\b/i.test(ne) ? (j && (j.architecture = 64, j.family = j.family.replace(RegExp(" *" + R), "")), $ && (/\bWOW64\b/i.test(v) || Dt && /\w(?:86|32)$/.test(T.cpuClass || T.platform) && !/\bWin64; x64\b/i.test(v)) && mt.unshift("32-bit")) : j && /^OS X/.test(j.family) && $ == "Chrome" && parseFloat(X) >= 39 && (j.architecture = 64), v || (v = null);
        var Ht = {};
        return Ht.description = v, Ht.layout = gt && gt[0], Ht.manufacturer = yt, Ht.name = $, Ht.prerelease = ie, Ht.product = dt, Ht.ua = v, Ht.version = $ && X, Ht.os = j || {
          /**
           * The CPU architecture the OS is built for.
           *
           * @memberOf platform.os
           * @type number|null
           */
          architecture: null,
          /**
           * The family of the OS.
           *
           * Common values include:
           * "Windows", "Windows Server 2008 R2 / 7", "Windows Server 2008 / Vista",
           * "Windows XP", "OS X", "Linux", "Ubuntu", "Debian", "Fedora", "Red Hat",
           * "SuSE", "Android", "iOS" and "Windows Phone"
           *
           * @memberOf platform.os
           * @type string|null
           */
          family: null,
          /**
           * The version of the OS.
           *
           * @memberOf platform.os
           * @type string|null
           */
          version: null,
          /**
           * Returns the OS string.
           *
           * @memberOf platform.os
           * @returns {string} The OS string.
           */
          toString: function() {
            return "null";
          }
        }, Ht.parse = w, Ht.toString = Bn, Ht.version && mt.unshift(X), Ht.name && mt.unshift($), j && $ && !(j == String(j).split(" ")[0] && (j == $.split(" ")[0] || dt)) && mt.push(dt ? "(" + j + ")" : "on " + j), mt.length && (Ht.description = mt.join(" ")), Ht;
      }
      var O = w();
      r && s ? g(O, function(v, E) {
        r[E] = v;
      }) : i.platform = O;
    }).call($C);
  }(hs, hs.exports)), hs.exports;
}
var zC = BC();
const HC = /* @__PURE__ */ DC(zC), tu = {
  mac: {
    cmd: "⌘",
    alt: "⌥",
    ctrl: "⌃",
    shift: "⇧"
  },
  other: {
    cmd: "Ctrl+",
    alt: "Alt+",
    ctrl: "Ctrl+",
    shift: "Shift+"
  }
};
let Eh = !1, s_ = tu.other;
const FC = (n) => {
  var t;
  Eh = ["OS X", "iOS"].includes(((t = n.os) == null ? void 0 : t.family) || ""), s_ = Eh ? tu.mac : tu.other;
};
FC(HC);
const Yu = (n) => n.replace(/(ctrl|cmd|alt|shift)\+/g, (t, e) => s_[e] || e), VC = `<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24">
    <path fill-rule="evenodd" d="M12.767 13.084l-2.211 2.211 2.233 2.233-.789.789-3-3 3-3 .767.767zm.884 4.538l2.327-2.327-2.305-2.305.673-.673 3 3-3 3-.695-.695zm-5.561-15.622h9.916c1.101 0 1.993.898 1.993 1.991v16.018c0 1.099-.895 1.991-1.994 1.991h-12.012c-1.101 0-1.994-.897-1.994-1.999v-14.044l4.09-3.957zm.599 2l-.1 2.606h-2.59v13.394h12v-16h-9.31z"/>
</svg>
`;
Z0();
var jC = Z("<div></div>");
function o_(n, t) {
  xt(t, !1);
  let e = et(t, "element", 12), i = et(t, "event", 12);
  if (typeof e() == "string") {
    const a = customElements.get(e());
    if (a)
      e(new a());
    else {
      const l = e();
      e(document.createElement("div")), e(e().innerHTML = l, !0);
    }
  }
  let r = i_(), s = mr();
  n_(() => {
    C(s).appendChild(e()), setTimeout(
      () => {
        e().dispatchEvent(i()), r("ready");
      },
      0
    );
  }), lo();
  var o = jC();
  return Xt(o, (a) => K(s, a), () => C(s)), ce("message", o, function(a) {
    Xu.call(this, t, a);
  }), V(n, o), wt({
    get element() {
      return e();
    },
    set element(a) {
      e(a), nt();
    },
    get event() {
      return i();
    },
    set event(a) {
      i(a), nt();
    }
  });
}
vt(o_, { element: {}, event: {} }, [], [], !0);
var WC = Z('<div class="d-flex flex-column"><!> <!> <!></div>');
function UC(n, t) {
  xt(t, !1);
  let e = et(t, "namespace", 12), i = et(t, "detail", 12), r = mr([]), s = 0;
  window.MT.UI.Component.getAll(e()).then((h) => {
    K(r, h);
  });
  let a = mr();
  function l() {
    ++s === C(r).length && [...C(a).childNodes].filter((h) => h instanceof HTMLElement).forEach((h, p) => {
      var _;
      (_ = h.style).order || (_.order = String((p + 1) * 100));
    });
  }
  lo();
  var c = WC(), u = L(c);
  wr(u, t, "prepend", {});
  var d = H(u, 2);
  re(d, 1, () => C(r), gn, (h, p) => {
    var _ = Q0(() => new CustomEvent("message", { detail: i() }));
    o_(h, {
      get element() {
        return C(p);
      },
      get event() {
        return C(_);
      },
      $$events: {
        ready: l,
        message(g) {
          Xu.call(this, t, g);
        }
      }
    });
  });
  var f = H(d, 2);
  return wr(f, t, "append", {}), A(c), Xt(c, (h) => K(a, h), () => C(a)), V(n, c), wt({
    get namespace() {
      return e();
    },
    set namespace(h) {
      e(h), nt();
    },
    get detail() {
      return i();
    },
    set detail(h) {
      i(h), nt();
    }
  });
}
vt(UC, { namespace: {}, detail: {} }, ["prepend", "append"], [], !0);
const KC = (n) => n;
function qC(n) {
  const t = n - 1;
  return t * t * t + 1;
}
function Oh(n) {
  const t = typeof n == "string" && n.match(/^\s*(-?[\d.]+)([^\s]*)\s*$/);
  return t ? [parseFloat(t[1]), t[2] || "px"] : [
    /** @type {number} */
    n,
    "px"
  ];
}
function Mh(n, { delay: t = 0, duration: e = 400, easing: i = KC } = {}) {
  const r = +getComputedStyle(n).opacity;
  return {
    delay: t,
    duration: e,
    easing: i,
    css: (s) => `opacity: ${s * r}`
  };
}
function Ah(n, { delay: t = 0, duration: e = 400, easing: i = qC, x: r = 0, y: s = 0, opacity: o = 0 } = {}) {
  const a = getComputedStyle(n), l = +a.opacity, c = a.transform === "none" ? "" : a.transform, u = l * (1 - o), [d, f] = Oh(r), [h, p] = Oh(s);
  return {
    delay: t,
    duration: e,
    easing: i,
    css: (_, g) => `
			transform: ${c} translate(${(1 - _) * d}${f}, ${(1 - _) * h}${p});
			opacity: ${l - u * g}`
  };
}
function GC(n) {
  return --n * n * n * n * n + 1;
}
const a_ = Symbol();
function JC(n) {
  tb(a_, n);
}
function XC() {
  return eb(a_);
}
var YC = Z('<div class="modal show svelte-1m2bluk" tabindex="-1" role="dialog" aria-modal="true"><div role="document"><div class="modal-content"><!></div></div></div> <div class="modal-backdrop show"></div>', 1);
const ZC = {
  hash: "svelte-1m2bluk",
  code: ".modal.svelte-1m2bluk {display:block;}"
};
function xn(n, t) {
  xt(t, !1), De(n, ZC);
  const e = i_();
  let i = et(t, "open", 12, !0), r = et(t, "size", 12, void 0), s = et(t, "describedby", 12, ""), o = et(t, "labelledby", 12, "");
  function a() {
    document.body.classList.add("modal-open");
  }
  function l() {
    document.body.classList.remove("modal-open");
  }
  JC({
    closeModal() {
      i(!1);
    }
  }), kp(() => Wa(i()), () => {
    i() ? a() : l();
  }), Sp(), lo();
  var c = Di(), u = It(c);
  {
    var d = (f) => {
      var h = YC(), p = It(h), _ = L(p), g = L(_), m = L(g);
      wr(m, t, "default", {}), A(g), A(_), A(p);
      var y = H(p, 2);
      P(() => {
        Ot(p, "aria-labelledby", o()), Ot(p, "aria-describedby", s()), Gi(_, `${`modal-dialog ${r() ? `modal-${r()}` : ""}` ?? ""} svelte-1m2bluk`);
      }), Mo(1, _, () => Ah, () => ({ y: -50, duration: 300 })), Mo(2, _, () => Ah, () => ({ y: -50, duration: 300, easing: GC })), ce("introend", p, () => {
        e("open");
      }), ce("outroend", p, () => {
        setTimeout(
          () => {
            e("close");
          },
          100
        );
      }), Mo(3, p, () => Mh), Mo(3, y, () => Mh, () => ({ duration: 150 })), V(f, h);
    };
    de(u, (f) => {
      i() && f(d);
    });
  }
  return V(n, c), wt({
    get open() {
      return i();
    },
    set open(f) {
      i(f), nt();
    },
    get size() {
      return r();
    },
    set size(f) {
      r(f), nt();
    },
    get describedby() {
      return s();
    },
    set describedby(f) {
      s(f), nt();
    },
    get labelledby() {
      return o();
    },
    set labelledby(f) {
      o(f), nt();
    }
  });
}
vt(
  xn,
  {
    open: {},
    size: {},
    describedby: {},
    labelledby: {}
  },
  ["default"],
  [],
  !0
);
var QC = Z('<div class="modal-header"><h4 class="modal-title"><!></h4> <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button></div>'), tT = Z('<div><!> <div class="modal-body svelte-1grmgzm"><!></div> <div class="modal-footer"><!></div></div>');
const eT = {
  hash: "svelte-1grmgzm",
  code: ".modal-body.svelte-1grmgzm {max-height:600px;}"
};
function wn(n, t) {
  const e = SC(t);
  xt(t, !1), De(n, eT);
  let i = XC(), r = et(t, "close", 12, () => {
    i.closeModal();
  });
  lo();
  var s = tT(), o = L(s);
  {
    var a = (f) => {
      var h = QC(), p = L(h), _ = L(p);
      wr(_, t, "title", {}), A(p);
      var g = H(p, 2);
      A(h), ce("click", g, function(...m) {
        var y;
        (y = r()) == null || y.apply(this, m);
      }), V(f, h);
    };
    de(o, (f) => {
      e.title && f(a);
    });
  }
  var l = H(o, 2), c = L(l);
  wr(c, t, "body", {}), A(l);
  var u = H(l, 2), d = L(u);
  return wr(d, t, "footer", {}), A(u), A(s), V(n, s), wt({
    get close() {
      return r();
    },
    set close(f) {
      r(f), nt();
    }
  });
}
vt(wn, { close: {} }, ["title", "body", "footer"], [], !0);
var nT = Z('<li class="page-item" aria-hidden="true">...</li>'), iT = Z('<li class="page-item active"><a href="#" class="page-link"> <span class="visually-hidden">(current)</span></a></li>'), rT = Z('<li class="page-item"><a href="#" class="page-link"> </a></li>'), sT = Z('<div class="row"><div class="col-auto mx-auto"><nav aria-label="object list"><ul class="pagination d-none d-md-flex"><li class="page-item"><a href="#" class="page-link"></a></li> <!> <li class="page-item"><a href="#" class="page-link"></a></li></ul></nav></div></div>');
function oT(n, t) {
  xt(t, !1);
  let e = et(t, "data", 12), i = mr(), r = mr(), s = mr();
  kp(
    () => (C(i), Wa(e()), C(r), C(s)),
    () => {
      var u, d;
      K(i, ((u = e()) == null ? void 0 : u.totalPages) ?? 0), K(r, ((d = e()) == null ? void 0 : d.currentPage) ?? 0), K(s, []);
      let c = !1;
      for (let f = 1; f <= C(i); f++)
        f < 3 || f > C(i) - 2 || Math.abs(f - C(r)) < 2 ? (C(s).push(f), c = !1) : c || (C(s).push(0), c = !0);
    }
  ), Sp(), lo();
  var o = Di(), a = It(o);
  {
    var l = (c) => {
      var u = sT(), d = L(u), f = L(d), h = L(f), p = L(h), _ = L(p);
      _.textContent = window.trans("Previous"), A(p);
      var g = H(p, 2);
      re(g, 1, () => C(s), gn, (x, k) => {
        var S = Di(), w = It(S);
        {
          var O = (E) => {
            var b = nT();
            V(E, b);
          }, v = (E) => {
            var b = Di(), T = It(b);
            {
              var M = (D) => {
                var U = iT(), q = L(U), Q = L(q);
                Cp(), A(q), A(U), P(() => z(Q, `${C(k) ?? ""} `)), ce("click", q, Ao(function(ut) {
                  Xu.call(this, t, ut);
                })), V(D, U);
              }, F = (D) => {
                var U = rT(), q = L(U), Q = L(q, !0);
                A(q), A(U), P(() => {
                  _i(U, "first-last", C(k) === 1 || C(k) === C(i)), z(Q, C(k));
                }), ce("click", q, Ao(() => e().setPage(C(k)))), V(D, U);
              };
              de(
                T,
                (D) => {
                  C(k) === C(r) ? D(M) : D(F, !1);
                },
                !0
              );
            }
            V(E, b);
          };
          de(w, (E) => {
            C(k) === 0 ? E(O) : E(v, !1);
          });
        }
        V(x, S);
      });
      var m = H(g, 2), y = L(m);
      y.textContent = window.trans("Next"), A(m), A(h), A(f), A(d), A(u), P(() => {
        _i(_, "disabled", C(r) <= 1), _i(y, "disabled", C(r) === C(i));
      }), ce("click", _, Ao(() => C(r) > 1 && e().setPage(C(r) - 1))), ce("click", y, Ao(() => C(r) !== C(i) && e().setPage(C(r) + 1))), V(c, u);
    };
    de(a, (c) => {
      e() && C(i) && C(r) && c(l);
    });
  }
  return V(n, o), wt({
    get data() {
      return e();
    },
    set data(c) {
      e(c), nt();
    }
  });
}
vt(oT, { data: {} }, [], [], !0);
var aT = Z('<div class="form-group mb-3"><textarea id="source_text" class="form-control" style="height: calc(100vh - 240px)"></textarea></div>'), lT = Z('<button type="button" class="action primary button btn btn-primary"> </button> <button type="button" class="cancel action button mt-close-dialog btn btn-default"> </button>', 1);
function l_(n, t) {
  xt(t, !0);
  let e = et(t, "onSubmit", 7), i = et(t, "onClose", 7), r;
  $t(() => {
    r == null || r.focus();
  });
  let s = lt(""), o;
  return xn(n, {
    size: "lg",
    $$events: {
      close(...a) {
        var l;
        (l = i()) == null || l.apply(this, a);
      }
    },
    children: (a, l) => {
      wn(a, {
        get close() {
          return o;
        },
        set close(c) {
          o = c;
        },
        $$slots: {
          title: (c, u) => {
            var d = bn();
            P(() => z(d, I("Source Code"))), V(c, d);
          },
          body: (c, u) => {
            var d = aT(), f = L(d);
            Tp(f), P(() => Ot(f, "aria-label", I("Source Code"))), Xt(f, (h) => r = h, () => r), A(d), ye(f, () => C(s), (h) => K(s, h)), V(c, d);
          },
          footer: (c, u) => {
            var d = lT(), f = It(d);
            P(() => Ot(f, "title", I("Insert (s)"))), f.__click = () => {
              e()(C(s)), o();
            };
            var h = L(f, !0);
            P(() => z(h, I("Insert"))), A(f);
            var p = H(f, 2);
            P(() => Ot(p, "title", I("Cancel (x)"))), p.__click = o;
            var _ = L(p, !0);
            P(() => z(_, I("Cancel"))), A(p), V(c, d);
          }
        }
      });
    },
    $$slots: { default: !0 }
  }), wt({
    get onSubmit() {
      return e();
    },
    set onSubmit(a) {
      e(a), nt();
    },
    get onClose() {
      return i();
    },
    set onClose(a) {
      i(a), nt();
    }
  });
}
Ce(["click"]);
vt(l_, { onSubmit: {}, onClose: {} }, [], [], !0);
const cT = `<svg width="72" height="72" viewBox="0 0 72 72" fill="none"
    xmlns="http://www.w3.org/2000/svg">
    <g clip-path="url(#clip0_57_49)">
        <path d="M47.55 54.84L42.12 49.41L55.53 36L42.12 22.59L47.55 17.16L63.68 33.29C65.18 34.79 65.18 37.22 63.68 38.72L47.55 54.85V54.84Z" fill="black"/>
        <path d="M24.45 54.84L8.32001 38.71C6.82001 37.21 6.82001 34.78 8.32001 33.28L24.45 17.15L29.88 22.58L16.47 35.99L29.88 49.4L24.45 54.83V54.84Z" fill="black"/>
    </g>
    <defs>
        <clipPath id="clip0_57_49">
            <rect width="72" height="72" fill="white"/>
        </clipPath>
    </defs>
</svg>
`;
var jl = { exports: {} }, ts = {}, No = { exports: {} }, Wl = {}, Ul = {}, Nh;
function Zu() {
  if (Nh) return Ul;
  Nh = 1;
  function n(i) {
    this.__parent = i, this.__character_count = 0, this.__indent_count = -1, this.__alignment_count = 0, this.__wrap_point_index = 0, this.__wrap_point_character_count = 0, this.__wrap_point_indent_count = -1, this.__wrap_point_alignment_count = 0, this.__items = [];
  }
  n.prototype.clone_empty = function() {
    var i = new n(this.__parent);
    return i.set_indent(this.__indent_count, this.__alignment_count), i;
  }, n.prototype.item = function(i) {
    return i < 0 ? this.__items[this.__items.length + i] : this.__items[i];
  }, n.prototype.has_match = function(i) {
    for (var r = this.__items.length - 1; r >= 0; r--)
      if (this.__items[r].match(i))
        return !0;
    return !1;
  }, n.prototype.set_indent = function(i, r) {
    this.is_empty() && (this.__indent_count = i || 0, this.__alignment_count = r || 0, this.__character_count = this.__parent.get_indent_size(this.__indent_count, this.__alignment_count));
  }, n.prototype._set_wrap_point = function() {
    this.__parent.wrap_line_length && (this.__wrap_point_index = this.__items.length, this.__wrap_point_character_count = this.__character_count, this.__wrap_point_indent_count = this.__parent.next_line.__indent_count, this.__wrap_point_alignment_count = this.__parent.next_line.__alignment_count);
  }, n.prototype._should_wrap = function() {
    return this.__wrap_point_index && this.__character_count > this.__parent.wrap_line_length && this.__wrap_point_character_count > this.__parent.next_line.__character_count;
  }, n.prototype._allow_wrap = function() {
    if (this._should_wrap()) {
      this.__parent.add_new_line();
      var i = this.__parent.current_line;
      return i.set_indent(this.__wrap_point_indent_count, this.__wrap_point_alignment_count), i.__items = this.__items.slice(this.__wrap_point_index), this.__items = this.__items.slice(0, this.__wrap_point_index), i.__character_count += this.__character_count - this.__wrap_point_character_count, this.__character_count = this.__wrap_point_character_count, i.__items[0] === " " && (i.__items.splice(0, 1), i.__character_count -= 1), !0;
    }
    return !1;
  }, n.prototype.is_empty = function() {
    return this.__items.length === 0;
  }, n.prototype.last = function() {
    return this.is_empty() ? null : this.__items[this.__items.length - 1];
  }, n.prototype.push = function(i) {
    this.__items.push(i);
    var r = i.lastIndexOf(`
`);
    r !== -1 ? this.__character_count = i.length - r : this.__character_count += i.length;
  }, n.prototype.pop = function() {
    var i = null;
    return this.is_empty() || (i = this.__items.pop(), this.__character_count -= i.length), i;
  }, n.prototype._remove_indent = function() {
    this.__indent_count > 0 && (this.__indent_count -= 1, this.__character_count -= this.__parent.indent_size);
  }, n.prototype._remove_wrap_indent = function() {
    this.__wrap_point_indent_count > 0 && (this.__wrap_point_indent_count -= 1);
  }, n.prototype.trim = function() {
    for (; this.last() === " "; )
      this.__items.pop(), this.__character_count -= 1;
  }, n.prototype.toString = function() {
    var i = "";
    return this.is_empty() ? this.__parent.indent_empty_lines && (i = this.__parent.get_indent_string(this.__indent_count)) : (i = this.__parent.get_indent_string(this.__indent_count, this.__alignment_count), i += this.__items.join("")), i;
  };
  function t(i, r) {
    this.__cache = [""], this.__indent_size = i.indent_size, this.__indent_string = i.indent_char, i.indent_with_tabs || (this.__indent_string = new Array(i.indent_size + 1).join(i.indent_char)), r = r || "", i.indent_level > 0 && (r = new Array(i.indent_level + 1).join(this.__indent_string)), this.__base_string = r, this.__base_string_length = r.length;
  }
  t.prototype.get_indent_size = function(i, r) {
    var s = this.__base_string_length;
    return r = r || 0, i < 0 && (s = 0), s += i * this.__indent_size, s += r, s;
  }, t.prototype.get_indent_string = function(i, r) {
    var s = this.__base_string;
    return r = r || 0, i < 0 && (i = 0, s = ""), r += i * this.__indent_size, this.__ensure_cache(r), s += this.__cache[r], s;
  }, t.prototype.__ensure_cache = function(i) {
    for (; i >= this.__cache.length; )
      this.__add_column();
  }, t.prototype.__add_column = function() {
    var i = this.__cache.length, r = 0, s = "";
    this.__indent_size && i >= this.__indent_size && (r = Math.floor(i / this.__indent_size), i -= r * this.__indent_size, s = new Array(r + 1).join(this.__indent_string)), i && (s += new Array(i + 1).join(" ")), this.__cache.push(s);
  };
  function e(i, r) {
    this.__indent_cache = new t(i, r), this.raw = !1, this._end_with_newline = i.end_with_newline, this.indent_size = i.indent_size, this.wrap_line_length = i.wrap_line_length, this.indent_empty_lines = i.indent_empty_lines, this.__lines = [], this.previous_line = null, this.current_line = null, this.next_line = new n(this), this.space_before_token = !1, this.non_breaking_space = !1, this.previous_token_wrapped = !1, this.__add_outputline();
  }
  return e.prototype.__add_outputline = function() {
    this.previous_line = this.current_line, this.current_line = this.next_line.clone_empty(), this.__lines.push(this.current_line);
  }, e.prototype.get_line_number = function() {
    return this.__lines.length;
  }, e.prototype.get_indent_string = function(i, r) {
    return this.__indent_cache.get_indent_string(i, r);
  }, e.prototype.get_indent_size = function(i, r) {
    return this.__indent_cache.get_indent_size(i, r);
  }, e.prototype.is_empty = function() {
    return !this.previous_line && this.current_line.is_empty();
  }, e.prototype.add_new_line = function(i) {
    return this.is_empty() || !i && this.just_added_newline() ? !1 : (this.raw || this.__add_outputline(), !0);
  }, e.prototype.get_code = function(i) {
    this.trim(!0);
    var r = this.current_line.pop();
    r && (r[r.length - 1] === `
` && (r = r.replace(/\n+$/g, "")), this.current_line.push(r)), this._end_with_newline && this.__add_outputline();
    var s = this.__lines.join(`
`);
    return i !== `
` && (s = s.replace(/[\n]/g, i)), s;
  }, e.prototype.set_wrap_point = function() {
    this.current_line._set_wrap_point();
  }, e.prototype.set_indent = function(i, r) {
    return i = i || 0, r = r || 0, this.next_line.set_indent(i, r), this.__lines.length > 1 ? (this.current_line.set_indent(i, r), !0) : (this.current_line.set_indent(), !1);
  }, e.prototype.add_raw_token = function(i) {
    for (var r = 0; r < i.newlines; r++)
      this.__add_outputline();
    this.current_line.set_indent(-1), this.current_line.push(i.whitespace_before), this.current_line.push(i.text), this.space_before_token = !1, this.non_breaking_space = !1, this.previous_token_wrapped = !1;
  }, e.prototype.add_token = function(i) {
    this.__add_space_before_token(), this.current_line.push(i), this.space_before_token = !1, this.non_breaking_space = !1, this.previous_token_wrapped = this.current_line._allow_wrap();
  }, e.prototype.__add_space_before_token = function() {
    this.space_before_token && !this.just_added_newline() && (this.non_breaking_space || this.set_wrap_point(), this.current_line.push(" "));
  }, e.prototype.remove_indent = function(i) {
    for (var r = this.__lines.length; i < r; )
      this.__lines[i]._remove_indent(), i++;
    this.current_line._remove_wrap_indent();
  }, e.prototype.trim = function(i) {
    for (i = i === void 0 ? !1 : i, this.current_line.trim(); i && this.__lines.length > 1 && this.current_line.is_empty(); )
      this.__lines.pop(), this.current_line = this.__lines[this.__lines.length - 1], this.current_line.trim();
    this.previous_line = this.__lines.length > 1 ? this.__lines[this.__lines.length - 2] : null;
  }, e.prototype.just_added_newline = function() {
    return this.current_line.is_empty();
  }, e.prototype.just_added_blankline = function() {
    return this.is_empty() || this.current_line.is_empty() && this.previous_line.is_empty();
  }, e.prototype.ensure_empty_line_above = function(i, r) {
    for (var s = this.__lines.length - 2; s >= 0; ) {
      var o = this.__lines[s];
      if (o.is_empty())
        break;
      if (o.item(0).indexOf(i) !== 0 && o.item(-1) !== r) {
        this.__lines.splice(s + 1, 0, new n(this)), this.previous_line = this.__lines[this.__lines.length - 2];
        break;
      }
      s--;
    }
  }, Ul.Output = e, Ul;
}
var Kl = {}, Lh;
function c_() {
  if (Lh) return Kl;
  Lh = 1;
  function n(t, e, i, r) {
    this.type = t, this.text = e, this.comments_before = null, this.newlines = i || 0, this.whitespace_before = r || "", this.parent = null, this.next = null, this.previous = null, this.opened = null, this.closed = null, this.directives = null;
  }
  return Kl.Token = n, Kl;
}
var ql = {}, Rh;
function u_() {
  return Rh || (Rh = 1, function(n) {
    var t = "\\x23\\x24\\x40\\x41-\\x5a\\x5f\\x61-\\x7a", e = "\\x24\\x30-\\x39\\x41-\\x5a\\x5f\\x61-\\x7a", i = "\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u0527\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05d0-\\u05ea\\u05f0-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u08a0\\u08a2-\\u08ac\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0977\\u0979-\\u097f\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c33\\u0c35-\\u0c39\\u0c3d\\u0c58\\u0c59\\u0c60\\u0c61\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d05-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d60\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e87\\u0e88\\u0e8a\\u0e8d\\u0e94-\\u0e97\\u0e99-\\u0e9f\\u0ea1-\\u0ea3\\u0ea5\\u0ea7\\u0eaa\\u0eab\\u0ead-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f4\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f0\\u1700-\\u170c\\u170e-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1877\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191c\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19c1-\\u19c7\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4b\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1ce9-\\u1cec\\u1cee-\\u1cf1\\u1cf5\\u1cf6\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2119-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u212d\\u212f-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u2e2f\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309d-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312d\\u3131-\\u318e\\u31a0-\\u31ba\\u31f0-\\u31ff\\u3400-\\u4db5\\u4e00-\\u9fcc\\ua000-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua697\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua78e\\ua790-\\ua793\\ua7a0-\\ua7aa\\ua7f8-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa80-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uabc0-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc", r = "\\u0300-\\u036f\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u0620-\\u0649\\u0672-\\u06d3\\u06e7-\\u06e8\\u06fb-\\u06fc\\u0730-\\u074a\\u0800-\\u0814\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0840-\\u0857\\u08e4-\\u08fe\\u0900-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962-\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09d7\\u09df-\\u09e0\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2-\\u0ae3\\u0ae6-\\u0aef\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b56\\u0b57\\u0b5f-\\u0b60\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c01-\\u0c03\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62-\\u0c63\\u0c66-\\u0c6f\\u0c82\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2-\\u0ce3\\u0ce6-\\u0cef\\u0d02\\u0d03\\u0d46-\\u0d48\\u0d57\\u0d62-\\u0d63\\u0d66-\\u0d6f\\u0d82\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0df2\\u0df3\\u0e34-\\u0e3a\\u0e40-\\u0e45\\u0e50-\\u0e59\\u0eb4-\\u0eb9\\u0ec8-\\u0ecd\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f41-\\u0f47\\u0f71-\\u0f84\\u0f86-\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u1000-\\u1029\\u1040-\\u1049\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u170e-\\u1710\\u1720-\\u1730\\u1740-\\u1750\\u1772\\u1773\\u1780-\\u17b2\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u1810-\\u1819\\u1920-\\u192b\\u1930-\\u193b\\u1951-\\u196d\\u19b0-\\u19c0\\u19c8-\\u19c9\\u19d0-\\u19d9\\u1a00-\\u1a15\\u1a20-\\u1a53\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1b46-\\u1b4b\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c00-\\u1c22\\u1c40-\\u1c49\\u1c5b-\\u1c7d\\u1cd0-\\u1cd2\\u1d00-\\u1dbe\\u1e01-\\u1f15\\u200c\\u200d\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2d81-\\u2d96\\u2de0-\\u2dff\\u3021-\\u3028\\u3099\\u309a\\ua640-\\ua66d\\ua674-\\ua67d\\ua69f\\ua6f0-\\ua6f1\\ua7f8-\\ua800\\ua806\\ua80b\\ua823-\\ua827\\ua880-\\ua881\\ua8b4-\\ua8c4\\ua8d0-\\ua8d9\\ua8f3-\\ua8f7\\ua900-\\ua909\\ua926-\\ua92d\\ua930-\\ua945\\ua980-\\ua983\\ua9b3-\\ua9c0\\uaa00-\\uaa27\\uaa40-\\uaa41\\uaa4c-\\uaa4d\\uaa50-\\uaa59\\uaa7b\\uaae0-\\uaae9\\uaaf2-\\uaaf3\\uabc0-\\uabe1\\uabec\\uabed\\uabf0-\\uabf9\\ufb20-\\ufb28\\ufe00-\\ufe0f\\ufe20-\\ufe26\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f", s = "\\\\u[0-9a-fA-F]{4}|\\\\u\\{[0-9a-fA-F]+\\}", o = "(?:" + s + "|[" + t + i + "])", a = "(?:" + s + "|[" + e + i + r + "])*";
    n.identifier = new RegExp(o + a, "g"), n.identifierStart = new RegExp(o), n.identifierMatch = new RegExp("(?:" + s + "|[" + e + i + r + "])+"), n.newline = /[\n\r\u2028\u2029]/, n.lineBreak = new RegExp(`\r
|` + n.newline.source), n.allLineBreaks = new RegExp(n.lineBreak.source, "g");
  }(ql)), ql;
}
var Gl = {}, es = {}, Ih;
function Qu() {
  if (Ih) return es;
  Ih = 1;
  function n(i, r) {
    this.raw_options = t(i, r), this.disabled = this._get_boolean("disabled"), this.eol = this._get_characters("eol", "auto"), this.end_with_newline = this._get_boolean("end_with_newline"), this.indent_size = this._get_number("indent_size", 4), this.indent_char = this._get_characters("indent_char", " "), this.indent_level = this._get_number("indent_level"), this.preserve_newlines = this._get_boolean("preserve_newlines", !0), this.max_preserve_newlines = this._get_number("max_preserve_newlines", 32786), this.preserve_newlines || (this.max_preserve_newlines = 0), this.indent_with_tabs = this._get_boolean("indent_with_tabs", this.indent_char === "	"), this.indent_with_tabs && (this.indent_char = "	", this.indent_size === 1 && (this.indent_size = 4)), this.wrap_line_length = this._get_number("wrap_line_length", this._get_number("max_char")), this.indent_empty_lines = this._get_boolean("indent_empty_lines"), this.templating = this._get_selection_list("templating", ["auto", "none", "angular", "django", "erb", "handlebars", "php", "smarty"], ["auto"]);
  }
  n.prototype._get_array = function(i, r) {
    var s = this.raw_options[i], o = r || [];
    return typeof s == "object" ? s !== null && typeof s.concat == "function" && (o = s.concat()) : typeof s == "string" && (o = s.split(/[^a-zA-Z0-9_\/\-]+/)), o;
  }, n.prototype._get_boolean = function(i, r) {
    var s = this.raw_options[i], o = s === void 0 ? !!r : !!s;
    return o;
  }, n.prototype._get_characters = function(i, r) {
    var s = this.raw_options[i], o = r || "";
    return typeof s == "string" && (o = s.replace(/\\r/, "\r").replace(/\\n/, `
`).replace(/\\t/, "	")), o;
  }, n.prototype._get_number = function(i, r) {
    var s = this.raw_options[i];
    r = parseInt(r, 10), isNaN(r) && (r = 0);
    var o = parseInt(s, 10);
    return isNaN(o) && (o = r), o;
  }, n.prototype._get_selection = function(i, r, s) {
    var o = this._get_selection_list(i, r, s);
    if (o.length !== 1)
      throw new Error(
        "Invalid Option Value: The option '" + i + `' can only be one of the following values:
` + r + `
You passed in: '` + this.raw_options[i] + "'"
      );
    return o[0];
  }, n.prototype._get_selection_list = function(i, r, s) {
    if (!r || r.length === 0)
      throw new Error("Selection list cannot be empty.");
    if (s = s || [r[0]], !this._is_valid_selection(s, r))
      throw new Error("Invalid Default Value!");
    var o = this._get_array(i, s);
    if (!this._is_valid_selection(o, r))
      throw new Error(
        "Invalid Option Value: The option '" + i + `' can contain only the following values:
` + r + `
You passed in: '` + this.raw_options[i] + "'"
      );
    return o;
  }, n.prototype._is_valid_selection = function(i, r) {
    return i.length && r.length && !i.some(function(s) {
      return r.indexOf(s) === -1;
    });
  };
  function t(i, r) {
    var s = {};
    i = e(i);
    var o;
    for (o in i)
      o !== r && (s[o] = i[o]);
    if (r && i[r])
      for (o in i[r])
        s[o] = i[r][o];
    return s;
  }
  function e(i) {
    var r = {}, s;
    for (s in i) {
      var o = s.replace(/-/g, "_");
      r[o] = i[s];
    }
    return r;
  }
  return es.Options = n, es.normalizeOpts = e, es.mergeOpts = t, es;
}
var Ph;
function d_() {
  if (Ph) return Gl;
  Ph = 1;
  var n = Qu().Options, t = ["before-newline", "after-newline", "preserve-newline"];
  function e(i) {
    n.call(this, i, "js");
    var r = this.raw_options.brace_style || null;
    r === "expand-strict" ? this.raw_options.brace_style = "expand" : r === "collapse-preserve-inline" ? this.raw_options.brace_style = "collapse,preserve-inline" : this.raw_options.braces_on_own_line !== void 0 && (this.raw_options.brace_style = this.raw_options.braces_on_own_line ? "expand" : "collapse");
    var s = this._get_selection_list("brace_style", ["collapse", "expand", "end-expand", "none", "preserve-inline"]);
    this.brace_preserve_inline = !1, this.brace_style = "collapse";
    for (var o = 0; o < s.length; o++)
      s[o] === "preserve-inline" ? this.brace_preserve_inline = !0 : this.brace_style = s[o];
    this.unindent_chained_methods = this._get_boolean("unindent_chained_methods"), this.break_chained_methods = this._get_boolean("break_chained_methods"), this.space_in_paren = this._get_boolean("space_in_paren"), this.space_in_empty_paren = this._get_boolean("space_in_empty_paren"), this.jslint_happy = this._get_boolean("jslint_happy"), this.space_after_anon_function = this._get_boolean("space_after_anon_function"), this.space_after_named_function = this._get_boolean("space_after_named_function"), this.keep_array_indentation = this._get_boolean("keep_array_indentation"), this.space_before_conditional = this._get_boolean("space_before_conditional", !0), this.unescape_strings = this._get_boolean("unescape_strings"), this.e4x = this._get_boolean("e4x"), this.comma_first = this._get_boolean("comma_first"), this.operator_position = this._get_selection("operator_position", t), this.test_output_raw = this._get_boolean("test_output_raw"), this.jslint_happy && (this.space_after_anon_function = !0);
  }
  return e.prototype = new n(), Gl.Options = e, Gl;
}
var ar = {}, Jl = {}, Dh;
function td() {
  if (Dh) return Jl;
  Dh = 1;
  var n = RegExp.prototype.hasOwnProperty("sticky");
  function t(e) {
    this.__input = e || "", this.__input_length = this.__input.length, this.__position = 0;
  }
  return t.prototype.restart = function() {
    this.__position = 0;
  }, t.prototype.back = function() {
    this.__position > 0 && (this.__position -= 1);
  }, t.prototype.hasNext = function() {
    return this.__position < this.__input_length;
  }, t.prototype.next = function() {
    var e = null;
    return this.hasNext() && (e = this.__input.charAt(this.__position), this.__position += 1), e;
  }, t.prototype.peek = function(e) {
    var i = null;
    return e = e || 0, e += this.__position, e >= 0 && e < this.__input_length && (i = this.__input.charAt(e)), i;
  }, t.prototype.__match = function(e, i) {
    e.lastIndex = i;
    var r = e.exec(this.__input);
    return r && !(n && e.sticky) && r.index !== i && (r = null), r;
  }, t.prototype.test = function(e, i) {
    return i = i || 0, i += this.__position, i >= 0 && i < this.__input_length ? !!this.__match(e, i) : !1;
  }, t.prototype.testChar = function(e, i) {
    var r = this.peek(i);
    return e.lastIndex = 0, r !== null && e.test(r);
  }, t.prototype.match = function(e) {
    var i = this.__match(e, this.__position);
    return i ? this.__position += i[0].length : i = null, i;
  }, t.prototype.read = function(e, i, r) {
    var s = "", o;
    return e && (o = this.match(e), o && (s += o[0])), i && (o || !e) && (s += this.readUntil(i, r)), s;
  }, t.prototype.readUntil = function(e, i) {
    var r = "", s = this.__position;
    e.lastIndex = this.__position;
    var o = e.exec(this.__input);
    return o ? (s = o.index, i && (s += o[0].length)) : s = this.__input_length, r = this.__input.substring(this.__position, s), this.__position = s, r;
  }, t.prototype.readUntilAfter = function(e) {
    return this.readUntil(e, !0);
  }, t.prototype.get_regexp = function(e, i) {
    var r = null, s = "g";
    return i && n && (s = "y"), typeof e == "string" && e !== "" ? r = new RegExp(e, s) : e && (r = new RegExp(e.source, s)), r;
  }, t.prototype.get_literal_regexp = function(e) {
    return RegExp(e.replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&"));
  }, t.prototype.peekUntilAfter = function(e) {
    var i = this.__position, r = this.readUntilAfter(e);
    return this.__position = i, r;
  }, t.prototype.lookBack = function(e) {
    var i = this.__position - 1;
    return i >= e.length && this.__input.substring(i - e.length, i).toLowerCase() === e;
  }, Jl.InputScanner = t, Jl;
}
var Lo = {}, Xl = {}, $h;
function uT() {
  if ($h) return Xl;
  $h = 1;
  function n(t) {
    this.__tokens = [], this.__tokens_length = this.__tokens.length, this.__position = 0, this.__parent_token = t;
  }
  return n.prototype.restart = function() {
    this.__position = 0;
  }, n.prototype.isEmpty = function() {
    return this.__tokens_length === 0;
  }, n.prototype.hasNext = function() {
    return this.__position < this.__tokens_length;
  }, n.prototype.next = function() {
    var t = null;
    return this.hasNext() && (t = this.__tokens[this.__position], this.__position += 1), t;
  }, n.prototype.peek = function(t) {
    var e = null;
    return t = t || 0, t += this.__position, t >= 0 && t < this.__tokens_length && (e = this.__tokens[t]), e;
  }, n.prototype.add = function(t) {
    this.__parent_token && (t.parent = this.__parent_token), this.__tokens.push(t), this.__tokens_length += 1;
  }, Xl.TokenStream = n, Xl;
}
var Yl = {}, Zl = {}, Bh;
function cl() {
  if (Bh) return Zl;
  Bh = 1;
  function n(t, e) {
    this._input = t, this._starting_pattern = null, this._match_pattern = null, this._until_pattern = null, this._until_after = !1, e && (this._starting_pattern = this._input.get_regexp(e._starting_pattern, !0), this._match_pattern = this._input.get_regexp(e._match_pattern, !0), this._until_pattern = this._input.get_regexp(e._until_pattern), this._until_after = e._until_after);
  }
  return n.prototype.read = function() {
    var t = this._input.read(this._starting_pattern);
    return (!this._starting_pattern || t) && (t += this._input.read(this._match_pattern, this._until_pattern, this._until_after)), t;
  }, n.prototype.read_match = function() {
    return this._input.match(this._match_pattern);
  }, n.prototype.until_after = function(t) {
    var e = this._create();
    return e._until_after = !0, e._until_pattern = this._input.get_regexp(t), e._update(), e;
  }, n.prototype.until = function(t) {
    var e = this._create();
    return e._until_after = !1, e._until_pattern = this._input.get_regexp(t), e._update(), e;
  }, n.prototype.starting_with = function(t) {
    var e = this._create();
    return e._starting_pattern = this._input.get_regexp(t, !0), e._update(), e;
  }, n.prototype.matching = function(t) {
    var e = this._create();
    return e._match_pattern = this._input.get_regexp(t, !0), e._update(), e;
  }, n.prototype._create = function() {
    return new n(this._input, this);
  }, n.prototype._update = function() {
  }, Zl.Pattern = n, Zl;
}
var zh;
function dT() {
  if (zh) return Yl;
  zh = 1;
  var n = cl().Pattern;
  function t(e, i) {
    n.call(this, e, i), i ? this._line_regexp = this._input.get_regexp(i._line_regexp) : this.__set_whitespace_patterns("", ""), this.newline_count = 0, this.whitespace_before_token = "";
  }
  return t.prototype = new n(), t.prototype.__set_whitespace_patterns = function(e, i) {
    e += "\\t ", i += "\\n\\r", this._match_pattern = this._input.get_regexp(
      "[" + e + i + "]+",
      !0
    ), this._newline_regexp = this._input.get_regexp(
      "\\r\\n|[" + i + "]"
    );
  }, t.prototype.read = function() {
    this.newline_count = 0, this.whitespace_before_token = "";
    var e = this._input.read(this._match_pattern);
    if (e === " ")
      this.whitespace_before_token = " ";
    else if (e) {
      var i = this.__split(this._newline_regexp, e);
      this.newline_count = i.length - 1, this.whitespace_before_token = i[this.newline_count];
    }
    return e;
  }, t.prototype.matching = function(e, i) {
    var r = this._create();
    return r.__set_whitespace_patterns(e, i), r._update(), r;
  }, t.prototype._create = function() {
    return new t(this._input, this);
  }, t.prototype.__split = function(e, i) {
    e.lastIndex = 0;
    for (var r = 0, s = [], o = e.exec(i); o; )
      s.push(i.substring(r, o.index)), r = o.index + o[0].length, o = e.exec(i);
    return r < i.length ? s.push(i.substring(r, i.length)) : s.push(""), s;
  }, Yl.WhitespacePattern = t, Yl;
}
var Hh;
function Ha() {
  if (Hh) return Lo;
  Hh = 1;
  var n = td().InputScanner, t = c_().Token, e = uT().TokenStream, i = dT().WhitespacePattern, r = {
    START: "TK_START",
    RAW: "TK_RAW",
    EOF: "TK_EOF"
  }, s = function(o, a) {
    this._input = new n(o), this._options = a || {}, this.__tokens = null, this._patterns = {}, this._patterns.whitespace = new i(this._input);
  };
  return s.prototype.tokenize = function() {
    this._input.restart(), this.__tokens = new e(), this._reset();
    for (var o, a = new t(r.START, ""), l = null, c = [], u = new e(); a.type !== r.EOF; ) {
      for (o = this._get_next_token(a, l); this._is_comment(o); )
        u.add(o), o = this._get_next_token(a, l);
      u.isEmpty() || (o.comments_before = u, u = new e()), o.parent = l, this._is_opening(o) ? (c.push(l), l = o) : l && this._is_closing(o, l) && (o.opened = l, l.closed = o, l = c.pop(), o.parent = l), o.previous = a, a.next = o, this.__tokens.add(o), a = o;
    }
    return this.__tokens;
  }, s.prototype._is_first_token = function() {
    return this.__tokens.isEmpty();
  }, s.prototype._reset = function() {
  }, s.prototype._get_next_token = function(o, a) {
    this._readWhitespace();
    var l = this._input.read(/.+/g);
    return l ? this._create_token(r.RAW, l) : this._create_token(r.EOF, "");
  }, s.prototype._is_comment = function(o) {
    return !1;
  }, s.prototype._is_opening = function(o) {
    return !1;
  }, s.prototype._is_closing = function(o, a) {
    return !1;
  }, s.prototype._create_token = function(o, a) {
    var l = new t(
      o,
      a,
      this._patterns.whitespace.newline_count,
      this._patterns.whitespace.whitespace_before_token
    );
    return l;
  }, s.prototype._readWhitespace = function() {
    return this._patterns.whitespace.read();
  }, Lo.Tokenizer = s, Lo.TOKEN = r, Lo;
}
var Ql = {}, Fh;
function ed() {
  if (Fh) return Ql;
  Fh = 1;
  function n(t, e) {
    t = typeof t == "string" ? t : t.source, e = typeof e == "string" ? e : e.source, this.__directives_block_pattern = new RegExp(t + / beautify( \w+[:]\w+)+ /.source + e, "g"), this.__directive_pattern = / (\w+)[:](\w+)/g, this.__directives_end_ignore_pattern = new RegExp(t + /\sbeautify\signore:end\s/.source + e, "g");
  }
  return n.prototype.get_directives = function(t) {
    if (!t.match(this.__directives_block_pattern))
      return null;
    var e = {};
    this.__directive_pattern.lastIndex = 0;
    for (var i = this.__directive_pattern.exec(t); i; )
      e[i[1]] = i[2], i = this.__directive_pattern.exec(t);
    return e;
  }, n.prototype.readIgnored = function(t) {
    return t.readUntilAfter(this.__directives_end_ignore_pattern);
  }, Ql.Directives = n, Ql;
}
var tc = {}, Vh;
function f_() {
  if (Vh) return tc;
  Vh = 1;
  var n = cl().Pattern, t = {
    django: !1,
    erb: !1,
    handlebars: !1,
    php: !1,
    smarty: !1,
    angular: !1
  };
  function e(i, r) {
    n.call(this, i, r), this.__template_pattern = null, this._disabled = Object.assign({}, t), this._excluded = Object.assign({}, t), r && (this.__template_pattern = this._input.get_regexp(r.__template_pattern), this._excluded = Object.assign(this._excluded, r._excluded), this._disabled = Object.assign(this._disabled, r._disabled));
    var s = new n(i);
    this.__patterns = {
      handlebars_comment: s.starting_with(/{{!--/).until_after(/--}}/),
      handlebars_unescaped: s.starting_with(/{{{/).until_after(/}}}/),
      handlebars: s.starting_with(/{{/).until_after(/}}/),
      php: s.starting_with(/<\?(?:[= ]|php)/).until_after(/\?>/),
      erb: s.starting_with(/<%[^%]/).until_after(/[^%]%>/),
      // django coflicts with handlebars a bit.
      django: s.starting_with(/{%/).until_after(/%}/),
      django_value: s.starting_with(/{{/).until_after(/}}/),
      django_comment: s.starting_with(/{#/).until_after(/#}/),
      smarty: s.starting_with(/{(?=[^}{\s\n])/).until_after(/[^\s\n]}/),
      smarty_comment: s.starting_with(/{\*/).until_after(/\*}/),
      smarty_literal: s.starting_with(/{literal}/).until_after(/{\/literal}/)
    };
  }
  return e.prototype = new n(), e.prototype._create = function() {
    return new e(this._input, this);
  }, e.prototype._update = function() {
    this.__set_templated_pattern();
  }, e.prototype.disable = function(i) {
    var r = this._create();
    return r._disabled[i] = !0, r._update(), r;
  }, e.prototype.read_options = function(i) {
    var r = this._create();
    for (var s in t)
      r._disabled[s] = i.templating.indexOf(s) === -1;
    return r._update(), r;
  }, e.prototype.exclude = function(i) {
    var r = this._create();
    return r._excluded[i] = !0, r._update(), r;
  }, e.prototype.read = function() {
    var i = "";
    this._match_pattern ? i = this._input.read(this._starting_pattern) : i = this._input.read(this._starting_pattern, this.__template_pattern);
    for (var r = this._read_template(); r; )
      this._match_pattern ? r += this._input.read(this._match_pattern) : r += this._input.readUntil(this.__template_pattern), i += r, r = this._read_template();
    return this._until_after && (i += this._input.readUntilAfter(this._until_pattern)), i;
  }, e.prototype.__set_templated_pattern = function() {
    var i = [];
    this._disabled.php || i.push(this.__patterns.php._starting_pattern.source), this._disabled.handlebars || i.push(this.__patterns.handlebars._starting_pattern.source), this._disabled.erb || i.push(this.__patterns.erb._starting_pattern.source), this._disabled.django || (i.push(this.__patterns.django._starting_pattern.source), i.push(this.__patterns.django_value._starting_pattern.source), i.push(this.__patterns.django_comment._starting_pattern.source)), this._disabled.smarty || i.push(this.__patterns.smarty._starting_pattern.source), this._until_pattern && i.push(this._until_pattern.source), this.__template_pattern = this._input.get_regexp("(?:" + i.join("|") + ")");
  }, e.prototype._read_template = function() {
    var i = "", r = this._input.peek();
    if (r === "<") {
      var s = this._input.peek(1);
      !this._disabled.php && !this._excluded.php && s === "?" && (i = i || this.__patterns.php.read()), !this._disabled.erb && !this._excluded.erb && s === "%" && (i = i || this.__patterns.erb.read());
    } else r === "{" && (!this._disabled.handlebars && !this._excluded.handlebars && (i = i || this.__patterns.handlebars_comment.read(), i = i || this.__patterns.handlebars_unescaped.read(), i = i || this.__patterns.handlebars.read()), this._disabled.django || (!this._excluded.django && !this._excluded.handlebars && (i = i || this.__patterns.django_value.read()), this._excluded.django || (i = i || this.__patterns.django_comment.read(), i = i || this.__patterns.django.read())), this._disabled.smarty || this._disabled.django && this._disabled.handlebars && (i = i || this.__patterns.smarty_comment.read(), i = i || this.__patterns.smarty_literal.read(), i = i || this.__patterns.smarty.read()));
    return i;
  }, tc.TemplatablePattern = e, tc;
}
var jh;
function Ro() {
  if (jh) return ar;
  jh = 1;
  var n = td().InputScanner, t = Ha().Tokenizer, e = Ha().TOKEN, i = ed().Directives, r = u_(), s = cl().Pattern, o = f_().TemplatablePattern;
  function a(w, O) {
    return O.indexOf(w) !== -1;
  }
  var l = {
    START_EXPR: "TK_START_EXPR",
    END_EXPR: "TK_END_EXPR",
    START_BLOCK: "TK_START_BLOCK",
    END_BLOCK: "TK_END_BLOCK",
    WORD: "TK_WORD",
    RESERVED: "TK_RESERVED",
    SEMICOLON: "TK_SEMICOLON",
    STRING: "TK_STRING",
    EQUALS: "TK_EQUALS",
    OPERATOR: "TK_OPERATOR",
    COMMA: "TK_COMMA",
    BLOCK_COMMENT: "TK_BLOCK_COMMENT",
    COMMENT: "TK_COMMENT",
    DOT: "TK_DOT",
    UNKNOWN: "TK_UNKNOWN",
    START: e.START,
    RAW: e.RAW,
    EOF: e.EOF
  }, c = new i(/\/\*/, /\*\//), u = /0[xX][0123456789abcdefABCDEF_]*n?|0[oO][01234567_]*n?|0[bB][01_]*n?|\d[\d_]*n|(?:\.\d[\d_]*|\d[\d_]*\.?[\d_]*)(?:[eE][+-]?[\d_]+)?/, d = /[0-9]/, f = /[^\d\.]/, h = ">>> === !== &&= ??= ||= << && >= ** != == <= >> || ?? |> < / - + > : & % ? ^ | *".split(" "), p = ">>>= ... >>= <<= === >>> !== **= &&= ??= ||= => ^= :: /= << <= == && -= >= >> != -- += ** || ?? ++ %= &= *= |= |> = ! ? > < : / ^ - + * & % ~ |";
  p = p.replace(/[-[\]{}()*+?.,\\^$|#]/g, "\\$&"), p = "\\?\\.(?!\\d) " + p, p = p.replace(/ /g, "|");
  var _ = new RegExp(p), g = "continue,try,throw,return,var,let,const,if,switch,case,default,for,while,break,function,import,export".split(","), m = g.concat(["do", "in", "of", "else", "get", "set", "new", "catch", "finally", "typeof", "yield", "async", "await", "from", "as", "class", "extends"]), y = new RegExp("^(?:" + m.join("|") + ")$"), x, k = function(w, O) {
    t.call(this, w, O), this._patterns.whitespace = this._patterns.whitespace.matching(
      /\u00A0\u1680\u180e\u2000-\u200a\u202f\u205f\u3000\ufeff/.source,
      /\u2028\u2029/.source
    );
    var v = new s(this._input), E = new o(this._input).read_options(this._options);
    this.__patterns = {
      template: E,
      identifier: E.starting_with(r.identifier).matching(r.identifierMatch),
      number: v.matching(u),
      punct: v.matching(_),
      // comment ends just before nearest linefeed or end of file
      comment: v.starting_with(/\/\//).until(/[\n\r\u2028\u2029]/),
      //  /* ... */ comment ends with nearest */ or end of file
      block_comment: v.starting_with(/\/\*/).until_after(/\*\//),
      html_comment_start: v.matching(/<!--/),
      html_comment_end: v.matching(/-->/),
      include: v.starting_with(/#include/).until_after(r.lineBreak),
      shebang: v.starting_with(/#!/).until_after(r.lineBreak),
      xml: v.matching(/[\s\S]*?<(\/?)([-a-zA-Z:0-9_.]+|{[^}]+?}|!\[CDATA\[[^\]]*?\]\]|)(\s*{[^}]+?}|\s+[-a-zA-Z:0-9_.]+|\s+[-a-zA-Z:0-9_.]+\s*=\s*('[^']*'|"[^"]*"|{([^{}]|{[^}]+?})+?}))*\s*(\/?)\s*>/),
      single_quote: E.until(/['\\\n\r\u2028\u2029]/),
      double_quote: E.until(/["\\\n\r\u2028\u2029]/),
      template_text: E.until(/[`\\$]/),
      template_expression: E.until(/[`}\\]/)
    };
  };
  k.prototype = new t(), k.prototype._is_comment = function(w) {
    return w.type === l.COMMENT || w.type === l.BLOCK_COMMENT || w.type === l.UNKNOWN;
  }, k.prototype._is_opening = function(w) {
    return w.type === l.START_BLOCK || w.type === l.START_EXPR;
  }, k.prototype._is_closing = function(w, O) {
    return (w.type === l.END_BLOCK || w.type === l.END_EXPR) && O && (w.text === "]" && O.text === "[" || w.text === ")" && O.text === "(" || w.text === "}" && O.text === "{");
  }, k.prototype._reset = function() {
    x = !1;
  }, k.prototype._get_next_token = function(w, O) {
    var v = null;
    this._readWhitespace();
    var E = this._input.peek();
    return E === null ? this._create_token(l.EOF, "") : (v = v || this._read_non_javascript(E), v = v || this._read_string(E), v = v || this._read_pair(E, this._input.peek(1)), v = v || this._read_word(w), v = v || this._read_singles(E), v = v || this._read_comment(E), v = v || this._read_regexp(E, w), v = v || this._read_xml(E, w), v = v || this._read_punctuation(), v = v || this._create_token(l.UNKNOWN, this._input.next()), v);
  }, k.prototype._read_word = function(w) {
    var O;
    if (O = this.__patterns.identifier.read(), O !== "")
      return O = O.replace(r.allLineBreaks, `
`), !(w.type === l.DOT || w.type === l.RESERVED && (w.text === "set" || w.text === "get")) && y.test(O) ? (O === "in" || O === "of") && (w.type === l.WORD || w.type === l.STRING) ? this._create_token(l.OPERATOR, O) : this._create_token(l.RESERVED, O) : this._create_token(l.WORD, O);
    if (O = this.__patterns.number.read(), O !== "")
      return this._create_token(l.WORD, O);
  }, k.prototype._read_singles = function(w) {
    var O = null;
    return w === "(" || w === "[" ? O = this._create_token(l.START_EXPR, w) : w === ")" || w === "]" ? O = this._create_token(l.END_EXPR, w) : w === "{" ? O = this._create_token(l.START_BLOCK, w) : w === "}" ? O = this._create_token(l.END_BLOCK, w) : w === ";" ? O = this._create_token(l.SEMICOLON, w) : w === "." && f.test(this._input.peek(1)) ? O = this._create_token(l.DOT, w) : w === "," && (O = this._create_token(l.COMMA, w)), O && this._input.next(), O;
  }, k.prototype._read_pair = function(w, O) {
    var v = null;
    return w === "#" && O === "{" && (v = this._create_token(l.START_BLOCK, w + O)), v && (this._input.next(), this._input.next()), v;
  }, k.prototype._read_punctuation = function() {
    var w = this.__patterns.punct.read();
    if (w !== "")
      return w === "=" ? this._create_token(l.EQUALS, w) : w === "?." ? this._create_token(l.DOT, w) : this._create_token(l.OPERATOR, w);
  }, k.prototype._read_non_javascript = function(w) {
    var O = "";
    if (w === "#") {
      if (this._is_first_token() && (O = this.__patterns.shebang.read(), O))
        return this._create_token(l.UNKNOWN, O.trim() + `
`);
      if (O = this.__patterns.include.read(), O)
        return this._create_token(l.UNKNOWN, O.trim() + `
`);
      w = this._input.next();
      var v = "#";
      if (this._input.hasNext() && this._input.testChar(d)) {
        do
          w = this._input.next(), v += w;
        while (this._input.hasNext() && w !== "#" && w !== "=");
        return w === "#" || (this._input.peek() === "[" && this._input.peek(1) === "]" ? (v += "[]", this._input.next(), this._input.next()) : this._input.peek() === "{" && this._input.peek(1) === "}" && (v += "{}", this._input.next(), this._input.next())), this._create_token(l.WORD, v);
      }
      this._input.back();
    } else if (w === "<" && this._is_first_token()) {
      if (O = this.__patterns.html_comment_start.read(), O) {
        for (; this._input.hasNext() && !this._input.testChar(r.newline); )
          O += this._input.next();
        return x = !0, this._create_token(l.COMMENT, O);
      }
    } else if (x && w === "-" && (O = this.__patterns.html_comment_end.read(), O))
      return x = !1, this._create_token(l.COMMENT, O);
    return null;
  }, k.prototype._read_comment = function(w) {
    var O = null;
    if (w === "/") {
      var v = "";
      if (this._input.peek(1) === "*") {
        v = this.__patterns.block_comment.read();
        var E = c.get_directives(v);
        E && E.ignore === "start" && (v += c.readIgnored(this._input)), v = v.replace(r.allLineBreaks, `
`), O = this._create_token(l.BLOCK_COMMENT, v), O.directives = E;
      } else this._input.peek(1) === "/" && (v = this.__patterns.comment.read(), O = this._create_token(l.COMMENT, v));
    }
    return O;
  }, k.prototype._read_string = function(w) {
    if (w === "`" || w === "'" || w === '"') {
      var O = this._input.next();
      return this.has_char_escapes = !1, w === "`" ? O += this._read_string_recursive("`", !0, "${") : O += this._read_string_recursive(w), this.has_char_escapes && this._options.unescape_strings && (O = S(O)), this._input.peek() === w && (O += this._input.next()), O = O.replace(r.allLineBreaks, `
`), this._create_token(l.STRING, O);
    }
    return null;
  }, k.prototype._allow_regexp_or_xml = function(w) {
    return w.type === l.RESERVED && a(w.text, ["return", "case", "throw", "else", "do", "typeof", "yield"]) || w.type === l.END_EXPR && w.text === ")" && w.opened.previous.type === l.RESERVED && a(w.opened.previous.text, ["if", "while", "for"]) || a(w.type, [
      l.COMMENT,
      l.START_EXPR,
      l.START_BLOCK,
      l.START,
      l.END_BLOCK,
      l.OPERATOR,
      l.EQUALS,
      l.EOF,
      l.SEMICOLON,
      l.COMMA
    ]);
  }, k.prototype._read_regexp = function(w, O) {
    if (w === "/" && this._allow_regexp_or_xml(O)) {
      for (var v = this._input.next(), E = !1, b = !1; this._input.hasNext() && (E || b || this._input.peek() !== w) && !this._input.testChar(r.newline); )
        v += this._input.peek(), E ? E = !1 : (E = this._input.peek() === "\\", this._input.peek() === "[" ? b = !0 : this._input.peek() === "]" && (b = !1)), this._input.next();
      return this._input.peek() === w && (v += this._input.next(), v += this._input.read(r.identifier)), this._create_token(l.STRING, v);
    }
    return null;
  }, k.prototype._read_xml = function(w, O) {
    if (this._options.e4x && w === "<" && this._allow_regexp_or_xml(O)) {
      var v = "", E = this.__patterns.xml.read_match();
      if (E) {
        for (var b = E[2].replace(/^{\s+/, "{").replace(/\s+}$/, "}"), T = b.indexOf("{") === 0, M = 0; E; ) {
          var F = !!E[1], D = E[2], U = !!E[E.length - 1] || D.slice(0, 8) === "![CDATA[";
          if (!U && (D === b || T && D.replace(/^{\s+/, "{").replace(/\s+}$/, "}")) && (F ? --M : ++M), v += E[0], M <= 0)
            break;
          E = this.__patterns.xml.read_match();
        }
        return E || (v += this._input.match(/[\s\S]*/g)[0]), v = v.replace(r.allLineBreaks, `
`), this._create_token(l.STRING, v);
      }
    }
    return null;
  };
  function S(w) {
    for (var O = "", v = 0, E = new n(w), b = null; E.hasNext(); )
      if (b = E.match(/([\s]|[^\\]|\\\\)+/g), b && (O += b[0]), E.peek() === "\\") {
        if (E.next(), E.peek() === "x")
          b = E.match(/x([0-9A-Fa-f]{2})/g);
        else if (E.peek() === "u")
          b = E.match(/u([0-9A-Fa-f]{4})/g), b || (b = E.match(/u\{([0-9A-Fa-f]+)\}/g));
        else {
          O += "\\", E.hasNext() && (O += E.next());
          continue;
        }
        if (!b || (v = parseInt(b[1], 16), v > 126 && v <= 255 && b[0].indexOf("x") === 0))
          return w;
        v >= 0 && v < 32 || v > 1114111 ? O += "\\" + b[0] : v === 34 || v === 39 || v === 92 ? O += "\\" + String.fromCharCode(v) : O += String.fromCharCode(v);
      }
    return O;
  }
  return k.prototype._read_string_recursive = function(w, O, v) {
    var E, b;
    w === "'" ? b = this.__patterns.single_quote : w === '"' ? b = this.__patterns.double_quote : w === "`" ? b = this.__patterns.template_text : w === "}" && (b = this.__patterns.template_expression);
    for (var T = b.read(), M = ""; this._input.hasNext(); ) {
      if (M = this._input.next(), M === w || !O && r.newline.test(M)) {
        this._input.back();
        break;
      } else M === "\\" && this._input.hasNext() ? (E = this._input.peek(), E === "x" || E === "u" ? this.has_char_escapes = !0 : E === "\r" && this._input.peek(1) === `
` && this._input.next(), M += this._input.next()) : v && (v === "${" && M === "$" && this._input.peek() === "{" && (M += this._input.next()), v === M && (w === "`" ? M += this._read_string_recursive("}", O, "`") : M += this._read_string_recursive("`", O, "${"), this._input.hasNext() && (M += this._input.next())));
      M += b.read(), T += M;
    }
    return T;
  }, ar.Tokenizer = k, ar.TOKEN = l, ar.positionable_operators = h.slice(), ar.line_starters = g.slice(), ar;
}
var Wh;
function fT() {
  if (Wh) return Wl;
  Wh = 1;
  var n = Zu().Output, t = c_().Token, e = u_(), i = d_().Options, r = Ro().Tokenizer, s = Ro().line_starters, o = Ro().positionable_operators, a = Ro().TOKEN;
  function l(b, T) {
    return T.indexOf(b) !== -1;
  }
  function c(b) {
    return b.replace(/^\s+/g, "");
  }
  function u(b) {
    for (var T = {}, M = 0; M < b.length; M++)
      T[b[M].replace(/-/g, "_")] = b[M];
    return T;
  }
  function d(b, T) {
    return b && b.type === a.RESERVED && b.text === T;
  }
  function f(b, T) {
    return b && b.type === a.RESERVED && l(b.text, T);
  }
  var h = ["case", "return", "do", "if", "throw", "else", "await", "break", "continue", "async"], p = ["before-newline", "after-newline", "preserve-newline"], _ = u(p), g = [_.before_newline, _.preserve_newline], m = {
    BlockStatement: "BlockStatement",
    // 'BLOCK'
    Statement: "Statement",
    // 'STATEMENT'
    ObjectLiteral: "ObjectLiteral",
    // 'OBJECT',
    ArrayLiteral: "ArrayLiteral",
    //'[EXPRESSION]',
    ForInitializer: "ForInitializer",
    //'(FOR-EXPRESSION)',
    Conditional: "Conditional",
    //'(COND-EXPRESSION)',
    Expression: "Expression"
    //'(EXPRESSION)'
  };
  function y(b, T) {
    T.multiline_frame || T.mode === m.ForInitializer || T.mode === m.Conditional || b.remove_indent(T.start_line_index);
  }
  function x(b) {
    b = b.replace(e.allLineBreaks, `
`);
    for (var T = [], M = b.indexOf(`
`); M !== -1; )
      T.push(b.substring(0, M)), b = b.substring(M + 1), M = b.indexOf(`
`);
    return b.length && T.push(b), T;
  }
  function k(b) {
    return b === m.ArrayLiteral;
  }
  function S(b) {
    return l(b, [m.Expression, m.ForInitializer, m.Conditional]);
  }
  function w(b, T) {
    for (var M = 0; M < b.length; M++) {
      var F = b[M].trim();
      if (F.charAt(0) !== T)
        return !1;
    }
    return !0;
  }
  function O(b, T) {
    for (var M = 0, F = b.length, D; M < F; M++)
      if (D = b[M], D && D.indexOf(T) !== 0)
        return !1;
    return !0;
  }
  function v(b, T) {
    T = T || {}, this._source_text = b || "", this._output = null, this._tokens = null, this._last_last_text = null, this._flags = null, this._previous_flags = null, this._flag_store = null, this._options = new i(T);
  }
  v.prototype.create_flags = function(b, T) {
    var M = 0;
    b && (M = b.indentation_level, !this._output.just_added_newline() && b.line_indent_level > M && (M = b.line_indent_level));
    var F = {
      mode: T,
      parent: b,
      last_token: b ? b.last_token : new t(a.START_BLOCK, ""),
      // last token text
      last_word: b ? b.last_word : "",
      // last TOKEN.WORD passed
      declaration_statement: !1,
      declaration_assignment: !1,
      multiline_frame: !1,
      inline_frame: !1,
      if_block: !1,
      else_block: !1,
      class_start_block: !1,
      // class A { INSIDE HERE } or class B extends C { INSIDE HERE }
      do_block: !1,
      do_while: !1,
      import_block: !1,
      in_case_statement: !1,
      // switch(..){ INSIDE HERE }
      in_case: !1,
      // we're on the exact line with "case 0:"
      case_body: !1,
      // the indented case-action block
      case_block: !1,
      // the indented case-action block is wrapped with {}
      indentation_level: M,
      alignment: 0,
      line_indent_level: b ? b.line_indent_level : M,
      start_line_index: this._output.get_line_number(),
      ternary_depth: 0
    };
    return F;
  }, v.prototype._reset = function(b) {
    var T = b.match(/^[\t ]*/)[0];
    this._last_last_text = "", this._output = new n(this._options, T), this._output.raw = this._options.test_output_raw, this._flag_store = [], this.set_mode(m.BlockStatement);
    var M = new r(b, this._options);
    return this._tokens = M.tokenize(), b;
  }, v.prototype.beautify = function() {
    if (this._options.disabled)
      return this._source_text;
    var b, T = this._reset(this._source_text), M = this._options.eol;
    this._options.eol === "auto" && (M = `
`, T && e.lineBreak.test(T || "") && (M = T.match(e.lineBreak)[0]));
    for (var F = this._tokens.next(); F; )
      this.handle_token(F), this._last_last_text = this._flags.last_token.text, this._flags.last_token = F, F = this._tokens.next();
    return b = this._output.get_code(M), b;
  }, v.prototype.handle_token = function(b, T) {
    b.type === a.START_EXPR ? this.handle_start_expr(b) : b.type === a.END_EXPR ? this.handle_end_expr(b) : b.type === a.START_BLOCK ? this.handle_start_block(b) : b.type === a.END_BLOCK ? this.handle_end_block(b) : b.type === a.WORD ? this.handle_word(b) : b.type === a.RESERVED ? this.handle_word(b) : b.type === a.SEMICOLON ? this.handle_semicolon(b) : b.type === a.STRING ? this.handle_string(b) : b.type === a.EQUALS ? this.handle_equals(b) : b.type === a.OPERATOR ? this.handle_operator(b) : b.type === a.COMMA ? this.handle_comma(b) : b.type === a.BLOCK_COMMENT ? this.handle_block_comment(b, T) : b.type === a.COMMENT ? this.handle_comment(b, T) : b.type === a.DOT ? this.handle_dot(b) : b.type === a.EOF ? this.handle_eof(b) : b.type === a.UNKNOWN ? this.handle_unknown(b, T) : this.handle_unknown(b, T);
  }, v.prototype.handle_whitespace_and_comments = function(b, T) {
    var M = b.newlines, F = this._options.keep_array_indentation && k(this._flags.mode);
    if (b.comments_before)
      for (var D = b.comments_before.next(); D; )
        this.handle_whitespace_and_comments(D, T), this.handle_token(D, T), D = b.comments_before.next();
    if (F)
      for (var U = 0; U < M; U += 1)
        this.print_newline(U > 0, T);
    else if (this._options.max_preserve_newlines && M > this._options.max_preserve_newlines && (M = this._options.max_preserve_newlines), this._options.preserve_newlines && M > 1) {
      this.print_newline(!1, T);
      for (var q = 1; q < M; q += 1)
        this.print_newline(!0, T);
    }
  };
  var E = ["async", "break", "continue", "return", "throw", "yield"];
  return v.prototype.allow_wrap_or_preserved_newline = function(b, T) {
    if (T = T === void 0 ? !1 : T, !this._output.just_added_newline()) {
      var M = this._options.preserve_newlines && b.newlines || T, F = l(this._flags.last_token.text, o) || l(b.text, o);
      if (F) {
        var D = l(this._flags.last_token.text, o) && l(this._options.operator_position, g) || l(b.text, o);
        M = M && D;
      }
      if (M)
        this.print_newline(!1, !0);
      else if (this._options.wrap_line_length) {
        if (f(this._flags.last_token, E))
          return;
        this._output.set_wrap_point();
      }
    }
  }, v.prototype.print_newline = function(b, T) {
    if (!T && this._flags.last_token.text !== ";" && this._flags.last_token.text !== "," && this._flags.last_token.text !== "=" && (this._flags.last_token.type !== a.OPERATOR || this._flags.last_token.text === "--" || this._flags.last_token.text === "++"))
      for (var M = this._tokens.peek(); this._flags.mode === m.Statement && !(this._flags.if_block && d(M, "else")) && !this._flags.do_block; )
        this.restore_mode();
    this._output.add_new_line(b) && (this._flags.multiline_frame = !0);
  }, v.prototype.print_token_line_indentation = function(b) {
    this._output.just_added_newline() && (this._options.keep_array_indentation && b.newlines && (b.text === "[" || k(this._flags.mode)) ? (this._output.current_line.set_indent(-1), this._output.current_line.push(b.whitespace_before), this._output.space_before_token = !1) : this._output.set_indent(this._flags.indentation_level, this._flags.alignment) && (this._flags.line_indent_level = this._flags.indentation_level));
  }, v.prototype.print_token = function(b) {
    if (this._output.raw) {
      this._output.add_raw_token(b);
      return;
    }
    if (this._options.comma_first && b.previous && b.previous.type === a.COMMA && this._output.just_added_newline() && this._output.previous_line.last() === ",") {
      var T = this._output.previous_line.pop();
      this._output.previous_line.is_empty() && (this._output.previous_line.push(T), this._output.trim(!0), this._output.current_line.pop(), this._output.trim()), this.print_token_line_indentation(b), this._output.add_token(","), this._output.space_before_token = !0;
    }
    this.print_token_line_indentation(b), this._output.non_breaking_space = !0, this._output.add_token(b.text), this._output.previous_token_wrapped && (this._flags.multiline_frame = !0);
  }, v.prototype.indent = function() {
    this._flags.indentation_level += 1, this._output.set_indent(this._flags.indentation_level, this._flags.alignment);
  }, v.prototype.deindent = function() {
    this._flags.indentation_level > 0 && (!this._flags.parent || this._flags.indentation_level > this._flags.parent.indentation_level) && (this._flags.indentation_level -= 1, this._output.set_indent(this._flags.indentation_level, this._flags.alignment));
  }, v.prototype.set_mode = function(b) {
    this._flags ? (this._flag_store.push(this._flags), this._previous_flags = this._flags) : this._previous_flags = this.create_flags(null, b), this._flags = this.create_flags(this._previous_flags, b), this._output.set_indent(this._flags.indentation_level, this._flags.alignment);
  }, v.prototype.restore_mode = function() {
    this._flag_store.length > 0 && (this._previous_flags = this._flags, this._flags = this._flag_store.pop(), this._previous_flags.mode === m.Statement && y(this._output, this._previous_flags), this._output.set_indent(this._flags.indentation_level, this._flags.alignment));
  }, v.prototype.start_of_object_property = function() {
    return this._flags.parent.mode === m.ObjectLiteral && this._flags.mode === m.Statement && (this._flags.last_token.text === ":" && this._flags.ternary_depth === 0 || f(this._flags.last_token, ["get", "set"]));
  }, v.prototype.start_of_statement = function(b) {
    var T = !1;
    return T = T || f(this._flags.last_token, ["var", "let", "const"]) && b.type === a.WORD, T = T || d(this._flags.last_token, "do"), T = T || !(this._flags.parent.mode === m.ObjectLiteral && this._flags.mode === m.Statement) && f(this._flags.last_token, E) && !b.newlines, T = T || d(this._flags.last_token, "else") && !(d(b, "if") && !b.comments_before), T = T || this._flags.last_token.type === a.END_EXPR && (this._previous_flags.mode === m.ForInitializer || this._previous_flags.mode === m.Conditional), T = T || this._flags.last_token.type === a.WORD && this._flags.mode === m.BlockStatement && !this._flags.in_case && !(b.text === "--" || b.text === "++") && this._last_last_text !== "function" && b.type !== a.WORD && b.type !== a.RESERVED, T = T || this._flags.mode === m.ObjectLiteral && (this._flags.last_token.text === ":" && this._flags.ternary_depth === 0 || f(this._flags.last_token, ["get", "set"])), T ? (this.set_mode(m.Statement), this.indent(), this.handle_whitespace_and_comments(b, !0), this.start_of_object_property() || this.allow_wrap_or_preserved_newline(
      b,
      f(b, ["do", "for", "if", "while"])
    ), !0) : !1;
  }, v.prototype.handle_start_expr = function(b) {
    this.start_of_statement(b) || this.handle_whitespace_and_comments(b);
    var T = m.Expression;
    if (b.text === "[") {
      if (this._flags.last_token.type === a.WORD || this._flags.last_token.text === ")") {
        f(this._flags.last_token, s) && (this._output.space_before_token = !0), this.print_token(b), this.set_mode(T), this.indent(), this._options.space_in_paren && (this._output.space_before_token = !0);
        return;
      }
      T = m.ArrayLiteral, k(this._flags.mode) && (this._flags.last_token.text === "[" || this._flags.last_token.text === "," && (this._last_last_text === "]" || this._last_last_text === "}")) && (this._options.keep_array_indentation || this.print_newline()), l(this._flags.last_token.type, [a.START_EXPR, a.END_EXPR, a.WORD, a.OPERATOR, a.DOT]) || (this._output.space_before_token = !0);
    } else {
      if (this._flags.last_token.type === a.RESERVED)
        this._flags.last_token.text === "for" ? (this._output.space_before_token = this._options.space_before_conditional, T = m.ForInitializer) : l(this._flags.last_token.text, ["if", "while", "switch"]) ? (this._output.space_before_token = this._options.space_before_conditional, T = m.Conditional) : l(this._flags.last_word, ["await", "async"]) ? this._output.space_before_token = !0 : this._flags.last_token.text === "import" && b.whitespace_before === "" ? this._output.space_before_token = !1 : (l(this._flags.last_token.text, s) || this._flags.last_token.text === "catch") && (this._output.space_before_token = !0);
      else if (this._flags.last_token.type === a.EQUALS || this._flags.last_token.type === a.OPERATOR)
        this.start_of_object_property() || this.allow_wrap_or_preserved_newline(b);
      else if (this._flags.last_token.type === a.WORD) {
        this._output.space_before_token = !1;
        var M = this._tokens.peek(-3);
        if (this._options.space_after_named_function && M) {
          var F = this._tokens.peek(-4);
          f(M, ["async", "function"]) || M.text === "*" && f(F, ["async", "function"]) ? this._output.space_before_token = !0 : this._flags.mode === m.ObjectLiteral ? (M.text === "{" || M.text === "," || M.text === "*" && (F.text === "{" || F.text === ",")) && (this._output.space_before_token = !0) : this._flags.parent && this._flags.parent.class_start_block && (this._output.space_before_token = !0);
        }
      } else
        this.allow_wrap_or_preserved_newline(b);
      (this._flags.last_token.type === a.RESERVED && (this._flags.last_word === "function" || this._flags.last_word === "typeof") || this._flags.last_token.text === "*" && (l(this._last_last_text, ["function", "yield"]) || this._flags.mode === m.ObjectLiteral && l(this._last_last_text, ["{", ","]))) && (this._output.space_before_token = this._options.space_after_anon_function);
    }
    this._flags.last_token.text === ";" || this._flags.last_token.type === a.START_BLOCK ? this.print_newline() : (this._flags.last_token.type === a.END_EXPR || this._flags.last_token.type === a.START_EXPR || this._flags.last_token.type === a.END_BLOCK || this._flags.last_token.text === "." || this._flags.last_token.type === a.COMMA) && this.allow_wrap_or_preserved_newline(b, b.newlines), this.print_token(b), this.set_mode(T), this._options.space_in_paren && (this._output.space_before_token = !0), this.indent();
  }, v.prototype.handle_end_expr = function(b) {
    for (; this._flags.mode === m.Statement; )
      this.restore_mode();
    this.handle_whitespace_and_comments(b), this._flags.multiline_frame && this.allow_wrap_or_preserved_newline(
      b,
      b.text === "]" && k(this._flags.mode) && !this._options.keep_array_indentation
    ), this._options.space_in_paren && (this._flags.last_token.type === a.START_EXPR && !this._options.space_in_empty_paren ? (this._output.trim(), this._output.space_before_token = !1) : this._output.space_before_token = !0), this.deindent(), this.print_token(b), this.restore_mode(), y(this._output, this._previous_flags), this._flags.do_while && this._previous_flags.mode === m.Conditional && (this._previous_flags.mode = m.Expression, this._flags.do_block = !1, this._flags.do_while = !1);
  }, v.prototype.handle_start_block = function(b) {
    this.handle_whitespace_and_comments(b);
    var T = this._tokens.peek(), M = this._tokens.peek(1);
    this._flags.last_word === "switch" && this._flags.last_token.type === a.END_EXPR ? (this.set_mode(m.BlockStatement), this._flags.in_case_statement = !0) : this._flags.case_body ? this.set_mode(m.BlockStatement) : M && (l(M.text, [":", ","]) && l(T.type, [a.STRING, a.WORD, a.RESERVED]) || l(T.text, ["get", "set", "..."]) && l(M.type, [a.WORD, a.RESERVED])) ? l(this._last_last_text, ["class", "interface"]) && !l(M.text, [":", ","]) ? this.set_mode(m.BlockStatement) : this.set_mode(m.ObjectLiteral) : this._flags.last_token.type === a.OPERATOR && this._flags.last_token.text === "=>" ? this.set_mode(m.BlockStatement) : l(this._flags.last_token.type, [a.EQUALS, a.START_EXPR, a.COMMA, a.OPERATOR]) || f(this._flags.last_token, ["return", "throw", "import", "default"]) ? this.set_mode(m.ObjectLiteral) : this.set_mode(m.BlockStatement), this._flags.last_token && f(this._flags.last_token.previous, ["class", "extends"]) && (this._flags.class_start_block = !0);
    var F = !T.comments_before && T.text === "}", D = F && this._flags.last_word === "function" && this._flags.last_token.type === a.END_EXPR;
    if (this._options.brace_preserve_inline) {
      var U = 0, q = null;
      this._flags.inline_frame = !0;
      do
        if (U += 1, q = this._tokens.peek(U - 1), q.newlines) {
          this._flags.inline_frame = !1;
          break;
        }
      while (q.type !== a.EOF && !(q.type === a.END_BLOCK && q.opened === b));
    }
    (this._options.brace_style === "expand" || this._options.brace_style === "none" && b.newlines) && !this._flags.inline_frame ? this._flags.last_token.type !== a.OPERATOR && (D || this._flags.last_token.type === a.EQUALS || f(this._flags.last_token, h) && this._flags.last_token.text !== "else") ? this._output.space_before_token = !0 : this.print_newline(!1, !0) : (k(this._previous_flags.mode) && (this._flags.last_token.type === a.START_EXPR || this._flags.last_token.type === a.COMMA) && ((this._flags.last_token.type === a.COMMA || this._options.space_in_paren) && (this._output.space_before_token = !0), (this._flags.last_token.type === a.COMMA || this._flags.last_token.type === a.START_EXPR && this._flags.inline_frame) && (this.allow_wrap_or_preserved_newline(b), this._previous_flags.multiline_frame = this._previous_flags.multiline_frame || this._flags.multiline_frame, this._flags.multiline_frame = !1)), this._flags.last_token.type !== a.OPERATOR && this._flags.last_token.type !== a.START_EXPR && (l(this._flags.last_token.type, [a.START_BLOCK, a.SEMICOLON]) && !this._flags.inline_frame ? this.print_newline() : this._output.space_before_token = !0)), this.print_token(b), this.indent(), !F && !(this._options.brace_preserve_inline && this._flags.inline_frame) && this.print_newline();
  }, v.prototype.handle_end_block = function(b) {
    for (this.handle_whitespace_and_comments(b); this._flags.mode === m.Statement; )
      this.restore_mode();
    var T = this._flags.last_token.type === a.START_BLOCK;
    this._flags.inline_frame && !T ? this._output.space_before_token = !0 : this._options.brace_style === "expand" ? T || this.print_newline() : T || (k(this._flags.mode) && this._options.keep_array_indentation ? (this._options.keep_array_indentation = !1, this.print_newline(), this._options.keep_array_indentation = !0) : this.print_newline()), this.restore_mode(), this.print_token(b);
  }, v.prototype.handle_word = function(b) {
    if (b.type === a.RESERVED) {
      if (l(b.text, ["set", "get"]) && this._flags.mode !== m.ObjectLiteral)
        b.type = a.WORD;
      else if (b.text === "import" && l(this._tokens.peek().text, ["(", "."]))
        b.type = a.WORD;
      else if (l(b.text, ["as", "from"]) && !this._flags.import_block)
        b.type = a.WORD;
      else if (this._flags.mode === m.ObjectLiteral) {
        var T = this._tokens.peek();
        T.text === ":" && (b.type = a.WORD);
      }
    }
    if (this.start_of_statement(b) ? f(this._flags.last_token, ["var", "let", "const"]) && b.type === a.WORD && (this._flags.declaration_statement = !0) : b.newlines && !S(this._flags.mode) && (this._flags.last_token.type !== a.OPERATOR || this._flags.last_token.text === "--" || this._flags.last_token.text === "++") && this._flags.last_token.type !== a.EQUALS && (this._options.preserve_newlines || !f(this._flags.last_token, ["var", "let", "const", "set", "get"])) ? (this.handle_whitespace_and_comments(b), this.print_newline()) : this.handle_whitespace_and_comments(b), this._flags.do_block && !this._flags.do_while)
      if (d(b, "while")) {
        this._output.space_before_token = !0, this.print_token(b), this._output.space_before_token = !0, this._flags.do_while = !0;
        return;
      } else
        this.print_newline(), this._flags.do_block = !1;
    if (this._flags.if_block)
      if (!this._flags.else_block && d(b, "else"))
        this._flags.else_block = !0;
      else {
        for (; this._flags.mode === m.Statement; )
          this.restore_mode();
        this._flags.if_block = !1, this._flags.else_block = !1;
      }
    if (this._flags.in_case_statement && f(b, ["case", "default"])) {
      this.print_newline(), !this._flags.case_block && (this._flags.case_body || this._options.jslint_happy) && this.deindent(), this._flags.case_body = !1, this.print_token(b), this._flags.in_case = !0;
      return;
    }
    if ((this._flags.last_token.type === a.COMMA || this._flags.last_token.type === a.START_EXPR || this._flags.last_token.type === a.EQUALS || this._flags.last_token.type === a.OPERATOR) && !this.start_of_object_property() && !// start of object property is different for numeric values with +/- prefix operators
    (l(this._flags.last_token.text, ["+", "-"]) && this._last_last_text === ":" && this._flags.parent.mode === m.ObjectLiteral) && this.allow_wrap_or_preserved_newline(b), d(b, "function")) {
      (l(this._flags.last_token.text, ["}", ";"]) || this._output.just_added_newline() && !(l(this._flags.last_token.text, ["(", "[", "{", ":", "=", ","]) || this._flags.last_token.type === a.OPERATOR)) && !this._output.just_added_blankline() && !b.comments_before && (this.print_newline(), this.print_newline(!0)), this._flags.last_token.type === a.RESERVED || this._flags.last_token.type === a.WORD ? f(this._flags.last_token, ["get", "set", "new", "export"]) || f(this._flags.last_token, E) ? this._output.space_before_token = !0 : d(this._flags.last_token, "default") && this._last_last_text === "export" ? this._output.space_before_token = !0 : this._flags.last_token.text === "declare" ? this._output.space_before_token = !0 : this.print_newline() : this._flags.last_token.type === a.OPERATOR || this._flags.last_token.text === "=" ? this._output.space_before_token = !0 : !this._flags.multiline_frame && (S(this._flags.mode) || k(this._flags.mode)) || this.print_newline(), this.print_token(b), this._flags.last_word = b.text;
      return;
    }
    var M = "NONE";
    if (this._flags.last_token.type === a.END_BLOCK ? this._previous_flags.inline_frame ? M = "SPACE" : f(b, ["else", "catch", "finally", "from"]) ? this._options.brace_style === "expand" || this._options.brace_style === "end-expand" || this._options.brace_style === "none" && b.newlines ? M = "NEWLINE" : (M = "SPACE", this._output.space_before_token = !0) : M = "NEWLINE" : this._flags.last_token.type === a.SEMICOLON && this._flags.mode === m.BlockStatement ? M = "NEWLINE" : this._flags.last_token.type === a.SEMICOLON && S(this._flags.mode) ? M = "SPACE" : this._flags.last_token.type === a.STRING ? M = "NEWLINE" : this._flags.last_token.type === a.RESERVED || this._flags.last_token.type === a.WORD || this._flags.last_token.text === "*" && (l(this._last_last_text, ["function", "yield"]) || this._flags.mode === m.ObjectLiteral && l(this._last_last_text, ["{", ","])) ? M = "SPACE" : this._flags.last_token.type === a.START_BLOCK ? this._flags.inline_frame ? M = "SPACE" : M = "NEWLINE" : this._flags.last_token.type === a.END_EXPR && (this._output.space_before_token = !0, M = "NEWLINE"), f(b, s) && this._flags.last_token.text !== ")" && (this._flags.inline_frame || this._flags.last_token.text === "else" || this._flags.last_token.text === "export" ? M = "SPACE" : M = "NEWLINE"), f(b, ["else", "catch", "finally"]))
      if ((!(this._flags.last_token.type === a.END_BLOCK && this._previous_flags.mode === m.BlockStatement) || this._options.brace_style === "expand" || this._options.brace_style === "end-expand" || this._options.brace_style === "none" && b.newlines) && !this._flags.inline_frame)
        this.print_newline();
      else {
        this._output.trim(!0);
        var F = this._output.current_line;
        F.last() !== "}" && this.print_newline(), this._output.space_before_token = !0;
      }
    else M === "NEWLINE" ? f(this._flags.last_token, h) ? this._output.space_before_token = !0 : this._flags.last_token.text === "declare" && f(b, ["var", "let", "const"]) ? this._output.space_before_token = !0 : this._flags.last_token.type !== a.END_EXPR ? (this._flags.last_token.type !== a.START_EXPR || !f(b, ["var", "let", "const"])) && this._flags.last_token.text !== ":" && (d(b, "if") && d(b.previous, "else") ? this._output.space_before_token = !0 : this.print_newline()) : f(b, s) && this._flags.last_token.text !== ")" && this.print_newline() : this._flags.multiline_frame && k(this._flags.mode) && this._flags.last_token.text === "," && this._last_last_text === "}" ? this.print_newline() : M === "SPACE" && (this._output.space_before_token = !0);
    b.previous && (b.previous.type === a.WORD || b.previous.type === a.RESERVED) && (this._output.space_before_token = !0), this.print_token(b), this._flags.last_word = b.text, b.type === a.RESERVED && (b.text === "do" ? this._flags.do_block = !0 : b.text === "if" ? this._flags.if_block = !0 : b.text === "import" ? this._flags.import_block = !0 : this._flags.import_block && d(b, "from") && (this._flags.import_block = !1));
  }, v.prototype.handle_semicolon = function(b) {
    this.start_of_statement(b) ? this._output.space_before_token = !1 : this.handle_whitespace_and_comments(b);
    for (var T = this._tokens.peek(); this._flags.mode === m.Statement && !(this._flags.if_block && d(T, "else")) && !this._flags.do_block; )
      this.restore_mode();
    this._flags.import_block && (this._flags.import_block = !1), this.print_token(b);
  }, v.prototype.handle_string = function(b) {
    b.text.startsWith("`") && b.newlines === 0 && b.whitespace_before === "" && (b.previous.text === ")" || this._flags.last_token.type === a.WORD) || (this.start_of_statement(b) ? this._output.space_before_token = !0 : (this.handle_whitespace_and_comments(b), this._flags.last_token.type === a.RESERVED || this._flags.last_token.type === a.WORD || this._flags.inline_frame ? this._output.space_before_token = !0 : this._flags.last_token.type === a.COMMA || this._flags.last_token.type === a.START_EXPR || this._flags.last_token.type === a.EQUALS || this._flags.last_token.type === a.OPERATOR ? this.start_of_object_property() || this.allow_wrap_or_preserved_newline(b) : b.text.startsWith("`") && this._flags.last_token.type === a.END_EXPR && (b.previous.text === "]" || b.previous.text === ")") && b.newlines === 0 ? this._output.space_before_token = !0 : this.print_newline())), this.print_token(b);
  }, v.prototype.handle_equals = function(b) {
    this.start_of_statement(b) || this.handle_whitespace_and_comments(b), this._flags.declaration_statement && (this._flags.declaration_assignment = !0), this._output.space_before_token = !0, this.print_token(b), this._output.space_before_token = !0;
  }, v.prototype.handle_comma = function(b) {
    this.handle_whitespace_and_comments(b, !0), this.print_token(b), this._output.space_before_token = !0, this._flags.declaration_statement ? (S(this._flags.parent.mode) && (this._flags.declaration_assignment = !1), this._flags.declaration_assignment ? (this._flags.declaration_assignment = !1, this.print_newline(!1, !0)) : this._options.comma_first && this.allow_wrap_or_preserved_newline(b)) : this._flags.mode === m.ObjectLiteral || this._flags.mode === m.Statement && this._flags.parent.mode === m.ObjectLiteral ? (this._flags.mode === m.Statement && this.restore_mode(), this._flags.inline_frame || this.print_newline()) : this._options.comma_first && this.allow_wrap_or_preserved_newline(b);
  }, v.prototype.handle_operator = function(b) {
    var T = b.text === "*" && (f(this._flags.last_token, ["function", "yield"]) || l(this._flags.last_token.type, [a.START_BLOCK, a.COMMA, a.END_BLOCK, a.SEMICOLON])), M = l(b.text, ["-", "+"]) && (l(this._flags.last_token.type, [a.START_BLOCK, a.START_EXPR, a.EQUALS, a.OPERATOR]) || l(this._flags.last_token.text, s) || this._flags.last_token.text === ",");
    if (!this.start_of_statement(b)) {
      var F = !T;
      this.handle_whitespace_and_comments(b, F);
    }
    if (b.text === "*" && this._flags.last_token.type === a.DOT) {
      this.print_token(b);
      return;
    }
    if (b.text === "::") {
      this.print_token(b);
      return;
    }
    if (l(b.text, ["-", "+"]) && this.start_of_object_property()) {
      this.print_token(b);
      return;
    }
    if (this._flags.last_token.type === a.OPERATOR && l(this._options.operator_position, g) && this.allow_wrap_or_preserved_newline(b), b.text === ":" && this._flags.in_case) {
      this.print_token(b), this._flags.in_case = !1, this._flags.case_body = !0, this._tokens.peek().type !== a.START_BLOCK ? (this.indent(), this.print_newline(), this._flags.case_block = !1) : (this._flags.case_block = !0, this._output.space_before_token = !0);
      return;
    }
    var D = !0, U = !0, q = !1;
    if (b.text === ":" ? this._flags.ternary_depth === 0 ? D = !1 : (this._flags.ternary_depth -= 1, q = !0) : b.text === "?" && (this._flags.ternary_depth += 1), !M && !T && this._options.preserve_newlines && l(b.text, o)) {
      var Q = b.text === ":", ut = Q && q, rt = Q && !q;
      switch (this._options.operator_position) {
        case _.before_newline:
          this._output.space_before_token = !rt, this.print_token(b), (!Q || ut) && this.allow_wrap_or_preserved_newline(b), this._output.space_before_token = !0;
          return;
        case _.after_newline:
          this._output.space_before_token = !0, !Q || ut ? this._tokens.peek().newlines ? this.print_newline(!1, !0) : this.allow_wrap_or_preserved_newline(b) : this._output.space_before_token = !1, this.print_token(b), this._output.space_before_token = !0;
          return;
        case _.preserve_newline:
          rt || this.allow_wrap_or_preserved_newline(b), D = !(this._output.just_added_newline() || rt), this._output.space_before_token = D, this.print_token(b), this._output.space_before_token = !0;
          return;
      }
    }
    if (T) {
      this.allow_wrap_or_preserved_newline(b), D = !1;
      var kt = this._tokens.peek();
      U = kt && l(kt.type, [a.WORD, a.RESERVED]);
    } else if (b.text === "...")
      this.allow_wrap_or_preserved_newline(b), D = this._flags.last_token.type === a.START_BLOCK, U = !1;
    else if (l(b.text, ["--", "++", "!", "~"]) || M) {
      if ((this._flags.last_token.type === a.COMMA || this._flags.last_token.type === a.START_EXPR) && this.allow_wrap_or_preserved_newline(b), D = !1, U = !1, b.newlines && (b.text === "--" || b.text === "++" || b.text === "~")) {
        var st = f(this._flags.last_token, h) && b.newlines;
        st && (this._previous_flags.if_block || this._previous_flags.else_block) && this.restore_mode(), this.print_newline(st, !0);
      }
      this._flags.last_token.text === ";" && S(this._flags.mode) && (D = !0), this._flags.last_token.type === a.RESERVED ? D = !0 : this._flags.last_token.type === a.END_EXPR ? D = !(this._flags.last_token.text === "]" && (b.text === "--" || b.text === "++")) : this._flags.last_token.type === a.OPERATOR && (D = l(b.text, ["--", "-", "++", "+"]) && l(this._flags.last_token.text, ["--", "-", "++", "+"]), l(b.text, ["+", "-"]) && l(this._flags.last_token.text, ["--", "++"]) && (U = !0)), (this._flags.mode === m.BlockStatement && !this._flags.inline_frame || this._flags.mode === m.Statement) && (this._flags.last_token.text === "{" || this._flags.last_token.text === ";") && this.print_newline();
    }
    this._output.space_before_token = this._output.space_before_token || D, this.print_token(b), this._output.space_before_token = U;
  }, v.prototype.handle_block_comment = function(b, T) {
    if (this._output.raw) {
      this._output.add_raw_token(b), b.directives && b.directives.preserve === "end" && (this._output.raw = this._options.test_output_raw);
      return;
    }
    if (b.directives) {
      this.print_newline(!1, T), this.print_token(b), b.directives.preserve === "start" && (this._output.raw = !0), this.print_newline(!1, !0);
      return;
    }
    if (!e.newline.test(b.text) && !b.newlines) {
      this._output.space_before_token = !0, this.print_token(b), this._output.space_before_token = !0;
      return;
    } else
      this.print_block_commment(b, T);
  }, v.prototype.print_block_commment = function(b, T) {
    var M = x(b.text), F, D = !1, U = !1, q = b.whitespace_before, Q = q.length;
    if (this.print_newline(!1, T), this.print_token_line_indentation(b), this._output.add_token(M[0]), this.print_newline(!1, T), M.length > 1) {
      for (M = M.slice(1), D = w(M, "*"), U = O(M, q), D && (this._flags.alignment = 1), F = 0; F < M.length; F++)
        D ? (this.print_token_line_indentation(b), this._output.add_token(c(M[F]))) : U && M[F] ? (this.print_token_line_indentation(b), this._output.add_token(M[F].substring(Q))) : (this._output.current_line.set_indent(-1), this._output.add_token(M[F])), this.print_newline(!1, T);
      this._flags.alignment = 0;
    }
  }, v.prototype.handle_comment = function(b, T) {
    b.newlines ? this.print_newline(!1, T) : this._output.trim(!0), this._output.space_before_token = !0, this.print_token(b), this.print_newline(!1, T);
  }, v.prototype.handle_dot = function(b) {
    this.start_of_statement(b) || this.handle_whitespace_and_comments(b, !0), this._flags.last_token.text.match("^[0-9]+$") && (this._output.space_before_token = !0), f(this._flags.last_token, h) ? this._output.space_before_token = !1 : this.allow_wrap_or_preserved_newline(
      b,
      this._flags.last_token.text === ")" && this._options.break_chained_methods
    ), this._options.unindent_chained_methods && this._output.just_added_newline() && this.deindent(), this.print_token(b);
  }, v.prototype.handle_unknown = function(b, T) {
    this.print_token(b), b.text[b.text.length - 1] === `
` && this.print_newline(!1, T);
  }, v.prototype.handle_eof = function(b) {
    for (; this._flags.mode === m.Statement; )
      this.restore_mode();
    this.handle_whitespace_and_comments(b);
  }, Wl.Beautifier = v, Wl;
}
var Uh;
function hT() {
  if (Uh) return No.exports;
  Uh = 1;
  var n = fT().Beautifier, t = d_().Options;
  function e(i, r) {
    var s = new n(i, r);
    return s.beautify();
  }
  return No.exports = e, No.exports.defaultOptions = function() {
    return new t();
  }, No.exports;
}
var Io = { exports: {} }, ec = {}, nc = {}, Kh;
function h_() {
  if (Kh) return nc;
  Kh = 1;
  var n = Qu().Options;
  function t(e) {
    n.call(this, e, "css"), this.selector_separator_newline = this._get_boolean("selector_separator_newline", !0), this.newline_between_rules = this._get_boolean("newline_between_rules", !0);
    var i = this._get_boolean("space_around_selector_separator");
    this.space_around_combinator = this._get_boolean("space_around_combinator") || i;
    var r = this._get_selection_list("brace_style", ["collapse", "expand", "end-expand", "none", "preserve-inline"]);
    this.brace_style = "collapse";
    for (var s = 0; s < r.length; s++)
      r[s] !== "expand" ? this.brace_style = "collapse" : this.brace_style = r[s];
  }
  return t.prototype = new n(), nc.Options = t, nc;
}
var qh;
function pT() {
  if (qh) return ec;
  qh = 1;
  var n = h_().Options, t = Zu().Output, e = td().InputScanner, i = ed().Directives, r = new i(/\/\*/, /\*\//), s = /\r\n|[\r\n]/, o = /\r\n|[\r\n]/g, a = /\s/, l = /(?:\s|\n)+/g, c = /\/\*(?:[\s\S]*?)((?:\*\/)|$)/g, u = /\/\/(?:[^\n\r\u2028\u2029]*)/g;
  function d(f, h) {
    this._source_text = f || "", this._options = new n(h), this._ch = null, this._input = null, this.NESTED_AT_RULE = {
      page: !0,
      "font-face": !0,
      keyframes: !0,
      // also in CONDITIONAL_GROUP_RULE below
      media: !0,
      supports: !0,
      document: !0
    }, this.CONDITIONAL_GROUP_RULE = {
      media: !0,
      supports: !0,
      document: !0
    }, this.NON_SEMICOLON_NEWLINE_PROPERTY = [
      "grid-template-areas",
      "grid-template"
    ];
  }
  return d.prototype.eatString = function(f) {
    var h = "";
    for (this._ch = this._input.next(); this._ch; ) {
      if (h += this._ch, this._ch === "\\")
        h += this._input.next();
      else if (f.indexOf(this._ch) !== -1 || this._ch === `
`)
        break;
      this._ch = this._input.next();
    }
    return h;
  }, d.prototype.eatWhitespace = function(f) {
    for (var h = a.test(this._input.peek()), p = 0; a.test(this._input.peek()); )
      this._ch = this._input.next(), f && this._ch === `
` && (p === 0 || p < this._options.max_preserve_newlines) && (p++, this._output.add_new_line(!0));
    return h;
  }, d.prototype.foundNestedPseudoClass = function() {
    for (var f = 0, h = 1, p = this._input.peek(h); p; ) {
      if (p === "{")
        return !0;
      if (p === "(")
        f += 1;
      else if (p === ")") {
        if (f === 0)
          return !1;
        f -= 1;
      } else if (p === ";" || p === "}")
        return !1;
      h++, p = this._input.peek(h);
    }
    return !1;
  }, d.prototype.print_string = function(f) {
    this._output.set_indent(this._indentLevel), this._output.non_breaking_space = !0, this._output.add_token(f);
  }, d.prototype.preserveSingleSpace = function(f) {
    f && (this._output.space_before_token = !0);
  }, d.prototype.indent = function() {
    this._indentLevel++;
  }, d.prototype.outdent = function() {
    this._indentLevel > 0 && this._indentLevel--;
  }, d.prototype.beautify = function() {
    if (this._options.disabled)
      return this._source_text;
    var f = this._source_text, h = this._options.eol;
    h === "auto" && (h = `
`, f && s.test(f || "") && (h = f.match(s)[0])), f = f.replace(o, `
`);
    var p = f.match(/^[\t ]*/)[0];
    this._output = new t(this._options, p), this._input = new e(f), this._indentLevel = 0, this._nestedLevel = 0, this._ch = null;
    for (var _ = 0, g = !1, m = !1, y = !1, x = !1, k = !1, S = this._ch, w = !1, O, v, E; O = this._input.read(l), v = O !== "", E = S, this._ch = this._input.next(), this._ch === "\\" && this._input.hasNext() && (this._ch += this._input.next()), S = this._ch, this._ch; )
      if (this._ch === "/" && this._input.peek() === "*") {
        this._output.add_new_line(), this._input.back();
        var b = this._input.read(c), T = r.get_directives(b);
        T && T.ignore === "start" && (b += r.readIgnored(this._input)), this.print_string(b), this.eatWhitespace(!0), this._output.add_new_line();
      } else if (this._ch === "/" && this._input.peek() === "/")
        this._output.space_before_token = !0, this._input.back(), this.print_string(this._input.read(u)), this.eatWhitespace(!0);
      else if (this._ch === "$") {
        this.preserveSingleSpace(v), this.print_string(this._ch);
        var M = this._input.peekUntilAfter(/[: ,;{}()[\]\/='"]/g);
        M.match(/[ :]$/) && (M = this.eatString(": ").replace(/\s+$/, ""), this.print_string(M), this._output.space_before_token = !0), _ === 0 && M.indexOf(":") !== -1 && (m = !0, this.indent());
      } else if (this._ch === "@")
        if (this.preserveSingleSpace(v), this._input.peek() === "{")
          this.print_string(this._ch + this.eatString("}"));
        else {
          this.print_string(this._ch);
          var F = this._input.peekUntilAfter(/[: ,;{}()[\]\/='"]/g);
          F.match(/[ :]$/) && (F = this.eatString(": ").replace(/\s+$/, ""), this.print_string(F), this._output.space_before_token = !0), _ === 0 && F.indexOf(":") !== -1 ? (m = !0, this.indent()) : F in this.NESTED_AT_RULE ? (this._nestedLevel += 1, F in this.CONDITIONAL_GROUP_RULE && (y = !0)) : _ === 0 && !m && (x = !0);
        }
      else if (this._ch === "#" && this._input.peek() === "{")
        this.preserveSingleSpace(v), this.print_string(this._ch + this.eatString("}"));
      else if (this._ch === "{")
        m && (m = !1, this.outdent()), x = !1, y ? (y = !1, g = this._indentLevel >= this._nestedLevel) : g = this._indentLevel >= this._nestedLevel - 1, this._options.newline_between_rules && g && this._output.previous_line && this._output.previous_line.item(-1) !== "{" && this._output.ensure_empty_line_above("/", ","), this._output.space_before_token = !0, this._options.brace_style === "expand" ? (this._output.add_new_line(), this.print_string(this._ch), this.indent(), this._output.set_indent(this._indentLevel)) : (E === "(" ? this._output.space_before_token = !1 : E !== "," && this.indent(), this.print_string(this._ch)), this.eatWhitespace(!0), this._output.add_new_line();
      else if (this._ch === "}")
        this.outdent(), this._output.add_new_line(), E === "{" && this._output.trim(!0), m && (this.outdent(), m = !1), this.print_string(this._ch), g = !1, this._nestedLevel && this._nestedLevel--, this.eatWhitespace(!0), this._output.add_new_line(), this._options.newline_between_rules && !this._output.just_added_blankline() && this._input.peek() !== "}" && this._output.add_new_line(!0), this._input.peek() === ")" && (this._output.trim(!0), this._options.brace_style === "expand" && this._output.add_new_line(!0));
      else if (this._ch === ":") {
        for (var D = 0; D < this.NON_SEMICOLON_NEWLINE_PROPERTY.length; D++)
          if (this._input.lookBack(this.NON_SEMICOLON_NEWLINE_PROPERTY[D])) {
            w = !0;
            break;
          }
        (g || y) && !(this._input.lookBack("&") || this.foundNestedPseudoClass()) && !this._input.lookBack("(") && !x && _ === 0 ? (this.print_string(":"), m || (m = !0, this._output.space_before_token = !0, this.eatWhitespace(!0), this.indent())) : (this._input.lookBack(" ") && (this._output.space_before_token = !0), this._input.peek() === ":" ? (this._ch = this._input.next(), this.print_string("::")) : this.print_string(":"));
      } else if (this._ch === '"' || this._ch === "'") {
        var U = E === '"' || E === "'";
        this.preserveSingleSpace(U || v), this.print_string(this._ch + this.eatString(this._ch)), this.eatWhitespace(!0);
      } else if (this._ch === ";")
        w = !1, _ === 0 ? (m && (this.outdent(), m = !1), x = !1, this.print_string(this._ch), this.eatWhitespace(!0), this._input.peek() !== "/" && this._output.add_new_line()) : (this.print_string(this._ch), this.eatWhitespace(!0), this._output.space_before_token = !0);
      else if (this._ch === "(")
        if (this._input.lookBack("url"))
          this.print_string(this._ch), this.eatWhitespace(), _++, this.indent(), this._ch = this._input.next(), this._ch === ")" || this._ch === '"' || this._ch === "'" ? this._input.back() : this._ch && (this.print_string(this._ch + this.eatString(")")), _ && (_--, this.outdent()));
        else {
          var q = !1;
          this._input.lookBack("with") && (q = !0), this.preserveSingleSpace(v || q), this.print_string(this._ch), m && E === "$" && this._options.selector_separator_newline ? (this._output.add_new_line(), k = !0) : (this.eatWhitespace(), _++, this.indent());
        }
      else if (this._ch === ")")
        _ && (_--, this.outdent()), k && this._input.peek() === ";" && this._options.selector_separator_newline && (k = !1, this.outdent(), this._output.add_new_line()), this.print_string(this._ch);
      else if (this._ch === ",")
        this.print_string(this._ch), this.eatWhitespace(!0), this._options.selector_separator_newline && (!m || k) && _ === 0 && !x ? this._output.add_new_line() : this._output.space_before_token = !0;
      else if ((this._ch === ">" || this._ch === "+" || this._ch === "~") && !m && _ === 0)
        this._options.space_around_combinator ? (this._output.space_before_token = !0, this.print_string(this._ch), this._output.space_before_token = !0) : (this.print_string(this._ch), this.eatWhitespace(), this._ch && a.test(this._ch) && (this._ch = ""));
      else if (this._ch === "]")
        this.print_string(this._ch);
      else if (this._ch === "[")
        this.preserveSingleSpace(v), this.print_string(this._ch);
      else if (this._ch === "=")
        this.eatWhitespace(), this.print_string("="), a.test(this._ch) && (this._ch = "");
      else if (this._ch === "!" && !this._input.lookBack("\\"))
        this._output.space_before_token = !0, this.print_string(this._ch);
      else {
        var Q = E === '"' || E === "'";
        this.preserveSingleSpace(Q || v), this.print_string(this._ch), !this._output.just_added_newline() && this._input.peek() === `
` && w && this._output.add_new_line();
      }
    var ut = this._output.get_code(h);
    return ut;
  }, ec.Beautifier = d, ec;
}
var Gh;
function mT() {
  if (Gh) return Io.exports;
  Gh = 1;
  var n = pT().Beautifier, t = h_().Options;
  function e(i, r) {
    var s = new n(i, r);
    return s.beautify();
  }
  return Io.exports = e, Io.exports.defaultOptions = function() {
    return new t();
  }, Io.exports;
}
var Po = { exports: {} }, ic = {}, rc = {}, Jh;
function p_() {
  if (Jh) return rc;
  Jh = 1;
  var n = Qu().Options;
  function t(e) {
    n.call(this, e, "html"), this.templating.length === 1 && this.templating[0] === "auto" && (this.templating = ["django", "erb", "handlebars", "php"]), this.indent_inner_html = this._get_boolean("indent_inner_html"), this.indent_body_inner_html = this._get_boolean("indent_body_inner_html", !0), this.indent_head_inner_html = this._get_boolean("indent_head_inner_html", !0), this.indent_handlebars = this._get_boolean("indent_handlebars", !0), this.wrap_attributes = this._get_selection(
      "wrap_attributes",
      ["auto", "force", "force-aligned", "force-expand-multiline", "aligned-multiple", "preserve", "preserve-aligned"]
    ), this.wrap_attributes_min_attrs = this._get_number("wrap_attributes_min_attrs", 2), this.wrap_attributes_indent_size = this._get_number("wrap_attributes_indent_size", this.indent_size), this.extra_liners = this._get_array("extra_liners", ["head", "body", "/html"]), this.inline = this._get_array("inline", [
      "a",
      "abbr",
      "area",
      "audio",
      "b",
      "bdi",
      "bdo",
      "br",
      "button",
      "canvas",
      "cite",
      "code",
      "data",
      "datalist",
      "del",
      "dfn",
      "em",
      "embed",
      "i",
      "iframe",
      "img",
      "input",
      "ins",
      "kbd",
      "keygen",
      "label",
      "map",
      "mark",
      "math",
      "meter",
      "noscript",
      "object",
      "output",
      "progress",
      "q",
      "ruby",
      "s",
      "samp",
      /* 'script', */
      "select",
      "small",
      "span",
      "strong",
      "sub",
      "sup",
      "svg",
      "template",
      "textarea",
      "time",
      "u",
      "var",
      "video",
      "wbr",
      "text",
      // obsolete inline tags
      "acronym",
      "big",
      "strike",
      "tt"
    ]), this.inline_custom_elements = this._get_boolean("inline_custom_elements", !0), this.void_elements = this._get_array("void_elements", [
      // HTLM void elements - aka self-closing tags - aka singletons
      // https://www.w3.org/html/wg/drafts/html/master/syntax.html#void-elements
      "area",
      "base",
      "br",
      "col",
      "embed",
      "hr",
      "img",
      "input",
      "keygen",
      "link",
      "menuitem",
      "meta",
      "param",
      "source",
      "track",
      "wbr",
      // NOTE: Optional tags are too complex for a simple list
      // they are hard coded in _do_optional_end_element
      // Doctype and xml elements
      "!doctype",
      "?xml",
      // obsolete tags
      // basefont: https://www.computerhope.com/jargon/h/html-basefont-tag.htm
      // isndex: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/isindex
      "basefont",
      "isindex"
    ]), this.unformatted = this._get_array("unformatted", []), this.content_unformatted = this._get_array("content_unformatted", [
      "pre",
      "textarea"
    ]), this.unformatted_content_delimiter = this._get_characters("unformatted_content_delimiter"), this.indent_scripts = this._get_selection("indent_scripts", ["normal", "keep", "separate"]);
  }
  return t.prototype = new n(), rc.Options = t, rc;
}
var Do = {}, Xh;
function Yh() {
  if (Xh) return Do;
  Xh = 1;
  var n = Ha().Tokenizer, t = Ha().TOKEN, e = ed().Directives, i = f_().TemplatablePattern, r = cl().Pattern, s = {
    TAG_OPEN: "TK_TAG_OPEN",
    TAG_CLOSE: "TK_TAG_CLOSE",
    CONTROL_FLOW_OPEN: "TK_CONTROL_FLOW_OPEN",
    CONTROL_FLOW_CLOSE: "TK_CONTROL_FLOW_CLOSE",
    ATTRIBUTE: "TK_ATTRIBUTE",
    EQUALS: "TK_EQUALS",
    VALUE: "TK_VALUE",
    COMMENT: "TK_COMMENT",
    TEXT: "TK_TEXT",
    UNKNOWN: "TK_UNKNOWN",
    START: t.START,
    RAW: t.RAW,
    EOF: t.EOF
  }, o = new e(/<\!--/, /-->/), a = function(l, c) {
    n.call(this, l, c), this._current_tag_name = "";
    var u = new i(this._input).read_options(this._options), d = new r(this._input);
    if (this.__patterns = {
      word: u.until(/[\n\r\t <]/),
      word_control_flow_close_excluded: u.until(/[\n\r\t <}]/),
      single_quote: u.until_after(/'/),
      double_quote: u.until_after(/"/),
      attribute: u.until(/[\n\r\t =>]|\/>/),
      element_name: u.until(/[\n\r\t >\/]/),
      angular_control_flow_start: d.matching(/\@[a-zA-Z]+[^({]*[({]/),
      handlebars_comment: d.starting_with(/{{!--/).until_after(/--}}/),
      handlebars: d.starting_with(/{{/).until_after(/}}/),
      handlebars_open: d.until(/[\n\r\t }]/),
      handlebars_raw_close: d.until(/}}/),
      comment: d.starting_with(/<!--/).until_after(/-->/),
      cdata: d.starting_with(/<!\[CDATA\[/).until_after(/]]>/),
      // https://en.wikipedia.org/wiki/Conditional_comment
      conditional_comment: d.starting_with(/<!\[/).until_after(/]>/),
      processing: d.starting_with(/<\?/).until_after(/\?>/)
    }, this._options.indent_handlebars && (this.__patterns.word = this.__patterns.word.exclude("handlebars"), this.__patterns.word_control_flow_close_excluded = this.__patterns.word_control_flow_close_excluded.exclude("handlebars")), this._unformatted_content_delimiter = null, this._options.unformatted_content_delimiter) {
      var f = this._input.get_literal_regexp(this._options.unformatted_content_delimiter);
      this.__patterns.unformatted_content_delimiter = d.matching(f).until_after(f);
    }
  };
  return a.prototype = new n(), a.prototype._is_comment = function(l) {
    return !1;
  }, a.prototype._is_opening = function(l) {
    return l.type === s.TAG_OPEN || l.type === s.CONTROL_FLOW_OPEN;
  }, a.prototype._is_closing = function(l, c) {
    return l.type === s.TAG_CLOSE && c && ((l.text === ">" || l.text === "/>") && c.text[0] === "<" || l.text === "}}" && c.text[0] === "{" && c.text[1] === "{") || l.type === s.CONTROL_FLOW_CLOSE && l.text === "}" && c.text.endsWith("{");
  }, a.prototype._reset = function() {
    this._current_tag_name = "";
  }, a.prototype._get_next_token = function(l, c) {
    var u = null;
    this._readWhitespace();
    var d = this._input.peek();
    return d === null ? this._create_token(s.EOF, "") : (u = u || this._read_open_handlebars(d, c), u = u || this._read_attribute(d, l, c), u = u || this._read_close(d, c), u = u || this._read_control_flows(d, c), u = u || this._read_raw_content(d, l, c), u = u || this._read_content_word(d, c), u = u || this._read_comment_or_cdata(d), u = u || this._read_processing(d), u = u || this._read_open(d, c), u = u || this._create_token(s.UNKNOWN, this._input.next()), u);
  }, a.prototype._read_comment_or_cdata = function(l) {
    var c = null, u = null, d = null;
    if (l === "<") {
      var f = this._input.peek(1);
      f === "!" && (u = this.__patterns.comment.read(), u ? (d = o.get_directives(u), d && d.ignore === "start" && (u += o.readIgnored(this._input))) : u = this.__patterns.cdata.read()), u && (c = this._create_token(s.COMMENT, u), c.directives = d);
    }
    return c;
  }, a.prototype._read_processing = function(l) {
    var c = null, u = null, d = null;
    if (l === "<") {
      var f = this._input.peek(1);
      (f === "!" || f === "?") && (u = this.__patterns.conditional_comment.read(), u = u || this.__patterns.processing.read()), u && (c = this._create_token(s.COMMENT, u), c.directives = d);
    }
    return c;
  }, a.prototype._read_open = function(l, c) {
    var u = null, d = null;
    return (!c || c.type === s.CONTROL_FLOW_OPEN) && l === "<" && (u = this._input.next(), this._input.peek() === "/" && (u += this._input.next()), u += this.__patterns.element_name.read(), d = this._create_token(s.TAG_OPEN, u)), d;
  }, a.prototype._read_open_handlebars = function(l, c) {
    var u = null, d = null;
    return (!c || c.type === s.CONTROL_FLOW_OPEN) && this._options.indent_handlebars && l === "{" && this._input.peek(1) === "{" && (this._input.peek(2) === "!" ? (u = this.__patterns.handlebars_comment.read(), u = u || this.__patterns.handlebars.read(), d = this._create_token(s.COMMENT, u)) : (u = this.__patterns.handlebars_open.read(), d = this._create_token(s.TAG_OPEN, u))), d;
  }, a.prototype._read_control_flows = function(l, c) {
    var u = "", d = null;
    if (!this._options.templating.includes("angular") || !this._options.indent_handlebars)
      return d;
    if (l === "@") {
      if (u = this.__patterns.angular_control_flow_start.read(), u === "")
        return d;
      for (var f = u.endsWith("(") ? 1 : 0, h = 0; !(u.endsWith("{") && f === h); ) {
        var p = this._input.next();
        if (p === null)
          break;
        p === "(" ? f++ : p === ")" && h++, u += p;
      }
      d = this._create_token(s.CONTROL_FLOW_OPEN, u);
    } else l === "}" && c && c.type === s.CONTROL_FLOW_OPEN && (u = this._input.next(), d = this._create_token(s.CONTROL_FLOW_CLOSE, u));
    return d;
  }, a.prototype._read_close = function(l, c) {
    var u = null, d = null;
    return c && c.type === s.TAG_OPEN && (c.text[0] === "<" && (l === ">" || l === "/" && this._input.peek(1) === ">") ? (u = this._input.next(), l === "/" && (u += this._input.next()), d = this._create_token(s.TAG_CLOSE, u)) : c.text[0] === "{" && l === "}" && this._input.peek(1) === "}" && (this._input.next(), this._input.next(), d = this._create_token(s.TAG_CLOSE, "}}"))), d;
  }, a.prototype._read_attribute = function(l, c, u) {
    var d = null, f = "";
    if (u && u.text[0] === "<")
      if (l === "=")
        d = this._create_token(s.EQUALS, this._input.next());
      else if (l === '"' || l === "'") {
        var h = this._input.next();
        l === '"' ? h += this.__patterns.double_quote.read() : h += this.__patterns.single_quote.read(), d = this._create_token(s.VALUE, h);
      } else
        f = this.__patterns.attribute.read(), f && (c.type === s.EQUALS ? d = this._create_token(s.VALUE, f) : d = this._create_token(s.ATTRIBUTE, f));
    return d;
  }, a.prototype._is_content_unformatted = function(l) {
    return this._options.void_elements.indexOf(l) === -1 && (this._options.content_unformatted.indexOf(l) !== -1 || this._options.unformatted.indexOf(l) !== -1);
  }, a.prototype._read_raw_content = function(l, c, u) {
    var d = "";
    if (u && u.text[0] === "{")
      d = this.__patterns.handlebars_raw_close.read();
    else if (c.type === s.TAG_CLOSE && c.opened.text[0] === "<" && c.text[0] !== "/") {
      var f = c.opened.text.substr(1).toLowerCase();
      if (f === "script" || f === "style") {
        var h = this._read_comment_or_cdata(l);
        if (h)
          return h.type = s.TEXT, h;
        d = this._input.readUntil(new RegExp("</" + f + "[\\n\\r\\t ]*?>", "ig"));
      } else this._is_content_unformatted(f) && (d = this._input.readUntil(new RegExp("</" + f + "[\\n\\r\\t ]*?>", "ig")));
    }
    return d ? this._create_token(s.TEXT, d) : null;
  }, a.prototype._read_content_word = function(l, c) {
    var u = "";
    if (this._options.unformatted_content_delimiter && l === this._options.unformatted_content_delimiter[0] && (u = this.__patterns.unformatted_content_delimiter.read()), u || (u = c && c.type === s.CONTROL_FLOW_OPEN ? this.__patterns.word_control_flow_close_excluded.read() : this.__patterns.word.read()), u)
      return this._create_token(s.TEXT, u);
  }, Do.Tokenizer = a, Do.TOKEN = s, Do;
}
var Zh;
function gT() {
  if (Zh) return ic;
  Zh = 1;
  var n = p_().Options, t = Zu().Output, e = Yh().Tokenizer, i = Yh().TOKEN, r = /\r\n|[\r\n]/, s = /\r\n|[\r\n]/g, o = function(g, m) {
    this.indent_level = 0, this.alignment_size = 0, this.max_preserve_newlines = g.max_preserve_newlines, this.preserve_newlines = g.preserve_newlines, this._output = new t(g, m);
  };
  o.prototype.current_line_has_match = function(g) {
    return this._output.current_line.has_match(g);
  }, o.prototype.set_space_before_token = function(g, m) {
    this._output.space_before_token = g, this._output.non_breaking_space = m;
  }, o.prototype.set_wrap_point = function() {
    this._output.set_indent(this.indent_level, this.alignment_size), this._output.set_wrap_point();
  }, o.prototype.add_raw_token = function(g) {
    this._output.add_raw_token(g);
  }, o.prototype.print_preserved_newlines = function(g) {
    var m = 0;
    g.type !== i.TEXT && g.previous.type !== i.TEXT && (m = g.newlines ? 1 : 0), this.preserve_newlines && (m = g.newlines < this.max_preserve_newlines + 1 ? g.newlines : this.max_preserve_newlines + 1);
    for (var y = 0; y < m; y++)
      this.print_newline(y > 0);
    return m !== 0;
  }, o.prototype.traverse_whitespace = function(g) {
    return g.whitespace_before || g.newlines ? (this.print_preserved_newlines(g) || (this._output.space_before_token = !0), !0) : !1;
  }, o.prototype.previous_token_wrapped = function() {
    return this._output.previous_token_wrapped;
  }, o.prototype.print_newline = function(g) {
    this._output.add_new_line(g);
  }, o.prototype.print_token = function(g) {
    g.text && (this._output.set_indent(this.indent_level, this.alignment_size), this._output.add_token(g.text));
  }, o.prototype.indent = function() {
    this.indent_level++;
  }, o.prototype.deindent = function() {
    this.indent_level > 0 && (this.indent_level--, this._output.set_indent(this.indent_level, this.alignment_size));
  }, o.prototype.get_full_indent = function(g) {
    return g = this.indent_level + (g || 0), g < 1 ? "" : this._output.get_indent_string(g);
  };
  var a = function(g) {
    for (var m = null, y = g.next; y.type !== i.EOF && g.closed !== y; ) {
      if (y.type === i.ATTRIBUTE && y.text === "type") {
        y.next && y.next.type === i.EQUALS && y.next.next && y.next.next.type === i.VALUE && (m = y.next.next.text);
        break;
      }
      y = y.next;
    }
    return m;
  }, l = function(g, m) {
    var y = null, x = null;
    return m.closed ? (g === "script" ? y = "text/javascript" : g === "style" && (y = "text/css"), y = a(m) || y, y.search("text/css") > -1 ? x = "css" : y.search(/module|((text|application|dojo)\/(x-)?(javascript|ecmascript|jscript|livescript|(ld\+)?json|method|aspect))/) > -1 ? x = "javascript" : y.search(/(text|application|dojo)\/(x-)?(html)/) > -1 ? x = "html" : y.search(/test\/null/) > -1 && (x = "null"), x) : null;
  };
  function c(g, m) {
    return m.indexOf(g) !== -1;
  }
  function u(g, m, y) {
    this.parent = g || null, this.tag = m ? m.tag_name : "", this.indent_level = y || 0, this.parser_token = m || null;
  }
  function d(g) {
    this._printer = g, this._current_frame = null;
  }
  d.prototype.get_parser_token = function() {
    return this._current_frame ? this._current_frame.parser_token : null;
  }, d.prototype.record_tag = function(g) {
    var m = new u(this._current_frame, g, this._printer.indent_level);
    this._current_frame = m;
  }, d.prototype._try_pop_frame = function(g) {
    var m = null;
    return g && (m = g.parser_token, this._printer.indent_level = g.indent_level, this._current_frame = g.parent), m;
  }, d.prototype._get_frame = function(g, m) {
    for (var y = this._current_frame; y && g.indexOf(y.tag) === -1; ) {
      if (m && m.indexOf(y.tag) !== -1) {
        y = null;
        break;
      }
      y = y.parent;
    }
    return y;
  }, d.prototype.try_pop = function(g, m) {
    var y = this._get_frame([g], m);
    return this._try_pop_frame(y);
  }, d.prototype.indent_to_tag = function(g) {
    var m = this._get_frame(g);
    m && (this._printer.indent_level = m.indent_level);
  };
  function f(g, m, y, x) {
    this._source_text = g || "", m = m || {}, this._js_beautify = y, this._css_beautify = x, this._tag_stack = null;
    var k = new n(m, "html");
    this._options = k, this._is_wrap_attributes_force = this._options.wrap_attributes.substr(0, 5) === "force", this._is_wrap_attributes_force_expand_multiline = this._options.wrap_attributes === "force-expand-multiline", this._is_wrap_attributes_force_aligned = this._options.wrap_attributes === "force-aligned", this._is_wrap_attributes_aligned_multiple = this._options.wrap_attributes === "aligned-multiple", this._is_wrap_attributes_preserve = this._options.wrap_attributes.substr(0, 8) === "preserve", this._is_wrap_attributes_preserve_aligned = this._options.wrap_attributes === "preserve-aligned";
  }
  f.prototype.beautify = function() {
    if (this._options.disabled)
      return this._source_text;
    var g = this._source_text, m = this._options.eol;
    this._options.eol === "auto" && (m = `
`, g && r.test(g) && (m = g.match(r)[0])), g = g.replace(s, `
`);
    var y = g.match(/^[\t ]*/)[0], x = {
      text: "",
      type: ""
    }, k = new h(), S = new o(this._options, y), w = new e(g, this._options).tokenize();
    this._tag_stack = new d(S);
    for (var O = null, v = w.next(); v.type !== i.EOF; )
      v.type === i.TAG_OPEN || v.type === i.COMMENT ? (O = this._handle_tag_open(S, v, k, x, w), k = O) : v.type === i.ATTRIBUTE || v.type === i.EQUALS || v.type === i.VALUE || v.type === i.TEXT && !k.tag_complete ? O = this._handle_inside_tag(S, v, k, x) : v.type === i.TAG_CLOSE ? O = this._handle_tag_close(S, v, k) : v.type === i.TEXT ? O = this._handle_text(S, v, k) : v.type === i.CONTROL_FLOW_OPEN ? O = this._handle_control_flow_open(S, v) : v.type === i.CONTROL_FLOW_CLOSE ? O = this._handle_control_flow_close(S, v) : S.add_raw_token(v), x = O, v = w.next();
    var E = S._output.get_code(m);
    return E;
  }, f.prototype._handle_control_flow_open = function(g, m) {
    var y = {
      text: m.text,
      type: m.type
    };
    return g.set_space_before_token(m.newlines || m.whitespace_before !== "", !0), m.newlines ? g.print_preserved_newlines(m) : g.set_space_before_token(m.newlines || m.whitespace_before !== "", !0), g.print_token(m), g.indent(), y;
  }, f.prototype._handle_control_flow_close = function(g, m) {
    var y = {
      text: m.text,
      type: m.type
    };
    return g.deindent(), m.newlines ? g.print_preserved_newlines(m) : g.set_space_before_token(m.newlines || m.whitespace_before !== "", !0), g.print_token(m), y;
  }, f.prototype._handle_tag_close = function(g, m, y) {
    var x = {
      text: m.text,
      type: m.type
    };
    return g.alignment_size = 0, y.tag_complete = !0, g.set_space_before_token(m.newlines || m.whitespace_before !== "", !0), y.is_unformatted ? g.add_raw_token(m) : (y.tag_start_char === "<" && (g.set_space_before_token(m.text[0] === "/", !0), this._is_wrap_attributes_force_expand_multiline && y.has_wrapped_attrs && g.print_newline(!1)), g.print_token(m)), y.indent_content && !(y.is_unformatted || y.is_content_unformatted) && (g.indent(), y.indent_content = !1), !y.is_inline_element && !(y.is_unformatted || y.is_content_unformatted) && g.set_wrap_point(), x;
  }, f.prototype._handle_inside_tag = function(g, m, y, x) {
    var k = y.has_wrapped_attrs, S = {
      text: m.text,
      type: m.type
    };
    return g.set_space_before_token(m.newlines || m.whitespace_before !== "", !0), y.is_unformatted ? g.add_raw_token(m) : y.tag_start_char === "{" && m.type === i.TEXT ? g.print_preserved_newlines(m) ? (m.newlines = 0, g.add_raw_token(m)) : g.print_token(m) : (m.type === i.ATTRIBUTE ? g.set_space_before_token(!0) : (m.type === i.EQUALS || m.type === i.VALUE && m.previous.type === i.EQUALS) && g.set_space_before_token(!1), m.type === i.ATTRIBUTE && y.tag_start_char === "<" && ((this._is_wrap_attributes_preserve || this._is_wrap_attributes_preserve_aligned) && (g.traverse_whitespace(m), k = k || m.newlines !== 0), this._is_wrap_attributes_force && y.attr_count >= this._options.wrap_attributes_min_attrs && (x.type !== i.TAG_OPEN || // ie. second attribute and beyond
    this._is_wrap_attributes_force_expand_multiline) && (g.print_newline(!1), k = !0)), g.print_token(m), k = k || g.previous_token_wrapped(), y.has_wrapped_attrs = k), S;
  }, f.prototype._handle_text = function(g, m, y) {
    var x = {
      text: m.text,
      type: "TK_CONTENT"
    };
    return y.custom_beautifier_name ? this._print_custom_beatifier_text(g, m, y) : y.is_unformatted || y.is_content_unformatted ? g.add_raw_token(m) : (g.traverse_whitespace(m), g.print_token(m)), x;
  }, f.prototype._print_custom_beatifier_text = function(g, m, y) {
    var x = this;
    if (m.text !== "") {
      var k = m.text, S, w = 1, O = "", v = "";
      y.custom_beautifier_name === "javascript" && typeof this._js_beautify == "function" ? S = this._js_beautify : y.custom_beautifier_name === "css" && typeof this._css_beautify == "function" ? S = this._css_beautify : y.custom_beautifier_name === "html" && (S = function(D, U) {
        var q = new f(D, U, x._js_beautify, x._css_beautify);
        return q.beautify();
      }), this._options.indent_scripts === "keep" ? w = 0 : this._options.indent_scripts === "separate" && (w = -g.indent_level);
      var E = g.get_full_indent(w);
      if (k = k.replace(/\n[ \t]*$/, ""), y.custom_beautifier_name !== "html" && k[0] === "<" && k.match(/^(<!--|<!\[CDATA\[)/)) {
        var b = /^(<!--[^\n]*|<!\[CDATA\[)(\n?)([ \t\n]*)([\s\S]*)(-->|]]>)$/.exec(k);
        if (!b) {
          g.add_raw_token(m);
          return;
        }
        O = E + b[1] + `
`, k = b[4], b[5] && (v = E + b[5]), k = k.replace(/\n[ \t]*$/, ""), (b[2] || b[3].indexOf(`
`) !== -1) && (b = b[3].match(/[ \t]+$/), b && (m.whitespace_before = b[0]));
      }
      if (k)
        if (S) {
          var T = function() {
            this.eol = `
`;
          };
          T.prototype = this._options.raw_options;
          var M = new T();
          k = S(E + k, M);
        } else {
          var F = m.whitespace_before;
          F && (k = k.replace(new RegExp(`
(` + F + ")?", "g"), `
`)), k = E + k.replace(/\n/g, `
` + E);
        }
      O && (k ? k = O + k + `
` + v : k = O + v), g.print_newline(!1), k && (m.text = k, m.whitespace_before = "", m.newlines = 0, g.add_raw_token(m), g.print_newline(!0));
    }
  }, f.prototype._handle_tag_open = function(g, m, y, x, k) {
    var S = this._get_tag_open_token(m);
    if ((y.is_unformatted || y.is_content_unformatted) && !y.is_empty_element && m.type === i.TAG_OPEN && !S.is_start_tag ? (g.add_raw_token(m), S.start_tag_token = this._tag_stack.try_pop(S.tag_name)) : (g.traverse_whitespace(m), this._set_tag_position(g, m, S, y, x), S.is_inline_element || g.set_wrap_point(), g.print_token(m)), S.is_start_tag && this._is_wrap_attributes_force) {
      var w = 0, O;
      do
        O = k.peek(w), O.type === i.ATTRIBUTE && (S.attr_count += 1), w += 1;
      while (O.type !== i.EOF && O.type !== i.TAG_CLOSE);
    }
    return (this._is_wrap_attributes_force_aligned || this._is_wrap_attributes_aligned_multiple || this._is_wrap_attributes_preserve_aligned) && (S.alignment_size = m.text.length + 1), !S.tag_complete && !S.is_unformatted && (g.alignment_size = S.alignment_size), S;
  };
  var h = function(g, m) {
    if (this.parent = g || null, this.text = "", this.type = "TK_TAG_OPEN", this.tag_name = "", this.is_inline_element = !1, this.is_unformatted = !1, this.is_content_unformatted = !1, this.is_empty_element = !1, this.is_start_tag = !1, this.is_end_tag = !1, this.indent_content = !1, this.multiline_content = !1, this.custom_beautifier_name = null, this.start_tag_token = null, this.attr_count = 0, this.has_wrapped_attrs = !1, this.alignment_size = 0, this.tag_complete = !1, this.tag_start_char = "", this.tag_check = "", !m)
      this.tag_complete = !0;
    else {
      var y;
      this.tag_start_char = m.text[0], this.text = m.text, this.tag_start_char === "<" ? (y = m.text.match(/^<([^\s>]*)/), this.tag_check = y ? y[1] : "") : (y = m.text.match(/^{{~?(?:[\^]|#\*?)?([^\s}]+)/), this.tag_check = y ? y[1] : "", (m.text.startsWith("{{#>") || m.text.startsWith("{{~#>")) && this.tag_check[0] === ">" && (this.tag_check === ">" && m.next !== null ? this.tag_check = m.next.text.split(" ")[0] : this.tag_check = m.text.split(">")[1])), this.tag_check = this.tag_check.toLowerCase(), m.type === i.COMMENT && (this.tag_complete = !0), this.is_start_tag = this.tag_check.charAt(0) !== "/", this.tag_name = this.is_start_tag ? this.tag_check : this.tag_check.substr(1), this.is_end_tag = !this.is_start_tag || m.closed && m.closed.text === "/>";
      var x = 2;
      this.tag_start_char === "{" && this.text.length >= 3 && this.text.charAt(2) === "~" && (x = 3), this.is_end_tag = this.is_end_tag || this.tag_start_char === "{" && (this.text.length < 3 || /[^#\^]/.test(this.text.charAt(x)));
    }
  };
  f.prototype._get_tag_open_token = function(g) {
    var m = new h(this._tag_stack.get_parser_token(), g);
    return m.alignment_size = this._options.wrap_attributes_indent_size, m.is_end_tag = m.is_end_tag || c(m.tag_check, this._options.void_elements), m.is_empty_element = m.tag_complete || m.is_start_tag && m.is_end_tag, m.is_unformatted = !m.tag_complete && c(m.tag_check, this._options.unformatted), m.is_content_unformatted = !m.is_empty_element && c(m.tag_check, this._options.content_unformatted), m.is_inline_element = c(m.tag_name, this._options.inline) || this._options.inline_custom_elements && m.tag_name.includes("-") || m.tag_start_char === "{", m;
  }, f.prototype._set_tag_position = function(g, m, y, x, k) {
    if (y.is_empty_element || (y.is_end_tag ? y.start_tag_token = this._tag_stack.try_pop(y.tag_name) : (this._do_optional_end_element(y) && (y.is_inline_element || g.print_newline(!1)), this._tag_stack.record_tag(y), (y.tag_name === "script" || y.tag_name === "style") && !(y.is_unformatted || y.is_content_unformatted) && (y.custom_beautifier_name = l(y.tag_check, m)))), c(y.tag_check, this._options.extra_liners) && (g.print_newline(!1), g._output.just_added_blankline() || g.print_newline(!0)), y.is_empty_element) {
      if (y.tag_start_char === "{" && y.tag_check === "else") {
        this._tag_stack.indent_to_tag(["if", "unless", "each"]), y.indent_content = !0;
        var S = g.current_line_has_match(/{{#if/);
        S || g.print_newline(!1);
      }
      y.tag_name === "!--" && k.type === i.TAG_CLOSE && x.is_end_tag && y.text.indexOf(`
`) === -1 || (y.is_inline_element || y.is_unformatted || g.print_newline(!1), this._calcluate_parent_multiline(g, y));
    } else if (y.is_end_tag) {
      var w = !1;
      w = y.start_tag_token && y.start_tag_token.multiline_content, w = w || !y.is_inline_element && !(x.is_inline_element || x.is_unformatted) && !(k.type === i.TAG_CLOSE && y.start_tag_token === x) && k.type !== "TK_CONTENT", (y.is_content_unformatted || y.is_unformatted) && (w = !1), w && g.print_newline(!1);
    } else
      y.indent_content = !y.custom_beautifier_name, y.tag_start_char === "<" && (y.tag_name === "html" ? y.indent_content = this._options.indent_inner_html : y.tag_name === "head" ? y.indent_content = this._options.indent_head_inner_html : y.tag_name === "body" && (y.indent_content = this._options.indent_body_inner_html)), !(y.is_inline_element || y.is_unformatted) && (k.type !== "TK_CONTENT" || y.is_content_unformatted) && g.print_newline(!1), this._calcluate_parent_multiline(g, y);
  }, f.prototype._calcluate_parent_multiline = function(g, m) {
    m.parent && g._output.just_added_newline() && !((m.is_inline_element || m.is_unformatted) && m.parent.is_inline_element) && (m.parent.multiline_content = !0);
  };
  var p = ["address", "article", "aside", "blockquote", "details", "div", "dl", "fieldset", "figcaption", "figure", "footer", "form", "h1", "h2", "h3", "h4", "h5", "h6", "header", "hr", "main", "menu", "nav", "ol", "p", "pre", "section", "table", "ul"], _ = ["a", "audio", "del", "ins", "map", "noscript", "video"];
  return f.prototype._do_optional_end_element = function(g) {
    var m = null;
    if (!(g.is_empty_element || !g.is_start_tag || !g.parent)) {
      if (g.tag_name === "body")
        m = m || this._tag_stack.try_pop("head");
      else if (g.tag_name === "li")
        m = m || this._tag_stack.try_pop("li", ["ol", "ul", "menu"]);
      else if (g.tag_name === "dd" || g.tag_name === "dt")
        m = m || this._tag_stack.try_pop("dt", ["dl"]), m = m || this._tag_stack.try_pop("dd", ["dl"]);
      else if (g.parent.tag_name === "p" && p.indexOf(g.tag_name) !== -1) {
        var y = g.parent.parent;
        (!y || _.indexOf(y.tag_name) === -1) && (m = m || this._tag_stack.try_pop("p"));
      } else g.tag_name === "rp" || g.tag_name === "rt" ? (m = m || this._tag_stack.try_pop("rt", ["ruby", "rtc"]), m = m || this._tag_stack.try_pop("rp", ["ruby", "rtc"])) : g.tag_name === "optgroup" ? m = m || this._tag_stack.try_pop("optgroup", ["select"]) : g.tag_name === "option" ? m = m || this._tag_stack.try_pop("option", ["select", "datalist", "optgroup"]) : g.tag_name === "colgroup" ? m = m || this._tag_stack.try_pop("caption", ["table"]) : g.tag_name === "thead" ? (m = m || this._tag_stack.try_pop("caption", ["table"]), m = m || this._tag_stack.try_pop("colgroup", ["table"])) : g.tag_name === "tbody" || g.tag_name === "tfoot" ? (m = m || this._tag_stack.try_pop("caption", ["table"]), m = m || this._tag_stack.try_pop("colgroup", ["table"]), m = m || this._tag_stack.try_pop("thead", ["table"]), m = m || this._tag_stack.try_pop("tbody", ["table"])) : g.tag_name === "tr" ? (m = m || this._tag_stack.try_pop("caption", ["table"]), m = m || this._tag_stack.try_pop("colgroup", ["table"]), m = m || this._tag_stack.try_pop("tr", ["table", "thead", "tbody", "tfoot"])) : (g.tag_name === "th" || g.tag_name === "td") && (m = m || this._tag_stack.try_pop("td", ["table", "thead", "tbody", "tfoot", "tr"]), m = m || this._tag_stack.try_pop("th", ["table", "thead", "tbody", "tfoot", "tr"]));
      return g.parent = this._tag_stack.get_parser_token(), m;
    }
  }, ic.Beautifier = f, ic;
}
var Qh;
function _T() {
  if (Qh) return Po.exports;
  Qh = 1;
  var n = gT().Beautifier, t = p_().Options;
  function e(i, r, s, o) {
    var a = new n(i, r, s, o);
    return a.beautify();
  }
  return Po.exports = e, Po.exports.defaultOptions = function() {
    return new t();
  }, Po.exports;
}
var tp;
function bT() {
  if (tp) return ts;
  tp = 1;
  var n = hT(), t = mT(), e = _T();
  function i(r, s, o, a) {
    return o = o || n, a = a || t, e(r, s, o, a);
  }
  return i.defaultOptions = e.defaultOptions, ts.js = n, ts.css = t, ts.html = i, ts;
}
var ep;
function yT() {
  return ep || (ep = 1, function(n) {
    function t(e, i, r) {
      var s = function(o, a) {
        return e.js_beautify(o, a);
      };
      return s.js = e.js_beautify, s.css = i.css_beautify, s.html = r.html_beautify, s.js_beautify = e.js_beautify, s.css_beautify = i.css_beautify, s.html_beautify = r.html_beautify, s;
    }
    (function(e) {
      var i = bT();
      i.js_beautify = i.js, i.css_beautify = i.css, i.html_beautify = i.html, e.exports = t(i, i, i);
    })(n);
  }(jl)), jl.exports;
}
var vT = yT(), xT = Z('<div class="form-group mb-3"><textarea id="source_text" class="form-control" style="height: calc(100vh - 240px); max-height: 568px"></textarea></div>'), wT = Z('<button type="button" class="action primary button btn btn-primary"> </button> <button type="button" class="cancel action button mt-close-dialog btn btn-default"> </button>', 1);
function m_(n, t) {
  xt(t, !0);
  let e = et(t, "text", 7), i = et(t, "onSubmit", 7), r = et(t, "onClose", 7);
  e(vT.html(e()));
  let s;
  $t(() => {
    s == null || s.focus();
  });
  let o;
  return xn(n, {
    size: "lg",
    $$events: {
      close(...a) {
        var l;
        (l = r()) == null || l.apply(this, a);
      }
    },
    children: (a, l) => {
      wn(a, {
        get close() {
          return o;
        },
        set close(c) {
          o = c;
        },
        $$slots: {
          title: (c, u) => {
            var d = bn();
            P(() => z(d, I("Source Code"))), V(c, d);
          },
          body: (c, u) => {
            var d = xT(), f = L(d);
            Tp(f), P(() => Ot(f, "aria-label", I("Source Code"))), Xt(f, (h) => s = h, () => s), A(d), ye(f, e), V(c, d);
          },
          footer: (c, u) => {
            var d = wT(), f = It(d);
            P(() => Ot(f, "title", I("Save (s)"))), f.__click = () => {
              i()(e()), o();
            };
            var h = L(f, !0);
            P(() => z(h, I("Save"))), A(f);
            var p = H(f, 2);
            P(() => Ot(p, "title", I("Cancel (x)"))), p.__click = o;
            var _ = L(p, !0);
            P(() => z(_, I("Cancel"))), A(p), V(c, d);
          }
        }
      });
    },
    $$slots: { default: !0 }
  }), wt({
    get text() {
      return e();
    },
    set text(a) {
      e(a), nt();
    },
    get onSubmit() {
      return i();
    },
    set onSubmit(a) {
      i(a), nt();
    },
    get onClose() {
      return r();
    },
    set onClose(a) {
      r(a), nt();
    }
  });
}
Ce(["click"]);
vt(m_, { text: {}, onSubmit: {}, onClose: {} }, [], [], !0);
const kT = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24"><path fill-rule="evenodd" d="M18.045 7.95c0-1.877-1.596-3.95-4.207-3.95h-8.262c-.427 0-.576.24-.576.647v14.79c0 .406.204.563.631.563h8.484c3.111 0 4.885-2.063 4.885-4.342 0-2.306-1.446-3.943-2.96-4.27.9-.409 2.006-1.561 2.006-3.438zm-5.326-.95c.867 0 1.497.682 1.497 1.5 0 .694-.52 1.5-1.497 1.5h-4.52v-3h4.52zm-4.52 9.5v-3h5.57c.897 0 1.472.775 1.472 1.5 0 .948-.79 1.5-1.472 1.5h-5.57z"/></svg>', ST = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24"><path fill-rule="evenodd" d="M12.435 16.33l.105-.38c.005-.021.557-2.182 1.147-4.438 1.015-3.879 1.263-4.66 1.318-4.779.189-.396.495-.695.936-.916.381-.19.866-.315 1.443-.373.17-.018.33-.113.447-.267.106-.14.168-.317.168-.486 0-.381-.306-.692-.682-.692h-7.733c-.376 0-.682.311-.682.692v.024c0 .341.241.628.573.682.439.072 1.042.172 1.515.399.243.116.431.257.557.418.143.182.213.393.213.642 0 .467-.135.935-.265 1.387l-.082.291c-.167.603-.412 1.519-.696 2.579-.655 2.441-1.47 5.477-1.675 6.055-.138.389-.65 1.311-2.413 1.448-.171.013-.332.092-.447.219-.117.129-.181.294-.181.47v.002c0 .381.306.692.682.692h7.735c.376 0 .682-.311.682-.692v-.005c0-.349-.257-.644-.598-.685l-.201-.024c-.679-.079-1.523-.179-1.878-.647-.165-.217-.217-.504-.163-.872.035-.249.105-.491.178-.745"/></svg>', CT = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24"><path fill-rule="evenodd" d="M6 20h12v1h-12v-1zm12-7.242c0 1.907-.532 3.324-1.596 4.251-1.064.927-2.535 1.391-4.414 1.391-1.905 0-3.379-.46-4.424-1.381-1.044-.921-1.567-2.341-1.567-4.261v-8.758h3.094v8.758c0 .381.033.756.099 1.124.066.368.204.694.414.976.21.283.502.513.877.69.374.178.877.266 1.507.266 1.103 0 1.865-.247 2.286-.74.42-.493.631-1.266.631-2.318v-8.758h3.094v8.758z"/></svg>', TT = `<svg width="72" height="72" viewBox="0 0 72 72" fill="none"
    xmlns="http://www.w3.org/2000/svg">
    <g clip-path="url(#clip0_57_45)">
        <path d="M64.8 37.01H51.4V36.28C51.4 32.16 52.74 30.45 55.27 30.45C57.39 30.45 58.58 31.7 58.98 33.73H63.16C62.44 29.02 59.54 26.77 55.27 26.77C50.43 26.77 47.03 29.64 47.03 36.29V37.02H42.11C43.55 36.14 44.47 34.7 44.47 32.7C44.47 28.86 41.69 27.05 36.61 27.05H29.4V37.01H23.97L20.5 27.05H16.32L12.85 37.01H7.19V40.21H11.74L8.83 48.57H13.51L14.82 44.48H22.03L23.34 48.57H27.99L25.08 40.21H29.39V48.57H37.28C42.96 48.57 45.14 45.73 45.14 42.39C45.14 41.56 45 40.84 44.76 40.2H47.04C47.33 46.17 50.63 48.85 55.25 48.85C59.87 48.85 62.4 46.73 63.11 41.89H58.96C58.49 44.07 57.43 45.17 55.25 45.17C52.92 45.17 51.6 43.59 51.41 40.21H64.79V37.01H64.8ZM33.77 30.72H36.2C39.35 30.72 40.1 31.59 40.1 33.09C40.1 34.59 39.07 35.55 36.67 35.55H33.77V30.71V30.72ZM18.42 33.22L19.64 37.01H17.21L18.43 33.22H18.42ZM20.85 40.8H15.98L16.17 40.2H20.65L20.84 40.8H20.85ZM40.79 42.05C40.79 43.89 39.54 44.89 36.92 44.89H33.77V40.21H40.14C40.58 40.65 40.8 41.25 40.8 42.05H40.79Z" fill="black"/>
    </g>
    <defs>
        <clipPath id="clip0_57_45">
            <rect width="72" height="72" fill="white"/>
        </clipPath>
    </defs>
</svg>
`, ET = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24"><path fill-rule="evenodd" d="M8 11.505c0-.279.229-.505.5-.505h10.999c.276 0 .5.214.5.505v.991c0 .279-.229.505-.5.505h-10.999c-.276 0-.5-.214-.5-.505v-.991zm0 6c0-.279.229-.505.5-.505h10.999c.276 0 .5.214.5.505v.991c0 .279-.229.505-.5.505h-10.999c-.276 0-.5-.214-.5-.505v-.991zm0-12c0-.279.229-.505.5-.505h10.999c.276 0 .5.214.5.505v.991c0 .279-.229.505-.5.505h-10.999c-.276 0-.5-.214-.5-.505v-.991zm-3 1.495c-.552 0-1-.448-1-1s.448-1 1-1 1 .448 1 1-.448 1-1 1zm0 6c-.552 0-1-.448-1-1s.448-1 1-1 1 .448 1 1-.448 1-1 1zm0 6c-.552 0-1-.448-1-1s.448-1 1-1 1 .448 1 1-.448 1-1 1z"/></svg>', OT = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24"><path fill-rule="evenodd" d="M6 18.5h-2v-.5h2v-1h.5v2.5h-2.5v-.5h2v-.5zm-2-6.25v-.25h2v-1h.5v1.5h-2v.5h2v.5h-2.5v-1.25zm4-.745c0-.279.229-.505.5-.505h10.999c.276 0 .5.214.5.505v.991c0 .279-.229.505-.5.505h-10.999c-.276 0-.5-.214-.5-.505v-.991zm0 6c0-.279.229-.505.5-.505h10.999c.276 0 .5.214.5.505v.991c0 .279-.229.505-.5.505h-10.999c-.276 0-.5-.214-.5-.505v-.991zm0-12c0-.279.229-.505.5-.505h10.999c.276 0 .5.214.5.505v.991c0 .279-.229.505-.5.505h-10.999c-.276 0-.5-.214-.5-.505v-.991zm-3-1.005h.5v3h-.5v-3zm-1 6.5h2v.5h-2v-.5zm0 6h2v.5h-2v-.5z"/></svg>', MT = `<svg width="72" height="72" viewBox="0 0 72 72" fill="none"
    xmlns="http://www.w3.org/2000/svg">
    <path d="M63 32H9V40H63V32Z" fill="black"/>
</svg>
`, AT = `<svg width="72" height="72" viewBox="0 0 72 72" fill="none"
    xmlns="http://www.w3.org/2000/svg">
    <g clip-path="url(#clip0_57_31)">
        <path d="M30.09 44.49H13.05V31.36C13.05 26.53 14.05 22.71 16.07 19.92C18.09 17.13 21.53 14.66 26.41 12.51L30.09 19.49C27.09 20.9 25.01 22.31 23.86 23.7C22.71 25.1 22.07 26.75 21.94 28.66H30.09V44.49ZM49.95 44.49H32.91V31.36C32.91 26.53 33.91 22.71 35.93 19.92C37.95 17.13 41.39 14.66 46.27 12.51L49.95 19.49C46.95 20.9 44.87 22.31 43.72 23.7C42.57 25.09 41.93 26.75 41.8 28.66H49.95V44.49Z" fill="black"/>
    </g>
    <defs>
        <clipPath id="clip0_57_31">
            <rect width="72" height="72" fill="white"/>
        </clipPath>
    </defs>
</svg>
`, NT = `<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24">
    <path fill-rule="evenodd" d="M16.407 6.284l1.732 1c.957.552 1.284 1.775.732 2.732l-5 8.66c-.552.957-1.775 1.284-2.732.732l-1.732-1-1.5 2.598c-.276.478-.888.642-1.366.366-.478-.276-.642-.888-.366-1.366l1.5-2.598-1.732-1c-.957-.552-1.284-1.775-.732-2.732l5-8.66c.552-.957 1.775-1.284 2.732-.732l1.732 1 1.5-2.598c.276-.478.888-.642 1.366-.366.478.276.642.888.366 1.366l-1.5 2.598zm-1 1.732l-.5.866c-.276.478-.888.642-1.366.366-.478-.276-.642-.888-.366-1.366l.5-.866-1.299-.75c-.239-.138-.545-.056-.683.183l-4.5 7.794c-.138.239-.056.545.183.683l1.299.75.5-.866c.276-.478.888-.642 1.366-.366.478.276.642.888.366 1.366l-.5.866 1.299.75c.239.138.545.056.683-.183l4.5-7.794c.138-.239.056-.545-.183-.683l-1.299-.75zm-6.696-.402l-1.961 3.397c.443-.415.872-.503 1.287-.263.415.24.564.661.445 1.263l1.961-3.397c-.448.57-.921.711-1.42.423-.499-.288-.603-.762-.312-1.423zm6.928 4l-1.961 3.397c.443-.415.872-.503 1.287-.263.415.24.564.661.445 1.263l1.961-3.397c-.448.57-.921.711-1.42.423-.499-.288-.603-.762-.312-1.423zm4.464 1.634c.138.239.056.545-.183.683l-.866.5c-.239.138-.545.056-.683-.183s-.056-.545.183-.683l.866-.5c.239-.138.545-.056.683.183zm-2.866 2.964c.276 0 .5.224.5.5v1c0 .276-.224.5-.5.5s-.5-.224-.5-.5v-1c0-.276.224-.5.5-.5zm2.732.268c-.138.239-.444.321-.683.183l-.866-.5c-.239-.138-.321-.444-.183-.683.138-.239.444-.321.683-.183l.866.5c.239.138.321.444.183.683zm-12.64-10.607c.276 0 .5.224.5.5v1c0 .276-.224.5-.5.5s-.5-.224-.5-.5v-1c0-.276.224-.5.5-.5zm-1.134 3.964c.138.239.056.545-.183.683l-.866.5c-.239.138-.545.056-.683-.183s-.056-.545.183-.683l.866-.5c.239-.138.545-.056.683.183zm.134-1.232c-.138.239-.444.321-.683.183l-.866-.5c-.239-.138-.321-.444-.183-.683.138-.239.444-.321.683-.183l.866.5c.239.138.321.444.183.683z"/>
</svg>
`, LT = `<svg width="72" height="72" viewBox="0 0 72 72" fill="none"
    xmlns="http://www.w3.org/2000/svg">
    <g clip-path="url(#clip0_57_171)">
        <path d="M43.45 22.79H26.67L34.86 14.43L28.46 8.10001L9.65002 27.31L28.47 46.52L34.87 40.19L26.68 31.83H43.46C48.93 31.83 53.38 36.4 53.38 42.02V44.69C53.38 50.31 48.93 54.88 43.46 54.88V63.9C53.88 63.9 62.36 55.28 62.36 44.68V42.01C62.36 31.41 53.88 22.79 43.46 22.79H43.45Z" fill="black"/>
    </g>
    <defs>
        <clipPath id="clip0_57_171">
            <rect width="72" height="72" fill="white"/>
        </clipPath>
    </defs>
</svg>
`, RT = `<svg width="72" height="72" viewBox="0 0 72 72" fill="none"
    xmlns="http://www.w3.org/2000/svg">
    <g clip-path="url(#clip0_57_35)">
        <path d="M43.53 8.10001L37.13 14.43L45.32 22.79H28.54C18.12 22.79 9.64001 31.41 9.64001 42.01V44.68C9.64001 55.28 18.12 63.9 28.54 63.9V54.88C23.07 54.88 18.62 50.31 18.62 44.69V42.02C18.62 36.4 23.07 31.83 28.54 31.83H45.32L37.13 40.19L43.53 46.52L62.35 27.31L43.53 8.10001Z" fill="black"/>
    </g>
    <defs>
        <clipPath id="clip0_57_35">
            <rect width="72" height="72" fill="white"/>
        </clipPath>
    </defs>
</svg>
`, IT = `<svg width="72" height="72" viewBox="0 0 72 72" fill="none"
    xmlns="http://www.w3.org/2000/svg">
    <g clip-path="url(#clip0_57_39)">
        <path d="M39 56.99H9V62.99H39V56.99Z" fill="black"/>
        <path d="M57 9L55.41 17.02H40.79L33.12 52.49H23.45L31.12 17.02H16.5L18.09 9H57Z" fill="black"/>
        <path fill-rule="evenodd" clip-rule="evenodd" d="M56.7601 52.5L62.1101 47.15C63.2801 45.98 63.2801 44.08 62.1101 42.91L62.0801 42.88C60.9101 41.71 59.0101 41.71 57.8401 42.88L52.4901 48.23L47.1401 42.88C45.9701 41.71 44.0701 41.71 42.9001 42.88L42.8701 42.91C41.7001 44.08 41.7001 45.98 42.8701 47.15L48.2201 52.5L42.8701 57.85C41.7001 59.02 41.7001 60.92 42.8701 62.09L42.9001 62.12C44.0701 63.29 45.9701 63.29 47.1401 62.12L52.4901 56.77L57.8401 62.12C59.0101 63.29 60.9101 63.29 62.0801 62.12L62.1101 62.09C63.2801 60.92 63.2801 59.02 62.1101 57.85L56.7601 52.5Z" fill="black"/>
    </g>
    <defs>
        <clipPath id="clip0_57_39">
            <rect width="72" height="72" fill="white"/>
        </clipPath>
    </defs>
</svg>
`, PT = `<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24"><path id="a" fill-rule="evenodd" d="M8 6.49c0-.271.229-.49.5-.49h10.999c.276 0 .5.215.5.49v3.019c0 .271-.229.49-.5.49h-10.999c-.276 0-.5-.215-.5-.49v-3.019zm-4-1.994c0-.274.214-.496.505-.496h.991c.279 0 .505.226.505.496v15.007c0 .274-.214.496-.505.496h-.991c-.279 0-.505-.226-.505-.496v-15.007zm4 9.994c0-.271.231-.49.5-.49h6.999c.276 0 .5.215.5.49v3.019c0 .271-.231.49-.5.49h-6.999c-.276 0-.5-.215-.5-.49v-3.019z"/></svg>
`, DT = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24"><path fill-rule="evenodd" d="M11 13v-2h-7.5c-.276 0-.5-.215-.5-.49v-3.019c0-.271.228-.49.5-.49h7.5v-2.504c0-.274.214-.496.505-.496h.991c.279 0 .505.226.505.496v2.504h7.5c.276 0 .5.215.5.49v3.019c0 .271-.228.49-.5.49h-7.5v2h2.5c.276 0 .5.215.5.49v3.019c0 .271-.231.49-.5.49h-2.5v2.504c0 .274-.214.496-.505.496h-.991c-.279 0-.505-.226-.505-.496v-2.504h-2.5c-.276 0-.5-.215-.5-.49v-3.019c0-.271.231-.49.5-.49h2.5z"/></svg>', $T = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24"><path fill-rule="evenodd" d="M4 6.49c0-.271.229-.49.5-.49h10.999c.276 0 .5.215.5.49v3.019c0 .271-.229.49-.5.49h-10.999c-.276 0-.5-.215-.5-.49v-3.019zm4 8c0-.271.231-.49.5-.49h6.999c.276 0 .5.215.5.49v3.019c0 .271-.231.49-.5.49h-6.999c-.276 0-.5-.215-.5-.49v-3.019zm10-9.994c0-.274.214-.496.505-.496h.991c.279 0 .505.226.505.496v15.007c0 .274-.214.496-.505.496h-.991c-.279 0-.505-.226-.505-.496v-15.007z"/></svg>', BT = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24"><path fill-rule="evenodd" d="M6.553 12.06c0 .06-.036.112-.088.135l.002.003-3.216 1.856a.147.147 0 0 1-.25-.1H3v-3.787a.148.148 0 0 1 .253-.103l3.229 1.864-.004.006a.146.146 0 0 1 .075.126zM3.5 3h17a.5.5 0 0 1 .5.5v2a.5.5 0 0 1-.5.5h-17a.5.5 0 0 1-.5-.5v-2a.5.5 0 0 1 .5-.5zm6 5h11a.5.5 0 0 1 .5.5v2a.5.5 0 0 1-.5.5h-11a.5.5 0 0 1-.5-.5v-2a.5.5 0 0 1 .5-.5zm0 5h11a.5.5 0 0 1 .5.5v2a.5.5 0 0 1-.5.5h-11a.5.5 0 0 1-.5-.5v-2a.5.5 0 0 1 .5-.5zm-6 5h17a.5.5 0 0 1 .5.5v2a.5.5 0 0 1-.5.5h-17a.5.5 0 0 1-.5-.5v-2a.5.5 0 0 1 .5-.5z"/></svg>', zT = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24"><path fill-rule="evenodd" d="M3 12.06c0-.055.031-.1.075-.126l-.004-.006L6.3 10.064a.147.147 0 0 1 .253.103v3.786a.147.147 0 0 1-.25.101l-3.216-1.856.001-.003A.147.147 0 0 1 3 12.06zM3.5 3h17a.5.5 0 0 1 .5.5v2a.5.5 0 0 1-.5.5h-17a.5.5 0 0 1-.5-.5v-2a.5.5 0 0 1 .5-.5zm6 5h11a.5.5 0 0 1 .5.5v2a.5.5 0 0 1-.5.5h-11a.5.5 0 0 1-.5-.5v-2a.5.5 0 0 1 .5-.5zm0 5h11a.5.5 0 0 1 .5.5v2a.5.5 0 0 1-.5.5h-11a.5.5 0 0 1-.5-.5v-2a.5.5 0 0 1 .5-.5zm-6 5h17a.5.5 0 0 1 .5.5v2a.5.5 0 0 1-.5.5h-17a.5.5 0 0 1-.5-.5v-2a.5.5 0 0 1 .5-.5z"/></svg>', HT = `<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24"><path fill-rule="evenodd" d="M3.923 15.095c.019-.117.102-.213.215-.249.113-.036.236-.006.319.077l1.08 1.08 2.899-2.899c.123-.123.323-.123.446 0l1.998 1.998c.123.123.123.323 0 .446l-2.9 2.899 1.08 1.08c.084.083.114.207.078.319-.036.113-.131.196-.248.215l-5.523.933c-.101.017-.203-.015-.276-.087v-.001c-.072-.072-.105-.174-.088-.274l.919-5.538zm16.154-6.19c-.019.117-.102.213-.215.249-.113.036-.236.006-.32-.077l-1.08-1.08-2.899 2.899c-.123.123-.323.123-.446 0l-1.998-1.998c-.123-.123-.123-.323 0-.446l2.9-2.9-1.08-1.08c-.084-.084-.114-.207-.078-.319.036-.113.132-.196.248-.215l5.523-.933c.101-.017.203.016.276.088v.001c.072.072.105.174.088.274l-.919 5.538z"/></svg>
`, Ze = (n, t, e, i, r, s) => {
  var o, a;
  return i ?? (i = `toggle${t.slice(0, 1).toUpperCase() + t.slice(1)}`), r ?? (r = "is-active"), s ?? (s = (l) => l.tiptap.isActive(t)), a = class extends jr {
    constructor() {
      super();
      Rt(this, o);
      Nt(this, o, document.createElement("button")), J(this, o).title = typeof n == "string" ? I(n) : `${I(n[0])} (${Yu(n[1])})`, J(this, o).innerHTML = e, this.shadowRoot.appendChild(J(this, o));
    }
    connectedCallback() {
      super.connectedCallback(), this.addEventListener("click", () => {
        const c = this.tiptap;
        c && (typeof i == "function" ? i(c) : c.chain().focus()[i]().run());
      });
    }
    onEditorUpdate() {
      if (r !== !1) {
        const c = s(this.editor);
        J(this, o).classList.toggle(r, c), r === "is-disabled" && (J(this, o).disabled = c);
      }
    }
  }, o = new WeakMap(), a;
}, nd = (n, t, e) => {
  var r, s;
  const i = t.substring(5).toLowerCase();
  return s = class extends jr {
    constructor() {
      super();
      Rt(this, r);
      Nt(this, r, document.createElement("button")), J(this, r).title = typeof n == "string" ? I(n) : `${I(n[0])} (${Yu(n[1])})`, J(this, r).innerHTML = e, this.shadowRoot.appendChild(J(this, r));
    }
    connectedCallback() {
      super.connectedCallback(), this.addEventListener("click", () => {
        const a = this.tiptap;
        if (!a)
          return;
        const l = a.state.selection.$head.parent.type.name;
        a.getAttributes(l).textAlign === i ? a.chain().focus().unsetTextAlign().run() : a.chain().focus().setTextAlign(i).run();
      });
    }
    onEditorUpdate() {
      const a = this.tiptap;
      if (!a)
        return;
      const l = a.state.selection.$head.parent.type.name, c = a.getAttributes(l).textAlign;
      J(this, r).classList.toggle("is-active", c === i);
    }
  }, r = new WeakMap(), s;
}, FT = Ze(["Bold", "cmd+B"], "bold", kT), VT = Ze(["Italic", "cmd+I"], "italic", ST), jT = Ze(
  ["Underline", "cmd+U"],
  "underline",
  CT
), WT = Ze("Strike", "strike", TT), UT = Ze(
  "Unlink",
  "unlink",
  NT,
  "unsetLink",
  "is-disabled",
  (n) => !n.tiptap.isActive("link")
), KT = Ze(
  "Bullet List",
  "bulletList",
  ET,
  (n) => {
    n.chain().focus().lift(n.state.selection.$from.before()).setNode(n.isActive("bulletList") ? "paragraph" : "textBlock").run(), n.chain().toggleBulletList().run();
  }
), qT = Ze(
  "Ordered List",
  "orderedList",
  OT,
  (n) => {
    n.chain().focus().lift(n.state.selection.$from.before()).setNode(n.isActive("orderedList") ? "paragraph" : "textBlock").run(), n.chain().toggleOrderedList().run();
  }
), GT = Ze("Blockquote", "blockquote", AT), JT = Ze(
  ["Undo", "cmd+Z"],
  "undo",
  LT,
  "undo",
  "is-disabled",
  (n) => dC(n.tiptap.state) === 0
), XT = Ze(
  ["Redo", "cmd+Y"],
  "redo",
  RT,
  "redo",
  "is-disabled",
  (n) => fC(n.tiptap.state) === 0
), YT = Ze(
  "Remove Format",
  "removeFormat",
  IT,
  (n) => n.chain().focus().unsetAllMarks().clearNodes().run(),
  !1
), ZT = nd("Align Left", "alignLeft", PT), QT = nd(
  "Align Center",
  "alignCenter",
  DT
), tE = nd(
  "Align Right",
  "alignRight",
  $T
), eE = Ze("Indent", "indent", BT, "indent", !1), nE = Ze("Outdent", "outdent", zT, "outdent", !1);
class iE extends jr {
  constructor() {
    super();
    const t = document.createElement("button");
    t.title = I("Horizontal Rule"), t.innerHTML = MT, this.shadowRoot.appendChild(t);
  }
  connectedCallback() {
    super.connectedCallback(), this.addEventListener("click", () => {
      const t = this.tiptap;
      t && t.chain().focus().setHorizontalRule().run();
    });
  }
}
class rE extends jr {
  constructor() {
    super();
    const t = document.createElement("button");
    t.title = I("Insert HTML"), t.innerHTML = VC, this.shadowRoot.appendChild(t);
  }
  connectedCallback() {
    super.connectedCallback(), this.addEventListener("click", () => {
      const t = this.tiptap;
      if (!t)
        return;
      const e = Te(l_, {
        target: document.body,
        props: {
          onSubmit: (i) => {
            t.commands.insertContent(gr(i));
          },
          onClose: () => {
            Qt(e);
          }
        }
      });
    });
  }
}
class sE extends jr {
  constructor() {
    super();
    const t = document.createElement("button");
    t.title = I("Toggle to HTML editing mode"), t.innerHTML = cT, this.shadowRoot.appendChild(t);
  }
  connectedCallback() {
    super.connectedCallback(), this.addEventListener("click", () => {
      const t = this.tiptap;
      if (!t)
        return;
      const e = Te(m_, {
        target: document.body,
        props: {
          text: Ep(t.getHTML()),
          onSubmit: (i) => {
            t.commands.setContent(gr(i));
          },
          onClose: () => {
            Qt(e);
          }
        }
      });
    });
  }
}
var ci, Mi;
class oE extends jr {
  constructor() {
    super();
    Rt(this, ci);
    Rt(this, Mi);
    Nt(this, Mi, document.createElement("style")), J(this, Mi).textContent = "body { overflow: hidden; }", Nt(this, ci, document.createElement("button")), J(this, ci).title = I("Full Screen"), J(this, ci).innerHTML = HT, this.shadowRoot.appendChild(J(this, ci));
  }
  connectedCallback() {
    super.connectedCallback(), this.addEventListener("click", () => {
      const e = this.editor;
      if (!e)
        return;
      const i = e[hn].classList.contains(
        "mt-rich-text-editor-editor--fullscreen"
      );
      e[hn].classList.toggle("mt-rich-text-editor-editor--fullscreen"), J(this, ci).classList.toggle("is-active", !i), i ? document.body.removeChild(J(this, Mi)) : document.body.appendChild(J(this, Mi));
    });
  }
}
ci = new WeakMap(), Mi = new WeakMap();
const g_ = (n) => class extends n {
  constructor() {
    super(...arguments);
    nn(this, "editor");
    nn(this, "options", {});
  }
  get tiptap() {
    var e;
    return (e = this.editor) == null ? void 0 : e.tiptap;
  }
  get shadowRoot() {
    return super.shadowRoot;
  }
  onEditorInit(e, i) {
    this.editor = e, this.options = i;
  }
  onEditorUpdate() {
  }
}, __ = document.createElement("style");
__.textContent = nb;
const Qe = (n) => class extends g_(n) {
  connectedCallback() {
    super.connectedCallback(), this.shadowRoot.appendChild(__.cloneNode(!0));
  }
}, aE = `<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24">
    <path fill-rule="evenodd" d="M16.366 6.438l1.732 1c.957.552 1.284 1.775.732 2.732l-5 8.66c-.552.957-1.775 1.284-2.732.732l-1.732-1-1.5 2.598c-.276.478-.888.642-1.366.366-.478-.276-.642-.888-.366-1.366l1.5-2.598-1.732-1c-.957-.552-1.284-1.775-.732-2.732l5-8.66c.552-.957 1.775-1.284 2.732-.732l1.732 1 1.5-2.598c.276-.478.888-.642 1.366-.366.478.276.642.888.366 1.366l-1.5 2.598zm-1 1.732l-.5.866c-.276.478-.888.642-1.366.366-.478-.276-.642-.888-.366-1.366l.5-.866-1.299-.75c-.239-.138-.545-.056-.683.183l-4.5 7.794c-.138.239-.056.545.183.683l1.299.75.5-.866c.276-.478.888-.642 1.366-.366.478.276.642.888.366 1.366l-.5.866 1.299.75c.239.138.545.056.683-.183l4.5-7.794c.138-.239.056-.545-.183-.683l-1.299-.75z"/>
</svg>
`;
var lE = Z('<div class="toolbar-group svelte-o3fv9u"></div>'), cE = Z("<div></div>");
const uE = {
  hash: "svelte-o3fv9u",
  code: `.toolbar.svelte-o3fv9u {position:absolute;background-color:#fff;border:1px solid #ccc;z-index:1;border-radius:4px;box-shadow:0 2px 4px rgba(0, 0, 0, 0.1);gap:5px;}.toolbar.svelte-o3fv9u::after,
  .toolbar.svelte-o3fv9u::before {content:"";position:absolute;left:50%;transform:translateX(-50%);width:0;height:0;}

  /* Arrow at the bottom */.toolbar--top.svelte-o3fv9u::before {bottom:-9px;border-left:8px solid transparent;border-right:8px solid transparent;border-top:8px solid #ccc;}.toolbar--top.svelte-o3fv9u::after {bottom:-7px;border-left:7px solid transparent;border-right:7px solid transparent;border-top:7px solid #fff;}

  /* Arrow at the top */.toolbar--bottom.svelte-o3fv9u::before {top:-9px;border-left:8px solid transparent;border-right:8px solid transparent;border-bottom:8px solid #ccc;}.toolbar--bottom.svelte-o3fv9u::after {top:-7px;border-left:7px solid transparent;border-right:7px solid transparent;border-bottom:7px solid #fff;}.toolbar-group.svelte-o3fv9u {display:flex;gap:5px;padding:4px;}.toolbar-item.svelte-o3fv9u {display:flex;align-items:center;justify-content:center;}`
};
function id(n, t) {
  xt(t, !0), De(n, uE);
  const e = et(t, "editor", 7), i = et(t, "condition", 7), r = et(t, "targetNodeName", 7), s = et(t, "targetNodeTagName", 7), o = et(t, "items", 7), a = e().tiptap, l = a.view.dom, c = {}, u = o().map((S) => S.map((w) => ({
    name: w,
    elementName: Kr("toolbar", w),
    icon: w
  })));
  let d = lt(!1), f = lt(0), h = lt(0), p, _ = lt(!1);
  const g = () => {
    if (K(d, pt(!e().getStructureMode() && i()())), C(d)) {
      y();
      for (const S in c)
        "onEditorUpdate" in c[S] && c[S].onEditorUpdate();
    }
  };
  a.on("selectionUpdate", g), a.on("update", g);
  const m = (S) => {
    var E;
    const w = S.dom.getBoundingClientRect(), { selection: O } = S.state;
    let v = null;
    if (a.isActive(r())) {
      const b = S.domAtPos(O.from);
      if (b.node && (v = b.node, v.nodeType === Node.TEXT_NODE && (v = v.parentElement)), s() === "A" && (v == null ? void 0 : v.tagName) !== "A") {
        const T = S.domAtPos(O.from - 1);
        T.node && (v = T.node, v.nodeType === Node.TEXT_NODE && (v = v.parentElement));
      }
      if (v && s() !== v.tagName) {
        const T = v.querySelector(s());
        T && (v = T);
      }
    }
    if (!v) {
      const b = (
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        ((E = O.node) == null ? void 0 : E.type.name) === r() ? O.$anchor : Zi((T) => T.type.name === r())(O)
      );
      if (!b) {
        K(f, 0), K(h, 0);
        return;
      }
      if (v = S.nodeDOM(b.pos), !v) {
        K(f, 0), K(h, 0);
        return;
      }
    }
    (async () => {
      v instanceof HTMLImageElement && !v.complete && await new Promise((Q) => {
        v.onload = Q;
      });
      const b = v.getBoundingClientRect();
      if (!(b.top < w.bottom && b.bottom > w.top && b.left < w.right && b.right > w.left)) {
        K(f, 0), K(h, 0);
        return;
      }
      const M = (p == null ? void 0 : p.offsetWidth) || 0, F = (p == null ? void 0 : p.offsetHeight) || 0, D = v.offsetWidth, U = b.top - w.top - F - 10, q = b.bottom - w.top + 10;
      K(_, U < 0), K(f, pt(C(_) ? q : U)), K(h, b.left - w.left + D / 2 - M / 2);
    })();
  }, y = () => {
    try {
      m(a.view);
    } catch {
    }
  };
  function x(S, w) {
    return c[w] = S, "onEditorInit" in c[w] && c[w].onEditorInit(e(), {}), {
      destroy() {
        delete c[w];
      }
    };
  }
  $t(() => {
    l.addEventListener("scroll", () => {
      C(d) && y();
    }), C(d) && y();
  });
  var k = cE();
  return re(k, 21, () => u, gn, (S, w) => {
    var O = lE();
    re(O, 21, () => C(w), (v) => v.name, (v, E) => {
      var b = Di(), T = It(b);
      oo(T, () => C(E).elementName, !1, (M, F) => {
        Oe(M, (D, U) => x == null ? void 0 : x(D, U), () => C(E).name), ao(M, null, { class: "toolbar-item" }, "svelte-o3fv9u", M.namespaceURI === Vr, M.nodeName.includes("-"));
      }), V(v, b);
    }), A(O), V(S, O);
  }), A(k), Xt(k, (S) => p = S, () => p), P(() => {
    Gi(k, `${`toolbar ${C(_) ? "toolbar--bottom" : "toolbar--top"}` ?? ""} svelte-o3fv9u`), Ot(k, "style", `
    display: ${C(d) && C(f) && C(h) ? "flex" : "none"};
    background-color: #fff;
    z-index: 1000;
    top: ${C(f)}px; 
    left: ${C(h)}px;
  `);
  }), V(n, k), wt({
    get editor() {
      return e();
    },
    set editor(S) {
      e(S), nt();
    },
    get condition() {
      return i();
    },
    set condition(S) {
      i(S), nt();
    },
    get targetNodeName() {
      return r();
    },
    set targetNodeName(S) {
      r(S), nt();
    },
    get targetNodeTagName() {
      return s();
    },
    set targetNodeTagName(S) {
      s(S), nt();
    },
    get items() {
      return o();
    },
    set items(S) {
      o(S), nt();
    }
  });
}
vt(
  id,
  {
    editor: {},
    condition: {},
    targetNodeName: {},
    targetNodeTagName: {},
    items: {}
  },
  [],
  [],
  !0
);
function b_(n, t) {
  xt(t, !0);
  const e = et(t, "editor", 7);
  return id(n, {
    get editor() {
      return e();
    },
    targetNodeName: "link",
    targetNodeTagName: "A",
    condition: () => {
      var r;
      return !e().isPasting() && ((r = e().tiptap) == null ? void 0 : r.isActive("link"));
    },
    items: [["previewLink", "editLink", "unlink"]]
  }), wt({
    get editor() {
      return e();
    },
    set editor(r) {
      e(r), nt();
    }
  });
}
vt(b_, { editor: {} }, [], [], !0);
var kr;
class dE {
  constructor({ editor: t }) {
    Rt(this, kr);
    Nt(this, kr, Te(b_, {
      target: t.tiptap.view.dom.getRootNode(),
      props: {
        editor: t
      }
    }));
  }
  destroy() {
    J(this, kr) && Qt(J(this, kr));
  }
}
kr = new WeakMap();
var fE = Z('<div class="form-group mb-3"><label for="link-url" class="form-label"> </label> <input type="url" id="link-url" class="form-control"></div> <div class="form-group mb-3"><label for="link-text" class="form-label"> </label> <input type="text" id="link-text" class="form-control"></div> <div class="form-group mb-3"><label for="link-title" class="form-label"> </label> <input type="text" id="link-title" class="form-control"></div> <div class="form-group mb-3"><label for="link-target" class="form-label"> </label> <select id="link-target" class="form-select"><option> </option><option> </option></select></div>', 1), hE = Z('<button type="button" class="action primary button btn btn-primary"> </button> <button type="button" class="cancel action button mt-close-dialog btn btn-default"> </button>', 1);
function rd(n, t) {
  xt(t, !0);
  let e = et(t, "linkData", 7), i = et(t, "onSubmit", 7), r = et(t, "onClose", 7), s = lt(pt(e().url)), o = lt(pt(e().text)), a = lt(pt(e().title)), l = lt(pt(e().target)), c;
  $t(() => {
    c == null || c.focus();
  });
  let u = e().text !== "";
  const d = () => {
    u = !0;
  };
  $t(() => {
    u || K(o, pt(C(s)));
  });
  let f, h;
  return Xt(
    xn(n, {
      $$events: {
        close(...p) {
          var _;
          (_ = r()) == null || _.apply(this, p);
        }
      },
      children: (p, _) => {
        wn(p, {
          get close() {
            return h;
          },
          set close(g) {
            h = g;
          },
          $$slots: {
            title: (g, m) => {
              var y = bn();
              P(() => z(y, I("Insert Link"))), V(g, y);
            },
            body: (g, m) => {
              var y = fE(), x = It(y), k = L(x), S = L(k, !0);
              P(() => z(S, I("Link URL"))), A(k);
              var w = H(k, 2);
              se(w), Xt(w, (ht) => c = ht, () => c), A(x);
              var O = H(x, 2), v = L(O), E = L(v, !0);
              P(() => z(E, I("Link Text"))), A(v);
              var b = H(v, 2);
              se(b), b.__change = d, A(O);
              var T = H(O, 2), M = L(T), F = L(M, !0);
              P(() => z(F, I("Title"))), A(M);
              var D = H(M, 2);
              se(D), A(T);
              var U = H(T, 2), q = L(U), Q = L(q, !0);
              P(() => z(Q, I("Link Target"))), A(q);
              var ut = H(q, 2), rt = L(ut);
              rt.value = (rt.__value = "_self") == null ? "" : "_self";
              var kt = L(rt, !0);
              P(() => z(kt, I("LINK_TARGET_SELF"))), A(rt);
              var st = H(rt);
              st.value = (st.__value = "_blank") == null ? "" : "_blank";
              var Pt = L(st, !0);
              P(() => z(Pt, I("LINK_TARGET_BLANK"))), A(st), A(ut), A(U), ye(w, () => C(s), (ht) => K(s, ht)), ye(b, () => C(o), (ht) => K(o, ht)), ye(D, () => C(a), (ht) => K(a, ht)), hr(ut, () => C(l), (ht) => K(l, ht)), V(g, y);
            },
            footer: (g, m) => {
              var y = hE(), x = It(y);
              P(() => Ot(x, "title", I("Insert (s)"))), x.__click = () => {
                i()({
                  url: C(s),
                  text: C(o),
                  title: C(a),
                  target: C(l)
                }), h();
              };
              var k = L(x, !0);
              P(() => z(k, I("Insert"))), A(x);
              var S = H(x, 2);
              P(() => Ot(S, "title", I("Cancel (x)"))), S.__click = h;
              var w = L(S, !0);
              P(() => z(w, I("Cancel"))), A(S), V(g, y);
            }
          }
        });
      },
      $$slots: { default: !0 }
    }),
    (p) => f = p,
    () => f
  ), wt({
    get linkData() {
      return e();
    },
    set linkData(p) {
      e(p), nt();
    },
    get onSubmit() {
      return i();
    },
    set onSubmit(p) {
      i(p), nt();
    },
    get onClose() {
      return r();
    },
    set onClose(p) {
      r(p), nt();
    }
  });
}
Ce(["change", "click"]);
vt(rd, { linkData: {}, onSubmit: {}, onClose: {} }, [], [], !0);
const y_ = (n) => () => {
  if (!n)
    return;
  let t;
  if (n.isActive("link")) {
    n.chain().extendMarkRange("link").run();
    const i = n.state.doc.textBetween(
      n.state.selection.from,
      n.state.selection.to
    ), r = n.getAttributes("link");
    t = {
      url: r.href || "",
      text: i,
      title: r.title || "",
      target: r.target || "_self"
    };
  } else
    t = {
      url: "",
      text: n.state.selection.empty ? "" : n.state.doc.textBetween(n.state.selection.from, n.state.selection.to),
      title: "",
      target: "_self"
    };
  const e = Te(rd, {
    target: document.body,
    props: {
      linkData: t,
      onSubmit: (i) => {
        const r = n.chain().focus();
        n.isActive("link") && r.extendMarkRange("link"), r.deleteSelection().insertContent({
          type: "text",
          text: i.text,
          marks: [
            {
              type: "link",
              attrs: {
                href: i.url,
                target: i.target,
                title: i.title
              }
            }
          ]
        }).run();
      },
      onClose: () => {
        Qt(e);
      }
    }
  });
}, pE = (n) => class extends Qe(n) {
  onEditorUpdate() {
    var t;
    this.classList.toggle("is-active", (t = this.tiptap) == null ? void 0 : t.isActive("link"));
  }
};
var mE = Z("<button><!></button>");
function v_(n, t) {
  xt(t, !0);
  const e = t.$$host, { editor: i, tiptap: r } = e, s = y_(r);
  e.addEventListener("click", s);
  let o;
  $t(() => {
    var c;
    return i && (o = new dE({ editor: i }), (c = i.tiptap) == null || c.commands.setInlineLinkShortcutHandler(s)), () => {
      o == null || o.destroy();
    };
  });
  var a = mE(), l = L(a);
  je(l, () => aE), A(a), Oe(a, (c, u) => {
    var d;
    return (d = yn) == null ? void 0 : d(c, u);
  }, () => `${I("Link")} (${Yu("cmd+K")})`), V(n, a), wt();
}
vt(v_, {}, [], [], !0, pE);
const gE = `<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="icon icon-tabler icons-tabler-outline icon-tabler-external-link">
    <path stroke="none" d="M0 0h24v24H0z" fill="none"/>
    <path d="M12 6h-6a2 2 0 0 0 -2 2v10a2 2 0 0 0 2 2h10a2 2 0 0 0 2 -2v-6" />
    <path d="M11 13l9 -9" />
    <path d="M15 4h5v5" />
</svg>
`, _E = (n) => class extends Qe(n) {
};
var bE = Z('<a target="_blank" class="svelte-23fhoy"><span class="svelte-23fhoy"> </span> <!></a>');
const yE = {
  hash: "svelte-23fhoy",
  code: "a.svelte-23fhoy {display:flex;align-items:center;gap:4px;height:100%;padding:0 4px;}a.svelte-23fhoy:hover {background-color:#dee0e2;}a.svelte-23fhoy span:where(.svelte-23fhoy) {max-width:300px;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;}a.svelte-23fhoy svg {width:16px;height:16px;}"
};
function x_(n, t) {
  xt(t, !0), De(n, yE);
  const e = t.$$host, { tiptap: i } = e;
  let r = lt("");
  e.onEditorUpdate = () => {
    K(r, pt(i == null ? void 0 : i.getAttributes("link").href));
  };
  var s = bE(), o = L(s), a = L(o, !0);
  A(o);
  var l = H(o, 2);
  je(l, () => gE), A(s), P(() => {
    Ot(s, "href", C(r)), Ot(s, "title", C(r)), z(a, C(r));
  }), V(n, s), wt();
}
vt(x_, {}, [], [], !0, _E);
const w_ = `<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="icon icon-tabler icons-tabler-outline icon-tabler-pencil">
    <path stroke="none" d="M0 0h24v24H0z" fill="none"/>
    <path d="M4 20h4l10.5 -10.5a2.828 2.828 0 1 0 -4 -4l-10.5 10.5v4" />
    <path d="M13.5 6.5l4 4" />
</svg>
`, vE = (n) => class extends Qe(n) {
};
var xE = Z("<button><!></button>");
function k_(n, t) {
  xt(t, !0);
  const e = t.$$host, { tiptap: i } = e;
  e.addEventListener("click", y_(i));
  var r = xE(), s = L(r);
  je(s, () => w_), A(r), Oe(r, (o, a) => {
    var l;
    return (l = yn) == null ? void 0 : l(o, a);
  }, () => I("Edit Link")), V(n, r), wt();
}
vt(k_, {}, [], [], !0, vE);
const wE = `<svg width="72" height="72" viewBox="0 0 72 72" fill="none"
    xmlns="http://www.w3.org/2000/svg">
    <g clip-path="url(#clip0_57_27)">
        <path d="M56.75 24.88H51.56V15.99C51.56 13.53 49.57 11.54 47.11 11.54H24.87C22.41 11.54 20.42 13.53 20.42 15.99V24.88H15.23C12.77 24.88 10.78 26.87 10.78 29.33V56.01C10.78 58.47 12.77 60.46 15.23 60.46H56.74C59.2 60.46 61.19 58.47 61.19 56.01V29.33C61.19 26.87 59.2 24.88 56.74 24.88H56.75ZM24.88 15.99H47.12V24.88H24.88V15.99Z" fill="black"/>
    </g>
    <defs>
        <clipPath id="clip0_57_27">
            <rect width="72" height="72" fill="white"/>
        </clipPath>
    </defs>
</svg>
`;
var kE = Z("<button><!></button>");
function S_(n, t) {
  xt(t, !0);
  const e = t.$$host;
  e.addEventListener("click", () => {
    var s, o;
    (o = (s = e.options).select) == null || o.call(s, { editor: e.editor });
  });
  var i = kE(), r = L(i);
  je(r, () => wE), A(i), Oe(i, (s, o) => {
    var a;
    return (a = yn) == null ? void 0 : a(s, o);
  }, () => I("Insert File")), V(n, i), wt();
}
vt(S_, {}, [], [], !0, Qe);
const SE = `<svg width="72" height="72" viewBox="0 0 72 72" fill="none"
    xmlns="http://www.w3.org/2000/svg">
    <g clip-path="url(#clip0_57_21)">
        <path d="M58.5 18.9V53.1H13.5V18.9H58.5ZM58.5 11.7H13.5C9.52005 11.7 6.30005 14.92 6.30005 18.9V53.1C6.30005 57.08 9.52005 60.3 13.5 60.3H58.5C62.48 60.3 65.7 57.08 65.7 53.1V18.9C65.7 14.92 62.48 11.7 58.5 11.7Z" fill="black"/>
        <path d="M50.4 35.1C53.3823 35.1 55.8 32.6823 55.8 29.7C55.8 26.7177 53.3823 24.3 50.4 24.3C47.4177 24.3 45 26.7177 45 29.7C45 32.6823 47.4177 35.1 50.4 35.1Z" fill="#231F20"/>
        <path d="M56.7 54H50.53L50.44 53.73H50.45L37.54 29.69C37.26 29.07 36.66 28.63 35.97 28.63C35.28 28.63 34.65 29.09 34.37 29.74L25.78 45.73L23.68 41.82C23.53 41.49 23.22 41.26 22.85 41.26C22.48 41.26 22.15 41.5 22.01 41.85L13.51 54.02C13.51 56.99 15.92 59.4 18.9 59.4H56.73C59.71 59.4 62.12 56.99 62.12 54.02L56.72 54H56.7Z" fill="#231F20"/>
    </g>
    <defs>
        <clipPath id="clip0_57_21">
            <rect width="72" height="72" fill="white"/>
        </clipPath>
    </defs>
</svg>
`;
function C_(n, t) {
  var s, o;
  xt(t, !0);
  const e = et(t, "editor", 7), i = e().tiptap, r = (o = (s = e().options.toolbarOptions) == null ? void 0 : s.image) != null && o.edit ? [["deleteImage"], ["editImage"]] : [["deleteImage"]];
  return id(n, {
    get editor() {
      return e();
    },
    targetNodeName: "image",
    targetNodeTagName: "IMG",
    condition: () => !i.isActive("link") && i.isActive("image"),
    items: r
  }), wt({
    get editor() {
      return e();
    },
    set editor(a) {
      e(a), nt();
    }
  });
}
vt(C_, { editor: {} }, [], [], !0);
var Sr;
class CE {
  constructor({
    editor: t,
    edit: e
  }) {
    Rt(this, Sr);
    Nt(this, Sr, Te(C_, {
      target: t.tiptap.view.dom.getRootNode(),
      props: {
        editor: t,
        edit: e
      }
    }));
  }
  destroy() {
    J(this, Sr) && Qt(J(this, Sr));
  }
}
Sr = new WeakMap();
var TE = Z("<button><!></button>");
function T_(n, t) {
  xt(t, !0);
  const e = t.$$host, { editor: i, options: r } = e;
  e.addEventListener("click", () => {
    var l, c;
    (c = (l = e.options).select) == null || c.call(l, { editor: e.editor });
  });
  let s;
  $t(() => (i && (s = new CE({ editor: i, edit: r.edit })), () => {
    s == null || s.destroy();
  }));
  var o = TE(), a = L(o);
  je(a, () => SE), A(o), Oe(o, (l, c) => {
    var u;
    return (u = yn) == null ? void 0 : u(l, c);
  }, () => I("Insert Image")), V(n, o), wt();
}
vt(T_, {}, [], [], !0, Qe);
const EE = `<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="icon icon-tabler icons-tabler-outline icon-tabler-trash">
    <path stroke="none" d="M0 0h24v24H0z" fill="none"/>
    <path d="M4 7l16 0" />
    <path d="M10 11l0 6" />
    <path d="M14 11l0 6" />
    <path d="M5 7l1 12a2 2 0 0 0 2 2h8a2 2 0 0 0 2 -2l1 -12" />
    <path d="M9 7v-3a1 1 0 0 1 1 -1h4a1 1 0 0 1 1 1v3" />
</svg>
`, OE = (n) => class extends Qe(n) {
};
var ME = Z("<button><!></button>");
function E_(n, t) {
  xt(t, !0);
  const e = t.$$host;
  e.addEventListener("click", () => {
    var s;
    (s = e.tiptap) == null || s.chain().focus().deleteSelection().run();
  });
  var i = ME(), r = L(i);
  je(r, () => EE), A(i), Oe(i, (s, o) => {
    var a;
    return (a = yn) == null ? void 0 : a(s, o);
  }, () => I("Delete Image")), V(n, i), wt();
}
vt(E_, {}, [], [], !0, OE);
const AE = (n) => class extends Qe(n) {
};
var NE = Z("<button><!></button>");
function O_(n, t) {
  xt(t, !0);
  const e = t.$$host, { editor: i, tiptap: r } = e;
  function s() {
    var u;
    if (!r)
      return null;
    const { selection: l } = r.state, c = (
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      ((u = l.node) == null ? void 0 : u.type.name) === "image" ? l.$anchor : Zi((d) => d.type.name === "image")(l)
    );
    return c ? r.view.nodeDOM(c.pos) : null;
  }
  e.addEventListener("click", () => {
    var c, u, d;
    const l = s();
    l && ((d = (u = (c = i == null ? void 0 : i.options.toolbarOptions) == null ? void 0 : c.image) == null ? void 0 : u.edit) == null || d.call(u, { editor: i, element: l }));
  });
  var o = NE(), a = L(o);
  je(a, () => w_), A(o), Oe(o, (l, c) => {
    var u;
    return (u = yn) == null ? void 0 : u(l, c);
  }, () => I("Edit Image")), V(n, o), wt();
}
vt(O_, {}, [], [], !0, AE);
const LE = `<svg width="72" height="72" viewBox="0 0 72 72" fill="none"
    xmlns="http://www.w3.org/2000/svg">
    <g clip-path="url(#clip0_57_229)">
        <path d="M64.05 22.55C63.27 21.44 62 20.78 60.65 20.78H56.32L54.81 24.93H60.65L50.08 53.98H16.8799L18.6399 49.14H14.22L12.97 52.56C12.51 53.83 12.69 55.25 13.47 56.36C14.25 57.47 15.52 58.13 16.87 58.13H50.07C51.81 58.13 53.37 57.04 53.97 55.4L64.54 26.35C65 25.08 64.82 23.66 64.04 22.55H64.05Z" fill="black"/>
        <path d="M55.1201 18.02L44.5501 47.07H11.3501L21.9201 18.02H55.1201ZM55.1201 13.87H21.9201C20.1801 13.87 18.6201 14.96 18.0201 16.6L7.45005 45.65C6.99005 46.92 7.17005 48.34 7.95005 49.45C8.73005 50.56 10.0001 51.22 11.3501 51.22H44.5501C46.2901 51.22 47.8501 50.13 48.4501 48.49L59.0201 19.44C59.4801 18.17 59.3001 16.75 58.5201 15.64C57.7401 14.53 56.4701 13.87 55.1201 13.87Z" fill="black"/>
        <path d="M43.86 23.55L39.71 35.31H21.23L25.38 23.55H43.86ZM43.86 20.79H25.38C24.21 20.79 23.16 21.53 22.77 22.63L18.62 34.39C18.32 35.24 18.45 36.18 18.97 36.91C19.49 37.64 20.33 38.08 21.23 38.08H39.71C40.88 38.08 41.93 37.34 42.32 36.24L46.47 24.48C46.77 23.63 46.64 22.69 46.12 21.96C45.6 21.23 44.76 20.79 43.86 20.79Z" fill="black"/>
    </g>
    <defs>
        <clipPath id="clip0_57_229">
            <rect width="72" height="72" fill="white"/>
        </clipPath>
    </defs>
</svg>
`, RE = (n) => class extends Qe(n) {
  onEditorUpdate() {
    var t;
    this.classList.toggle("is-active", (t = this.editor) == null ? void 0 : t.getStructureMode());
  }
};
var IE = Z("<button><!></button>");
function M_(n, t) {
  xt(t, !0);
  const e = t.$$host;
  e.addEventListener("click", () => {
    const s = e.editor;
    s && (s.setStructureMode(!s.getStructureMode()), e.onEditorUpdate());
  });
  var i = IE(), r = L(i);
  je(r, () => LE), A(i), Oe(i, (s, o) => {
    var a;
    return (a = yn) == null ? void 0 : a(s, o);
  }, () => I("Toggle to HTML structure editing mode")), V(n, i), wt();
}
vt(M_, {}, [], [], !0, RE);
const PE = `<svg width="72" height="72" viewBox="0 0 72 72" fill="none"
    xmlns="http://www.w3.org/2000/svg">
    <g clip-path="url(#clip0_57_206)">
        <path d="M58.4 8.80005H13.6C10.07 8.80005 7.20001 11.67 7.20001 15.2V56.8C7.20001 60.33 10.07 63.2001 13.6 63.2001H58.4C61.93 63.2001 64.8 60.33 64.8 56.8V15.2C64.8 11.67 61.93 8.80005 58.4 8.80005ZM58.4 24.8V37.6H39.2V24.8H58.4ZM32.8 24.8V37.6H13.6V24.8H32.8ZM13.6 56.8V44H32.8V56.8H13.6ZM39.2 56.8V44H58.4V56.8H39.2Z" fill="black"/>
    </g>
    <defs>
        <clipPath id="clip0_57_206">
            <rect width="72" height="72" fill="white"/>
        </clipPath>
    </defs>
</svg>
`;
function DE(n, t) {
  n.key === "Enter" && t(n);
}
var $E = Z('<div class="grid_cell svelte-zhz6om" role="button" tabindex="0"></div>'), BE = Z('<div class="grid_row svelte-zhz6om"></div>'), zE = Z('<div class="table_insert_panel svelte-zhz6om"><div class="grid_container svelte-zhz6om"></div> <div class="size_indicator svelte-zhz6om"><!></div></div>');
const HE = {
  hash: "svelte-zhz6om",
  code: ".table_insert_panel.svelte-zhz6om {position:absolute;top:0;left:0;background:white;border:1px solid #ccc;border-radius:4px;padding:8px 8px 0 8px;box-shadow:0 2px 4px rgba(0, 0, 0, 0.1);}.size_indicator.svelte-zhz6om {text-align:center;margin:4px 0;height:20px;font-size:12px;}.grid_container.svelte-zhz6om {display:flex;flex-direction:column;gap:2px;}.grid_row.svelte-zhz6om {display:flex;gap:2px;}.grid_cell.svelte-zhz6om {width:12px;height:12px;border:1px solid #ddd;background:#fff;cursor:pointer;}.grid_cell.selected.svelte-zhz6om {background:#0066cc;border-color:#0066cc;}"
};
function A_(n, t) {
  xt(t, !0), De(n, HE);
  const e = et(t, "onInsert", 7);
  let i = lt(0), r = lt(0);
  const s = 20, o = 20, a = 10, l = 10, c = Ms(() => Math.min(s, Math.max(a, C(i) + 1))), u = Ms(() => Math.min(o, Math.max(l, C(r) + 1)));
  function d(y, x) {
    K(i, y + 1), K(r, x + 1);
  }
  function f(y) {
    y.stopPropagation(), C(i) && C(r) && e()(C(i), C(r));
  }
  var h = zE(), p = L(h);
  re(p, 21, () => Array(C(c)), gn, (y, x, k) => {
    var S = BE();
    re(S, 21, () => Array(C(u)), gn, (O, v, E) => {
      var b = $E();
      b.__click = f, b.__keydown = [DE, f], b.__mouseover = () => d(k, E), P(() => _i(b, "selected", k < C(i) && E < C(r))), ce("focus", b, () => d(k, E)), V(O, b);
    }), A(S), V(y, S);
  }), A(p);
  var _ = H(p, 2), g = L(_);
  {
    var m = (y) => {
      var x = bn();
      P(() => z(x, `${C(i) ?? ""} x ${C(r) ?? ""}`)), V(y, x);
    };
    de(g, (y) => {
      C(i) && C(r) && y(m);
    });
  }
  return A(_), A(h), V(n, h), wt({
    get onInsert() {
      return e();
    },
    set onInsert(y) {
      e(y), nt();
    }
  });
}
Ce(["click", "keydown", "mouseover"]);
vt(A_, { onInsert: {} }, [], [], !0);
var FE = Z('<div class="form-group mb-3"><label for="link-url" class="form-label"> </label> <input type="text" id="table-width" class="form-control"></div> <div class="form-group mb-3"><label for="table-height" class="form-label"> </label> <input type="text" id="table-height" class="form-control"></div> <div class="form-group mb-3"><label for="table-cell-spacing" class="form-label"> </label> <input type="text" id="table-cell-spacing" class="form-control"></div> <div class="form-group mb-3"><label for="table-border-width" class="form-label"> </label> <input type="text" id="table-border-width" class="form-control"></div>', 1), VE = Z('<button type="button" class="action primary button btn btn-primary"> </button> <button type="button" class="cancel action button mt-close-dialog btn btn-default"> </button>', 1);
function N_(n, t) {
  xt(t, !0);
  let e = et(t, "tableData", 7), i = et(t, "onSubmit", 7), r = et(t, "onClose", 7), s = lt(pt(e().width)), o = lt(pt(e().height)), a = lt(pt(e().cellSpacing)), l = lt(pt(e().borderWidth)), c;
  $t(() => {
    c == null || c.focus();
  });
  let u, d;
  return Xt(
    xn(n, {
      $$events: {
        close(...f) {
          var h;
          (h = r()) == null || h.apply(this, f);
        }
      },
      children: (f, h) => {
        wn(f, {
          get close() {
            return d;
          },
          set close(p) {
            d = p;
          },
          $$slots: {
            title: (p, _) => {
              var g = bn();
              P(() => z(g, I("Table Properties"))), V(p, g);
            },
            body: (p, _) => {
              var g = FE(), m = It(g), y = L(m), x = L(y, !0);
              P(() => z(x, I("Width"))), A(y);
              var k = H(y, 2);
              se(k), Xt(k, (Q) => c = Q, () => c), A(m);
              var S = H(m, 2), w = L(S), O = L(w, !0);
              P(() => z(O, I("Height"))), A(w);
              var v = H(w, 2);
              se(v), A(S);
              var E = H(S, 2), b = L(E), T = L(b, !0);
              P(() => z(T, I("Cell Spacing"))), A(b);
              var M = H(b, 2);
              se(M), A(E);
              var F = H(E, 2), D = L(F), U = L(D, !0);
              P(() => z(U, I("Border Width"))), A(D);
              var q = H(D, 2);
              se(q), A(F), ye(k, () => C(s), (Q) => K(s, Q)), ye(v, () => C(o), (Q) => K(o, Q)), ye(M, () => C(a), (Q) => K(a, Q)), ye(q, () => C(l), (Q) => K(l, Q)), V(p, g);
            },
            footer: (p, _) => {
              var g = VE(), m = It(g);
              P(() => Ot(m, "title", I("Insert (s)"))), m.__click = () => {
                i()({
                  width: C(s),
                  height: C(o),
                  cellSpacing: C(a),
                  borderWidth: C(l)
                }), d();
              };
              var y = L(m, !0);
              P(() => z(y, I("Insert"))), A(m);
              var x = H(m, 2);
              P(() => Ot(x, "title", I("Cancel (x)"))), x.__click = d;
              var k = L(x, !0);
              P(() => z(k, I("Cancel"))), A(x), V(p, g);
            }
          }
        });
      },
      $$slots: { default: !0 }
    }),
    (f) => u = f,
    () => u
  ), wt({
    get tableData() {
      return e();
    },
    set tableData(f) {
      e(f), nt();
    },
    get onSubmit() {
      return i();
    },
    set onSubmit(f) {
      i(f), nt();
    },
    get onClose() {
      return r();
    },
    set onClose(f) {
      r(f), nt();
    }
  });
}
Ce(["click"]);
vt(N_, { tableData: {}, onSubmit: {}, onClose: {} }, [], [], !0);
const jE = (n) => {
  const { state: t } = n;
  let e = t.selection.$anchor.depth, i = null;
  for (; e > 0; ) {
    const s = t.selection.$anchor.node(e);
    if (s.type.name === "table") {
      i = s;
      break;
    }
    e--;
  }
  const r = document.createElement("div");
  return r.style.cssText = (i == null ? void 0 : i.attrs.style) || "", {
    width: r.style.width || "100%",
    height: r.style.height || "",
    cellSpacing: r.style.borderSpacing || "",
    borderWidth: r.style.borderWidth || ""
  };
}, WE = (n) => {
  const { state: t } = n;
  let e = t.selection.$anchor.depth;
  for (; e > 0; ) {
    if (t.selection.$anchor.node(e).type.name === "table")
      return t.selection.$anchor.before(e);
    e--;
  }
  return null;
};
let np;
const UE = (n) => {
  Te(N_, {
    target: document.body,
    props: {
      tableData: jE(n),
      onSubmit: (t) => {
        const e = WE(n);
        e !== null && (n == null || n.chain().focus().command(({ tr: i }) => {
          const r = i.doc.nodeAt(e);
          if (r) {
            const s = document.createElement("div");
            s.style.cssText = r.attrs.style || "", s.style.width = t.width, s.style.height = t.height, s.style.borderSpacing = t.cellSpacing, s.style.borderWidth = t.borderWidth, i.setNodeMarkup(e, null, {
              ...r.attrs,
              style: s.style.cssText
            });
            const o = un(n.state);
            o && o.map.map.forEach((a) => {
              const l = o.table.nodeAt(a);
              if (l) {
                const c = document.createElement("div");
                c.style.cssText = l.attrs.style || "", c.style.borderWidth = t.borderWidth, i.setNodeMarkup(o.tableStart + a, null, {
                  ...l.attrs,
                  style: c.style.cssText
                });
              }
            });
          }
          return !0;
        }).run()), Qt(np);
      },
      onClose: () => {
        Qt(np);
      }
    }
  });
};
var KE = Z('<div class="form-group mb-3"><label for="width" class="form-label"> </label> <input type="text" id="width" class="form-control"></div> <div class="form-group mb-3"><label for="width" class="form-label"> </label> <input type="text" id="height" class="form-control"></div> <div class="form-group mb-3"><label for="element" class="form-label"> </label> <select id="element" class="form-control"><option> </option><option> </option></select></div> <div class="form-group mb-3"><label for="scope" class="form-label"> </label> <select id="scope" class="form-control"><option> </option><option> </option><option> </option><option> </option><option> </option></select></div> <div class="form-group mb-3"><label for="horizontalAlign" class="form-label"> </label> <select id="horizontalAlign" class="form-control"><option> </option><option> </option><option> </option><option> </option><option> </option></select></div> <div class="form-group mb-3"><label for="verticalAlign" class="form-label"> </label> <select id="verticalAlign" class="form-control"><option> </option><option> </option><option> </option><option> </option></select></div>', 1), qE = Z('<button type="button" class="action primary button btn btn-primary"> </button> <button type="button" class="cancel action button mt-close-dialog btn btn-default"> </button>', 1);
function L_(n, t) {
  xt(t, !0);
  let e = et(t, "cellData", 7), i = et(t, "onSubmit", 7), r = et(t, "onClose", 7), s = lt(pt(e().width)), o = lt(pt(e().height)), a = lt(pt(e().element)), l = lt(pt(e().scope)), c = lt(pt(e().horizontalAlign)), u = lt(pt(e().verticalAlign)), d;
  $t(() => {
    d == null || d.focus();
  });
  let f, h;
  return Xt(
    xn(n, {
      $$events: {
        close(...p) {
          var _;
          (_ = r()) == null || _.apply(this, p);
        }
      },
      children: (p, _) => {
        wn(p, {
          get close() {
            return h;
          },
          set close(g) {
            h = g;
          },
          $$slots: {
            title: (g, m) => {
              var y = bn();
              P(() => z(y, I("Cell Properties"))), V(g, y);
            },
            body: (g, m) => {
              var y = KE(), x = It(y), k = L(x), S = L(k, !0);
              P(() => z(S, I("Width"))), A(k);
              var w = H(k, 2);
              se(w), Xt(w, (ae) => d = ae, () => d), A(x);
              var O = H(x, 2), v = L(O), E = L(v, !0);
              P(() => z(E, I("Height"))), A(v);
              var b = H(v, 2);
              se(b), A(O);
              var T = H(O, 2), M = L(T), F = L(M, !0);
              P(() => z(F, I("Cell type"))), A(M);
              var D = H(M, 2), U = L(D);
              U.value = (U.__value = "td") == null ? "" : "td";
              var q = L(U, !0);
              P(() => z(q, I("Cell"))), A(U);
              var Q = H(U);
              Q.value = (Q.__value = "th") == null ? "" : "th";
              var ut = L(Q, !0);
              P(() => z(ut, I("Header cell"))), A(Q), A(D), A(T);
              var rt = H(T, 2), kt = L(rt), st = L(kt, !0);
              P(() => z(st, I("Scope"))), A(kt);
              var Pt = H(kt, 2), ht = L(Pt);
              ht.value = ((ht.__value = "") == null, "");
              var Yt = L(ht, !0);
              P(() => z(Yt, I("None"))), A(ht);
              var Ct = H(ht);
              Ct.value = (Ct.__value = "row") == null ? "" : "row";
              var R = L(Ct, !0);
              P(() => z(R, I("Row"))), A(Ct);
              var ne = H(Ct);
              ne.value = (ne.__value = "col") == null ? "" : "col";
              var mt = L(ne, !0);
              P(() => z(mt, I("Column"))), A(ne);
              var ie = H(ne);
              ie.value = (ie.__value = "rowgroup") == null ? "" : "rowgroup";
              var Dt = L(ie, !0);
              P(() => z(Dt, I("Row group"))), A(ie);
              var X = H(ie);
              X.value = (X.__value = "colgroup") == null ? "" : "colgroup";
              var At = L(X, !0);
              P(() => z(At, I("Column group"))), A(X), A(Pt), A(rt);
              var gt = H(rt, 2), $ = L(gt), dt = L($, !0);
              P(() => z(dt, I("Horizontal align"))), A($);
              var yt = H($, 2), j = L(yt);
              j.value = ((j.__value = "") == null, "");
              var kn = L(j, !0);
              P(() => z(kn, I("None"))), A(j);
              var We = H(j);
              We.value = (We.__value = "left") == null ? "" : "left";
              var Qi = L(We, !0);
              P(() => z(Qi, I("HORIZONTAL_ALIGN_LEFT"))), A(We);
              var Sn = H(We);
              Sn.value = (Sn.__value = "center") == null ? "" : "center";
              var tr = L(Sn, !0);
              P(() => z(tr, I("HORIZONTAL_ALIGN_CENTER"))), A(Sn);
              var tn = H(Sn);
              tn.value = (tn.__value = "right") == null ? "" : "right";
              var Bn = L(tn, !0);
              P(() => z(Bn, I("HORIZONTAL_ALIGN_RIGHT"))), A(tn);
              var Ht = H(tn);
              Ht.value = (Ht.__value = "justify") == null ? "" : "justify";
              var jt = L(Ht, !0);
              P(() => z(jt, I("HORIZONTAL_ALIGN_JUSTIFY"))), A(Ht), A(yt), A(gt);
              var Lt = H(gt, 2), Tt = L(Lt), ve = L(Tt, !0);
              P(() => z(ve, I("Vertical align"))), A(Tt);
              var xi = H(Tt, 2), Yn = L(xi);
              Yn.value = ((Yn.__value = "") == null, "");
              var er = L(Yn, !0);
              P(() => z(er, I("None"))), A(Yn);
              var Cn = H(Yn);
              Cn.value = (Cn.__value = "top") == null ? "" : "top";
              var dn = L(Cn, !0);
              P(() => z(dn, I("VERTICAL_ALIGN_TOP"))), A(Cn);
              var en = H(Cn);
              en.value = (en.__value = "middle") == null ? "" : "middle";
              var qr = L(en, !0);
              P(() => z(qr, I("VERTICAL_ALIGN_MIDDLE"))), A(en);
              var Zn = H(en);
              Zn.value = (Zn.__value = "bottom") == null ? "" : "bottom";
              var ul = L(Zn, !0);
              P(() => z(ul, I("VERTICAL_ALIGN_BOTTOM"))), A(Zn), A(xi), A(Lt), ye(w, () => C(s), (ae) => K(s, ae)), ye(b, () => C(o), (ae) => K(o, ae)), hr(D, () => C(a), (ae) => K(a, ae)), hr(Pt, () => C(l), (ae) => K(l, ae)), hr(yt, () => C(c), (ae) => K(c, ae)), hr(xi, () => C(u), (ae) => K(u, ae)), V(g, y);
            },
            footer: (g, m) => {
              var y = qE(), x = It(y);
              P(() => Ot(x, "title", I("Insert (s)"))), x.__click = () => {
                i()({
                  width: C(s),
                  height: C(o),
                  element: C(a),
                  scope: C(l),
                  horizontalAlign: C(c),
                  verticalAlign: C(u)
                }), h();
              };
              var k = L(x, !0);
              P(() => z(k, I("Insert"))), A(x);
              var S = H(x, 2);
              P(() => Ot(S, "title", I("Cancel (x)"))), S.__click = h;
              var w = L(S, !0);
              P(() => z(w, I("Cancel"))), A(S), V(g, y);
            }
          }
        });
      },
      $$slots: { default: !0 }
    }),
    (p) => f = p,
    () => f
  ), wt({
    get cellData() {
      return e();
    },
    set cellData(p) {
      e(p), nt();
    },
    get onSubmit() {
      return i();
    },
    set onSubmit(p) {
      i(p), nt();
    },
    get onClose() {
      return r();
    },
    set onClose(p) {
      r(p), nt();
    }
  });
}
Ce(["click"]);
vt(L_, { cellData: {}, onSubmit: {}, onClose: {} }, [], [], !0);
const GE = (n) => {
  const { state: t } = n;
  let e = t.selection.$anchor.depth, i = null;
  for (; e > 0; ) {
    const s = t.selection.$anchor.node(e);
    if (s.type.name === "tableCell" || s.type.name === "tableHeader") {
      i = s;
      break;
    }
    e--;
  }
  const r = document.createElement("div");
  return r.style.cssText = (i == null ? void 0 : i.attrs.style) || "", {
    width: r.style.width || "",
    height: r.style.height || "",
    element: (i == null ? void 0 : i.type.name) === "tableCell" ? "td" : "th",
    scope: (i == null ? void 0 : i.attrs.scope) || "",
    horizontalAlign: r.style.textAlign || "",
    verticalAlign: r.style.verticalAlign || ""
  };
}, JE = (n) => {
  if (!n)
    return null;
  const { state: t } = n;
  let e = t.selection.$anchor.depth;
  for (; e > 0; ) {
    const i = t.selection.$anchor.node(e);
    if (i.type.name === "tableCell" || i.type.name === "tableHeader")
      return t.selection.$anchor.before(e);
    e--;
  }
  return null;
};
let ip;
const XE = (n) => {
  Te(L_, {
    target: document.body,
    props: {
      cellData: GE(n),
      onSubmit: (t) => {
        var i;
        const e = JE(n);
        if (e !== null) {
          const r = (i = n == null ? void 0 : n.state.selection) == null ? void 0 : i.$anchor.node();
          ((r == null ? void 0 : r.type.name) === "tableCell" && t.element === "th" || (r == null ? void 0 : r.type.name) === "tableHeader" && t.element === "td") && (n == null || n.chain().focus().toggleHeaderCell().run()), n == null || n.chain().focus().command(({ tr: s }) => {
            const o = s.doc.nodeAt(e);
            if (o) {
              const a = document.createElement("div");
              a.style.cssText = o.attrs.style || "", a.style.width = t.width, a.style.height = t.height, a.style.textAlign = t.horizontalAlign, a.style.verticalAlign = t.verticalAlign, s.setNodeMarkup(e, null, {
                ...o.attrs,
                scope: t.scope || void 0,
                style: a.style.cssText
              });
            }
            return !0;
          }).run();
        }
        Qt(ip);
      },
      onClose: () => {
        Qt(ip);
      }
    }
  });
};
var YE = Z('<div class="form-group mb-3"><label for="element" class="form-label"> </label> <select id="element" class="form-control"><option> </option><option> </option></select></div>'), ZE = Z('<button type="button" class="action primary button btn btn-primary"> </button> <button type="button" class="cancel action button mt-close-dialog btn btn-default"> </button>', 1);
function QE(n, t) {
  xt(t, !0);
  let e = et(t, "rowData", 7), i = et(t, "onSubmit", 7), r = et(t, "onClose", 7), s = lt(pt(e().element)), o;
  $t(() => {
    o == null || o.focus();
  });
  let a, l;
  return Xt(
    xn(n, {
      $$events: {
        close(...c) {
          var u;
          (u = r()) == null || u.apply(this, c);
        }
      },
      children: (c, u) => {
        wn(c, {
          get close() {
            return l;
          },
          set close(d) {
            l = d;
          },
          $$slots: {
            title: (d, f) => {
              var h = bn();
              P(() => z(h, I("Row Properties"))), V(d, h);
            },
            body: (d, f) => {
              var h = YE(), p = L(h), _ = L(p, !0);
              P(() => z(_, I("Row type"))), A(p);
              var g = H(p, 2), m = L(g);
              m.value = (m.__value = "tbody") == null ? "" : "tbody";
              var y = L(m, !0);
              P(() => z(y, I("Row"))), A(m);
              var x = H(m);
              x.value = (x.__value = "thead") == null ? "" : "thead";
              var k = L(x, !0);
              P(() => z(k, I("Header row"))), A(x), A(g), Xt(g, (S) => o = S, () => o), A(h), hr(g, () => C(s), (S) => K(s, S)), V(d, h);
            },
            footer: (d, f) => {
              var h = ZE(), p = It(h);
              P(() => Ot(p, "title", I("Insert (s)"))), p.__click = () => {
                i()({ element: C(s) }), l();
              };
              var _ = L(p, !0);
              P(() => z(_, I("Insert"))), A(p);
              var g = H(p, 2);
              P(() => Ot(g, "title", I("Cancel (x)"))), g.__click = l;
              var m = L(g, !0);
              P(() => z(m, I("Cancel"))), A(g), V(d, h);
            }
          }
        });
      },
      $$slots: { default: !0 }
    }),
    (c) => a = c,
    () => a
  ), wt({
    get rowData() {
      return e();
    },
    set rowData(c) {
      e(c), nt();
    },
    get onSubmit() {
      return i();
    },
    set onSubmit(c) {
      i(c), nt();
    },
    get onClose() {
      return r();
    },
    set onClose(c) {
      r(c), nt();
    }
  });
}
Ce(["click"]);
vt(QE, { rowData: {}, onSubmit: {}, onClose: {} }, [], [], !0);
var tO = Z('<div class="menu-item-subgroup svelte-s6tf8u"><!></div>'), eO = (n, t) => {
  t == null || t.chain().focus().mergeCells().run();
}, nO = (n, t) => {
  t == null || t.chain().focus().splitCell().run();
}, iO = (n, t) => {
  XE(t);
}, rO = Z('<div class="menu-item-subgroup svelte-s6tf8u"><button class="menu-item svelte-s6tf8u"> </button> <button class="menu-item svelte-s6tf8u"> </button> <button class="menu-item svelte-s6tf8u"> </button></div>'), sO = (n, t) => {
  t == null || t.chain().focus().addRowBefore().run();
}, oO = (n, t) => {
  t == null || t.chain().focus().addRowAfter().run();
}, aO = (n, t) => {
  t == null || t.chain().focus().deleteRow().run();
}, lO = Z('<div class="menu-item-subgroup svelte-s6tf8u"><button class="menu-item svelte-s6tf8u"> </button> <button class="menu-item svelte-s6tf8u"> </button> <button class="menu-item svelte-s6tf8u"> </button> <!></div>'), cO = (n, t) => {
  t == null || t.chain().focus().addColumnBefore().run();
}, uO = (n, t) => {
  t == null || t.chain().focus().addColumnAfter().run();
}, dO = (n, t) => {
  t == null || t.chain().focus().deleteColumn().run();
}, fO = Z('<div class="menu-item-subgroup svelte-s6tf8u"><button class="menu-item svelte-s6tf8u"> </button> <button class="menu-item svelte-s6tf8u"> </button> <button class="menu-item svelte-s6tf8u"> </button></div>'), hO = (n, t) => {
  UE(t);
}, pO = (n, t) => {
  t == null || t.chain().focus().deleteTable().run();
}, mO = Z('<div class="menu svelte-s6tf8u"><div class="menu-item-group menu-item-group--insert svelte-s6tf8u" role="menuitem" tabindex="0"><div class="menu-item-group-label svelte-s6tf8u"> </div> <!></div> <div class="menu-item-group svelte-s6tf8u" role="menuitem" tabindex="0"><div class="menu-item-group-label svelte-s6tf8u"> </div> <!></div> <div class="menu-item-group svelte-s6tf8u" role="menuitem" tabindex="0"><div class="menu-item-group-label svelte-s6tf8u"> </div> <!></div> <div class="menu-item-group svelte-s6tf8u" role="menuitem" tabindex="0"><div class="menu-item-group-label svelte-s6tf8u"> </div> <!></div> <div class="menu-item-group svelte-s6tf8u"><button class="menu-item svelte-s6tf8u"> </button> <button class="menu-item svelte-s6tf8u"> </button></div></div>'), gO = Z('<button><!></button> <div class="menu-container svelte-s6tf8u"><!></div>', 1);
const _O = {
  hash: "svelte-s6tf8u",
  code: '.menu-container.svelte-s6tf8u {position:relative;z-index:3;}.menu.svelte-s6tf8u {position:absolute;left:0;top:0;display:flex;flex-direction:column;border-radius:4px;box-shadow:0 0 0 1px #ccc;background:white;}.menu-item-group.svelte-s6tf8u {position:relative;background:white;&:first-child {border-top-left-radius:4px;border-top-right-radius:4px;}&:hover .menu-item-group-label:where(.svelte-s6tf8u) {background:#dee0e2;}}.menu-item-group--insert.svelte-s6tf8u {border-bottom:1px solid #ccc;}.menu-item-group-label.svelte-s6tf8u {font-size:0.85rem;padding:5px 10px;display:flex;align-items:center;justify-content:space-between;&:after {content:">";font-weight:bold;font-size:0.85rem;}}.menu-item-subgroup.svelte-s6tf8u {position:absolute;left:calc(100% + 1px);top:0;border-radius:4px;.menu-item:where(.svelte-s6tf8u):first-child {border-top-left-radius:4px;border-top-right-radius:4px;}}.menu-item.svelte-s6tf8u {font-size:0.85rem;border:none;margin:0;display:flex;align-items:center;justify-content:flex-start;padding:5px 10px;width:100%;background:white;box-shadow:0 0 0 1px #ccc;&:last-child {border-bottom-left-radius:4px;border-bottom-right-radius:4px;}&:hover {background:#dee0e2;}}'
};
function R_(n, t) {
  xt(t, !0), De(n, _O);
  const e = t.$$host, { tiptap: i } = e;
  e.addEventListener("click", u);
  let r = lt(!1), s = lt(pt(i == null ? void 0 : i.isActive("table"))), o = lt(!1), a = lt(!1);
  const l = () => {
    if (!i)
      return;
    K(s, pt(i.isActive("table")));
    const x = C(s) ? un(i.state) : null;
    if (x) {
      const k = /* @__PURE__ */ new Set();
      let S = !1;
      const w = x.map;
      t: for (let O = x.top; O < x.bottom; O++)
        for (let v = x.left; v < x.right; v++) {
          const E = w.map[O * w.width + v], b = x.table.nodeAt(E);
          if (b && (k.add(b), S = b.attrs.colspan > 1 || b.attrs.rowspan > 1, S && k.size > 1))
            break t;
        }
      K(a, pt(S)), K(o, k.size > 1);
    }
  };
  i == null || i.on("update", l), i == null || i.on("selectionUpdate", l);
  function c(x, k) {
    i == null || i.chain().focus().insertTable({ rows: x, cols: k, withHeaderRow: !1 }).run(), K(r, !1);
  }
  function u(x) {
    i && (x.stopPropagation(), K(r, !C(r)));
  }
  function d() {
    K(r, !1);
  }
  $t(() => (document.addEventListener("click", d), () => {
    document.removeEventListener("click", d);
  }));
  let f = lt(pt({}));
  $t(() => {
    C(r) || K(f, pt({}));
  });
  var h = gO(), p = It(h), _ = L(p);
  je(_, () => PE), A(p), Oe(p, (x, k) => {
    var S;
    return (S = yn) == null ? void 0 : S(x, k);
  }, () => I("Table"));
  var g = H(p, 2), m = L(g);
  {
    var y = (x) => {
      var k = mO(), S = L(k), w = L(S), O = L(w, !0);
      P(() => z(O, I("Insert table"))), A(w);
      var v = H(w, 2);
      {
        var E = (Dt) => {
          var X = tO(), At = L(X);
          A_(At, { onInsert: c }), A(X), V(Dt, X);
        };
        de(v, (Dt) => {
          C(f).insert && Dt(E);
        });
      }
      A(S);
      var b = H(S, 2), T = L(b), M = L(T, !0);
      P(() => z(M, I("Cell"))), A(T);
      var F = H(T, 2);
      {
        var D = (Dt) => {
          var X = rO(), At = L(X);
          At.__click = [eO, i];
          var gt = L(At, !0);
          P(() => z(gt, I("Merge cells"))), A(At);
          var $ = H(At, 2);
          $.__click = [nO, i];
          var dt = L($, !0);
          P(() => z(dt, I("Split cell"))), A($);
          var yt = H($, 2);
          yt.__click = [iO, i];
          var j = L(yt, !0);
          P(() => z(j, I("Cell properties"))), A(yt), A(X), P(() => {
            At.disabled = !(C(s) && C(o)), $.disabled = !(C(s) && C(a)), yt.disabled = !C(s);
          }), V(Dt, X);
        };
        de(F, (Dt) => {
          C(f).cell && Dt(D);
        });
      }
      A(b);
      var U = H(b, 2), q = L(U), Q = L(q, !0);
      P(() => z(Q, I("Row"))), A(q);
      var ut = H(q, 2);
      {
        var rt = (Dt) => {
          var X = lO(), At = L(X);
          At.__click = [sO, i];
          var gt = L(At, !0);
          P(() => z(gt, I("Insert row before"))), A(At);
          var $ = H(At, 2);
          $.__click = [oO, i];
          var dt = L($, !0);
          P(() => z(dt, I("Insert row after"))), A($);
          var yt = H($, 2);
          yt.__click = [aO, i];
          var j = L(yt, !0);
          P(() => z(j, I("Delete row"))), A(yt);
          var kn = H(yt, 2);
          de(kn, (We) => {
          }), A(X), P(() => {
            At.disabled = !C(s), $.disabled = !C(s), yt.disabled = !C(s);
          }), V(Dt, X);
        };
        de(ut, (Dt) => {
          C(f).row && Dt(rt);
        });
      }
      A(U);
      var kt = H(U, 2), st = L(kt), Pt = L(st, !0);
      P(() => z(Pt, I("Column"))), A(st);
      var ht = H(st, 2);
      {
        var Yt = (Dt) => {
          var X = fO(), At = L(X);
          At.__click = [cO, i];
          var gt = L(At, !0);
          P(() => z(gt, I("Insert column before"))), A(At);
          var $ = H(At, 2);
          $.__click = [uO, i];
          var dt = L($, !0);
          P(() => z(dt, I("Insert column after"))), A($);
          var yt = H($, 2);
          yt.__click = [dO, i];
          var j = L(yt, !0);
          P(() => z(j, I("Delete column"))), A(yt), A(X), P(() => {
            At.disabled = !C(s), $.disabled = !C(s), yt.disabled = !C(s);
          }), V(Dt, X);
        };
        de(ht, (Dt) => {
          C(f).col && Dt(Yt);
        });
      }
      A(kt);
      var Ct = H(kt, 2), R = L(Ct);
      R.__click = [hO, i];
      var ne = L(R, !0);
      P(() => z(ne, I("Table properties"))), A(R);
      var mt = H(R, 2);
      mt.__click = [pO, i];
      var ie = L(mt, !0);
      P(() => z(ie, I("Delete table"))), A(mt), A(Ct), A(k), P(() => {
        R.disabled = !C(s), mt.disabled = !C(s);
      }), ce("mouseenter", S, () => C(f).insert = !0), ce("mouseleave", S, () => C(f).insert = !1), ce("mouseenter", b, () => C(f).cell = !0), ce("mouseleave", b, () => C(f).cell = !1), ce("mouseenter", U, () => C(f).row = !0), ce("mouseleave", U, () => C(f).row = !1), ce("mouseenter", kt, () => C(f).col = !0), ce("mouseleave", kt, () => C(f).col = !1), V(x, k);
    };
    de(m, (x) => {
      C(r) && x(y);
    });
  }
  A(g), V(n, h), wt();
}
Ce(["click"]);
vt(R_, {}, [], [], !0, Qe);
function bO(n, t, e) {
  t && (n.stopPropagation(), K(e, !C(e)));
}
var yO = (n, t, e) => t(C(e).value), vO = Z('<button class="option svelte-osezha"><div> </div></button>'), xO = Z('<div class="options svelte-osezha"></div>'), wO = Z('<div class="dropdown svelte-osezha"><button class="selected svelte-osezha"> <span class="arrow svelte-osezha"></span></button> <!></div>');
const kO = {
  hash: "svelte-osezha",
  code: ".dropdown.svelte-osezha {position:relative;width:150px;}.selected.svelte-osezha {width:100%;padding:4px 8px;border:1px solid #ccc;border-radius:4px;background-color:white;font-size:14px;cursor:pointer;display:flex;justify-content:space-between;align-items:center;}.arrow.svelte-osezha {width:6px;height:6px;border-right:1px solid #666;border-bottom:1px solid #666;transform:rotate(45deg);margin-left:4px;position:relative;top:-2px;}.options.svelte-osezha {position:absolute;top:100%;left:0;right:0;background:white;border:1px solid #ccc;border-radius:4px;margin-top:4px;box-shadow:0 2px 4px rgba(0, 0, 0, 0.1);z-index:1000;}.option.svelte-osezha {display:block;width:100%;text-align:left;border:none;background:white;padding:8px;cursor:pointer;}.option.svelte-osezha:hover {background-color:#f5f5f5;}.option.active.svelte-osezha {background-color:#e0e0e0;}.h1.svelte-osezha {font-size:1.8em;font-weight:bold;}.h2.svelte-osezha {font-size:1.5em;font-weight:bold;}.h3.svelte-osezha {font-size:1.3em;font-weight:bold;}.h4.svelte-osezha {font-size:1.2em;font-weight:bold;}.h5.svelte-osezha {font-size:1.1em;font-weight:bold;}.h6.svelte-osezha {font-size:1em;font-weight:bold;}.paragraph.svelte-osezha {font-size:1em;}.pre.svelte-osezha {font-family:monospace;}"
};
function I_(n, t) {
  xt(t, !0), De(n, kO);
  const e = [
    { value: "paragraph", label: I("Paragraph") },
    { value: "h1", label: I("Heading 1") },
    { value: "h2", label: I("Heading 2") },
    { value: "h3", label: I("Heading 3") },
    { value: "h4", label: I("Heading 4") },
    { value: "h5", label: I("Heading 5") },
    { value: "h6", label: I("Heading 6") },
    { value: "pre", label: I("Preformatted") }
  ], i = t.$$host, { options: r, tiptap: s } = i;
  let o = lt(!1);
  const l = (r.blocks ?? e).map((x) => typeof x == "string" ? e.find((k) => k.value === x) : x).filter((x) => x !== void 0);
  let c = lt(pt(l[0].value));
  i.onEditorUpdate = () => {
    if (!s)
      return;
    const { $head: x } = s.state.selection, k = x.parent;
    k.type.name === "heading" ? K(c, `h${k.attrs.level}`) : K(c, pt(k.type.name)), l.some((S) => S.value === C(c)) || K(c, pt(l[0].value));
  };
  function u(x) {
    if (x === "paragraph" || x === "pre")
      s == null || s.chain().focus().setNode(x).run();
    else if (x.match(/^h[1-6]$/)) {
      const k = parseInt(x.substring(1));
      s == null || s.chain().focus().setHeading({ level: k }).run();
    }
    K(c, pt(x)), K(o, !1);
  }
  function d() {
    K(o, !1);
  }
  let f, h = lt(!1);
  $t(() => {
    if (!C(h))
      return K(h, !0), document.addEventListener("click", d), () => {
        document.removeEventListener("click", d);
      };
  });
  var p = wO(), _ = L(p);
  _.__click = [bO, s, o];
  var g = L(_);
  P(() => {
    var x;
    return z(g, `${((x = l.find((k) => k.value === C(c))) == null ? void 0 : x.label) ?? ""} `);
  }), Cp(), A(_);
  var m = H(_, 2);
  {
    var y = (x) => {
      var k = xO();
      re(k, 21, () => l, (S) => S.value, (S, w) => {
        var O = vO();
        O.__click = [yO, u, w];
        var v = L(O), E = L(v, !0);
        A(v), A(O), P(() => {
          _i(O, "active", C(c) === C(w).value), Gi(v, `${C(w).value ?? ""} svelte-osezha`), z(E, C(w).label);
        }), V(S, O);
      }), A(k), V(x, k);
    };
    de(m, (x) => {
      C(o) && x(y);
    });
  }
  A(p), Xt(p, (x) => f = x, () => f), V(n, p), wt();
}
Ce(["click"]);
vt(I_, {}, [], [], !0, Qe);
const SO = `<svg width="24" height="24"
    xmlns="http://www.w3.org/2000/svg">
    <path fill-rule="evenodd" d="M10.384 11.53h3.18l-1.547-4.504h-.034l-1.599 4.504zM10.642 4h2.768L18 16.275h-2.802l-.929-2.733H9.68l-.963 2.733H6L10.642 4z" />
    <rect x="4" y="18" width="16" height="3" rx=".5" fill="currentColor"/>
</svg>
`;
var CO = (n, t, e) => {
  n.stopPropagation(), t()(e);
}, TO = (n, t, e) => t(n, e), EO = Z('<div class="color-item svelte-9jus4" role="button" tabindex="0"></div>'), OO = Z('<div class="color-panel svelte-9jus4"></div>');
const MO = {
  hash: "svelte-9jus4",
  code: ".color-panel.svelte-9jus4 {position:absolute;top:0;left:0;display:grid;grid-template-columns:repeat(5, 1fr);gap:4px;padding:8px;background:white;border:1px solid #ddd;border-radius:4px;box-shadow:0 2px 4px rgba(0, 0, 0, 0.1);width:160px;z-index:1000;}.color-item.svelte-9jus4 {width:24px;height:24px;border-radius:4px;cursor:pointer;border:1px solid #ddd;}.color-item.svelte-9jus4:hover {transform:scale(1.1);transition:transform 0.2s;}"
};
function sd(n, t) {
  xt(t, !0), De(n, MO);
  const e = et(t, "colors", 7), i = et(t, "onSelect", 7);
  function r(o, a) {
    o.key === "Enter" && (o.stopPropagation(), i()(a));
  }
  var s = OO();
  return re(s, 20, e, (o) => o, (o, a) => {
    var l = EO();
    l.__click = [CO, i, a], l.__keydown = [TO, r, a], P(() => {
      Ot(l, "style", `background-color: ${a ?? ""}`), Ot(l, "aria-label", a);
    }), V(o, l);
  }), A(s), V(n, s), wt({
    get colors() {
      return e();
    },
    set colors(o) {
      e(o), nt();
    },
    get onSelect() {
      return i();
    },
    set onSelect(o) {
      i(o), nt();
    }
  });
}
Ce(["click", "keydown"]);
vt(sd, { colors: {}, onSelect: {} }, [], [], !0);
var AO = Z('<button><!></button> <div class="color-panel-container svelte-gqoyg9"><!></div>', 1);
const NO = {
  hash: "svelte-gqoyg9",
  code: ".color-panel-container.svelte-gqoyg9 {position:relative;}"
};
function P_(n, t) {
  xt(t, !0), De(n, NO);
  const e = t.$$host;
  e.addEventListener("click", c);
  const { options: i, tiptap: r } = e;
  let s = lt(!1);
  const o = i.presetColors ?? [
    "#000000",
    "#595959",
    "#999999",
    "#CCCCCC",
    "#FFFFFF",
    "#F06292",
    "#E57373",
    "#BA68C8",
    "#9575CD",
    "#7986CB",
    "#64B5F6",
    "#4FC3F7",
    "#4DD0E1",
    "#4DB6AC",
    "#81C784",
    "#AED581",
    "#FFF176",
    "#FFB74D",
    "#FF8A65",
    "#A1887F"
  ];
  let a = lt("#000000");
  e.onEditorUpdate = () => {
    K(a, pt((r == null ? void 0 : r.getAttributes("textStyle").color) ?? "#000000"));
  };
  function l(m) {
    K(a, pt(m)), r == null || r.chain().focus().setColor(m).run(), K(s, !1);
  }
  function c(m) {
    r && (m.stopPropagation(), K(s, !C(s)));
  }
  function u() {
    K(s, !1);
  }
  $t(() => (document.addEventListener("click", u), () => {
    document.removeEventListener("click", u);
  }));
  var d = AO(), f = It(d), h = L(f);
  je(h, () => SO.replace(/fill="currentColor"/g, `fill="${C(a)}"`)), A(f), Oe(f, (m, y) => {
    var x;
    return (x = yn) == null ? void 0 : x(m, y);
  }, () => I("Text Color"));
  var p = H(f, 2), _ = L(p);
  {
    var g = (m) => {
      sd(m, { colors: o, onSelect: l });
    };
    de(_, (m) => {
      C(s) && m(g);
    });
  }
  A(p), P(() => _i(f, "tooltip-disabled", C(s))), V(n, d), wt();
}
vt(P_, {}, [], [], !0, Qe);
const LO = `<?xml version="1.0" encoding="UTF-8"?>
<svg id="b"
    xmlns="http://www.w3.org/2000/svg" version="1.1" viewBox="0 0 72 72">
    <!-- Generator: Adobe Illustrator 29.3.1, SVG Export Plug-In . SVG Version: 2.1.0 Build 151)  -->
    <g id="c">
        <g id="d">
            <rect x="9" y="54.8" width="54" height="10.2" rx=".5" ry=".5" fill="rgba(0,0,0,0)"/>
            <path class="st1" d="M62.3,15.6l-10.1-9.7c-.5-.5-1.1-.7-1.7-.7h0c-.6,0-1.2.2-1.7.7l-28,26.7c-.5.4-.7,1.1-.7,1.6s.2,1.2.7,1.7l.9.8-12.5,11.9h16.8l4.2-3.9.9.8c.5.5,1.1.7,1.7.7.6,0,1.3-.2,1.7-.7l28-26.7c.5-.4.7-1.1.7-1.6s-.2-1.2-.7-1.7h0ZM45.7,28.5l-7.1-6.8,11.8-11.3,7.1,6.8-11.8,11.3Z"/>
        </g>
    </g>
</svg>
`;
var RO = Z('<button><!></button> <div class="color-panel-container svelte-gqoyg9"><!></div>', 1);
const IO = {
  hash: "svelte-gqoyg9",
  code: ".color-panel-container.svelte-gqoyg9 {position:relative;}"
};
function D_(n, t) {
  xt(t, !0), De(n, IO);
  const e = t.$$host;
  e.addEventListener("click", u);
  const { options: i, tiptap: r } = e;
  let s = lt(!1);
  const o = i.presetColors ?? [
    "#000000",
    "#595959",
    "#999999",
    "#CCCCCC",
    "#FFFFFF",
    "#F06292",
    "#E57373",
    "#BA68C8",
    "#9575CD",
    "#7986CB",
    "#64B5F6",
    "#4FC3F7",
    "#4DD0E1",
    "#4DB6AC",
    "#81C784",
    "#AED581",
    "#FFF176",
    "#FFB74D",
    "#FF8A65",
    "#A1887F"
  ], a = "rgba(0,0,0,0)";
  let l = lt(a);
  e.onEditorUpdate = () => {
    K(l, pt((r == null ? void 0 : r.getAttributes("textStyle").backgroundColor) ?? a));
  };
  function c(y) {
    K(l, pt(y)), r == null || r.chain().focus().setBackgroundColor(y).run(), K(s, !1);
  }
  function u(y) {
    r && (y.stopPropagation(), K(s, !C(s)));
  }
  function d() {
    K(s, !1);
  }
  $t(() => (document.addEventListener("click", d), () => {
    document.removeEventListener("click", d);
  }));
  var f = RO(), h = It(f), p = L(h);
  je(p, () => LO.replace(/fill="rgba\(0,0,0,0\)"/g, `fill="${C(l)}"`)), A(h), Oe(h, (y, x) => {
    var k;
    return (k = yn) == null ? void 0 : k(y, x);
  }, () => I("Background Color"));
  var _ = H(h, 2), g = L(_);
  {
    var m = (y) => {
      sd(y, { colors: o, onSelect: c });
    };
    de(g, (y) => {
      C(s) && y(m);
    });
  }
  A(_), P(() => _i(h, "tooltip-disabled", C(s))), V(n, f), wt();
}
vt(D_, {}, [], [], !0, Qe);
const PO = `<svg width="72" height="72" viewBox="0 0 72 72" fill="none"
    xmlns="http://www.w3.org/2000/svg">
    <g clip-path="url(#clip0_57_211)">
        <path d="M48 32.8H24V36H48V32.8Z" fill="black"/>
        <path d="M48 40.8H24V44H48V40.8Z" fill="black"/>
        <path d="M48 48.8H24V52H48V48.8Z" fill="black"/>
        <path fill-rule="evenodd" clip-rule="evenodd" d="M51.2 15.2H47.2V12.8H41.6C41.6 9.71001 39.09 7.20001 36 7.20001C32.91 7.20001 30.4 9.71001 30.4 12.8H24.8V15.2H20.8C17.27 15.2 14.4 18.07 14.4 21.6V58.4C14.4 61.93 17.27 64.8 20.8 64.8H51.2C54.73 64.8 57.6 61.93 57.6 58.4V21.6C57.6 18.07 54.73 15.2 51.2 15.2ZM52.8 58.4C52.8 59.28 52.08 60 51.2 60H20.8C19.92 60 19.2 59.28 19.2 58.4V21.6C19.2 20.72 19.92 20 20.8 20H24.8V22.4H47.2V20H51.2C52.08 20 52.8 20.72 52.8 21.6V58.4Z" fill="black"/>
    </g>
    <defs>
        <clipPath id="clip0_57_211">
            <rect width="72" height="72" fill="white"/>
        </clipPath>
    </defs>
</svg>
`;
/*! @license DOMPurify 3.2.3 | (c) Cure53 and other contributors | Released under the Apache license 2.0 and Mozilla Public License 2.0 | github.com/cure53/DOMPurify/blob/3.2.3/LICENSE */
const {
  entries: $_,
  setPrototypeOf: rp,
  isFrozen: DO,
  getPrototypeOf: $O,
  getOwnPropertyDescriptor: BO
} = Object;
let {
  freeze: Pe,
  seal: cn,
  create: B_
} = Object, {
  apply: eu,
  construct: nu
} = typeof Reflect < "u" && Reflect;
Pe || (Pe = function(t) {
  return t;
});
cn || (cn = function(t) {
  return t;
});
eu || (eu = function(t, e, i) {
  return t.apply(e, i);
});
nu || (nu = function(t, e) {
  return new t(...e);
});
const $o = Ye(Array.prototype.forEach), sp = Ye(Array.prototype.pop), ns = Ye(Array.prototype.push), qo = Ye(String.prototype.toLowerCase), sc = Ye(String.prototype.toString), op = Ye(String.prototype.match), is = Ye(String.prototype.replace), zO = Ye(String.prototype.indexOf), HO = Ye(String.prototype.trim), fn = Ye(Object.prototype.hasOwnProperty), Ae = Ye(RegExp.prototype.test), rs = FO(TypeError);
function Ye(n) {
  return function(t) {
    for (var e = arguments.length, i = new Array(e > 1 ? e - 1 : 0), r = 1; r < e; r++)
      i[r - 1] = arguments[r];
    return eu(n, t, i);
  };
}
function FO(n) {
  return function() {
    for (var t = arguments.length, e = new Array(t), i = 0; i < t; i++)
      e[i] = arguments[i];
    return nu(n, e);
  };
}
function Et(n, t) {
  let e = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : qo;
  rp && rp(n, null);
  let i = t.length;
  for (; i--; ) {
    let r = t[i];
    if (typeof r == "string") {
      const s = e(r);
      s !== r && (DO(t) || (t[i] = s), r = s);
    }
    n[r] = !0;
  }
  return n;
}
function VO(n) {
  for (let t = 0; t < n.length; t++)
    fn(n, t) || (n[t] = null);
  return n;
}
function ki(n) {
  const t = B_(null);
  for (const [e, i] of $_(n))
    fn(n, e) && (Array.isArray(i) ? t[e] = VO(i) : i && typeof i == "object" && i.constructor === Object ? t[e] = ki(i) : t[e] = i);
  return t;
}
function ss(n, t) {
  for (; n !== null; ) {
    const i = BO(n, t);
    if (i) {
      if (i.get)
        return Ye(i.get);
      if (typeof i.value == "function")
        return Ye(i.value);
    }
    n = $O(n);
  }
  function e() {
    return null;
  }
  return e;
}
const ap = Pe(["a", "abbr", "acronym", "address", "area", "article", "aside", "audio", "b", "bdi", "bdo", "big", "blink", "blockquote", "body", "br", "button", "canvas", "caption", "center", "cite", "code", "col", "colgroup", "content", "data", "datalist", "dd", "decorator", "del", "details", "dfn", "dialog", "dir", "div", "dl", "dt", "element", "em", "fieldset", "figcaption", "figure", "font", "footer", "form", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "i", "img", "input", "ins", "kbd", "label", "legend", "li", "main", "map", "mark", "marquee", "menu", "menuitem", "meter", "nav", "nobr", "ol", "optgroup", "option", "output", "p", "picture", "pre", "progress", "q", "rp", "rt", "ruby", "s", "samp", "section", "select", "shadow", "small", "source", "spacer", "span", "strike", "strong", "style", "sub", "summary", "sup", "table", "tbody", "td", "template", "textarea", "tfoot", "th", "thead", "time", "tr", "track", "tt", "u", "ul", "var", "video", "wbr"]), oc = Pe(["svg", "a", "altglyph", "altglyphdef", "altglyphitem", "animatecolor", "animatemotion", "animatetransform", "circle", "clippath", "defs", "desc", "ellipse", "filter", "font", "g", "glyph", "glyphref", "hkern", "image", "line", "lineargradient", "marker", "mask", "metadata", "mpath", "path", "pattern", "polygon", "polyline", "radialgradient", "rect", "stop", "style", "switch", "symbol", "text", "textpath", "title", "tref", "tspan", "view", "vkern"]), ac = Pe(["feBlend", "feColorMatrix", "feComponentTransfer", "feComposite", "feConvolveMatrix", "feDiffuseLighting", "feDisplacementMap", "feDistantLight", "feDropShadow", "feFlood", "feFuncA", "feFuncB", "feFuncG", "feFuncR", "feGaussianBlur", "feImage", "feMerge", "feMergeNode", "feMorphology", "feOffset", "fePointLight", "feSpecularLighting", "feSpotLight", "feTile", "feTurbulence"]), jO = Pe(["animate", "color-profile", "cursor", "discard", "font-face", "font-face-format", "font-face-name", "font-face-src", "font-face-uri", "foreignobject", "hatch", "hatchpath", "mesh", "meshgradient", "meshpatch", "meshrow", "missing-glyph", "script", "set", "solidcolor", "unknown", "use"]), lc = Pe(["math", "menclose", "merror", "mfenced", "mfrac", "mglyph", "mi", "mlabeledtr", "mmultiscripts", "mn", "mo", "mover", "mpadded", "mphantom", "mroot", "mrow", "ms", "mspace", "msqrt", "mstyle", "msub", "msup", "msubsup", "mtable", "mtd", "mtext", "mtr", "munder", "munderover", "mprescripts"]), WO = Pe(["maction", "maligngroup", "malignmark", "mlongdiv", "mscarries", "mscarry", "msgroup", "mstack", "msline", "msrow", "semantics", "annotation", "annotation-xml", "mprescripts", "none"]), lp = Pe(["#text"]), cp = Pe(["accept", "action", "align", "alt", "autocapitalize", "autocomplete", "autopictureinpicture", "autoplay", "background", "bgcolor", "border", "capture", "cellpadding", "cellspacing", "checked", "cite", "class", "clear", "color", "cols", "colspan", "controls", "controlslist", "coords", "crossorigin", "datetime", "decoding", "default", "dir", "disabled", "disablepictureinpicture", "disableremoteplayback", "download", "draggable", "enctype", "enterkeyhint", "face", "for", "headers", "height", "hidden", "high", "href", "hreflang", "id", "inputmode", "integrity", "ismap", "kind", "label", "lang", "list", "loading", "loop", "low", "max", "maxlength", "media", "method", "min", "minlength", "multiple", "muted", "name", "nonce", "noshade", "novalidate", "nowrap", "open", "optimum", "pattern", "placeholder", "playsinline", "popover", "popovertarget", "popovertargetaction", "poster", "preload", "pubdate", "radiogroup", "readonly", "rel", "required", "rev", "reversed", "role", "rows", "rowspan", "spellcheck", "scope", "selected", "shape", "size", "sizes", "span", "srclang", "start", "src", "srcset", "step", "style", "summary", "tabindex", "title", "translate", "type", "usemap", "valign", "value", "width", "wrap", "xmlns", "slot"]), cc = Pe(["accent-height", "accumulate", "additive", "alignment-baseline", "amplitude", "ascent", "attributename", "attributetype", "azimuth", "basefrequency", "baseline-shift", "begin", "bias", "by", "class", "clip", "clippathunits", "clip-path", "clip-rule", "color", "color-interpolation", "color-interpolation-filters", "color-profile", "color-rendering", "cx", "cy", "d", "dx", "dy", "diffuseconstant", "direction", "display", "divisor", "dur", "edgemode", "elevation", "end", "exponent", "fill", "fill-opacity", "fill-rule", "filter", "filterunits", "flood-color", "flood-opacity", "font-family", "font-size", "font-size-adjust", "font-stretch", "font-style", "font-variant", "font-weight", "fx", "fy", "g1", "g2", "glyph-name", "glyphref", "gradientunits", "gradienttransform", "height", "href", "id", "image-rendering", "in", "in2", "intercept", "k", "k1", "k2", "k3", "k4", "kerning", "keypoints", "keysplines", "keytimes", "lang", "lengthadjust", "letter-spacing", "kernelmatrix", "kernelunitlength", "lighting-color", "local", "marker-end", "marker-mid", "marker-start", "markerheight", "markerunits", "markerwidth", "maskcontentunits", "maskunits", "max", "mask", "media", "method", "mode", "min", "name", "numoctaves", "offset", "operator", "opacity", "order", "orient", "orientation", "origin", "overflow", "paint-order", "path", "pathlength", "patterncontentunits", "patterntransform", "patternunits", "points", "preservealpha", "preserveaspectratio", "primitiveunits", "r", "rx", "ry", "radius", "refx", "refy", "repeatcount", "repeatdur", "restart", "result", "rotate", "scale", "seed", "shape-rendering", "slope", "specularconstant", "specularexponent", "spreadmethod", "startoffset", "stddeviation", "stitchtiles", "stop-color", "stop-opacity", "stroke-dasharray", "stroke-dashoffset", "stroke-linecap", "stroke-linejoin", "stroke-miterlimit", "stroke-opacity", "stroke", "stroke-width", "style", "surfacescale", "systemlanguage", "tabindex", "tablevalues", "targetx", "targety", "transform", "transform-origin", "text-anchor", "text-decoration", "text-rendering", "textlength", "type", "u1", "u2", "unicode", "values", "viewbox", "visibility", "version", "vert-adv-y", "vert-origin-x", "vert-origin-y", "width", "word-spacing", "wrap", "writing-mode", "xchannelselector", "ychannelselector", "x", "x1", "x2", "xmlns", "y", "y1", "y2", "z", "zoomandpan"]), up = Pe(["accent", "accentunder", "align", "bevelled", "close", "columnsalign", "columnlines", "columnspan", "denomalign", "depth", "dir", "display", "displaystyle", "encoding", "fence", "frame", "height", "href", "id", "largeop", "length", "linethickness", "lspace", "lquote", "mathbackground", "mathcolor", "mathsize", "mathvariant", "maxsize", "minsize", "movablelimits", "notation", "numalign", "open", "rowalign", "rowlines", "rowspacing", "rowspan", "rspace", "rquote", "scriptlevel", "scriptminsize", "scriptsizemultiplier", "selection", "separator", "separators", "stretchy", "subscriptshift", "supscriptshift", "symmetric", "voffset", "width", "xmlns"]), Bo = Pe(["xlink:href", "xml:id", "xlink:title", "xml:space", "xmlns:xlink"]), UO = cn(/\{\{[\w\W]*|[\w\W]*\}\}/gm), KO = cn(/<%[\w\W]*|[\w\W]*%>/gm), qO = cn(/\$\{[\w\W]*}/gm), GO = cn(/^data-[\-\w.\u00B7-\uFFFF]+$/), JO = cn(/^aria-[\-\w]+$/), z_ = cn(
  /^(?:(?:(?:f|ht)tps?|mailto|tel|callto|sms|cid|xmpp):|[^a-z]|[a-z+.\-]+(?:[^a-z+.\-:]|$))/i
  // eslint-disable-line no-useless-escape
), XO = cn(/^(?:\w+script|data):/i), YO = cn(
  /[\u0000-\u0020\u00A0\u1680\u180E\u2000-\u2029\u205F\u3000]/g
  // eslint-disable-line no-control-regex
), H_ = cn(/^html$/i), ZO = cn(/^[a-z][.\w]*(-[.\w]+)+$/i);
var dp = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  ARIA_ATTR: JO,
  ATTR_WHITESPACE: YO,
  CUSTOM_ELEMENT: ZO,
  DATA_ATTR: GO,
  DOCTYPE_NAME: H_,
  ERB_EXPR: KO,
  IS_ALLOWED_URI: z_,
  IS_SCRIPT_OR_DATA: XO,
  MUSTACHE_EXPR: UO,
  TMPLIT_EXPR: qO
});
const as = {
  element: 1,
  attribute: 2,
  text: 3,
  cdataSection: 4,
  entityReference: 5,
  // Deprecated
  entityNode: 6,
  // Deprecated
  progressingInstruction: 7,
  comment: 8,
  document: 9,
  documentType: 10,
  documentFragment: 11,
  notation: 12
  // Deprecated
}, QO = function() {
  return typeof window > "u" ? null : window;
}, tM = function(t, e) {
  if (typeof t != "object" || typeof t.createPolicy != "function")
    return null;
  let i = null;
  const r = "data-tt-policy-suffix";
  e && e.hasAttribute(r) && (i = e.getAttribute(r));
  const s = "dompurify" + (i ? "#" + i : "");
  try {
    return t.createPolicy(s, {
      createHTML(o) {
        return o;
      },
      createScriptURL(o) {
        return o;
      }
    });
  } catch {
    return console.warn("TrustedTypes policy " + s + " could not be created."), null;
  }
}, fp = function() {
  return {
    afterSanitizeAttributes: [],
    afterSanitizeElements: [],
    afterSanitizeShadowDOM: [],
    beforeSanitizeAttributes: [],
    beforeSanitizeElements: [],
    beforeSanitizeShadowDOM: [],
    uponSanitizeAttribute: [],
    uponSanitizeElement: [],
    uponSanitizeShadowNode: []
  };
};
function F_() {
  let n = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : QO();
  const t = (at) => F_(at);
  if (t.version = "3.2.3", t.removed = [], !n || !n.document || n.document.nodeType !== as.document)
    return t.isSupported = !1, t;
  let {
    document: e
  } = n;
  const i = e, r = i.currentScript, {
    DocumentFragment: s,
    HTMLTemplateElement: o,
    Node: a,
    Element: l,
    NodeFilter: c,
    NamedNodeMap: u = n.NamedNodeMap || n.MozNamedAttrMap,
    HTMLFormElement: d,
    DOMParser: f,
    trustedTypes: h
  } = n, p = l.prototype, _ = ss(p, "cloneNode"), g = ss(p, "remove"), m = ss(p, "nextSibling"), y = ss(p, "childNodes"), x = ss(p, "parentNode");
  if (typeof o == "function") {
    const at = e.createElement("template");
    at.content && at.content.ownerDocument && (e = at.content.ownerDocument);
  }
  let k, S = "";
  const {
    implementation: w,
    createNodeIterator: O,
    createDocumentFragment: v,
    getElementsByTagName: E
  } = e, {
    importNode: b
  } = i;
  let T = fp();
  t.isSupported = typeof $_ == "function" && typeof x == "function" && w && w.createHTMLDocument !== void 0;
  const {
    MUSTACHE_EXPR: M,
    ERB_EXPR: F,
    TMPLIT_EXPR: D,
    DATA_ATTR: U,
    ARIA_ATTR: q,
    IS_SCRIPT_OR_DATA: Q,
    ATTR_WHITESPACE: ut,
    CUSTOM_ELEMENT: rt
  } = dp;
  let {
    IS_ALLOWED_URI: kt
  } = dp, st = null;
  const Pt = Et({}, [...ap, ...oc, ...ac, ...lc, ...lp]);
  let ht = null;
  const Yt = Et({}, [...cp, ...cc, ...up, ...Bo]);
  let Ct = Object.seal(B_(null, {
    tagNameCheck: {
      writable: !0,
      configurable: !1,
      enumerable: !0,
      value: null
    },
    attributeNameCheck: {
      writable: !0,
      configurable: !1,
      enumerable: !0,
      value: null
    },
    allowCustomizedBuiltInElements: {
      writable: !0,
      configurable: !1,
      enumerable: !0,
      value: !1
    }
  })), R = null, ne = null, mt = !0, ie = !0, Dt = !1, X = !0, At = !1, gt = !0, $ = !1, dt = !1, yt = !1, j = !1, kn = !1, We = !1, Qi = !0, Sn = !1;
  const tr = "user-content-";
  let tn = !0, Bn = !1, Ht = {}, jt = null;
  const Lt = Et({}, ["annotation-xml", "audio", "colgroup", "desc", "foreignobject", "head", "iframe", "math", "mi", "mn", "mo", "ms", "mtext", "noembed", "noframes", "noscript", "plaintext", "script", "style", "svg", "template", "thead", "title", "video", "xmp"]);
  let Tt = null;
  const ve = Et({}, ["audio", "video", "img", "source", "image", "track"]);
  let xi = null;
  const Yn = Et({}, ["alt", "class", "for", "id", "label", "name", "pattern", "placeholder", "role", "summary", "title", "value", "style", "xmlns"]), er = "http://www.w3.org/1998/Math/MathML", Cn = "http://www.w3.org/2000/svg", dn = "http://www.w3.org/1999/xhtml";
  let en = dn, qr = !1, Zn = null;
  const ul = Et({}, [er, Cn, dn], sc);
  let ae = Et({}, ["mi", "mo", "mn", "ms", "mtext"]), uo = Et({}, ["annotation-xml"]);
  const r0 = Et({}, ["title", "style", "font", "a", "script"]);
  let Gr = null;
  const s0 = ["application/xhtml+xml", "text/html"], o0 = "text/html";
  let le = null, nr = null;
  const a0 = e.createElement("form"), od = function(N) {
    return N instanceof RegExp || N instanceof Function;
  }, dl = function() {
    let N = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    if (!(nr && nr === N)) {
      if ((!N || typeof N != "object") && (N = {}), N = ki(N), Gr = // eslint-disable-next-line unicorn/prefer-includes
      s0.indexOf(N.PARSER_MEDIA_TYPE) === -1 ? o0 : N.PARSER_MEDIA_TYPE, le = Gr === "application/xhtml+xml" ? sc : qo, st = fn(N, "ALLOWED_TAGS") ? Et({}, N.ALLOWED_TAGS, le) : Pt, ht = fn(N, "ALLOWED_ATTR") ? Et({}, N.ALLOWED_ATTR, le) : Yt, Zn = fn(N, "ALLOWED_NAMESPACES") ? Et({}, N.ALLOWED_NAMESPACES, sc) : ul, xi = fn(N, "ADD_URI_SAFE_ATTR") ? Et(ki(Yn), N.ADD_URI_SAFE_ATTR, le) : Yn, Tt = fn(N, "ADD_DATA_URI_TAGS") ? Et(ki(ve), N.ADD_DATA_URI_TAGS, le) : ve, jt = fn(N, "FORBID_CONTENTS") ? Et({}, N.FORBID_CONTENTS, le) : Lt, R = fn(N, "FORBID_TAGS") ? Et({}, N.FORBID_TAGS, le) : {}, ne = fn(N, "FORBID_ATTR") ? Et({}, N.FORBID_ATTR, le) : {}, Ht = fn(N, "USE_PROFILES") ? N.USE_PROFILES : !1, mt = N.ALLOW_ARIA_ATTR !== !1, ie = N.ALLOW_DATA_ATTR !== !1, Dt = N.ALLOW_UNKNOWN_PROTOCOLS || !1, X = N.ALLOW_SELF_CLOSE_IN_ATTR !== !1, At = N.SAFE_FOR_TEMPLATES || !1, gt = N.SAFE_FOR_XML !== !1, $ = N.WHOLE_DOCUMENT || !1, j = N.RETURN_DOM || !1, kn = N.RETURN_DOM_FRAGMENT || !1, We = N.RETURN_TRUSTED_TYPE || !1, yt = N.FORCE_BODY || !1, Qi = N.SANITIZE_DOM !== !1, Sn = N.SANITIZE_NAMED_PROPS || !1, tn = N.KEEP_CONTENT !== !1, Bn = N.IN_PLACE || !1, kt = N.ALLOWED_URI_REGEXP || z_, en = N.NAMESPACE || dn, ae = N.MATHML_TEXT_INTEGRATION_POINTS || ae, uo = N.HTML_INTEGRATION_POINTS || uo, Ct = N.CUSTOM_ELEMENT_HANDLING || {}, N.CUSTOM_ELEMENT_HANDLING && od(N.CUSTOM_ELEMENT_HANDLING.tagNameCheck) && (Ct.tagNameCheck = N.CUSTOM_ELEMENT_HANDLING.tagNameCheck), N.CUSTOM_ELEMENT_HANDLING && od(N.CUSTOM_ELEMENT_HANDLING.attributeNameCheck) && (Ct.attributeNameCheck = N.CUSTOM_ELEMENT_HANDLING.attributeNameCheck), N.CUSTOM_ELEMENT_HANDLING && typeof N.CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements == "boolean" && (Ct.allowCustomizedBuiltInElements = N.CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements), At && (ie = !1), kn && (j = !0), Ht && (st = Et({}, lp), ht = [], Ht.html === !0 && (Et(st, ap), Et(ht, cp)), Ht.svg === !0 && (Et(st, oc), Et(ht, cc), Et(ht, Bo)), Ht.svgFilters === !0 && (Et(st, ac), Et(ht, cc), Et(ht, Bo)), Ht.mathMl === !0 && (Et(st, lc), Et(ht, up), Et(ht, Bo))), N.ADD_TAGS && (st === Pt && (st = ki(st)), Et(st, N.ADD_TAGS, le)), N.ADD_ATTR && (ht === Yt && (ht = ki(ht)), Et(ht, N.ADD_ATTR, le)), N.ADD_URI_SAFE_ATTR && Et(xi, N.ADD_URI_SAFE_ATTR, le), N.FORBID_CONTENTS && (jt === Lt && (jt = ki(jt)), Et(jt, N.FORBID_CONTENTS, le)), tn && (st["#text"] = !0), $ && Et(st, ["html", "head", "body"]), st.table && (Et(st, ["tbody"]), delete R.tbody), N.TRUSTED_TYPES_POLICY) {
        if (typeof N.TRUSTED_TYPES_POLICY.createHTML != "function")
          throw rs('TRUSTED_TYPES_POLICY configuration option must provide a "createHTML" hook.');
        if (typeof N.TRUSTED_TYPES_POLICY.createScriptURL != "function")
          throw rs('TRUSTED_TYPES_POLICY configuration option must provide a "createScriptURL" hook.');
        k = N.TRUSTED_TYPES_POLICY, S = k.createHTML("");
      } else
        k === void 0 && (k = tM(h, r)), k !== null && typeof S == "string" && (S = k.createHTML(""));
      Pe && Pe(N), nr = N;
    }
  }, ad = Et({}, [...oc, ...ac, ...jO]), ld = Et({}, [...lc, ...WO]), l0 = function(N) {
    let G = x(N);
    (!G || !G.tagName) && (G = {
      namespaceURI: en,
      tagName: "template"
    });
    const it = qo(N.tagName), Ut = qo(G.tagName);
    return Zn[N.namespaceURI] ? N.namespaceURI === Cn ? G.namespaceURI === dn ? it === "svg" : G.namespaceURI === er ? it === "svg" && (Ut === "annotation-xml" || ae[Ut]) : !!ad[it] : N.namespaceURI === er ? G.namespaceURI === dn ? it === "math" : G.namespaceURI === Cn ? it === "math" && uo[Ut] : !!ld[it] : N.namespaceURI === dn ? G.namespaceURI === Cn && !uo[Ut] || G.namespaceURI === er && !ae[Ut] ? !1 : !ld[it] && (r0[it] || !ad[it]) : !!(Gr === "application/xhtml+xml" && Zn[N.namespaceURI]) : !1;
  }, Tn = function(N) {
    ns(t.removed, {
      element: N
    });
    try {
      x(N).removeChild(N);
    } catch {
      g(N);
    }
  }, fo = function(N, G) {
    try {
      ns(t.removed, {
        attribute: G.getAttributeNode(N),
        from: G
      });
    } catch {
      ns(t.removed, {
        attribute: null,
        from: G
      });
    }
    if (G.removeAttribute(N), N === "is")
      if (j || kn)
        try {
          Tn(G);
        } catch {
        }
      else
        try {
          G.setAttribute(N, "");
        } catch {
        }
  }, cd = function(N) {
    let G = null, it = null;
    if (yt)
      N = "<remove></remove>" + N;
    else {
      const me = op(N, /^[\r\n\t ]+/);
      it = me && me[0];
    }
    Gr === "application/xhtml+xml" && en === dn && (N = '<html xmlns="http://www.w3.org/1999/xhtml"><head></head><body>' + N + "</body></html>");
    const Ut = k ? k.createHTML(N) : N;
    if (en === dn)
      try {
        G = new f().parseFromString(Ut, Gr);
      } catch {
      }
    if (!G || !G.documentElement) {
      G = w.createDocument(en, "template", null);
      try {
        G.documentElement.innerHTML = qr ? S : Ut;
      } catch {
      }
    }
    const xe = G.body || G.documentElement;
    return N && it && xe.insertBefore(e.createTextNode(it), xe.childNodes[0] || null), en === dn ? E.call(G, $ ? "html" : "body")[0] : $ ? G.documentElement : xe;
  }, ud = function(N) {
    return O.call(
      N.ownerDocument || N,
      N,
      // eslint-disable-next-line no-bitwise
      c.SHOW_ELEMENT | c.SHOW_COMMENT | c.SHOW_TEXT | c.SHOW_PROCESSING_INSTRUCTION | c.SHOW_CDATA_SECTION,
      null
    );
  }, fl = function(N) {
    return N instanceof d && (typeof N.nodeName != "string" || typeof N.textContent != "string" || typeof N.removeChild != "function" || !(N.attributes instanceof u) || typeof N.removeAttribute != "function" || typeof N.setAttribute != "function" || typeof N.namespaceURI != "string" || typeof N.insertBefore != "function" || typeof N.hasChildNodes != "function");
  }, dd = function(N) {
    return typeof a == "function" && N instanceof a;
  };
  function zn(at, N, G) {
    $o(at, (it) => {
      it.call(t, N, G, nr);
    });
  }
  const fd = function(N) {
    let G = null;
    if (zn(T.beforeSanitizeElements, N, null), fl(N))
      return Tn(N), !0;
    const it = le(N.nodeName);
    if (zn(T.uponSanitizeElement, N, {
      tagName: it,
      allowedTags: st
    }), N.hasChildNodes() && !dd(N.firstElementChild) && Ae(/<[/\w]/g, N.innerHTML) && Ae(/<[/\w]/g, N.textContent) || N.nodeType === as.progressingInstruction || gt && N.nodeType === as.comment && Ae(/<[/\w]/g, N.data))
      return Tn(N), !0;
    if (!st[it] || R[it]) {
      if (!R[it] && pd(it) && (Ct.tagNameCheck instanceof RegExp && Ae(Ct.tagNameCheck, it) || Ct.tagNameCheck instanceof Function && Ct.tagNameCheck(it)))
        return !1;
      if (tn && !jt[it]) {
        const Ut = x(N) || N.parentNode, xe = y(N) || N.childNodes;
        if (xe && Ut) {
          const me = xe.length;
          for (let Be = me - 1; Be >= 0; --Be) {
            const En = _(xe[Be], !0);
            En.__removalCount = (N.__removalCount || 0) + 1, Ut.insertBefore(En, m(N));
          }
        }
      }
      return Tn(N), !0;
    }
    return N instanceof l && !l0(N) || (it === "noscript" || it === "noembed" || it === "noframes") && Ae(/<\/no(script|embed|frames)/i, N.innerHTML) ? (Tn(N), !0) : (At && N.nodeType === as.text && (G = N.textContent, $o([M, F, D], (Ut) => {
      G = is(G, Ut, " ");
    }), N.textContent !== G && (ns(t.removed, {
      element: N.cloneNode()
    }), N.textContent = G)), zn(T.afterSanitizeElements, N, null), !1);
  }, hd = function(N, G, it) {
    if (Qi && (G === "id" || G === "name") && (it in e || it in a0))
      return !1;
    if (!(ie && !ne[G] && Ae(U, G))) {
      if (!(mt && Ae(q, G))) {
        if (!ht[G] || ne[G]) {
          if (
            // First condition does a very basic check if a) it's basically a valid custom element tagname AND
            // b) if the tagName passes whatever the user has configured for CUSTOM_ELEMENT_HANDLING.tagNameCheck
            // and c) if the attribute name passes whatever the user has configured for CUSTOM_ELEMENT_HANDLING.attributeNameCheck
            !(pd(N) && (Ct.tagNameCheck instanceof RegExp && Ae(Ct.tagNameCheck, N) || Ct.tagNameCheck instanceof Function && Ct.tagNameCheck(N)) && (Ct.attributeNameCheck instanceof RegExp && Ae(Ct.attributeNameCheck, G) || Ct.attributeNameCheck instanceof Function && Ct.attributeNameCheck(G)) || // Alternative, second condition checks if it's an `is`-attribute, AND
            // the value passes whatever the user has configured for CUSTOM_ELEMENT_HANDLING.tagNameCheck
            G === "is" && Ct.allowCustomizedBuiltInElements && (Ct.tagNameCheck instanceof RegExp && Ae(Ct.tagNameCheck, it) || Ct.tagNameCheck instanceof Function && Ct.tagNameCheck(it)))
          ) return !1;
        } else if (!xi[G]) {
          if (!Ae(kt, is(it, ut, ""))) {
            if (!((G === "src" || G === "xlink:href" || G === "href") && N !== "script" && zO(it, "data:") === 0 && Tt[N])) {
              if (!(Dt && !Ae(Q, is(it, ut, "")))) {
                if (it)
                  return !1;
              }
            }
          }
        }
      }
    }
    return !0;
  }, pd = function(N) {
    return N !== "annotation-xml" && op(N, rt);
  }, md = function(N) {
    zn(T.beforeSanitizeAttributes, N, null);
    const {
      attributes: G
    } = N;
    if (!G || fl(N))
      return;
    const it = {
      attrName: "",
      attrValue: "",
      keepAttr: !0,
      allowedAttributes: ht,
      forceKeepAttr: void 0
    };
    let Ut = G.length;
    for (; Ut--; ) {
      const xe = G[Ut], {
        name: me,
        namespaceURI: Be,
        value: En
      } = xe, Jr = le(me);
      let Me = me === "value" ? En : HO(En);
      if (it.attrName = Jr, it.attrValue = Me, it.keepAttr = !0, it.forceKeepAttr = void 0, zn(T.uponSanitizeAttribute, N, it), Me = it.attrValue, Sn && (Jr === "id" || Jr === "name") && (fo(me, N), Me = tr + Me), gt && Ae(/((--!?|])>)|<\/(style|title)/i, Me)) {
        fo(me, N);
        continue;
      }
      if (it.forceKeepAttr || (fo(me, N), !it.keepAttr))
        continue;
      if (!X && Ae(/\/>/i, Me)) {
        fo(me, N);
        continue;
      }
      At && $o([M, F, D], (_d) => {
        Me = is(Me, _d, " ");
      });
      const gd = le(N.nodeName);
      if (hd(gd, Jr, Me)) {
        if (k && typeof h == "object" && typeof h.getAttributeType == "function" && !Be)
          switch (h.getAttributeType(gd, Jr)) {
            case "TrustedHTML": {
              Me = k.createHTML(Me);
              break;
            }
            case "TrustedScriptURL": {
              Me = k.createScriptURL(Me);
              break;
            }
          }
        try {
          Be ? N.setAttributeNS(Be, me, Me) : N.setAttribute(me, Me), fl(N) ? Tn(N) : sp(t.removed);
        } catch {
        }
      }
    }
    zn(T.afterSanitizeAttributes, N, null);
  }, c0 = function at(N) {
    let G = null;
    const it = ud(N);
    for (zn(T.beforeSanitizeShadowDOM, N, null); G = it.nextNode(); )
      zn(T.uponSanitizeShadowNode, G, null), fd(G), md(G), G.content instanceof s && at(G.content);
    zn(T.afterSanitizeShadowDOM, N, null);
  };
  return t.sanitize = function(at) {
    let N = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, G = null, it = null, Ut = null, xe = null;
    if (qr = !at, qr && (at = "<!-->"), typeof at != "string" && !dd(at))
      if (typeof at.toString == "function") {
        if (at = at.toString(), typeof at != "string")
          throw rs("dirty is not a string, aborting");
      } else
        throw rs("toString is not a function");
    if (!t.isSupported)
      return at;
    if (dt || dl(N), t.removed = [], typeof at == "string" && (Bn = !1), Bn) {
      if (at.nodeName) {
        const En = le(at.nodeName);
        if (!st[En] || R[En])
          throw rs("root node is forbidden and cannot be sanitized in-place");
      }
    } else if (at instanceof a)
      G = cd("<!---->"), it = G.ownerDocument.importNode(at, !0), it.nodeType === as.element && it.nodeName === "BODY" || it.nodeName === "HTML" ? G = it : G.appendChild(it);
    else {
      if (!j && !At && !$ && // eslint-disable-next-line unicorn/prefer-includes
      at.indexOf("<") === -1)
        return k && We ? k.createHTML(at) : at;
      if (G = cd(at), !G)
        return j ? null : We ? S : "";
    }
    G && yt && Tn(G.firstChild);
    const me = ud(Bn ? at : G);
    for (; Ut = me.nextNode(); )
      fd(Ut), md(Ut), Ut.content instanceof s && c0(Ut.content);
    if (Bn)
      return at;
    if (j) {
      if (kn)
        for (xe = v.call(G.ownerDocument); G.firstChild; )
          xe.appendChild(G.firstChild);
      else
        xe = G;
      return (ht.shadowroot || ht.shadowrootmode) && (xe = b.call(i, xe, !0)), xe;
    }
    let Be = $ ? G.outerHTML : G.innerHTML;
    return $ && st["!doctype"] && G.ownerDocument && G.ownerDocument.doctype && G.ownerDocument.doctype.name && Ae(H_, G.ownerDocument.doctype.name) && (Be = "<!DOCTYPE " + G.ownerDocument.doctype.name + `>
` + Be), At && $o([M, F, D], (En) => {
      Be = is(Be, En, " ");
    }), k && We ? k.createHTML(Be) : Be;
  }, t.setConfig = function() {
    let at = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    dl(at), dt = !0;
  }, t.clearConfig = function() {
    nr = null, dt = !1;
  }, t.isValidAttribute = function(at, N, G) {
    nr || dl({});
    const it = le(at), Ut = le(N);
    return hd(it, Ut, G);
  }, t.addHook = function(at, N) {
    typeof N == "function" && ns(T[at], N);
  }, t.removeHook = function(at) {
    return sp(T[at]);
  }, t.removeHooks = function(at) {
    T[at] = [];
  }, t.removeAllHooks = function() {
    T = fp();
  }, t;
}
var eM = F_();
function nM(n, t, e) {
  const i = n.target;
  K(t, ""), e(i.value);
}
var iM = Z("<option> </option>"), rM = Z('<label for="boilerplate_text"> </label> <div id="boilerplate_text" class="form-control"><!></div>', 1), sM = Z('<div class="form-group mb-3"><label for="boilerplate_title"> </label> <select id="boilerplate_title" class="form-control"></select> <div class="form-text"> </div></div> <div class="form-group mb-3"><!></div>', 1), oM = Z('<button type="button" class="action primary button btn btn-primary"> </button> <button type="button" class="cancel action button mt-close-dialog btn btn-default"> </button>', 1);
function V_(n, t) {
  xt(t, !0);
  const e = eM(window);
  let i = et(t, "boilerplates", 7), r = et(t, "onSubmit", 7), s = et(t, "onClose", 7), o = lt(""), a = lt("");
  async function l(u) {
    var d;
    K(a, pt(((d = i().find((f) => f.url === u)) == null ? void 0 : d.description) || "")), K(o, pt(await (await fetch(u)).text()));
  }
  n_(() => {
    i().length > 0 && l(i()[0].url);
  });
  let c;
  return xn(n, {
    size: "lg",
    $$events: {
      close(...u) {
        var d;
        (d = s()) == null || d.apply(this, u);
      }
    },
    children: (u, d) => {
      wn(u, {
        get close() {
          return c;
        },
        set close(f) {
          c = f;
        },
        $$slots: {
          title: (f, h) => {
            var p = bn();
            P(() => z(p, I("Insert Boilerplate"))), V(f, p);
          },
          body: (f, h) => {
            var p = sM(), _ = It(p), g = L(_), m = L(g, !0);
            P(() => z(m, I("Boilerplate"))), A(g);
            var y = H(g, 2);
            y.__change = [
              nM,
              o,
              l
            ], re(y, 21, i, (v) => v.url, (v, E) => {
              var b = iM(), T = {}, M = L(b, !0);
              A(b), P(() => {
                T !== (T = C(E).url) && (b.value = (b.__value = C(E).url) == null ? "" : C(E).url), z(M, C(E).title);
              }), V(v, b);
            }), A(y);
            var x = H(y, 2), k = L(x, !0);
            A(x), A(_);
            var S = H(_, 2), w = L(S);
            {
              var O = (v) => {
                var E = rM(), b = It(E), T = L(b, !0);
                P(() => z(T, I("Text"))), A(b);
                var M = H(b, 2), F = L(M);
                je(F, () => e.sanitize(C(o))), A(M), V(v, E);
              };
              de(w, (v) => {
                C(o) && v(O);
              });
            }
            A(S), P(() => z(k, C(a))), V(f, p);
          },
          footer: (f, h) => {
            var p = oM(), _ = It(p);
            P(() => Ot(_, "title", I("Insert (s)"))), _.__click = () => {
              r()(C(o)), c();
            };
            var g = L(_, !0);
            P(() => z(g, I("Insert"))), A(_);
            var m = H(_, 2);
            P(() => Ot(m, "title", I("Cancel (x)"))), m.__click = c;
            var y = L(m, !0);
            P(() => z(y, I("Cancel"))), A(m), V(f, p);
          }
        }
      });
    },
    $$slots: { default: !0 }
  }), wt({
    get boilerplates() {
      return i();
    },
    set boilerplates(u) {
      i(u), nt();
    },
    get onSubmit() {
      return r();
    },
    set onSubmit(u) {
      r(u), nt();
    },
    get onClose() {
      return s();
    },
    set onClose(u) {
      s(u), nt();
    }
  });
}
Ce(["change", "click"]);
vt(V_, { boilerplates: {}, onSubmit: {}, onClose: {} }, [], [], !0);
var aM = Z("<button><!></button>");
function j_(n, t) {
  xt(t, !0);
  const e = t.$$host;
  e.addEventListener("click", () => {
    const s = Te(V_, {
      target: document.body,
      props: {
        boilerplates: e.options.boilerplates,
        onSubmit: (o) => {
          var a;
          (a = e.tiptap) == null || a.chain().focus().insertContent(o).run();
        },
        onClose: () => {
          Qt(s);
        }
      }
    });
  });
  var i = aM(), r = L(i);
  je(r, () => PO), A(i), Oe(i, (s, o) => {
    var a;
    return (a = yn) == null ? void 0 : a(s, o);
  }, () => I("Insert Boilerplate")), V(n, i), wt();
}
vt(j_, {}, [], [], !0, Qe);
const lM = {
  bold: FT,
  italic: VT,
  underline: jT,
  strike: WT,
  bulletList: KT,
  orderedList: qT,
  horizontalRule: iE,
  blockquote: GT,
  unlink: UT,
  insertHtml: rE,
  source: sE,
  undo: JT,
  redo: XT,
  removeFormat: YT,
  alignLeft: ZT,
  alignCenter: QT,
  alignRight: tE,
  indent: eE,
  outdent: nE,
  fullScreen: oE,
  // @ts-ignore
  link: v_.element,
  // @ts-ignore
  file: S_.element,
  // @ts-ignore
  image: T_.element,
  // @ts-ignore
  structure: M_.element,
  // @ts-ignore
  table: R_.element,
  // @ts-ignore
  block: I_.element,
  // @ts-ignore
  foregroundColor: P_.element,
  // @ts-ignore
  backgroundColor: D_.element,
  // @ts-ignore
  boilerplate: j_.element,
  // for context toolbar
  // @ts-ignore
  previewLink: x_.element,
  // @ts-ignore
  editLink: k_.element,
  // @ts-ignore
  deleteImage: E_.element,
  // @ts-ignore
  editImage: O_.element
}, cM = {
  paragraph: "p",
  heading: "h1",
  bulletList: "ul",
  orderedList: "ol",
  listItem: "li",
  blockquote: "blockquote",
  horizontalRule: "hr",
  table: "table",
  tableRow: "tr",
  tableCell: "td",
  tableHeader: "th",
  hardBreak: "br",
  text: "",
  textBlock: ""
}, uM = (n) => cM[n] ?? n;
class dM extends ib {
  onEditorUpdate() {
    if (!this.tiptap)
      return;
    const { selection: t } = this.tiptap.state, e = t.$head, i = [];
    for (let r = 1; r <= e.depth; r++) {
      const s = e.node(r);
      let o = uM(s.type.name);
      if (!o)
        continue;
      const a = s.attrs.textAlign;
      a && (o += `[align=${a}]`), i.push(o);
    }
    this.shadowRoot.textContent = i.join(" > ");
  }
}
const fM = {
  path: dM
}, W_ = document.createElement("style");
W_.textContent = rb;
const co = (n) => class extends g_(n) {
  constructor() {
    super(...arguments);
    nn(this, "content");
  }
  connectedCallback() {
    super.connectedCallback(), this.shadowRoot.appendChild(W_.cloneNode(!0));
  }
  onEditorSetPasteContent(e) {
    this.content = e;
  }
  isEditorItemAvailable() {
    return !0;
  }
  insertContent(e) {
    return Rr.prototype.insertContent.bind(this)(e);
  }
  onEditorPaste() {
  }
};
function hM(n, t) {
  C(t).every((i) => i.checked) ? C(t).forEach((i) => i.checked = !1) : C(t).forEach((i) => i.checked = !0);
}
function pM(n, t) {
  C(t).every((i) => i.checked) ? C(t).forEach((i) => i.checked = !1) : C(t).forEach((i) => i.checked = !0);
}
var mM = Z('<li><label><input type="checkbox"> </label></li>'), gM = Z('<h4 class="svelte-ecdfcs"> </h4> <div class="help-text svelte-ecdfcs"> </div> <ul class="svelte-ecdfcs"></ul> <div class="mt-checkbox-all svelte-ecdfcs"><label><input type="checkbox" name="all"> </label></div>', 1), _M = Z('<li><label><input type="checkbox"> </label></li>'), bM = Z('<h4 class="svelte-ecdfcs"> </h4> <div class="help-text svelte-ecdfcs"> </div> <ul class="svelte-ecdfcs"></ul> <div class="mt-checkbox-all svelte-ecdfcs"><label><input type="checkbox" name="all"> </label></div>', 1), yM = Z('<div class="html-modal-modal-content svelte-ecdfcs"><!> <!></div>'), vM = Z('<button type="button" class="action primary button btn btn-primary"> </button> <button type="button" class="cancel action button mt-close-dialog btn btn-default"> </button>', 1);
const xM = {
  hash: "svelte-ecdfcs",
  code: ".mt-checkbox-all.svelte-ecdfcs {margin-top:0.5rem;}.help-text.svelte-ecdfcs {margin-bottom:0.5rem;font-size:0.8rem;color:#666;}h4.svelte-ecdfcs {font-weight:bold;margin-top:1.5rem;}h4.svelte-ecdfcs:first-child {margin-top:0;}ul.svelte-ecdfcs {list-style:none;padding:0;}.html-modal-modal-content.svelte-ecdfcs {overflow-y:auto;max-height:580px;}"
};
function U_(n, t) {
  xt(t, !0), De(n, xM);
  let e = et(t, "htmlDocument", 7), i = et(t, "onSubmit", 7), r = et(t, "onClose", 7);
  const s = lt(pt([]));
  e().body.querySelectorAll("*").forEach((c) => {
    const u = c.dataset;
    for (const d in u)
      C(s).find((f) => f.name === d) || C(s).push({ name: d, checked: !1 });
  });
  const o = lt(pt([]));
  e().body.querySelectorAll("[style]").forEach((c) => {
    const u = c.getAttribute("style");
    if (!u) return;
    u.split(";").map((f) => f.trim()).filter((f) => f).map((f) => {
      const [h] = f.split(":");
      return h.trim();
    }).forEach((f) => {
      C(o).find((h) => h.name === f) || C(o).push({ name: f, checked: !0 });
    });
  });
  let a, l;
  return Xt(
    xn(n, {
      $$events: {
        close(...c) {
          var u;
          (u = r()) == null || u.apply(this, c);
        }
      },
      children: (c, u) => {
        wn(c, {
          get close() {
            return l;
          },
          set close(d) {
            l = d;
          },
          $$slots: {
            title: (d, f) => {
              var h = bn();
              P(() => z(h, I("Paste as HTML"))), V(d, h);
            },
            body: (d, f) => {
              var h = yM(), p = L(h);
              {
                var _ = (y) => {
                  var x = gM(), k = It(x), S = L(k, !0);
                  P(() => z(S, I("Data attributes"))), A(k);
                  var w = H(k, 2), O = L(w, !0);
                  P(() => z(O, I("Select the data attributes you want to keep in the pasted HTML. Unselected attributes will be removed."))), A(w);
                  var v = H(w, 2);
                  re(v, 21, () => C(s), (F) => F.name, (F, D, U) => {
                    var q = mM(), Q = L(q), ut = L(Q);
                    se(ut);
                    var rt = H(ut);
                    A(Q), A(q), P(() => {
                      Ot(ut, "name", C(D).name), z(rt, ` data-${C(D).name ?? ""}`);
                    }), wh(ut, () => C(D).checked, (kt) => C(D).checked = kt), V(F, q);
                  }), A(v);
                  var E = H(v, 2), b = L(E), T = L(b);
                  se(T), T.__change = [pM, s], P(() => bh(T, C(s).every((F) => F.checked)));
                  var M = H(T);
                  P(() => z(M, ` ${I("Select All") ?? ""}`)), A(b), A(E), V(y, x);
                };
                de(p, (y) => {
                  C(s).length > 0 && y(_);
                });
              }
              var g = H(p, 2);
              {
                var m = (y) => {
                  var x = bM(), k = It(x), S = L(k, !0);
                  P(() => z(S, I("Properties for style attributes"))), A(k);
                  var w = H(k, 2), O = L(w, !0);
                  P(() => z(O, I("Select the properties you want to keep in the pasted HTML. Unselected properties will be removed."))), A(w);
                  var v = H(w, 2);
                  re(v, 21, () => C(o), (F) => F.name, (F, D, U) => {
                    var q = _M(), Q = L(q), ut = L(Q);
                    se(ut);
                    var rt = H(ut);
                    A(Q), A(q), P(() => {
                      Ot(ut, "name", C(D).name), z(rt, ` ${C(D).name ?? ""}`);
                    }), wh(ut, () => C(D).checked, (kt) => C(D).checked = kt), V(F, q);
                  }), A(v);
                  var E = H(v, 2), b = L(E), T = L(b);
                  se(T), T.__change = [hM, o], P(() => bh(T, C(o).every((F) => F.checked)));
                  var M = H(T);
                  P(() => z(M, ` ${I("Select All") ?? ""}`)), A(b), A(E), V(y, x);
                };
                de(g, (y) => {
                  C(o).length > 0 && y(m);
                });
              }
              A(h), V(d, h);
            },
            footer: (d, f) => {
              var h = vM(), p = It(h);
              P(() => Ot(p, "title", I("Insert (s)"))), p.__click = () => {
                const y = C(o).filter((S) => !S.checked).map((S) => S.name), x = e().cloneNode(!0);
                x.querySelectorAll("[style]").forEach((S) => {
                  const w = S.style;
                  for (let O = w.length - 1; O >= 0; O--) {
                    const v = w[O];
                    y.includes(v) && w.removeProperty(v);
                  }
                });
                const k = C(s).filter((S) => !S.checked).map((S) => S.name);
                x.body.querySelectorAll("*").forEach((S) => {
                  const w = S.dataset;
                  for (const O in w)
                    k.includes(O) && delete S.dataset[O];
                }), i()(x), l();
              };
              var _ = L(p, !0);
              P(() => z(_, I("Insert"))), A(p);
              var g = H(p, 2);
              P(() => Ot(g, "title", I("Cancel (x)"))), g.__click = l;
              var m = L(g, !0);
              P(() => z(m, I("Cancel"))), A(g), V(d, h);
            }
          }
        });
      },
      $$slots: { default: !0 }
    }),
    (c) => a = c,
    () => a
  ), wt({
    get htmlDocument() {
      return e();
    },
    set htmlDocument(c) {
      e(c), nt();
    },
    get onSubmit() {
      return i();
    },
    set onSubmit(c) {
      i(c), nt();
    },
    get onClose() {
      return r();
    },
    set onClose(c) {
      r(c), nt();
    }
  });
}
Ce(["change", "click"]);
vt(U_, { htmlDocument: {}, onSubmit: {}, onClose: {} }, [], [], !0);
const wM = (n) => class extends co(n) {
  isEditorItemAvailable() {
    var t;
    return !!((t = this.content) != null && t.htmlDocument);
  }
};
var kM = Z("<button> </button>");
function K_(n, t) {
  xt(t, !0);
  const e = t.$$host;
  e.addEventListener("click", o);
  const { tiptap: i } = e;
  let r = null;
  const s = (u = null) => {
    var d;
    i && (u ?? (u = (d = e.content) == null ? void 0 : d.htmlDocument), e.insertContent(gr((u == null ? void 0 : u.body.innerHTML) ?? "")), a());
  };
  e.onEditorPaste = s;
  function o(u) {
    i && (u.stopPropagation(), r ? a() : r = Te(U_, {
      target: document.body,
      props: {
        htmlDocument: e.content.htmlDocument,
        onSubmit: s,
        onClose: () => {
          a();
        }
      }
    }));
  }
  function a() {
    r && (Qt(r), r = null);
  }
  $t(() => a);
  var l = kM(), c = L(l, !0);
  P(() => z(c, `${I("Paste as HTML")}...`)), A(l), V(n, l), wt();
}
vt(K_, {}, [], [], !0, wM);
const SM = (n) => class extends co(n) {
  isEditorItemAvailable() {
    var t;
    return /^https?:\/\/[^\s]+(\s*)?$/.test(((t = this.content) == null ? void 0 : t.plainText) ?? "");
  }
};
var CM = Z("<button> </button>");
function q_(n, t) {
  xt(t, !0);
  const e = t.$$host;
  e.addEventListener("click", o);
  const { tiptap: i } = e;
  let r = null;
  const s = (u = void 0) => {
    const d = e.content;
    if (!d || !i)
      return;
    u ?? (u = {
      url: d.plainText,
      text: d.plainText,
      title: "",
      target: "_self"
    });
    const f = document.createElement("a");
    f.href = u.url, u.title && (f.title = u.title), f.target = u.target, f.textContent = u.text, e.insertContent(f.outerHTML), a();
  };
  e.onEditorPaste = s;
  function o(u) {
    i && (u.stopPropagation(), r ? a() : r = Te(rd, {
      target: document.body,
      props: {
        linkData: {
          url: e.content.plainText,
          text: e.content.plainText,
          title: "",
          target: "_self"
        },
        onSubmit: s,
        onClose: () => {
          a();
        }
      }
    }));
  }
  function a() {
    r && (Qt(r), r = null);
  }
  $t(() => a);
  var l = CM(), c = L(l, !0);
  P(() => z(c, I("Paste as link"))), A(l), V(n, l), wt();
}
vt(q_, {}, [], [], !0, SM);
var TM = Z('<div class="form-group mb-3"><label for="embed-url" class="form-label"> </label> <input type="url" id="embed-url" class="form-control"></div> <div class="form-group mb-3"><label for="embed-maxwidth" class="form-label"> </label> <input type="number" id="embed-maxwidth" class="form-control"></div> <div class="form-group mb-3"><label for="embed-maxheight" class="form-label"> </label> <input type="number" id="embed-maxheight" class="form-control"></div>', 1), EM = Z('<button type="button" class="action primary button btn btn-primary"> </button> <button type="button" class="cancel action button mt-close-dialog btn btn-default"> </button>', 1);
function G_(n, t) {
  xt(t, !0);
  let e = et(t, "embedData", 7), i = et(t, "onSubmit", 7), r = et(t, "onClose", 7), s = lt(pt(e().url)), o = lt(pt(e().maxwidth)), a = lt(pt(e().maxheight)), l;
  $t(() => {
    l == null || l.focus();
  });
  let c, u;
  return Xt(
    xn(n, {
      $$events: {
        close(...d) {
          var f;
          (f = r()) == null || f.apply(this, d);
        }
      },
      children: (d, f) => {
        wn(d, {
          get close() {
            return u;
          },
          set close(h) {
            u = h;
          },
          $$slots: {
            title: (h, p) => {
              var _ = bn();
              P(() => z(_, I("oEmbed"))), V(h, _);
            },
            body: (h, p) => {
              var _ = TM(), g = It(_), m = L(g), y = L(m, !0);
              P(() => z(y, I("URL"))), A(m);
              var x = H(m, 2);
              se(x), Xt(x, (M) => l = M, () => l), A(g);
              var k = H(g, 2), S = L(k), w = L(S, !0);
              P(() => z(w, I("Width"))), A(S);
              var O = H(S, 2);
              se(O), A(k);
              var v = H(k, 2), E = L(v), b = L(E, !0);
              P(() => z(b, I("Height"))), A(E);
              var T = H(E, 2);
              se(T), A(v), ye(x, () => C(s), (M) => K(s, M)), ye(O, () => C(o), (M) => K(o, M)), ye(T, () => C(a), (M) => K(a, M)), V(h, _);
            },
            footer: (h, p) => {
              var _ = EM(), g = It(_);
              P(() => Ot(g, "title", I("Insert (s)"))), g.__click = () => {
                i()({
                  url: C(s),
                  maxwidth: C(o),
                  maxheight: C(a)
                }), u();
              };
              var m = L(g, !0);
              P(() => z(m, I("Insert"))), A(g);
              var y = H(g, 2);
              P(() => Ot(y, "title", I("Cancel (x)"))), y.__click = u;
              var x = L(y, !0);
              P(() => z(x, I("Cancel"))), A(y), V(h, _);
            }
          }
        });
      },
      $$slots: { default: !0 }
    }),
    (d) => c = d,
    () => c
  ), wt({
    get embedData() {
      return e();
    },
    set embedData(d) {
      e(d), nt();
    },
    get onSubmit() {
      return i();
    },
    set onSubmit(d) {
      i(d), nt();
    },
    get onClose() {
      return r();
    },
    set onClose(d) {
      r(d), nt();
    }
  });
}
Ce(["click"]);
vt(G_, { embedData: {}, onSubmit: {}, onClose: {} }, [], [], !0);
const OM = (n) => class extends co(n) {
  async isEditorItemAvailable() {
    var e, i;
    if (!/^https?:\/\/[^\s]+(\s*)?$/.test(((e = this.content) == null ? void 0 : e.plainText) ?? ""))
      return !1;
    const t = (i = this.content) == null ? void 0 : i.targetDomNode;
    return (t == null ? void 0 : t.tagName) === "P" && t.childNodes.length === 0 ? Rr.Priority.High : Rr.Priority.Default;
  }
};
var MM = Z("<button> </button>");
function J_(n, t) {
  xt(t, !0);
  const e = t.$$host;
  e.addEventListener("click", a);
  const { editor: i, tiptap: r } = e;
  let s = null;
  const o = async (d = void 0) => {
    var p, _;
    const f = e.content;
    if (!f || !r)
      return;
    d ?? (d = {
      url: f.plainText,
      maxwidth: 0,
      maxheight: 0
    });
    const h = await r.commands.getEmbedObject(d).catch(() => ({ html: "", inline: void 0 }));
    if (!(h != null && h.html)) {
      i == null || i.notify({
        level: "error",
        message: I("Failed to get embed object")
      });
      return;
    }
    (p = e.content) == null || p.transaction(() => {
      r.chain().undo().focus().run(), r.commands.insertEmbedObject(h.html);
    }), (_ = e.parentElement) == null || _.dispatchEvent(new Event("paste-menu-item-applied")), l();
  };
  e.onEditorPaste = o;
  function a(d) {
    r && (d.stopPropagation(), s ? l() : s = Te(G_, {
      target: document.body,
      props: {
        embedData: { url: e.content.plainText },
        onSubmit: o,
        onClose: () => {
          l();
        }
      }
    }));
  }
  function l() {
    s && (Qt(s), s = null);
  }
  $t(() => l);
  var c = MM(), u = L(c, !0);
  P(() => z(u, I("Embed object"))), A(c), V(n, c), wt();
}
vt(J_, {}, [], [], !0, OM);
const AM = (n) => class extends co(n) {
  constructor() {
    super(...arguments);
    nn(this, "inline");
  }
  async isEditorItemAvailable() {
    var r, s, o;
    const e = ((r = this.content) == null ? void 0 : r.plainText) || "";
    if (!/^https?:\/\/[^\s]+(\s*)?$/.test(e))
      return !1;
    const i = await ((s = this.tiptap) == null ? void 0 : s.commands.getEmbedObject({ url: e, maxwidth: 0, maxheight: 0 }).catch(() => ({ html: "", inline: void 0 })));
    return i != null && i.html ? (this.inline = i == null ? void 0 : i.inline, !!this.inline) : ((o = this.editor) == null || o.notify({
      level: "error",
      message: I("Failed to get embed object")
    }), !1);
  }
};
var NM = Z("<button> </button>");
function X_(n, t) {
  xt(t, !0);
  const e = t.$$host, i = () => {
    e.inline && e.insertContent(e.inline);
  };
  e.onEditorPaste = i, e.addEventListener("click", i);
  var r = NM(), s = L(r, !0);
  P(() => z(s, I("Embed inline"))), A(r), V(n, r), wt();
}
vt(X_, {}, [], [], !0, AM);
const LM = (n) => class extends co(n) {
  isEditorItemAvailable() {
    var t, e, i;
    return (t = this.tiptap) != null && t.commands.isMarkdownConversionAvailable() && (((e = this.content) == null ? void 0 : e.plainText) ?? "").split(`
`).some((r) => r.startsWith("#") || r.startsWith("```") || /^=+$/.test(r) || /^-+$/.test(r)) ? (i = this.content) != null && i.htmlDocument ? Rr.Priority.Default : Rr.Priority.High : !1;
  }
};
var RM = Z("<button> </button>");
function Y_(n, t) {
  xt(t, !0);
  const e = t.$$host, i = async () => {
    var o, a, l;
    e.insertContent(((l = await ((a = e.tiptap) == null ? void 0 : a.commands.markdownToHtml({ content: ((o = e.content) == null ? void 0 : o.plainText) ?? "" }))) == null ? void 0 : l.content) ?? "");
  };
  e.onEditorPaste = i, e.addEventListener("click", i);
  var r = RM(), s = L(r, !0);
  P(() => z(s, I("Convert from Markdown"))), A(r), V(n, r), wt();
}
vt(Y_, {}, [], [], !0, LM);
class IM extends Rr {
  constructor() {
    super();
    const t = document.createElement("button");
    t.textContent = I("Paste as text"), this.shadowRoot.appendChild(t);
  }
  onEditorPaste() {
    var e;
    const t = document.createElement("div");
    t.textContent = ((e = this.content) == null ? void 0 : e.plainText) ?? "", this.insertContent(t.innerHTML.replace(/\n/g, "<br>"));
  }
  connectedCallback() {
    this.addEventListener("click", () => {
      this.onEditorPaste();
    });
  }
}
const PM = {
  text: IM,
  // @ts-ignore
  html: K_.element,
  // @ts-ignore
  link: q_.element,
  // @ts-ignore
  embed: J_.element,
  // @ts-ignore
  embedInline: X_.element,
  // @ts-ignore
  markdown: Y_.element
}, DM = `<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="icon icon-tabler icons-tabler-outline icon-tabler-h-1">
    <path stroke="none" d="M0 0h24v24H0z" fill="none"/>
    <path d="M19 18v-8l-2 2" />
    <path d="M4 6v12" />
    <path d="M12 6v12" />
    <path d="M11 18h2" />
    <path d="M3 18h2" />
    <path d="M4 12h8" />
    <path d="M3 6h2" />
    <path d="M11 6h2" />
</svg>
`, $M = `<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="icon icon-tabler icons-tabler-outline icon-tabler-h-2">
    <path stroke="none" d="M0 0h24v24H0z" fill="none"/>
    <path d="M17 12a2 2 0 1 1 4 0c0 .591 -.417 1.318 -.816 1.858l-3.184 4.143l4 0" />
    <path d="M4 6v12" />
    <path d="M12 6v12" />
    <path d="M11 18h2" />
    <path d="M3 18h2" />
    <path d="M4 12h8" />
    <path d="M3 6h2" />
    <path d="M11 6h2" />
</svg>
`, BM = `<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="icon icon-tabler icons-tabler-outline icon-tabler-h-3">
    <path stroke="none" d="M0 0h24v24H0z" fill="none"/>
    <path d="M19 14a2 2 0 1 0 -2 -2" />
    <path d="M17 16a2 2 0 1 0 2 -2" />
    <path d="M4 6v12" />
    <path d="M12 6v12" />
    <path d="M11 18h2" />
    <path d="M3 18h2" />
    <path d="M4 12h8" />
    <path d="M3 6h2" />
    <path d="M11 6h2" />
</svg>
`, zM = `<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="icon icon-tabler icons-tabler-outline icon-tabler-h-4">
    <path stroke="none" d="M0 0h24v24H0z" fill="none"/>
    <path d="M20 18v-8l-4 6h5" />
    <path d="M4 6v12" />
    <path d="M12 6v12" />
    <path d="M11 18h2" />
    <path d="M3 18h2" />
    <path d="M4 12h8" />
    <path d="M3 6h2" />
    <path d="M11 6h2" />
</svg>
`, HM = `<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="icon icon-tabler icons-tabler-outline icon-tabler-h-5">
    <path stroke="none" d="M0 0h24v24H0z" fill="none"/>
    <path d="M17 18h2a2 2 0 1 0 0 -4h-2v-4h4" />
    <path d="M4 6v12" />
    <path d="M12 6v12" />
    <path d="M11 18h2" />
    <path d="M3 18h2" />
    <path d="M4 12h8" />
    <path d="M3 6h2" />
    <path d="M11 6h2" />
</svg>
`, FM = `<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="icon icon-tabler icons-tabler-outline icon-tabler-h-6">
    <path stroke="none" d="M0 0h24v24H0z" fill="none"/>
    <path d="M19 14a2 2 0 1 0 0 4a2 2 0 0 0 0 -4z" />
    <path d="M21 12a2 2 0 1 0 -4 0v4" />
    <path d="M4 6v12" />
    <path d="M12 6v12" />
    <path d="M11 18h2" />
    <path d="M3 18h2" />
    <path d="M4 12h8" />
    <path d="M3 6h2" />
    <path d="M11 6h2" />
</svg>
`, VM = {
  1: DM,
  2: $M,
  3: BM,
  4: zM,
  5: HM,
  6: FM
};
class jM extends sb {
  connectedCallback() {
    const t = this.dataset.mtRichTextEditorPanelItemVariant;
    if (!t)
      return;
    this.aliases = [`h${t}`, `heading${t}`];
    const e = document.createElement("button"), i = document.createElement("span");
    i.classList.add("icon"), i.innerHTML = VM[t];
    const r = document.createElement("span");
    r.textContent = I(`Heading ${t}`), e.appendChild(i), e.appendChild(r), this.shadowRoot.appendChild(e), this.addEventListener("click", () => {
      this.insertContent(`<h${t}></h${t}>`);
    });
  }
}
const WM = {
  heading: jM
}, UM = {
  toolbar: lM,
  statusbar: fM,
  "paste-menu": PM,
  "quick-action": WM
}, Kr = (n, t) => {
  const e = t.toLowerCase();
  if (e.includes("-") && window.customElements.get(e))
    return e;
  const i = `mt-rich-text-editor-${n}-item-${e}`;
  let r = window.customElements.get(i);
  if (!r) {
    if (r = UM[n][t], !r) {
      console.error(`Item for ${t} is not found`);
      return;
    }
    window.customElements.define(i, r);
  }
  return i;
};
var KM = Z("<div></div>"), qM = Z('<div class="toolbar-side svelte-r5ystd"></div>'), GM = Z('<div class="toolbar-row svelte-r5ystd"></div>'), JM = Z("<div></div>");
const XM = {
  hash: "svelte-r5ystd",
  code: `.toolbar.svelte-r5ystd {display:flex;flex-wrap:wrap;flex-direction:column;}.toolbar-row.svelte-r5ystd {display:flex;justify-content:space-between;border-bottom:1px solid #ccc;}.toolbar-row.svelte-r5ystd:last-child {border-bottom:none;}.toolbar-side.svelte-r5ystd {display:flex;flex-wrap:wrap;}.toolbar-group.svelte-r5ystd {padding:0 4px;}.toolbar-group.svelte-r5ystd:not(:last-child) {border-right:1px solid #ccc;white-space:nowrap;}.toolbar-item.svelte-r5ystd {display:inline-flex;align-items:center;justify-content:center;margin:2px 0 3px;height:34px;}.toolbar-item.is-active.svelte-r5ystd {background:#dee0e2;}

  /**
   * Inline
   */.toolbar--inline.svelte-r5ystd {position:absolute;display:none;z-index:1;border:1px solid #ccc;border-radius:4px;background:#fff;}.toolbar--inline.svelte-r5ystd::before {content:"";position:absolute;z-index:-1;top:50%;left:-8px;width:14px;height:14px;background:#fff;transform:translateY(-50%) rotate(45deg);border-left:1px solid #ccc;border-bottom:1px solid #ccc;box-shadow:-1px 1px 2px rgba(0, 0, 0, 0.03);}.toolbar--inline.svelte-r5ystd:not([data-is-new-line])::before {content:"";position:absolute;z-index:-1;top:-8px;left:20px;width:14px;height:14px;background:#fff;transform:translateX(-50%) rotate(45deg);border-left:1px solid #ccc;border-top:1px solid #ccc;border-bottom:none;box-shadow:-1px -1px 2px rgba(0, 0, 0, 0.03);}`
};
function Z_(n, t) {
  xt(t, !0), De(n, XM);
  const e = et(t, "editor", 7), i = et(t, "toolbar", 7), r = et(t, "options", 7), s = et(t, "inline", 7);
  let o = null;
  const a = {}, l = i().map((f) => f.map((h) => (h || []).map((p) => (p || []).map((_) => ({
    name: _,
    elementName: Kr("toolbar", _),
    options: r()[_] ?? {}
  })).filter((_) => _.elementName && _.options !== !1)).filter((p) => p.length > 0))).filter((f) => f.length > 0);
  function c() {
    for (const f in a)
      "onEditorUpdate" in a[f] && a[f].onEditorUpdate();
  }
  if (e().tiptap.on("selectionUpdate", c), e().tiptap.on("update", c), $t(() => {
    c();
  }), s()) {
    const f = r_(
      () => {
        if (!o)
          return;
        let h = !1, p = !1;
        if (e().tiptap.state.selection.empty) {
          const y = e().tiptap.state.selection.$head.parent;
          h = y.type.name === "paragraph" && y.content.size === 0, p = !0;
        } else
          h = !0;
        if (!h) {
          o.style.display = "", o.style.transition = "";
          return;
        }
        o.style.display === "" && (o.style.display = "block", setTimeout(
          () => {
            o && (o.style.transition = "left 0.2s ease-in-out");
          },
          100
        ));
        const _ = e().tiptap.view.dom.getBoundingClientRect(), { selection: g } = e().tiptap.view.state, m = e().tiptap.view.coordsAtPos(g.$to.pos);
        if (p)
          o.style.top = `${m.bottom - _.top - 30}px`, o.style.left = `${m.left - _.left + 20}px`, o.setAttribute("data-is-new-line", "true");
        else {
          const y = e().tiptap.view.coordsAtPos(g.$from.pos), x = y.left < m.left ? y : m;
          o.style.top = `${x.bottom - _.top + 15}px`, o.style.left = `${x.left - _.left}px`, o.removeAttribute("data-is-new-line");
        }
      },
      50
    );
    e().tiptap.on("selectionUpdate", f), f();
  }
  function u(f, h) {
    return a[h] = f, "onEditorInit" in f && f.onEditorInit(e(), (r()[h] || void 0) ?? {}), {
      destroy() {
        delete a[h];
      }
    };
  }
  var d = JM();
  return re(d, 21, () => l, gn, (f, h) => {
    var p = GM();
    re(p, 21, () => C(h), gn, (_, g) => {
      var m = qM();
      re(m, 21, () => C(g), gn, (y, x) => {
        var k = KM();
        re(k, 21, () => C(x), gn, (S, w) => {
          var O = Di(), v = It(O);
          oo(v, () => C(w).elementName, !1, (E, b) => {
            Oe(E, (T, M) => u == null ? void 0 : u(T, M), () => C(w).name), ao(E, null, { class: "toolbar-item" }, "svelte-r5ystd", E.namespaceURI === Vr, E.nodeName.includes("-"));
          }), V(S, O);
        }), A(k), P(() => Gi(k, `${`toolbar-group ${C(x).length === 1 ? `toolbar-group--${C(x)[0].name}` : ""}` ?? ""} svelte-r5ystd`)), V(y, k);
      }), A(m), V(_, m);
    }), A(p), V(f, p);
  }), A(d), Xt(d, (f) => o = f, () => o), P(() => Gi(d, `toolbar ${(s() ? "toolbar--inline" : "") ?? ""} svelte-r5ystd`)), V(n, d), wt({
    get editor() {
      return e();
    },
    set editor(f) {
      e(f), nt();
    },
    get toolbar() {
      return i();
    },
    set toolbar(f) {
      i(f), nt();
    },
    get options() {
      return r();
    },
    set options(f) {
      r(f), nt();
    },
    get inline() {
      return s();
    },
    set inline(f) {
      s(f), nt();
    }
  });
}
vt(
  Z_,
  {
    editor: {},
    toolbar: {},
    options: {},
    inline: {}
  },
  [],
  [],
  !0
);
var Cr;
class YM {
  constructor({ target: t, editor: e, toolbar: i, options: r, inline: s }) {
    Rt(this, Cr);
    !i || i.length === 0 || Nt(this, Cr, Te(Z_, {
      target: t,
      props: {
        editor: e,
        toolbar: i,
        inline: s,
        options: r
      }
    }));
  }
  destroy() {
    J(this, Cr) && Qt(J(this, Cr));
  }
}
Cr = new WeakMap();
var ZM = Z('<div class="statusbar-side svelte-1axc334"></div>'), QM = Z('<div class="statusbar svelte-1axc334"></div>');
const tA = {
  hash: "svelte-1axc334",
  code: ".statusbar.svelte-1axc334 {display:flex;flex-wrap:wrap;justify-content:space-between;}.statusbar-side.svelte-1axc334 {display:flex;flex-wrap:wrap;}.statusbar-item.svelte-1axc334 {display:inline-flex;align-items:center;margin:2px 0 3px;border:none;background:none;border-radius:4px;padding:1px 5px;}"
};
function Q_(n, t) {
  xt(t, !0), De(n, tA);
  const e = et(t, "editor", 7), i = et(t, "statusbar", 7), r = et(t, "options", 7), s = {}, o = i().map((u) => (u || []).map((d) => ({
    name: d,
    elementName: Kr("statusbar", d),
    options: r()[d] ?? {}
  })).filter((d) => d.elementName && d.options !== !1));
  function a() {
    for (const u in s)
      "onEditorUpdate" in s[u] && s[u].onEditorUpdate();
  }
  e().tiptap.on("selectionUpdate", a), e().tiptap.on("update", a), $t(() => {
    a();
  });
  function l(u, d) {
    return s[d] = u, "onEditorInit" in u && u.onEditorInit(e(), r()[d] ?? {}), {
      destroy() {
        delete s[d];
      }
    };
  }
  var c = QM();
  return re(c, 21, () => o, gn, (u, d) => {
    var f = ZM();
    re(f, 21, () => C(d), gn, (h, p) => {
      var _ = Di(), g = It(_);
      oo(g, () => C(p).elementName, !1, (m, y) => {
        Oe(m, (x, k) => l == null ? void 0 : l(x, k), () => C(p).name), ao(m, null, { class: "statusbar-item" }, "svelte-1axc334", m.namespaceURI === Vr, m.nodeName.includes("-"));
      }), V(h, _);
    }), A(f), V(u, f);
  }), A(c), V(n, c), wt({
    get editor() {
      return e();
    },
    set editor(u) {
      e(u), nt();
    },
    get statusbar() {
      return i();
    },
    set statusbar(u) {
      i(u), nt();
    },
    get options() {
      return r();
    },
    set options(u) {
      r(u), nt();
    }
  });
}
vt(Q_, { editor: {}, statusbar: {}, options: {} }, [], [], !0);
var Tr;
class eA {
  constructor({ target: t, editor: e, statusbar: i, options: r, inline: s }) {
    Rt(this, Tr);
    s || i.length === 0 || Nt(this, Tr, Te(Q_, {
      target: t,
      props: {
        editor: e,
        statusbar: i,
        inline: s,
        options: r
      }
    }));
  }
  destroy() {
    J(this, Tr) && Qt(J(this, Tr));
  }
}
Tr = new WeakMap();
const nA = `<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="icon icon-tabler icons-tabler-outline icon-tabler-clipboard">
    <path stroke="none" d="M0 0h24v24H0z" fill="none"/>
    <path d="M9 5h-2a2 2 0 0 0 -2 2v12a2 2 0 0 0 2 2h10a2 2 0 0 0 2 -2v-12a2 2 0 0 0 -2 -2h-2" />
    <path d="M9 3m0 2a2 2 0 0 1 2 -2h2a2 2 0 0 1 2 2v0a2 2 0 0 1 -2 2h-2a2 2 0 0 1 -2 -2z" />
</svg>
`;
var iA = (n, t) => K(t, !C(t)), rA = Z('<div class="paste-menu-item-container svelte-19f323f"><!></div>'), sA = Z('<div class="paste-menu svelte-19f323f"><button type="button"><!></button> <div class="paste-menu-list svelte-19f323f"></div></div>');
const oA = {
  hash: "svelte-19f323f",
  code: '.paste-menu.svelte-19f323f {position:absolute;z-index:1;}.paste-menu-icon.svelte-19f323f {background:none;border:1px solid #ccc;border-radius:4px;padding:2px;margin:0;cursor:pointer;display:flex;align-items:center;justify-content:center;background:#fff;}.paste-menu-icon.svelte-19f323f:after {content:"";display:block;margin:0 2px;width:6px;height:6px;border-right:1px solid #000;border-bottom:1px solid #000;transform:rotate(45deg);margin-top:-3px;}.paste-menu-icon.svelte-19f323f:hover {background:#f0f0f0;}.paste-menu-icon.is-active.svelte-19f323f {border-bottom:0;border-bottom-left-radius:0;border-bottom-right-radius:0;position:relative;z-index:1;background:#fff;}.paste-menu.svelte-19f323f {display:flex;flex-wrap:wrap;flex-direction:column;}.paste-menu-list.svelte-19f323f {display:flex;flex-wrap:wrap;border:1px solid #ccc;border-radius:4px;border-top-left-radius:0;margin-top:-1px;background:#fff;}.paste-menu-item-container.svelte-19f323f {position:relative;}.paste-menu-item-container.is-applied.svelte-19f323f::before {content:"✔";position:absolute;left:10px;top:50%;transform:translateY(-50%);}'
};
function t0(n, t) {
  xt(t, !0), De(n, oA);
  function e(b) {
    const T = b.getData("text/plain") || b.getData("Text");
    if (T)
      return T;
    const M = b.getData("text/uri-list");
    return M ? M.replace(/\r?\n/g, " ") : void 0;
  }
  const i = et(t, "editor", 7), r = et(t, "onPaste", 7), s = et(t, "pasteMenu", 7), o = et(t, "options", 7), a = et(t, "setIsPasting", 7), l = {}, c = s().map((b) => ({
    name: b,
    elementName: Kr("paste-menu", b),
    options: o()[b] ?? {}
  })).filter((b) => b.elementName && b.options !== !1);
  let u = lt(!1), d = lt(!1), f = !1, h = lt(0), p = lt(0), _ = null;
  const g = lt(pt({}));
  $t(() => {
    a()(C(u));
  }), i().tiptap.on("update", () => {
    f || K(u, !1);
  });
  const m = (b, T = !1) => {
    const M = b.dom.getBoundingClientRect(), { selection: F } = b.state, D = F.$to.pos, U = b.nodeDOM(F.$from.pos - 2);
    if (!U) {
      const Q = b.coordsAtPos(D), ut = Q.bottom - M.top;
      (C(h) < ut || C(h) - ut > 100) && K(h, ut);
      const rt = Q.left - M.left;
      C(p) !== 0 && C(p) > rt && K(p, rt);
      return;
    }
    const q = (Q = void 0) => {
      if (!U.parentElement) {
        Q == null || Q.disconnect();
        return;
      }
      const ut = U.getBoundingClientRect(), rt = ut.bottom - M.top, kt = rt > M.height - 20 ? M.height - 20 : rt;
      (T || C(h) < kt || C(h) - kt > 100) && K(h, pt(kt));
      const st = ut.left - M.left;
      (T || C(p) > st) && K(p, st);
    };
    if (q(), !T) {
      const Q = new ResizeObserver(() => {
        q(Q);
      });
      Q.observe(U), setTimeout(
        () => {
          Q.disconnect();
        },
        1e4
      );
    }
  }, y = (b, T = !1) => {
    try {
      m(b, T);
    } catch {
    }
  };
  i().tiptap.view.dom.addEventListener("scroll", () => {
    C(u) && y(i().tiptap.view, !0);
  });
  let x = lt("");
  r()((b, T) => {
    var Q, ut;
    i().tiptap.commands.undo(), i().tiptap.commands.redo();
    const M = (ut = (Q = b.domAtPos(i().tiptap.state.selection.from)) == null ? void 0 : Q.node) == null ? void 0 : ut.cloneNode(!0);
    if (M instanceof HTMLElement && M.querySelectorAll("br.ProseMirror-trailingBreak").forEach((rt) => {
      rt.remove();
    }), !T.clipboardData)
      return !1;
    const F = T.clipboardData, D = e(F), U = F.getData("text/html");
    let q = null;
    return U && (q = new DOMParser().parseFromString(U, "text/html")), (async () => {
      K(h, 0), K(p, pt(D != null && D.includes(`
`) ? 0 : 9999));
      const rt = {};
      c.forEach(({ name: st }) => {
        var ht;
        const Pt = l[st];
        "onEditorSetPasteContent" in Pt && ((ht = Pt.onEditorSetPasteContent) == null || ht.call(Pt, {
          plainText: D ?? (q == null ? void 0 : q.body.innerText) ?? "",
          htmlDocument: q,
          targetDomNode: M,
          clipboardData: F,
          transaction: async (Yt) => {
            f = !0;
            try {
              await Yt();
            } finally {
              f = !1, y(b);
            }
          }
        })), "isEditorItemAvailable" in Pt && (rt[st] = Pt.isEditorItemAvailable());
      }), await Promise.all(Object.values(rt));
      let kt = 0;
      K(x, "");
      for (const { name: st } of c) {
        const Pt = await rt[st];
        C(g)[st] = Pt === !0 ? 1 : Pt === !1 ? 0 : Pt, C(g)[st] > kt && (kt = C(g)[st], K(x, pt(st)));
      }
      if (C(x)) {
        const st = l[C(x)];
        "onEditorPaste" in st && st.onEditorPaste();
      }
      setTimeout(() => {
        Object.values(C(g)).filter(Boolean).length <= 1 || (K(u, !0), y(b));
      });
    })(), !1;
  });
  const k = (b, T) => (l[T] = b, "onEditorInit" in b && b.onEditorInit(i(), o()[T] ?? {}), {
    destroy() {
      delete l[T];
    }
  }), S = (b) => {
    document.body.classList.contains("modal-open") || _ && b.composedPath().includes(_) || K(d, !1);
  };
  $t(() => (C(d) && document.addEventListener("click", S), () => {
    document.removeEventListener("click", S);
  }));
  var w = sA(), O = L(w);
  O.__click = [iA, d];
  var v = L(O);
  je(v, () => nA), A(O);
  var E = H(O, 2);
  return re(E, 21, () => c, (b) => b.name, (b, T) => {
    var M = rA(), F = L(M);
    oo(F, () => C(T).elementName, !1, (D, U) => {
      Oe(D, (Q, ut) => k == null ? void 0 : k(Q, ut), () => C(T).name);
      let q;
      P(() => q = ao(
        D,
        q,
        {
          class: "paste-menu-item",
          style: `display: ${C(g)[C(T).name] ? "block" : "none"};`
        },
        "svelte-19f323f",
        D.namespaceURI === Vr,
        D.nodeName.includes("-")
      ));
    }), A(M), P(() => _i(M, "is-applied", C(x) === C(T).name)), ce("paste-menu-item-applied", M, () => {
      K(x, pt(C(T).name));
    }), V(b, M);
  }), A(E), A(w), Xt(w, (b) => _ = b, () => _), P(() => {
    Ot(w, "style", `
    display: ${C(u) ? "block" : "none"};
    z-index: 1000;
    top: ${C(h)}px;
    left: ${C(p)}px;
    width: max-content;
  `), Gi(O, `${`paste-menu-icon ${C(d) ? "is-active" : ""}` ?? ""} svelte-19f323f`), Ot(E, "style", `display: ${C(d) ? "block" : "none"};`);
  }), V(n, w), wt({
    get editor() {
      return i();
    },
    set editor(b) {
      i(b), nt();
    },
    get onPaste() {
      return r();
    },
    set onPaste(b) {
      r(b), nt();
    },
    get pasteMenu() {
      return s();
    },
    set pasteMenu(b) {
      s(b), nt();
    },
    get options() {
      return o();
    },
    set options(b) {
      o(b), nt();
    },
    get setIsPasting() {
      return a();
    },
    set setIsPasting(b) {
      a(b), nt();
    }
  });
}
Ce(["click"]);
vt(
  t0,
  {
    editor: {},
    onPaste: {},
    pasteMenu: {},
    options: {},
    setIsPasting: {}
  },
  [],
  [],
  !0
);
var Er, js;
class aA {
  constructor({ target: t, editor: e, onPaste: i, pasteMenu: r, options: s }) {
    Rt(this, Er);
    Rt(this, js, !1);
    r.length !== 0 && Nt(this, Er, Te(t0, {
      target: t,
      props: {
        editor: e,
        onPaste: i,
        pasteMenu: r,
        options: s,
        setIsPasting: (o) => {
          Nt(this, js, o);
        }
      }
    }));
  }
  isPasting() {
    return J(this, js);
  }
  destroy() {
    J(this, Er) && Qt(J(this, Er));
  }
}
Er = new WeakMap(), js = new WeakMap();
var lA = Z("<div><!></div>"), cA = Z('<div class="mt-rich-text-editor-quick-action svelte-182x144"></div>');
const uA = {
  hash: "svelte-182x144",
  code: `.mt-rich-text-editor-quick-action.svelte-182x144 {position:absolute;z-index:1;border:1px solid #ccc;border-radius:4px;background:#fff;display:none;}.mt-rich-text-editor-quick-action-button.svelte-182x144 {padding:10px;display:block;&.selected,
    &:hover {background:#f0f0f0;}}`
};
function e0(n, t) {
  xt(t, !0), De(n, uA);
  const e = et(t, "editor", 7), i = et(t, "quickAction", 7), r = et(t, "options", 7), s = {}, o = i().map((g) => {
    const [m, y] = g.split(":");
    return {
      name: g,
      variant: y,
      elementName: Kr("quick-action", m),
      aliases: [y],
      options: r()[g] ?? {}
    };
  }).filter((g) => g.elementName && g.options !== !1);
  let a = lt("");
  const l = Ms(() => C(a) ? o.filter((g) => g.aliases.some((m) => m.startsWith(C(a)))) : o), c = Ms(() => C(l).length);
  let u = lt(0);
  $t(() => {
    C(c) > 0 && K(u, 0);
  });
  let d = !1, f = null;
  const h = r_(
    () => {
      var x, k;
      if (!f)
        return;
      if (d = !1, e().tiptap.state.selection.empty) {
        const S = e().tiptap.state.selection.$head.parent;
        d = S.type.name === "paragraph" && ((x = S.textContent) == null ? void 0 : x.startsWith("/")), d && K(a, pt((k = S.textContent) == null ? void 0 : k.slice(1)));
      }
      if (!d) {
        f.style.display = "", f.style.transition = "";
        return;
      }
      f.style.display === "" && (f.style.display = "block", setTimeout(
        () => {
          f && (f.style.transition = "left 0.2s ease-in-out");
        },
        100
      ));
      const g = e().tiptap.view.dom.getBoundingClientRect(), { selection: m } = e().tiptap.view.state, y = e().tiptap.view.coordsAtPos(m.$to.pos);
      f.style.top = `${y.bottom - g.top + 10}px`, f.style.left = "0px";
    },
    50
  );
  $t(() => {
    e().tiptap.on("selectionUpdate", h), h(), e().tiptap.view.dom.addEventListener(
      "keydown",
      (g) => {
        d && (g.key === "Enter" ? (g.preventDefault(), g.stopPropagation(), g.stopImmediatePropagation(), s[C(l)[C(u)].name].click()) : g.key === "ArrowDown" ? (g.preventDefault(), g.stopPropagation(), g.stopImmediatePropagation(), K(u, (C(u) + 1) % C(l).length)) : g.key === "ArrowUp" && (g.preventDefault(), g.stopPropagation(), g.stopImmediatePropagation(), K(u, (C(u) - 1 + C(l).length) % C(l).length)));
      },
      { capture: !0 }
    );
  });
  function p(g, m) {
    if (s[m] = g, "onEditorInit" in g && g.onEditorInit(e(), r()[m] ?? {}), "aliases" in g) {
      const y = o.find((x) => x.name === m);
      y && (y.aliases = g.aliases);
    }
    return {
      destroy() {
        delete s[m];
      }
    };
  }
  var _ = cA();
  return re(_, 23, () => C(l), (g) => g.name, (g, m, y) => {
    var x = lA(), k = L(x);
    oo(k, () => C(m).elementName, !1, (S, w) => {
      Oe(S, (v, E) => p == null ? void 0 : p(v, E), () => C(m).name);
      let O;
      P(() => O = ao(
        S,
        O,
        {
          "data-mt-rich-text-editor-panel-item-variant": C(m).variant
        },
        "svelte-182x144",
        S.namespaceURI === Vr,
        S.nodeName.includes("-")
      ));
    }), A(x), P(() => Gi(x, `mt-rich-text-editor-quick-action-button ${(C(y) === C(u) ? "selected" : "") ?? ""} svelte-182x144`)), V(g, x);
  }), A(_), Xt(_, (g) => f = g, () => f), V(n, _), wt({
    get editor() {
      return e();
    },
    set editor(g) {
      e(g), nt();
    },
    get quickAction() {
      return i();
    },
    set quickAction(g) {
      i(g), nt();
    },
    get options() {
      return r();
    },
    set options(g) {
      r(g), nt();
    }
  });
}
vt(e0, { editor: {}, quickAction: {}, options: {} }, [], [], !0);
var Or;
class dA {
  constructor({ target: t, editor: e, quickAction: i, options: r }) {
    Rt(this, Or);
    i.length !== 0 && Nt(this, Or, Te(e0, {
      target: t,
      props: {
        editor: e,
        quickAction: i,
        options: r
      }
    }));
  }
  destroy() {
    J(this, Or) && Qt(J(this, Or));
  }
}
Or = new WeakMap();
var fA = Z('<div class="form-group mb-3"><label for="structure-id" class="form-label"> </label> <input type="text" id="structure-id" class="form-control"></div> <div class="form-group mb-3"><label for="structure-class-name" class="form-label"> </label> <input type="text" id="structure-class-name" class="form-control"></div> <div class="form-group mb-3"><label for="structure-style" class="form-label"> </label> <input type="text" id="structure-style" class="form-control"></div>', 1), hA = Z('<button type="button" class="action primary button btn btn-primary"> </button> <button type="button" class="cancel action button mt-close-dialog btn btn-default"> </button>', 1);
function n0(n, t) {
  xt(t, !0);
  let e = et(t, "structureData", 7), i = et(t, "onSubmit", 7), r = et(t, "onClose", 7), s = lt(pt(e().id)), o = lt(pt(e().className)), a = lt(pt(e().style)), l;
  $t(() => {
    l == null || l.focus();
  });
  let c, u;
  return Xt(
    xn(n, {
      $$events: {
        close(...d) {
          var f;
          (f = r()) == null || f.apply(this, d);
        }
      },
      children: (d, f) => {
        wn(d, {
          get close() {
            return u;
          },
          set close(h) {
            u = h;
          },
          $$slots: {
            title: (h, p) => {
              var _ = bn();
              P(() => z(_, I("Edit attributes"))), V(h, _);
            },
            body: (h, p) => {
              var _ = fA(), g = It(_), m = L(g), y = L(m, !0);
              P(() => z(y, I("ID"))), A(m);
              var x = H(m, 2);
              se(x), Xt(x, (M) => l = M, () => l), A(g);
              var k = H(g, 2), S = L(k), w = L(S, !0);
              P(() => z(w, I("Class name"))), A(S);
              var O = H(S, 2);
              se(O), A(k);
              var v = H(k, 2), E = L(v), b = L(E, !0);
              P(() => z(b, I("Style"))), A(E);
              var T = H(E, 2);
              se(T), A(v), ye(x, () => C(s), (M) => K(s, M)), ye(O, () => C(o), (M) => K(o, M)), ye(T, () => C(a), (M) => K(a, M)), V(h, _);
            },
            footer: (h, p) => {
              var _ = hA(), g = It(_);
              P(() => Ot(g, "title", I("Insert (s)"))), g.__click = () => {
                i()({
                  id: C(s),
                  className: C(o),
                  style: C(a)
                }), u();
              };
              var m = L(g, !0);
              P(() => z(m, I("Insert"))), A(g);
              var y = H(g, 2);
              P(() => Ot(y, "title", I("Cancel (x)"))), y.__click = u;
              var x = L(y, !0);
              P(() => z(x, I("Cancel"))), A(y), V(h, _);
            }
          }
        });
      },
      $$slots: { default: !0 }
    }),
    (d) => c = d,
    () => c
  ), wt({
    get structureData() {
      return e();
    },
    set structureData(d) {
      e(d), nt();
    },
    get onSubmit() {
      return i();
    },
    set onSubmit(d) {
      i(d), nt();
    },
    get onClose() {
      return r();
    },
    set onClose(d) {
      r(d), nt();
    }
  });
}
Ce(["click"]);
vt(n0, { structureData: {}, onSubmit: {}, onClose: {} }, [], [], !0);
var Ue, Mr, Ai, Ni, Ke, Ws;
class pA {
  constructor(t) {
    Rt(this, Ue);
    Rt(this, Mr);
    Rt(this, Ai);
    Rt(this, Ni);
    Rt(this, Ke, null);
    Rt(this, Ws, "section, div, p, ul, ol, li, h1, h2, h3, h4, h5, h6");
    Nt(this, Ue, t), Nt(this, Mr, this.onUpdate.bind(this)), Nt(this, Ni, (e) => {
      const i = e.currentTarget;
      if (e.target !== i)
        return;
      const r = i.getBoundingClientRect();
      e.clientY - r.top > 13 || Nt(this, Ke, Te(n0, {
        target: document.body,
        props: {
          structureData: {
            id: i.id,
            className: i.className,
            style: i.style.cssText
          },
          onSubmit: (s) => {
            const o = J(this, Ue).tiptap.view.posAtDOM(i, 0), a = J(this, Ue).tiptap.state.doc.nodeAt(o - 1);
            if (!a)
              return;
            const l = { ...a.attrs.MTRichTextEditorHTMLAttributes }, c = {
              className: "class"
            };
            ["id", "className", "style"].forEach((d) => {
              l[c[d] ?? d] = s[d] || void 0;
            });
            const u = J(this, Ue).tiptap.state.tr.setNodeAttribute(
              o - 1,
              "MTRichTextEditorHTMLAttributes",
              l
            );
            J(this, Ue).tiptap.view.dispatch(u), J(this, Ke) && (Qt(J(this, Ke)), Nt(this, Ke, null));
          },
          onClose: () => {
            J(this, Ke) && (Qt(J(this, Ke)), Nt(this, Ke, null));
          }
        }
      }));
    }), Nt(this, Ai, document.createElement("style")), J(this, Ue).tiptap.view.dom.getRootNode().appendChild(J(this, Ai)), J(this, Ue).tiptap.on("update", J(this, Mr)), this.onUpdate();
  }
  onUpdate() {
    let t = "";
    const e = J(this, Ue).tiptap.view.dom.querySelectorAll(J(this, Ws));
    for (const i of e) {
      i.removeEventListener("click", J(this, Ni)), i.addEventListener("click", J(this, Ni));
      const r = `${i.tagName.toLowerCase()}${i.getAttributeNames().map((s) => s === "data-mt-rich-text-editor-id" || !["id", "class", "style"].includes(s) ? "" : `[${s}="${i.getAttribute(s)}"]`).join("")}`;
      t += `${r} {
    outline: 1px solid rgba(0, 0, 0, 0.2);
    padding: 0.5rem;
    margin: 1rem 0;
    border-radius: 0.5rem;
    position: relative;
    &:before {
      content: "${r.replace(/"/g, '\\"')}";
      position: absolute;
      top: -0.8rem;
      left: 0.5rem;
      display: block;
      background-color: #fff;
      padding: 0 0.5rem;
      font-weight: normal;
      font-size: 1rem;
      cursor: pointer;
    }
  }
      `;
    }
    J(this, Ai).textContent = t;
  }
  destroy() {
    const t = J(this, Ue).tiptap.view.dom.querySelectorAll(J(this, Ws));
    for (const e of t)
      e.removeEventListener("click", J(this, Ni));
    J(this, Ai).remove(), J(this, Ke) && (Qt(J(this, Ke)), Nt(this, Ke, null)), J(this, Ue).tiptap.off("update", J(this, Mr));
  }
}
Ue = new WeakMap(), Mr = new WeakMap(), Ai = new WeakMap(), Ni = new WeakMap(), Ke = new WeakMap(), Ws = new WeakMap();
const uc = async (n, t) => {
  for (let e of t)
    if (e) {
      if (/^blob:/.test(e))
        try {
          e = await (await fetch(e)).text();
        } catch (i) {
          console.error(i);
          continue;
        }
      else !/^https?:/.test(e) && /\.css$/i.test(e) && (e = new URL(e, window.location.href).href);
      if (/^https?:/.test(e)) {
        const i = document.createElement("link");
        i.rel = "stylesheet", i.href = e, n.appendChild(i);
      } else {
        const i = document.createElement("style");
        i.textContent = e, n.appendChild(i);
      }
    }
}, mA = `.ProseMirror {
  position: relative;
}

.ProseMirror {
  word-wrap: break-word;
  white-space: pre-wrap;
  white-space: break-spaces;
  -webkit-font-variant-ligatures: none;
  font-variant-ligatures: none;
  font-feature-settings: "liga" 0; /* the above doesn't seem to work in Edge */
}

.ProseMirror pre {
  white-space: pre-wrap;
}

.ProseMirror li {
  position: relative;
}

.ProseMirror-hideselection *::selection { background: transparent; }
.ProseMirror-hideselection *::-moz-selection { background: transparent; }
.ProseMirror-hideselection { caret-color: transparent; }

/* See https://github.com/ProseMirror/prosemirror/issues/1421#issuecomment-1759320191 */
.ProseMirror [draggable][contenteditable=false] { user-select: text }

.ProseMirror-selectednode {
  outline: 2px solid #8cf;
}

/* Make sure li selections wrap around markers */

li.ProseMirror-selectednode {
  outline: none;
}

li.ProseMirror-selectednode:after {
  content: "";
  position: absolute;
  left: -32px;
  right: -2px; top: -2px; bottom: -2px;
  border: 2px solid #8cf;
  pointer-events: none;
}

/* Protect against generic img rules */

img.ProseMirror-separator {
  display: inline !important;
  border: none !important;
  margin: 0 !important;
}
`, hp = `.tiptap{overflow:auto}.mt-rich-text-editor-editor{border:1px solid #ccc;border-radius:4px;display:flex;flex-direction:column;height:100%;position:relative;background:#fff}.mt-rich-text-editor-editor--fullscreen{position:fixed;top:-1px;left:0;width:100%;z-index:10000}.mt-rich-text-editor-content{position:relative}.mt-rich-text-editor-content-root,.mt-rich-text-editor-content-root>.tiptap{height:calc(100% - 10px)}.mt-rich-text-editor-content-root>.tiptap{padding:10px;outline:none}.mt-rich-text-editor-content-root>.tiptap:after{content:"";display:block;height:1px}.mt-rich-text-editor-editor:focus-within{outline:none}.mt-rich-text-editor-content{flex-grow:1;min-height:0}.mt-rich-text-editor-toolbar{border-bottom:1px solid #ccc}.mt-rich-text-editor-statusbar{border-top:1px solid #ccc}.mt-rich-text-editor-resize-handle{position:absolute;right:0;bottom:0;width:15px;height:15px;cursor:ns-resize;background-image:url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='15' height='15' viewBox='0 0 15 15'%3E%3Cpath d='M11 15 L15 11 M7 15 L15 7' stroke='%23666666' stroke-width='1' fill='none'/%3E%3C/svg%3E")}.mt-rich-text-editor-editor--fullscreen .mt-rich-text-editor-resize-handle{display:none}.mt-rich-text-editor-editor--inline,.mt-rich-text-editor-editor--inline .mt-rich-text-editor-content,.mt-rich-text-editor-content-root{display:flex;flex-direction:column;flex-grow:1}.tiptap{flex-grow:1}.mt-rich-text-editor-toolbar--inline,.mt-rich-text-editor-statusbar--inline{border:none}.mt-rich-text-editor-editor--inline .mt-rich-text-editor-resize-handle{display:none}`, gA = ':host{--table-border-color: #ccc;--table-header-background-color: #f0f0f0;--table-header-text-color: #333;--table-header-font-weight: bold;--table-header-text-align: left;--table-selected-cell-background-color: #f0f0f0;--table-resize-handle-background-color: #ccc}table{border-collapse:collapse;margin:0;overflow:hidden;table-layout:fixed;width:100%}table td,table th{border:1px solid var(--table-border-color);box-sizing:border-box;min-width:1em;padding:6px 8px;position:relative;vertical-align:top}:is(table td,table th)>*{margin-bottom:0}table th{background-color:var(--table-header-background-color);color:var(--table-header-text-color);font-weight:var(--table-header-font-weight);text-align:var(--table-header-text-align)}table .selectedCell:after{background:var(--table-selected-cell-background-color);content:"";left:0;right:0;top:0;bottom:0;pointer-events:none;position:absolute;z-index:2}table .column-resize-handle{background-color:var(--table-resize-handle-background-color);bottom:-2px;pointer-events:none;position:absolute;right:-2px;top:0;width:4px}.tableWrapper{margin:1.5rem 0;overflow-x:auto}.resize-cursor{cursor:col-resize}.mt-rich-text-editor-script:before{content:attr(data-mt-rich-text-editor-script-title);display:block;position:absolute;top:-13px;left:10px;background-color:#fff;padding:0 5px}.mt-rich-text-editor-script{position:relative;border:1px solid #ccc;border-radius:4px;margin-top:10px;padding:10px}.mt-rich-text-editor-script.mt-rich-text-editor-script--preview{padding:10px 0 0}', _A = 350, bA = 300, hn = Symbol("EditorEl");
var mp, Ar, qe, Nn, Li, Us, Ks, Nr, qs, ui, Fa, i0;
mp = hn;
class yA {
  constructor(t, e) {
    Rt(this, Fa);
    nn(this, "id");
    nn(this, "tiptap");
    nn(this, mp);
    nn(this, "options");
    Rt(this, Ar);
    Rt(this, qe);
    Rt(this, Nn);
    Rt(this, Li);
    Rt(this, Us);
    Rt(this, Ks);
    Rt(this, Nr);
    Rt(this, qs);
    Rt(this, ui);
    var g, m, y;
    this.id = t.id, Nt(this, Nn, t), this.options = e;
    const i = e.inline ?? !1, r = typeof e.height == "number" ? `${e.height}px` : e.height ?? `${localStorage.getItem("mt-rich-text-editor-height") ?? _A}px`;
    Nt(this, qe, document.createElement("div")), J(this, qe).className = "mt-rich-text-editor", i ? J(this, qe).style.minHeight = r : J(this, qe).style.height = r, J(this, qe).dataset.mtRichTextEditorId = t.id, (g = J(this, Nn).parentNode) == null || g.insertBefore(J(this, qe), J(this, Nn)), J(this, Nn).style.display = "none";
    const s = J(this, qe).attachShadow({ mode: "open" });
    uc(s, [hp, ...e.editorStylesheets ?? []]), this[hn] = document.createElement("div"), this[hn].classList.add("mt-rich-text-editor-editor"), i && (this[hn].classList.add("mt-rich-text-editor-editor--inline"), this[hn].style.minHeight = r), s.appendChild(this[hn]);
    const o = (x, k) => {
      const w = (x ?? (() => {
        const v = document.createElement("div");
        return v.className = k, i && v.classList.add(`${k}--inline`), this[hn].appendChild(v), v;
      })()).attachShadow({ mode: "open" });
      uc(w, e.editorStylesheets ?? []);
      const O = document.createElement("div");
      return w.appendChild(O), O;
    }, a = o(
      e.toolbarContainer,
      (m = e.toolbar) != null && m.length ? "mt-rich-text-editor-toolbar" : "mt-rich-text-editor-toolbar--empty"
    );
    Nt(this, Li, document.createElement("div")), J(this, Li).className = "mt-rich-text-editor-content";
    const l = J(this, Li).attachShadow({ mode: "open" });
    uc(l, [
      mA + hp + gA,
      ...e.editorStylesheets ?? [],
      ...e.stylesheets ?? []
    ]);
    const c = document.createElement("div");
    c.className = "mt-rich-text-editor-content-root", l.appendChild(c), this[hn].appendChild(J(this, Li));
    const u = (x) => {
      Nt(this, Ar, x);
    }, d = (...x) => {
      var k;
      return ((k = J(this, Ar)) == null ? void 0 : k.call(this, ...x)) ?? !1;
    }, f = document.createElement("div");
    f.className = "mt-rich-text-editor-paste-menu", l.appendChild(f), this.tiptap = new Eg({
      element: c,
      extensions: [yC.configure(e.extensionOptions), ...e.extensions ?? []],
      content: gr(J(this, Nn).value),
      editorProps: {
        handlePaste: d
      }
    }), (e.autoFocus ?? i) && this.focus(), Nt(this, Us, new YM({
      target: a,
      editor: this,
      toolbar: e.toolbar,
      options: e.toolbarOptions ?? {},
      inline: i && !e.toolbarContainer
    }));
    const h = o(
      e.statusbarContainer,
      (y = e.statusbar) != null && y.length ? "mt-rich-text-editor-statusbar" : "mt-rich-text-editor-statusbar--empty"
    );
    Nt(this, Ks, new eA({
      target: h,
      editor: this,
      statusbar: e.statusbar ?? [],
      options: e.statusbarOptions ?? {},
      inline: i && !e.statusbarContainer
    }));
    const p = o(f, "mt-rich-text-editor-paste-menu");
    Nt(this, Nr, new aA({
      target: p,
      editor: this,
      onPaste: u,
      pasteMenu: e.pasteMenu ?? [],
      options: e.pasteMenuOptions ?? {},
      inline: i
    }));
    const _ = document.createElement("div");
    l.appendChild(_), Nt(this, qs, new dA({
      target: _,
      editor: this,
      quickAction: e.quickAction ?? [],
      options: e.quickActionOptions ?? {}
    })), ho(this, Fa, i0).call(this, this[hn]), e.structure && this.setStructureMode(!0);
  }
  save() {
    J(this, Nn).value = this.getContent();
  }
  getContent() {
    return Ep(this.tiptap.getHTML());
  }
  setContent(t) {
    this.tiptap.commands.setContent(gr(t)), J(this, Nn).value = t;
  }
  getHeight() {
    return J(this, qe).clientHeight;
  }
  setHeight(t) {
    t !== 0 && (J(this, qe).style.height = `${t}px`, localStorage.setItem("mt-rich-text-editor-height", t.toString()));
  }
  getStructureMode() {
    return J(this, ui) !== void 0;
  }
  setStructureMode(t) {
    var e;
    t ? Nt(this, ui, new pA(this)) : ((e = J(this, ui)) == null || e.destroy(), Nt(this, ui, void 0));
  }
  focus() {
    this.tiptap.commands.focus();
  }
  destroy() {
    var t;
    Nt(this, Ar, void 0), J(this, Us).destroy(), J(this, Ks).destroy(), J(this, Nr).destroy(), (t = J(this, ui)) == null || t.destroy(), J(this, qs).destroy(), this.tiptap.destroy(), J(this, qe).remove();
  }
  insertContent(t) {
    const e = dg(gr(t), this.tiptap.extensionManager.extensions);
    this.tiptap.commands.insertContent(e);
  }
  notify({ level: t, message: e }) {
    alert(`${t}: ${e}`);
  }
  isPasting() {
    return J(this, Nr).isPasting();
  }
}
Ar = new WeakMap(), qe = new WeakMap(), Nn = new WeakMap(), Li = new WeakMap(), Us = new WeakMap(), Ks = new WeakMap(), Nr = new WeakMap(), qs = new WeakMap(), ui = new WeakMap(), Fa = new WeakSet(), i0 = function(t) {
  const e = document.createElement("div");
  e.className = "mt-rich-text-editor-resize-handle", t.appendChild(e);
  let i = 0, r = 0;
  const s = (l) => {
    l.preventDefault(), i = l.clientY, r = this.getHeight(), document.addEventListener("mousemove", o), document.addEventListener("mouseup", a);
  }, o = (l) => {
    const c = l.clientY - i, u = Math.max(bA, r + c);
    this.setHeight(u);
  }, a = () => {
    document.removeEventListener("mousemove", o), document.removeEventListener("mouseup", a);
  };
  e.addEventListener("mousedown", s);
};
var Ri, Gs, iu;
const ze = class ze {
  static on(t, e) {
    J(this, Ri)[t] || (J(this, Ri)[t] = []), J(this, Ri)[t].push(e);
  }
  static async create(t) {
    const { id: e, language: i } = t;
    if (i && te.language !== i && te.changeLanguage(i), ze.Editors[e])
      throw new Error("Editor already exists");
    const r = document.querySelector(`#${e}`);
    if (!r)
      throw new Error("Textarea not found");
    const s = {
      toolbar: [],
      toolbarOptions: {},
      statusbar: [["path"]],
      statusbarOptions: {},
      pasteMenu: ["embedInline", "embed", "html", "link", "text", "markdown"],
      pasteMenuOptions: {},
      quickAction: ["heading:1", "heading:2", "heading:3", "heading:4", "heading:5", "heading:6"],
      quickActionOptions: {},
      extensions: [],
      inline: !1,
      ...t
    };
    ho(this, Gs, iu).call(this, "create", s);
    const { id: o, language: a, ...l } = s, c = new yA(r, l);
    return ho(this, Gs, iu).call(this, "init", c), ze.Editors[e] = c, c;
  }
  static unload({ id: t }) {
    ze.Editors[t] && (ze.Editors[t].destroy(), delete ze.Editors[t]);
  }
  static get({ id: t }) {
    return ze.Editors[t];
  }
  static async save() {
    await Promise.all(Object.values(ze.Editors).map((t) => t.save()));
  }
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  static async import(t) {
    if (t === "@tiptap/core")
      return f2;
    throw new Error(`Unknown module: ${t}`);
  }
};
Ri = new WeakMap(), Gs = new WeakSet(), iu = function(t, ...e) {
  (J(this, Ri)[t] || []).forEach((r) => r(...e));
}, Rt(ze, Gs), nn(ze, "version", ab), nn(ze, "Editors", {}), nn(ze, "Component", {
  ...ob,
  getPanelItem: Kr
}), Rt(ze, Ri, {});
let pp = ze;
export {
  yA as Editor,
  pp as default
};
//# sourceMappingURL=index.js.map
