var pb = Object.defineProperty;
var Kd = (n) => {
  throw TypeError(n);
};
var mb = (n, e, t) => e in n ? pb(n, e, { enumerable: !0, configurable: !0, writable: !0, value: t }) : n[e] = t;
var bn = (n, e, t) => mb(n, typeof e != "symbol" ? e + "" : e, t), Nl = (n, e, t) => e.has(n) || Kd("Cannot " + t);
var J = (n, e, t) => (Nl(n, e, "read from private field"), t ? t.call(n) : e.get(n)), Ne = (n, e, t) => e.has(n) ? Kd("Cannot add the same private member more than once") : e instanceof WeakSet ? e.add(n) : e.set(n, t), Oe = (n, e, t, i) => (Nl(n, e, "write to private field"), i ? i.call(n, t) : e.set(n, t), t), vo = (n, e, t) => (Nl(n, e, "access private method"), t);
import { b as Za, E as Cu, r as Is, a as Ir, p as ea, U as gb, h as De, c as Ui, H as _b, d as Kp, e as Rc, s as Hi, f as Zn, g as xn, i as qp, j as A, k as ta, I as Ll, l as Gp, q as Jp, m as Ps, n as Tu, o as qd, t as Au, u as _r, v as Gd, w as Xp, x as bb, y as vb, z as yb, A as xb, B as Mu, C as Yp, D as wb, F as Ou, G as Nu, J as kb, K as Sb, L as Ic, M as Eb, N as Cb, O as Tb, P as Ab, Q as Jd, R as Qa, S as Wr, T as Lu, V as el, W as Mb, X as Ob, Y as Nb, Z as Lb, _ as Rb, $ as Ib, a0 as Pb, a1 as Db, a2 as $b, a3 as Rt, a4 as zb, a5 as Bb, a6 as Hb, a7 as Fb, a8 as Vb, a9 as jb, aa as Wb, ab as Ub, ac as Kb, ad as qb, ae as Gb, af as ts, ag as Xd, ah as Yd, ai as Jb, aj as Xb, ak as Ru, al as Yb, am as xs, an as Zb, ao as Re, ap as Zd, aq as Qb, ar as e1, as as Zp, at as t1, au as n1, av as ve, aw as ye, ax as ee, ay as Y, az as Ge, aA as kn, aB as V, aC as xe, aD as de, aE as K, aF as te, aG as L, aH as B, aI as O, aJ as ki, aK as Le, aL as i1, aM as r1, aN as Wt, aO as Qp, aP as em, aQ as ie, aR as tm, aS as z, aT as Tn, aU as nm, aV as Ur, aW as It, aX as Pc, aY as ut, aZ as br, a_ as s1, a$ as yo, b0 as He, b1 as An, b2 as na, b3 as hr, b4 as o1, b5 as a1, b6 as Pr, b7 as l1, b8 as c1 } from "./component-B9cS8gTI.js";
const u1 = "0.0.1", _e = (n) => typeof n == "string", ns = () => {
  let n, e;
  const t = new Promise((i, r) => {
    n = i, e = r;
  });
  return t.resolve = n, t.reject = e, t;
}, Qd = (n) => n == null ? "" : "" + n, d1 = (n, e, t) => {
  n.forEach((i) => {
    e[i] && (t[i] = e[i]);
  });
}, f1 = /###/g, ef = (n) => n && n.indexOf("###") > -1 ? n.replace(f1, ".") : n, tf = (n) => !n || _e(n), ws = (n, e, t) => {
  const i = _e(e) ? e.split(".") : e;
  let r = 0;
  for (; r < i.length - 1; ) {
    if (tf(n)) return {};
    const s = ef(i[r]);
    !n[s] && t && (n[s] = new t()), Object.prototype.hasOwnProperty.call(n, s) ? n = n[s] : n = {}, ++r;
  }
  return tf(n) ? {} : {
    obj: n,
    k: ef(i[r])
  };
}, nf = (n, e, t) => {
  const {
    obj: i,
    k: r
  } = ws(n, e, Object);
  if (i !== void 0 || e.length === 1) {
    i[r] = t;
    return;
  }
  let s = e[e.length - 1], o = e.slice(0, e.length - 1), a = ws(n, o, Object);
  for (; a.obj === void 0 && o.length; )
    s = `${o[o.length - 1]}.${s}`, o = o.slice(0, o.length - 1), a = ws(n, o, Object), a != null && a.obj && typeof a.obj[`${a.k}.${s}`] < "u" && (a.obj = void 0);
  a.obj[`${a.k}.${s}`] = t;
}, h1 = (n, e, t, i) => {
  const {
    obj: r,
    k: s
  } = ws(n, e, Object);
  r[s] = r[s] || [], r[s].push(t);
}, ia = (n, e) => {
  const {
    obj: t,
    k: i
  } = ws(n, e);
  if (t && Object.prototype.hasOwnProperty.call(t, i))
    return t[i];
}, p1 = (n, e, t) => {
  const i = ia(n, t);
  return i !== void 0 ? i : ia(e, t);
}, im = (n, e, t) => {
  for (const i in e)
    i !== "__proto__" && i !== "constructor" && (i in n ? _e(n[i]) || n[i] instanceof String || _e(e[i]) || e[i] instanceof String ? t && (n[i] = e[i]) : im(n[i], e[i], t) : n[i] = e[i]);
  return n;
}, rr = (n) => n.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$&");
var m1 = {
  "&": "&amp;",
  "<": "&lt;",
  ">": "&gt;",
  '"': "&quot;",
  "'": "&#39;",
  "/": "&#x2F;"
};
const g1 = (n) => _e(n) ? n.replace(/[&<>"'\/]/g, (e) => m1[e]) : n;
class _1 {
  constructor(e) {
    this.capacity = e, this.regExpMap = /* @__PURE__ */ new Map(), this.regExpQueue = [];
  }
  getRegExp(e) {
    const t = this.regExpMap.get(e);
    if (t !== void 0)
      return t;
    const i = new RegExp(e);
    return this.regExpQueue.length === this.capacity && this.regExpMap.delete(this.regExpQueue.shift()), this.regExpMap.set(e, i), this.regExpQueue.push(e), i;
  }
}
const b1 = [" ", ",", "?", "!", ";"], v1 = new _1(20), y1 = (n, e, t) => {
  e = e || "", t = t || "";
  const i = b1.filter((o) => e.indexOf(o) < 0 && t.indexOf(o) < 0);
  if (i.length === 0) return !0;
  const r = v1.getRegExp(`(${i.map((o) => o === "?" ? "\\?" : o).join("|")})`);
  let s = !r.test(n);
  if (!s) {
    const o = n.indexOf(t);
    o > 0 && !r.test(n.substring(0, o)) && (s = !0);
  }
  return s;
}, Dc = function(n, e) {
  let t = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : ".";
  if (!n) return;
  if (n[e])
    return Object.prototype.hasOwnProperty.call(n, e) ? n[e] : void 0;
  const i = e.split(t);
  let r = n;
  for (let s = 0; s < i.length; ) {
    if (!r || typeof r != "object")
      return;
    let o, a = "";
    for (let l = s; l < i.length; ++l)
      if (l !== s && (a += t), a += i[l], o = r[a], o !== void 0) {
        if (["string", "number", "boolean"].indexOf(typeof o) > -1 && l < i.length - 1)
          continue;
        s += l - s + 1;
        break;
      }
    r = o;
  }
  return r;
}, ra = (n) => n == null ? void 0 : n.replace("_", "-"), x1 = {
  type: "logger",
  log(n) {
    this.output("log", n);
  },
  warn(n) {
    this.output("warn", n);
  },
  error(n) {
    this.output("error", n);
  },
  output(n, e) {
    var t, i;
    (i = (t = console == null ? void 0 : console[n]) == null ? void 0 : t.apply) == null || i.call(t, console, e);
  }
};
class sa {
  constructor(e) {
    let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    this.init(e, t);
  }
  init(e) {
    let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    this.prefix = t.prefix || "i18next:", this.logger = e || x1, this.options = t, this.debug = t.debug;
  }
  log() {
    for (var e = arguments.length, t = new Array(e), i = 0; i < e; i++)
      t[i] = arguments[i];
    return this.forward(t, "log", "", !0);
  }
  warn() {
    for (var e = arguments.length, t = new Array(e), i = 0; i < e; i++)
      t[i] = arguments[i];
    return this.forward(t, "warn", "", !0);
  }
  error() {
    for (var e = arguments.length, t = new Array(e), i = 0; i < e; i++)
      t[i] = arguments[i];
    return this.forward(t, "error", "");
  }
  deprecate() {
    for (var e = arguments.length, t = new Array(e), i = 0; i < e; i++)
      t[i] = arguments[i];
    return this.forward(t, "warn", "WARNING DEPRECATED: ", !0);
  }
  forward(e, t, i, r) {
    return r && !this.debug ? null : (_e(e[0]) && (e[0] = `${i}${this.prefix} ${e[0]}`), this.logger[t](e));
  }
  create(e) {
    return new sa(this.logger, {
      prefix: `${this.prefix}:${e}:`,
      ...this.options
    });
  }
  clone(e) {
    return e = e || this.options, e.prefix = e.prefix || this.prefix, new sa(this.logger, e);
  }
}
var zn = new sa();
let tl = class {
  constructor() {
    this.observers = {};
  }
  on(e, t) {
    return e.split(" ").forEach((i) => {
      this.observers[i] || (this.observers[i] = /* @__PURE__ */ new Map());
      const r = this.observers[i].get(t) || 0;
      this.observers[i].set(t, r + 1);
    }), this;
  }
  off(e, t) {
    if (this.observers[e]) {
      if (!t) {
        delete this.observers[e];
        return;
      }
      this.observers[e].delete(t);
    }
  }
  emit(e) {
    for (var t = arguments.length, i = new Array(t > 1 ? t - 1 : 0), r = 1; r < t; r++)
      i[r - 1] = arguments[r];
    this.observers[e] && Array.from(this.observers[e].entries()).forEach((o) => {
      let [a, l] = o;
      for (let c = 0; c < l; c++)
        a(...i);
    }), this.observers["*"] && Array.from(this.observers["*"].entries()).forEach((o) => {
      let [a, l] = o;
      for (let c = 0; c < l; c++)
        a.apply(a, [e, ...i]);
    });
  }
};
class rf extends tl {
  constructor(e) {
    let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {
      ns: ["translation"],
      defaultNS: "translation"
    };
    super(), this.data = e || {}, this.options = t, this.options.keySeparator === void 0 && (this.options.keySeparator = "."), this.options.ignoreJSONStructure === void 0 && (this.options.ignoreJSONStructure = !0);
  }
  addNamespaces(e) {
    this.options.ns.indexOf(e) < 0 && this.options.ns.push(e);
  }
  removeNamespaces(e) {
    const t = this.options.ns.indexOf(e);
    t > -1 && this.options.ns.splice(t, 1);
  }
  getResource(e, t, i) {
    var c, u;
    let r = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};
    const s = r.keySeparator !== void 0 ? r.keySeparator : this.options.keySeparator, o = r.ignoreJSONStructure !== void 0 ? r.ignoreJSONStructure : this.options.ignoreJSONStructure;
    let a;
    e.indexOf(".") > -1 ? a = e.split(".") : (a = [e, t], i && (Array.isArray(i) ? a.push(...i) : _e(i) && s ? a.push(...i.split(s)) : a.push(i)));
    const l = ia(this.data, a);
    return !l && !t && !i && e.indexOf(".") > -1 && (e = a[0], t = a[1], i = a.slice(2).join(".")), l || !o || !_e(i) ? l : Dc((u = (c = this.data) == null ? void 0 : c[e]) == null ? void 0 : u[t], i, s);
  }
  addResource(e, t, i, r) {
    let s = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : {
      silent: !1
    };
    const o = s.keySeparator !== void 0 ? s.keySeparator : this.options.keySeparator;
    let a = [e, t];
    i && (a = a.concat(o ? i.split(o) : i)), e.indexOf(".") > -1 && (a = e.split("."), r = t, t = a[1]), this.addNamespaces(t), nf(this.data, a, r), s.silent || this.emit("added", e, t, i, r);
  }
  addResources(e, t, i) {
    let r = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {
      silent: !1
    };
    for (const s in i)
      (_e(i[s]) || Array.isArray(i[s])) && this.addResource(e, t, s, i[s], {
        silent: !0
      });
    r.silent || this.emit("added", e, t, i);
  }
  addResourceBundle(e, t, i, r, s) {
    let o = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : {
      silent: !1,
      skipCopy: !1
    }, a = [e, t];
    e.indexOf(".") > -1 && (a = e.split("."), r = i, i = t, t = a[1]), this.addNamespaces(t);
    let l = ia(this.data, a) || {};
    o.skipCopy || (i = JSON.parse(JSON.stringify(i))), r ? im(l, i, s) : l = {
      ...l,
      ...i
    }, nf(this.data, a, l), o.silent || this.emit("added", e, t, i);
  }
  removeResourceBundle(e, t) {
    this.hasResourceBundle(e, t) && delete this.data[e][t], this.removeNamespaces(t), this.emit("removed", e, t);
  }
  hasResourceBundle(e, t) {
    return this.getResource(e, t) !== void 0;
  }
  getResourceBundle(e, t) {
    return t || (t = this.options.defaultNS), this.getResource(e, t);
  }
  getDataByLanguage(e) {
    return this.data[e];
  }
  hasLanguageSomeTranslations(e) {
    const t = this.getDataByLanguage(e);
    return !!(t && Object.keys(t) || []).find((r) => t[r] && Object.keys(t[r]).length > 0);
  }
  toJSON() {
    return this.data;
  }
}
var rm = {
  processors: {},
  addPostProcessor(n) {
    this.processors[n.name] = n;
  },
  handle(n, e, t, i, r) {
    return n.forEach((s) => {
      var o;
      e = ((o = this.processors[s]) == null ? void 0 : o.process(e, t, i, r)) ?? e;
    }), e;
  }
};
const sf = {}, of = (n) => !_e(n) && typeof n != "boolean" && typeof n != "number";
class oa extends tl {
  constructor(e) {
    let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    super(), d1(["resourceStore", "languageUtils", "pluralResolver", "interpolator", "backendConnector", "i18nFormat", "utils"], e, this), this.options = t, this.options.keySeparator === void 0 && (this.options.keySeparator = "."), this.logger = zn.create("translator");
  }
  changeLanguage(e) {
    e && (this.language = e);
  }
  exists(e) {
    let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {
      interpolation: {}
    };
    if (e == null)
      return !1;
    const i = this.resolve(e, t);
    return (i == null ? void 0 : i.res) !== void 0;
  }
  extractFromKey(e, t) {
    let i = t.nsSeparator !== void 0 ? t.nsSeparator : this.options.nsSeparator;
    i === void 0 && (i = ":");
    const r = t.keySeparator !== void 0 ? t.keySeparator : this.options.keySeparator;
    let s = t.ns || this.options.defaultNS || [];
    const o = i && e.indexOf(i) > -1, a = !this.options.userDefinedKeySeparator && !t.keySeparator && !this.options.userDefinedNsSeparator && !t.nsSeparator && !y1(e, i, r);
    if (o && !a) {
      const l = e.match(this.interpolator.nestingRegexp);
      if (l && l.length > 0)
        return {
          key: e,
          namespaces: _e(s) ? [s] : s
        };
      const c = e.split(i);
      (i !== r || i === r && this.options.ns.indexOf(c[0]) > -1) && (s = c.shift()), e = c.join(r);
    }
    return {
      key: e,
      namespaces: _e(s) ? [s] : s
    };
  }
  translate(e, t, i) {
    if (typeof t != "object" && this.options.overloadTranslationOptionHandler && (t = this.options.overloadTranslationOptionHandler(arguments)), typeof t == "object" && (t = {
      ...t
    }), t || (t = {}), e == null) return "";
    Array.isArray(e) || (e = [String(e)]);
    const r = t.returnDetails !== void 0 ? t.returnDetails : this.options.returnDetails, s = t.keySeparator !== void 0 ? t.keySeparator : this.options.keySeparator, {
      key: o,
      namespaces: a
    } = this.extractFromKey(e[e.length - 1], t), l = a[a.length - 1], c = t.lng || this.language, u = t.appendNamespaceToCIMode || this.options.appendNamespaceToCIMode;
    if ((c == null ? void 0 : c.toLowerCase()) === "cimode") {
      if (u) {
        const C = t.nsSeparator || this.options.nsSeparator;
        return r ? {
          res: `${l}${C}${o}`,
          usedKey: o,
          exactUsedKey: o,
          usedLng: c,
          usedNS: l,
          usedParams: this.getUsedParamsDetails(t)
        } : `${l}${C}${o}`;
      }
      return r ? {
        res: o,
        usedKey: o,
        exactUsedKey: o,
        usedLng: c,
        usedNS: l,
        usedParams: this.getUsedParamsDetails(t)
      } : o;
    }
    const d = this.resolve(e, t);
    let f = d == null ? void 0 : d.res;
    const h = (d == null ? void 0 : d.usedKey) || o, p = (d == null ? void 0 : d.exactUsedKey) || o, b = ["[object Number]", "[object Function]", "[object RegExp]"], m = t.joinArrays !== void 0 ? t.joinArrays : this.options.joinArrays, g = !this.i18nFormat || this.i18nFormat.handleAsObject, v = t.count !== void 0 && !_e(t.count), x = oa.hasDefaultValue(t), w = v ? this.pluralResolver.getSuffix(c, t.count, t) : "", E = t.ordinal && v ? this.pluralResolver.getSuffix(c, t.count, {
      ordinal: !1
    }) : "", k = v && !t.ordinal && t.count === 0, S = k && t[`defaultValue${this.options.pluralSeparator}zero`] || t[`defaultValue${w}`] || t[`defaultValue${E}`] || t.defaultValue;
    let y = f;
    g && !f && x && (y = S);
    const T = of(y), _ = Object.prototype.toString.apply(y);
    if (g && y && T && b.indexOf(_) < 0 && !(_e(m) && Array.isArray(y))) {
      if (!t.returnObjects && !this.options.returnObjects) {
        this.options.returnedObjectHandler || this.logger.warn("accessing an object - but returnObjects options is not enabled!");
        const C = this.options.returnedObjectHandler ? this.options.returnedObjectHandler(h, y, {
          ...t,
          ns: a
        }) : `key '${o} (${this.language})' returned an object instead of string.`;
        return r ? (d.res = C, d.usedParams = this.getUsedParamsDetails(t), d) : C;
      }
      if (s) {
        const C = Array.isArray(y), M = C ? [] : {}, H = C ? p : h;
        for (const D in y)
          if (Object.prototype.hasOwnProperty.call(y, D)) {
            const F = `${H}${s}${D}`;
            x && !f ? M[D] = this.translate(F, {
              ...t,
              defaultValue: of(S) ? S[D] : void 0,
              joinArrays: !1,
              ns: a
            }) : M[D] = this.translate(F, {
              ...t,
              joinArrays: !1,
              ns: a
            }), M[D] === F && (M[D] = y[D]);
          }
        f = M;
      }
    } else if (g && _e(m) && Array.isArray(f))
      f = f.join(m), f && (f = this.extendTranslation(f, e, t, i));
    else {
      let C = !1, M = !1;
      !this.isValidLookup(f) && x && (C = !0, f = S), this.isValidLookup(f) || (M = !0, f = o);
      const D = (t.missingKeyNoValueFallbackToKey || this.options.missingKeyNoValueFallbackToKey) && M ? void 0 : f, F = x && S !== f && this.options.updateMissing;
      if (M || C || F) {
        if (this.logger.log(F ? "updateKey" : "missingKey", c, l, o, F ? S : f), s) {
          const Z = this.resolve(o, {
            ...t,
            keySeparator: !1
          });
          Z && Z.res && this.logger.warn("Seems the loaded translations were in flat JSON format instead of nested. Either set keySeparator: false on init or make sure your translations are published in nested format.");
        }
        let W = [];
        const G = this.languageUtils.getFallbackCodes(this.options.fallbackLng, t.lng || this.language);
        if (this.options.saveMissingTo === "fallback" && G && G[0])
          for (let Z = 0; Z < G.length; Z++)
            W.push(G[Z]);
        else this.options.saveMissingTo === "all" ? W = this.languageUtils.toResolveHierarchy(t.lng || this.language) : W.push(t.lng || this.language);
        const re = (Z, ue, he) => {
          var oe;
          const Te = x && he !== f ? he : D;
          this.options.missingKeyHandler ? this.options.missingKeyHandler(Z, l, ue, Te, F, t) : (oe = this.backendConnector) != null && oe.saveMissing && this.backendConnector.saveMissing(Z, l, ue, Te, F, t), this.emit("missingKey", Z, l, ue, f);
        };
        this.options.saveMissing && (this.options.saveMissingPlurals && v ? W.forEach((Z) => {
          const ue = this.pluralResolver.getSuffixes(Z, t);
          k && t[`defaultValue${this.options.pluralSeparator}zero`] && ue.indexOf(`${this.options.pluralSeparator}zero`) < 0 && ue.push(`${this.options.pluralSeparator}zero`), ue.forEach((he) => {
            re([Z], o + he, t[`defaultValue${he}`] || S);
          });
        }) : re(W, o, S));
      }
      f = this.extendTranslation(f, e, t, d, i), M && f === o && this.options.appendNamespaceToMissingKey && (f = `${l}:${o}`), (M || C) && this.options.parseMissingKeyHandler && (f = this.options.parseMissingKeyHandler(this.options.appendNamespaceToMissingKey ? `${l}:${o}` : o, C ? f : void 0));
    }
    return r ? (d.res = f, d.usedParams = this.getUsedParamsDetails(t), d) : f;
  }
  extendTranslation(e, t, i, r, s) {
    var c, u;
    var o = this;
    if ((c = this.i18nFormat) != null && c.parse)
      e = this.i18nFormat.parse(e, {
        ...this.options.interpolation.defaultVariables,
        ...i
      }, i.lng || this.language || r.usedLng, r.usedNS, r.usedKey, {
        resolved: r
      });
    else if (!i.skipInterpolation) {
      i.interpolation && this.interpolator.init({
        ...i,
        interpolation: {
          ...this.options.interpolation,
          ...i.interpolation
        }
      });
      const d = _e(e) && (((u = i == null ? void 0 : i.interpolation) == null ? void 0 : u.skipOnVariables) !== void 0 ? i.interpolation.skipOnVariables : this.options.interpolation.skipOnVariables);
      let f;
      if (d) {
        const p = e.match(this.interpolator.nestingRegexp);
        f = p && p.length;
      }
      let h = i.replace && !_e(i.replace) ? i.replace : i;
      if (this.options.interpolation.defaultVariables && (h = {
        ...this.options.interpolation.defaultVariables,
        ...h
      }), e = this.interpolator.interpolate(e, h, i.lng || this.language || r.usedLng, i), d) {
        const p = e.match(this.interpolator.nestingRegexp), b = p && p.length;
        f < b && (i.nest = !1);
      }
      !i.lng && r && r.res && (i.lng = this.language || r.usedLng), i.nest !== !1 && (e = this.interpolator.nest(e, function() {
        for (var p = arguments.length, b = new Array(p), m = 0; m < p; m++)
          b[m] = arguments[m];
        return (s == null ? void 0 : s[0]) === b[0] && !i.context ? (o.logger.warn(`It seems you are nesting recursively key: ${b[0]} in key: ${t[0]}`), null) : o.translate(...b, t);
      }, i)), i.interpolation && this.interpolator.reset();
    }
    const a = i.postProcess || this.options.postProcess, l = _e(a) ? [a] : a;
    return e != null && (l != null && l.length) && i.applyPostProcessor !== !1 && (e = rm.handle(l, e, t, this.options && this.options.postProcessPassResolved ? {
      i18nResolved: {
        ...r,
        usedParams: this.getUsedParamsDetails(i)
      },
      ...i
    } : i, this)), e;
  }
  resolve(e) {
    let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, i, r, s, o, a;
    return _e(e) && (e = [e]), e.forEach((l) => {
      if (this.isValidLookup(i)) return;
      const c = this.extractFromKey(l, t), u = c.key;
      r = u;
      let d = c.namespaces;
      this.options.fallbackNS && (d = d.concat(this.options.fallbackNS));
      const f = t.count !== void 0 && !_e(t.count), h = f && !t.ordinal && t.count === 0, p = t.context !== void 0 && (_e(t.context) || typeof t.context == "number") && t.context !== "", b = t.lngs ? t.lngs : this.languageUtils.toResolveHierarchy(t.lng || this.language, t.fallbackLng);
      d.forEach((m) => {
        var g, v;
        this.isValidLookup(i) || (a = m, !sf[`${b[0]}-${m}`] && ((g = this.utils) != null && g.hasLoadedNamespace) && !((v = this.utils) != null && v.hasLoadedNamespace(a)) && (sf[`${b[0]}-${m}`] = !0, this.logger.warn(`key "${r}" for languages "${b.join(", ")}" won't get resolved as namespace "${a}" was not yet loaded`, "This means something IS WRONG in your setup. You access the t function before i18next.init / i18next.loadNamespace / i18next.changeLanguage was done. Wait for the callback or Promise to resolve before accessing it!!!")), b.forEach((x) => {
          var k;
          if (this.isValidLookup(i)) return;
          o = x;
          const w = [u];
          if ((k = this.i18nFormat) != null && k.addLookupKeys)
            this.i18nFormat.addLookupKeys(w, u, x, m, t);
          else {
            let S;
            f && (S = this.pluralResolver.getSuffix(x, t.count, t));
            const y = `${this.options.pluralSeparator}zero`, T = `${this.options.pluralSeparator}ordinal${this.options.pluralSeparator}`;
            if (f && (w.push(u + S), t.ordinal && S.indexOf(T) === 0 && w.push(u + S.replace(T, this.options.pluralSeparator)), h && w.push(u + y)), p) {
              const _ = `${u}${this.options.contextSeparator}${t.context}`;
              w.push(_), f && (w.push(_ + S), t.ordinal && S.indexOf(T) === 0 && w.push(_ + S.replace(T, this.options.pluralSeparator)), h && w.push(_ + y));
            }
          }
          let E;
          for (; E = w.pop(); )
            this.isValidLookup(i) || (s = E, i = this.getResource(x, m, E, t));
        }));
      });
    }), {
      res: i,
      usedKey: r,
      exactUsedKey: s,
      usedLng: o,
      usedNS: a
    };
  }
  isValidLookup(e) {
    return e !== void 0 && !(!this.options.returnNull && e === null) && !(!this.options.returnEmptyString && e === "");
  }
  getResource(e, t, i) {
    var s;
    let r = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};
    return (s = this.i18nFormat) != null && s.getResource ? this.i18nFormat.getResource(e, t, i, r) : this.resourceStore.getResource(e, t, i, r);
  }
  getUsedParamsDetails() {
    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    const t = ["defaultValue", "ordinal", "context", "replace", "lng", "lngs", "fallbackLng", "ns", "keySeparator", "nsSeparator", "returnObjects", "returnDetails", "joinArrays", "postProcess", "interpolation"], i = e.replace && !_e(e.replace);
    let r = i ? e.replace : e;
    if (i && typeof e.count < "u" && (r.count = e.count), this.options.interpolation.defaultVariables && (r = {
      ...this.options.interpolation.defaultVariables,
      ...r
    }), !i) {
      r = {
        ...r
      };
      for (const s of t)
        delete r[s];
    }
    return r;
  }
  static hasDefaultValue(e) {
    const t = "defaultValue";
    for (const i in e)
      if (Object.prototype.hasOwnProperty.call(e, i) && t === i.substring(0, t.length) && e[i] !== void 0)
        return !0;
    return !1;
  }
}
class af {
  constructor(e) {
    this.options = e, this.supportedLngs = this.options.supportedLngs || !1, this.logger = zn.create("languageUtils");
  }
  getScriptPartFromCode(e) {
    if (e = ra(e), !e || e.indexOf("-") < 0) return null;
    const t = e.split("-");
    return t.length === 2 || (t.pop(), t[t.length - 1].toLowerCase() === "x") ? null : this.formatLanguageCode(t.join("-"));
  }
  getLanguagePartFromCode(e) {
    if (e = ra(e), !e || e.indexOf("-") < 0) return e;
    const t = e.split("-");
    return this.formatLanguageCode(t[0]);
  }
  formatLanguageCode(e) {
    if (_e(e) && e.indexOf("-") > -1) {
      let t;
      try {
        t = Intl.getCanonicalLocales(e)[0];
      } catch {
      }
      return t && this.options.lowerCaseLng && (t = t.toLowerCase()), t || (this.options.lowerCaseLng ? e.toLowerCase() : e);
    }
    return this.options.cleanCode || this.options.lowerCaseLng ? e.toLowerCase() : e;
  }
  isSupportedCode(e) {
    return (this.options.load === "languageOnly" || this.options.nonExplicitSupportedLngs) && (e = this.getLanguagePartFromCode(e)), !this.supportedLngs || !this.supportedLngs.length || this.supportedLngs.indexOf(e) > -1;
  }
  getBestMatchFromCodes(e) {
    if (!e) return null;
    let t;
    return e.forEach((i) => {
      if (t) return;
      const r = this.formatLanguageCode(i);
      (!this.options.supportedLngs || this.isSupportedCode(r)) && (t = r);
    }), !t && this.options.supportedLngs && e.forEach((i) => {
      if (t) return;
      const r = this.getLanguagePartFromCode(i);
      if (this.isSupportedCode(r)) return t = r;
      t = this.options.supportedLngs.find((s) => {
        if (s === r) return s;
        if (!(s.indexOf("-") < 0 && r.indexOf("-") < 0) && (s.indexOf("-") > 0 && r.indexOf("-") < 0 && s.substring(0, s.indexOf("-")) === r || s.indexOf(r) === 0 && r.length > 1))
          return s;
      });
    }), t || (t = this.getFallbackCodes(this.options.fallbackLng)[0]), t;
  }
  getFallbackCodes(e, t) {
    if (!e) return [];
    if (typeof e == "function" && (e = e(t)), _e(e) && (e = [e]), Array.isArray(e)) return e;
    if (!t) return e.default || [];
    let i = e[t];
    return i || (i = e[this.getScriptPartFromCode(t)]), i || (i = e[this.formatLanguageCode(t)]), i || (i = e[this.getLanguagePartFromCode(t)]), i || (i = e.default), i || [];
  }
  toResolveHierarchy(e, t) {
    const i = this.getFallbackCodes(t || this.options.fallbackLng || [], e), r = [], s = (o) => {
      o && (this.isSupportedCode(o) ? r.push(o) : this.logger.warn(`rejecting language code not found in supportedLngs: ${o}`));
    };
    return _e(e) && (e.indexOf("-") > -1 || e.indexOf("_") > -1) ? (this.options.load !== "languageOnly" && s(this.formatLanguageCode(e)), this.options.load !== "languageOnly" && this.options.load !== "currentOnly" && s(this.getScriptPartFromCode(e)), this.options.load !== "currentOnly" && s(this.getLanguagePartFromCode(e))) : _e(e) && s(this.formatLanguageCode(e)), i.forEach((o) => {
      r.indexOf(o) < 0 && s(this.formatLanguageCode(o));
    }), r;
  }
}
const lf = {
  zero: 0,
  one: 1,
  two: 2,
  few: 3,
  many: 4,
  other: 5
}, cf = {
  select: (n) => n === 1 ? "one" : "other",
  resolvedOptions: () => ({
    pluralCategories: ["one", "other"]
  })
};
class w1 {
  constructor(e) {
    let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    this.languageUtils = e, this.options = t, this.logger = zn.create("pluralResolver"), this.pluralRulesCache = {};
  }
  addRule(e, t) {
    this.rules[e] = t;
  }
  clearCache() {
    this.pluralRulesCache = {};
  }
  getRule(e) {
    let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    const i = ra(e === "dev" ? "en" : e), r = t.ordinal ? "ordinal" : "cardinal", s = JSON.stringify({
      cleanedCode: i,
      type: r
    });
    if (s in this.pluralRulesCache)
      return this.pluralRulesCache[s];
    let o;
    try {
      o = new Intl.PluralRules(i, {
        type: r
      });
    } catch {
      if (!Intl)
        return this.logger.error("No Intl support, please use an Intl polyfill!"), cf;
      if (!e.match(/-|_/)) return cf;
      const l = this.languageUtils.getLanguagePartFromCode(e);
      o = this.getRule(l, t);
    }
    return this.pluralRulesCache[s] = o, o;
  }
  needsPlural(e) {
    let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, i = this.getRule(e, t);
    return i || (i = this.getRule("dev", t)), (i == null ? void 0 : i.resolvedOptions().pluralCategories.length) > 1;
  }
  getPluralFormsOfKey(e, t) {
    let i = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
    return this.getSuffixes(e, i).map((r) => `${t}${r}`);
  }
  getSuffixes(e) {
    let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, i = this.getRule(e, t);
    return i || (i = this.getRule("dev", t)), i ? i.resolvedOptions().pluralCategories.sort((r, s) => lf[r] - lf[s]).map((r) => `${this.options.prepend}${t.ordinal ? `ordinal${this.options.prepend}` : ""}${r}`) : [];
  }
  getSuffix(e, t) {
    let i = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
    const r = this.getRule(e, i);
    return r ? `${this.options.prepend}${i.ordinal ? `ordinal${this.options.prepend}` : ""}${r.select(t)}` : (this.logger.warn(`no plural rule found for: ${e}`), this.getSuffix("dev", t, i));
  }
}
const uf = function(n, e, t) {
  let i = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : ".", r = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : !0, s = p1(n, e, t);
  return !s && r && _e(t) && (s = Dc(n, t, i), s === void 0 && (s = Dc(e, t, i))), s;
}, Rl = (n) => n.replace(/\$/g, "$$$$");
class k1 {
  constructor() {
    var t;
    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    this.logger = zn.create("interpolator"), this.options = e, this.format = ((t = e == null ? void 0 : e.interpolation) == null ? void 0 : t.format) || ((i) => i), this.init(e);
  }
  init() {
    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    e.interpolation || (e.interpolation = {
      escapeValue: !0
    });
    const {
      escape: t,
      escapeValue: i,
      useRawValueToEscape: r,
      prefix: s,
      prefixEscaped: o,
      suffix: a,
      suffixEscaped: l,
      formatSeparator: c,
      unescapeSuffix: u,
      unescapePrefix: d,
      nestingPrefix: f,
      nestingPrefixEscaped: h,
      nestingSuffix: p,
      nestingSuffixEscaped: b,
      nestingOptionsSeparator: m,
      maxReplaces: g,
      alwaysFormat: v
    } = e.interpolation;
    this.escape = t !== void 0 ? t : g1, this.escapeValue = i !== void 0 ? i : !0, this.useRawValueToEscape = r !== void 0 ? r : !1, this.prefix = s ? rr(s) : o || "{{", this.suffix = a ? rr(a) : l || "}}", this.formatSeparator = c || ",", this.unescapePrefix = u ? "" : d || "-", this.unescapeSuffix = this.unescapePrefix ? "" : u || "", this.nestingPrefix = f ? rr(f) : h || rr("$t("), this.nestingSuffix = p ? rr(p) : b || rr(")"), this.nestingOptionsSeparator = m || ",", this.maxReplaces = g || 1e3, this.alwaysFormat = v !== void 0 ? v : !1, this.resetRegExp();
  }
  reset() {
    this.options && this.init(this.options);
  }
  resetRegExp() {
    const e = (t, i) => (t == null ? void 0 : t.source) === i ? (t.lastIndex = 0, t) : new RegExp(i, "g");
    this.regexp = e(this.regexp, `${this.prefix}(.+?)${this.suffix}`), this.regexpUnescape = e(this.regexpUnescape, `${this.prefix}${this.unescapePrefix}(.+?)${this.unescapeSuffix}${this.suffix}`), this.nestingRegexp = e(this.nestingRegexp, `${this.nestingPrefix}(.+?)${this.nestingSuffix}`);
  }
  interpolate(e, t, i, r) {
    var h;
    let s, o, a;
    const l = this.options && this.options.interpolation && this.options.interpolation.defaultVariables || {}, c = (p) => {
      if (p.indexOf(this.formatSeparator) < 0) {
        const v = uf(t, l, p, this.options.keySeparator, this.options.ignoreJSONStructure);
        return this.alwaysFormat ? this.format(v, void 0, i, {
          ...r,
          ...t,
          interpolationkey: p
        }) : v;
      }
      const b = p.split(this.formatSeparator), m = b.shift().trim(), g = b.join(this.formatSeparator).trim();
      return this.format(uf(t, l, m, this.options.keySeparator, this.options.ignoreJSONStructure), g, i, {
        ...r,
        ...t,
        interpolationkey: m
      });
    };
    this.resetRegExp();
    const u = (r == null ? void 0 : r.missingInterpolationHandler) || this.options.missingInterpolationHandler, d = ((h = r == null ? void 0 : r.interpolation) == null ? void 0 : h.skipOnVariables) !== void 0 ? r.interpolation.skipOnVariables : this.options.interpolation.skipOnVariables;
    return [{
      regex: this.regexpUnescape,
      safeValue: (p) => Rl(p)
    }, {
      regex: this.regexp,
      safeValue: (p) => this.escapeValue ? Rl(this.escape(p)) : Rl(p)
    }].forEach((p) => {
      for (a = 0; s = p.regex.exec(e); ) {
        const b = s[1].trim();
        if (o = c(b), o === void 0)
          if (typeof u == "function") {
            const g = u(e, s, r);
            o = _e(g) ? g : "";
          } else if (r && Object.prototype.hasOwnProperty.call(r, b))
            o = "";
          else if (d) {
            o = s[0];
            continue;
          } else
            this.logger.warn(`missed to pass in variable ${b} for interpolating ${e}`), o = "";
        else !_e(o) && !this.useRawValueToEscape && (o = Qd(o));
        const m = p.safeValue(o);
        if (e = e.replace(s[0], m), d ? (p.regex.lastIndex += o.length, p.regex.lastIndex -= s[0].length) : p.regex.lastIndex = 0, a++, a >= this.maxReplaces)
          break;
      }
    }), e;
  }
  nest(e, t) {
    let i = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {}, r, s, o;
    const a = (l, c) => {
      const u = this.nestingOptionsSeparator;
      if (l.indexOf(u) < 0) return l;
      const d = l.split(new RegExp(`${u}[ ]*{`));
      let f = `{${d[1]}`;
      l = d[0], f = this.interpolate(f, o);
      const h = f.match(/'/g), p = f.match(/"/g);
      (((h == null ? void 0 : h.length) ?? 0) % 2 === 0 && !p || p.length % 2 !== 0) && (f = f.replace(/'/g, '"'));
      try {
        o = JSON.parse(f), c && (o = {
          ...c,
          ...o
        });
      } catch (b) {
        return this.logger.warn(`failed parsing options string in nesting for key ${l}`, b), `${l}${u}${f}`;
      }
      return o.defaultValue && o.defaultValue.indexOf(this.prefix) > -1 && delete o.defaultValue, l;
    };
    for (; r = this.nestingRegexp.exec(e); ) {
      let l = [];
      o = {
        ...i
      }, o = o.replace && !_e(o.replace) ? o.replace : o, o.applyPostProcessor = !1, delete o.defaultValue;
      let c = !1;
      if (r[0].indexOf(this.formatSeparator) !== -1 && !/{.*}/.test(r[1])) {
        const u = r[1].split(this.formatSeparator).map((d) => d.trim());
        r[1] = u.shift(), l = u, c = !0;
      }
      if (s = t(a.call(this, r[1].trim(), o), o), s && r[0] === e && !_e(s)) return s;
      _e(s) || (s = Qd(s)), s || (this.logger.warn(`missed to resolve ${r[1]} for nesting ${e}`), s = ""), c && (s = l.reduce((u, d) => this.format(u, d, i.lng, {
        ...i,
        interpolationkey: r[1].trim()
      }), s.trim())), e = e.replace(r[0], s), this.regexp.lastIndex = 0;
    }
    return e;
  }
}
const S1 = (n) => {
  let e = n.toLowerCase().trim();
  const t = {};
  if (n.indexOf("(") > -1) {
    const i = n.split("(");
    e = i[0].toLowerCase().trim();
    const r = i[1].substring(0, i[1].length - 1);
    e === "currency" && r.indexOf(":") < 0 ? t.currency || (t.currency = r.trim()) : e === "relativetime" && r.indexOf(":") < 0 ? t.range || (t.range = r.trim()) : r.split(";").forEach((o) => {
      if (o) {
        const [a, ...l] = o.split(":"), c = l.join(":").trim().replace(/^'+|'+$/g, ""), u = a.trim();
        t[u] || (t[u] = c), c === "false" && (t[u] = !1), c === "true" && (t[u] = !0), isNaN(c) || (t[u] = parseInt(c, 10));
      }
    });
  }
  return {
    formatName: e,
    formatOptions: t
  };
}, sr = (n) => {
  const e = {};
  return (t, i, r) => {
    let s = r;
    r && r.interpolationkey && r.formatParams && r.formatParams[r.interpolationkey] && r[r.interpolationkey] && (s = {
      ...s,
      [r.interpolationkey]: void 0
    });
    const o = i + JSON.stringify(s);
    let a = e[o];
    return a || (a = n(ra(i), r), e[o] = a), a(t);
  };
};
class E1 {
  constructor() {
    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    this.logger = zn.create("formatter"), this.options = e, this.formats = {
      number: sr((t, i) => {
        const r = new Intl.NumberFormat(t, {
          ...i
        });
        return (s) => r.format(s);
      }),
      currency: sr((t, i) => {
        const r = new Intl.NumberFormat(t, {
          ...i,
          style: "currency"
        });
        return (s) => r.format(s);
      }),
      datetime: sr((t, i) => {
        const r = new Intl.DateTimeFormat(t, {
          ...i
        });
        return (s) => r.format(s);
      }),
      relativetime: sr((t, i) => {
        const r = new Intl.RelativeTimeFormat(t, {
          ...i
        });
        return (s) => r.format(s, i.range || "day");
      }),
      list: sr((t, i) => {
        const r = new Intl.ListFormat(t, {
          ...i
        });
        return (s) => r.format(s);
      })
    }, this.init(e);
  }
  init(e) {
    let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {
      interpolation: {}
    };
    this.formatSeparator = t.interpolation.formatSeparator || ",";
  }
  add(e, t) {
    this.formats[e.toLowerCase().trim()] = t;
  }
  addCached(e, t) {
    this.formats[e.toLowerCase().trim()] = sr(t);
  }
  format(e, t, i) {
    let r = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};
    const s = t.split(this.formatSeparator);
    if (s.length > 1 && s[0].indexOf("(") > 1 && s[0].indexOf(")") < 0 && s.find((a) => a.indexOf(")") > -1)) {
      const a = s.findIndex((l) => l.indexOf(")") > -1);
      s[0] = [s[0], ...s.splice(1, a)].join(this.formatSeparator);
    }
    return s.reduce((a, l) => {
      var d;
      const {
        formatName: c,
        formatOptions: u
      } = S1(l);
      if (this.formats[c]) {
        let f = a;
        try {
          const h = ((d = r == null ? void 0 : r.formatParams) == null ? void 0 : d[r.interpolationkey]) || {}, p = h.locale || h.lng || r.locale || r.lng || i;
          f = this.formats[c](a, p, {
            ...u,
            ...r,
            ...h
          });
        } catch (h) {
          this.logger.warn(h);
        }
        return f;
      } else
        this.logger.warn(`there was no format function for ${c}`);
      return a;
    }, e);
  }
}
const C1 = (n, e) => {
  n.pending[e] !== void 0 && (delete n.pending[e], n.pendingCount--);
};
class T1 extends tl {
  constructor(e, t, i) {
    var s, o;
    let r = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};
    super(), this.backend = e, this.store = t, this.services = i, this.languageUtils = i.languageUtils, this.options = r, this.logger = zn.create("backendConnector"), this.waitingReads = [], this.maxParallelReads = r.maxParallelReads || 10, this.readingCalls = 0, this.maxRetries = r.maxRetries >= 0 ? r.maxRetries : 5, this.retryTimeout = r.retryTimeout >= 1 ? r.retryTimeout : 350, this.state = {}, this.queue = [], (o = (s = this.backend) == null ? void 0 : s.init) == null || o.call(s, i, r.backend, r);
  }
  queueLoad(e, t, i, r) {
    const s = {}, o = {}, a = {}, l = {};
    return e.forEach((c) => {
      let u = !0;
      t.forEach((d) => {
        const f = `${c}|${d}`;
        !i.reload && this.store.hasResourceBundle(c, d) ? this.state[f] = 2 : this.state[f] < 0 || (this.state[f] === 1 ? o[f] === void 0 && (o[f] = !0) : (this.state[f] = 1, u = !1, o[f] === void 0 && (o[f] = !0), s[f] === void 0 && (s[f] = !0), l[d] === void 0 && (l[d] = !0)));
      }), u || (a[c] = !0);
    }), (Object.keys(s).length || Object.keys(o).length) && this.queue.push({
      pending: o,
      pendingCount: Object.keys(o).length,
      loaded: {},
      errors: [],
      callback: r
    }), {
      toLoad: Object.keys(s),
      pending: Object.keys(o),
      toLoadLanguages: Object.keys(a),
      toLoadNamespaces: Object.keys(l)
    };
  }
  loaded(e, t, i) {
    const r = e.split("|"), s = r[0], o = r[1];
    t && this.emit("failedLoading", s, o, t), !t && i && this.store.addResourceBundle(s, o, i, void 0, void 0, {
      skipCopy: !0
    }), this.state[e] = t ? -1 : 2, t && i && (this.state[e] = 0);
    const a = {};
    this.queue.forEach((l) => {
      h1(l.loaded, [s], o), C1(l, e), t && l.errors.push(t), l.pendingCount === 0 && !l.done && (Object.keys(l.loaded).forEach((c) => {
        a[c] || (a[c] = {});
        const u = l.loaded[c];
        u.length && u.forEach((d) => {
          a[c][d] === void 0 && (a[c][d] = !0);
        });
      }), l.done = !0, l.errors.length ? l.callback(l.errors) : l.callback());
    }), this.emit("loaded", a), this.queue = this.queue.filter((l) => !l.done);
  }
  read(e, t, i) {
    let r = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 0, s = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : this.retryTimeout, o = arguments.length > 5 ? arguments[5] : void 0;
    if (!e.length) return o(null, {});
    if (this.readingCalls >= this.maxParallelReads) {
      this.waitingReads.push({
        lng: e,
        ns: t,
        fcName: i,
        tried: r,
        wait: s,
        callback: o
      });
      return;
    }
    this.readingCalls++;
    const a = (c, u) => {
      if (this.readingCalls--, this.waitingReads.length > 0) {
        const d = this.waitingReads.shift();
        this.read(d.lng, d.ns, d.fcName, d.tried, d.wait, d.callback);
      }
      if (c && u && r < this.maxRetries) {
        setTimeout(() => {
          this.read.call(this, e, t, i, r + 1, s * 2, o);
        }, s);
        return;
      }
      o(c, u);
    }, l = this.backend[i].bind(this.backend);
    if (l.length === 2) {
      try {
        const c = l(e, t);
        c && typeof c.then == "function" ? c.then((u) => a(null, u)).catch(a) : a(null, c);
      } catch (c) {
        a(c);
      }
      return;
    }
    return l(e, t, a);
  }
  prepareLoading(e, t) {
    let i = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {}, r = arguments.length > 3 ? arguments[3] : void 0;
    if (!this.backend)
      return this.logger.warn("No backend was added via i18next.use. Will not load resources."), r && r();
    _e(e) && (e = this.languageUtils.toResolveHierarchy(e)), _e(t) && (t = [t]);
    const s = this.queueLoad(e, t, i, r);
    if (!s.toLoad.length)
      return s.pending.length || r(), null;
    s.toLoad.forEach((o) => {
      this.loadOne(o);
    });
  }
  load(e, t, i) {
    this.prepareLoading(e, t, {}, i);
  }
  reload(e, t, i) {
    this.prepareLoading(e, t, {
      reload: !0
    }, i);
  }
  loadOne(e) {
    let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "";
    const i = e.split("|"), r = i[0], s = i[1];
    this.read(r, s, "read", void 0, void 0, (o, a) => {
      o && this.logger.warn(`${t}loading namespace ${s} for language ${r} failed`, o), !o && a && this.logger.log(`${t}loaded namespace ${s} for language ${r}`, a), this.loaded(e, o, a);
    });
  }
  saveMissing(e, t, i, r, s) {
    var l, c, u, d, f;
    let o = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : {}, a = arguments.length > 6 && arguments[6] !== void 0 ? arguments[6] : () => {
    };
    if ((c = (l = this.services) == null ? void 0 : l.utils) != null && c.hasLoadedNamespace && !((d = (u = this.services) == null ? void 0 : u.utils) != null && d.hasLoadedNamespace(t))) {
      this.logger.warn(`did not save key "${i}" as the namespace "${t}" was not yet loaded`, "This means something IS WRONG in your setup. You access the t function before i18next.init / i18next.loadNamespace / i18next.changeLanguage was done. Wait for the callback or Promise to resolve before accessing it!!!");
      return;
    }
    if (!(i == null || i === "")) {
      if ((f = this.backend) != null && f.create) {
        const h = {
          ...o,
          isUpdate: s
        }, p = this.backend.create.bind(this.backend);
        if (p.length < 6)
          try {
            let b;
            p.length === 5 ? b = p(e, t, i, r, h) : b = p(e, t, i, r), b && typeof b.then == "function" ? b.then((m) => a(null, m)).catch(a) : a(null, b);
          } catch (b) {
            a(b);
          }
        else
          p(e, t, i, r, a, h);
      }
      !e || !e[0] || this.store.addResource(e[0], t, i, r);
    }
  }
}
const df = () => ({
  debug: !1,
  initAsync: !0,
  ns: ["translation"],
  defaultNS: ["translation"],
  fallbackLng: ["dev"],
  fallbackNS: !1,
  supportedLngs: !1,
  nonExplicitSupportedLngs: !1,
  load: "all",
  preload: !1,
  simplifyPluralSuffix: !0,
  keySeparator: ".",
  nsSeparator: ":",
  pluralSeparator: "_",
  contextSeparator: "_",
  partialBundledLanguages: !1,
  saveMissing: !1,
  updateMissing: !1,
  saveMissingTo: "fallback",
  saveMissingPlurals: !0,
  missingKeyHandler: !1,
  missingInterpolationHandler: !1,
  postProcess: !1,
  postProcessPassResolved: !1,
  returnNull: !1,
  returnEmptyString: !0,
  returnObjects: !1,
  joinArrays: !1,
  returnedObjectHandler: !1,
  parseMissingKeyHandler: !1,
  appendNamespaceToMissingKey: !1,
  appendNamespaceToCIMode: !1,
  overloadTranslationOptionHandler: (n) => {
    let e = {};
    if (typeof n[1] == "object" && (e = n[1]), _e(n[1]) && (e.defaultValue = n[1]), _e(n[2]) && (e.tDescription = n[2]), typeof n[2] == "object" || typeof n[3] == "object") {
      const t = n[3] || n[2];
      Object.keys(t).forEach((i) => {
        e[i] = t[i];
      });
    }
    return e;
  },
  interpolation: {
    escapeValue: !0,
    format: (n) => n,
    prefix: "{{",
    suffix: "}}",
    formatSeparator: ",",
    unescapePrefix: "-",
    nestingPrefix: "$t(",
    nestingSuffix: ")",
    nestingOptionsSeparator: ",",
    maxReplaces: 1e3,
    skipOnVariables: !0
  }
}), ff = (n) => {
  var e, t;
  return _e(n.ns) && (n.ns = [n.ns]), _e(n.fallbackLng) && (n.fallbackLng = [n.fallbackLng]), _e(n.fallbackNS) && (n.fallbackNS = [n.fallbackNS]), ((t = (e = n.supportedLngs) == null ? void 0 : e.indexOf) == null ? void 0 : t.call(e, "cimode")) < 0 && (n.supportedLngs = n.supportedLngs.concat(["cimode"])), typeof n.initImmediate == "boolean" && (n.initAsync = n.initImmediate), n;
}, xo = () => {
}, A1 = (n) => {
  Object.getOwnPropertyNames(Object.getPrototypeOf(n)).forEach((t) => {
    typeof n[t] == "function" && (n[t] = n[t].bind(n));
  });
};
class Ds extends tl {
  constructor() {
    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, t = arguments.length > 1 ? arguments[1] : void 0;
    if (super(), this.options = ff(e), this.services = {}, this.logger = zn, this.modules = {
      external: []
    }, A1(this), t && !this.isInitialized && !e.isClone) {
      if (!this.options.initAsync)
        return this.init(e, t), this;
      setTimeout(() => {
        this.init(e, t);
      }, 0);
    }
  }
  init() {
    var e = this;
    let t = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, i = arguments.length > 1 ? arguments[1] : void 0;
    this.isInitializing = !0, typeof t == "function" && (i = t, t = {}), t.defaultNS == null && t.ns && (_e(t.ns) ? t.defaultNS = t.ns : t.ns.indexOf("translation") < 0 && (t.defaultNS = t.ns[0]));
    const r = df();
    this.options = {
      ...r,
      ...this.options,
      ...ff(t)
    }, this.options.interpolation = {
      ...r.interpolation,
      ...this.options.interpolation
    }, t.keySeparator !== void 0 && (this.options.userDefinedKeySeparator = t.keySeparator), t.nsSeparator !== void 0 && (this.options.userDefinedNsSeparator = t.nsSeparator);
    const s = (u) => u ? typeof u == "function" ? new u() : u : null;
    if (!this.options.isClone) {
      this.modules.logger ? zn.init(s(this.modules.logger), this.options) : zn.init(null, this.options);
      let u;
      this.modules.formatter ? u = this.modules.formatter : u = E1;
      const d = new af(this.options);
      this.store = new rf(this.options.resources, this.options);
      const f = this.services;
      f.logger = zn, f.resourceStore = this.store, f.languageUtils = d, f.pluralResolver = new w1(d, {
        prepend: this.options.pluralSeparator,
        simplifyPluralSuffix: this.options.simplifyPluralSuffix
      }), u && (!this.options.interpolation.format || this.options.interpolation.format === r.interpolation.format) && (f.formatter = s(u), f.formatter.init(f, this.options), this.options.interpolation.format = f.formatter.format.bind(f.formatter)), f.interpolator = new k1(this.options), f.utils = {
        hasLoadedNamespace: this.hasLoadedNamespace.bind(this)
      }, f.backendConnector = new T1(s(this.modules.backend), f.resourceStore, f, this.options), f.backendConnector.on("*", function(h) {
        for (var p = arguments.length, b = new Array(p > 1 ? p - 1 : 0), m = 1; m < p; m++)
          b[m - 1] = arguments[m];
        e.emit(h, ...b);
      }), this.modules.languageDetector && (f.languageDetector = s(this.modules.languageDetector), f.languageDetector.init && f.languageDetector.init(f, this.options.detection, this.options)), this.modules.i18nFormat && (f.i18nFormat = s(this.modules.i18nFormat), f.i18nFormat.init && f.i18nFormat.init(this)), this.translator = new oa(this.services, this.options), this.translator.on("*", function(h) {
        for (var p = arguments.length, b = new Array(p > 1 ? p - 1 : 0), m = 1; m < p; m++)
          b[m - 1] = arguments[m];
        e.emit(h, ...b);
      }), this.modules.external.forEach((h) => {
        h.init && h.init(this);
      });
    }
    if (this.format = this.options.interpolation.format, i || (i = xo), this.options.fallbackLng && !this.services.languageDetector && !this.options.lng) {
      const u = this.services.languageUtils.getFallbackCodes(this.options.fallbackLng);
      u.length > 0 && u[0] !== "dev" && (this.options.lng = u[0]);
    }
    !this.services.languageDetector && !this.options.lng && this.logger.warn("init: no languageDetector is used and no lng is defined"), ["getResource", "hasResourceBundle", "getResourceBundle", "getDataByLanguage"].forEach((u) => {
      this[u] = function() {
        return e.store[u](...arguments);
      };
    }), ["addResource", "addResources", "addResourceBundle", "removeResourceBundle"].forEach((u) => {
      this[u] = function() {
        return e.store[u](...arguments), e;
      };
    });
    const l = ns(), c = () => {
      const u = (d, f) => {
        this.isInitializing = !1, this.isInitialized && !this.initializedStoreOnce && this.logger.warn("init: i18next is already initialized. You should call init just once!"), this.isInitialized = !0, this.options.isClone || this.logger.log("initialized", this.options), this.emit("initialized", this.options), l.resolve(f), i(d, f);
      };
      if (this.languages && !this.isInitialized) return u(null, this.t.bind(this));
      this.changeLanguage(this.options.lng, u);
    };
    return this.options.resources || !this.options.initAsync ? c() : setTimeout(c, 0), l;
  }
  loadResources(e) {
    var s, o;
    let i = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : xo;
    const r = _e(e) ? e : this.language;
    if (typeof e == "function" && (i = e), !this.options.resources || this.options.partialBundledLanguages) {
      if ((r == null ? void 0 : r.toLowerCase()) === "cimode" && (!this.options.preload || this.options.preload.length === 0)) return i();
      const a = [], l = (c) => {
        if (!c || c === "cimode") return;
        this.services.languageUtils.toResolveHierarchy(c).forEach((d) => {
          d !== "cimode" && a.indexOf(d) < 0 && a.push(d);
        });
      };
      r ? l(r) : this.services.languageUtils.getFallbackCodes(this.options.fallbackLng).forEach((u) => l(u)), (o = (s = this.options.preload) == null ? void 0 : s.forEach) == null || o.call(s, (c) => l(c)), this.services.backendConnector.load(a, this.options.ns, (c) => {
        !c && !this.resolvedLanguage && this.language && this.setResolvedLanguage(this.language), i(c);
      });
    } else
      i(null);
  }
  reloadResources(e, t, i) {
    const r = ns();
    return typeof e == "function" && (i = e, e = void 0), typeof t == "function" && (i = t, t = void 0), e || (e = this.languages), t || (t = this.options.ns), i || (i = xo), this.services.backendConnector.reload(e, t, (s) => {
      r.resolve(), i(s);
    }), r;
  }
  use(e) {
    if (!e) throw new Error("You are passing an undefined module! Please check the object you are passing to i18next.use()");
    if (!e.type) throw new Error("You are passing a wrong module! Please check the object you are passing to i18next.use()");
    return e.type === "backend" && (this.modules.backend = e), (e.type === "logger" || e.log && e.warn && e.error) && (this.modules.logger = e), e.type === "languageDetector" && (this.modules.languageDetector = e), e.type === "i18nFormat" && (this.modules.i18nFormat = e), e.type === "postProcessor" && rm.addPostProcessor(e), e.type === "formatter" && (this.modules.formatter = e), e.type === "3rdParty" && this.modules.external.push(e), this;
  }
  setResolvedLanguage(e) {
    if (!(!e || !this.languages) && !(["cimode", "dev"].indexOf(e) > -1))
      for (let t = 0; t < this.languages.length; t++) {
        const i = this.languages[t];
        if (!(["cimode", "dev"].indexOf(i) > -1) && this.store.hasLanguageSomeTranslations(i)) {
          this.resolvedLanguage = i;
          break;
        }
      }
  }
  changeLanguage(e, t) {
    var i = this;
    this.isLanguageChangingTo = e;
    const r = ns();
    this.emit("languageChanging", e);
    const s = (l) => {
      this.language = l, this.languages = this.services.languageUtils.toResolveHierarchy(l), this.resolvedLanguage = void 0, this.setResolvedLanguage(l);
    }, o = (l, c) => {
      c ? (s(c), this.translator.changeLanguage(c), this.isLanguageChangingTo = void 0, this.emit("languageChanged", c), this.logger.log("languageChanged", c)) : this.isLanguageChangingTo = void 0, r.resolve(function() {
        return i.t(...arguments);
      }), t && t(l, function() {
        return i.t(...arguments);
      });
    }, a = (l) => {
      var u, d;
      !e && !l && this.services.languageDetector && (l = []);
      const c = _e(l) ? l : this.services.languageUtils.getBestMatchFromCodes(l);
      c && (this.language || s(c), this.translator.language || this.translator.changeLanguage(c), (d = (u = this.services.languageDetector) == null ? void 0 : u.cacheUserLanguage) == null || d.call(u, c)), this.loadResources(c, (f) => {
        o(f, c);
      });
    };
    return !e && this.services.languageDetector && !this.services.languageDetector.async ? a(this.services.languageDetector.detect()) : !e && this.services.languageDetector && this.services.languageDetector.async ? this.services.languageDetector.detect.length === 0 ? this.services.languageDetector.detect().then(a) : this.services.languageDetector.detect(a) : a(e), r;
  }
  getFixedT(e, t, i) {
    var r = this;
    const s = function(o, a) {
      let l;
      if (typeof a != "object") {
        for (var c = arguments.length, u = new Array(c > 2 ? c - 2 : 0), d = 2; d < c; d++)
          u[d - 2] = arguments[d];
        l = r.options.overloadTranslationOptionHandler([o, a].concat(u));
      } else
        l = {
          ...a
        };
      l.lng = l.lng || s.lng, l.lngs = l.lngs || s.lngs, l.ns = l.ns || s.ns, l.keyPrefix !== "" && (l.keyPrefix = l.keyPrefix || i || s.keyPrefix);
      const f = r.options.keySeparator || ".";
      let h;
      return l.keyPrefix && Array.isArray(o) ? h = o.map((p) => `${l.keyPrefix}${f}${p}`) : h = l.keyPrefix ? `${l.keyPrefix}${f}${o}` : o, r.t(h, l);
    };
    return _e(e) ? s.lng = e : s.lngs = e, s.ns = t, s.keyPrefix = i, s;
  }
  t() {
    var r;
    for (var e = arguments.length, t = new Array(e), i = 0; i < e; i++)
      t[i] = arguments[i];
    return (r = this.translator) == null ? void 0 : r.translate(...t);
  }
  exists() {
    var r;
    for (var e = arguments.length, t = new Array(e), i = 0; i < e; i++)
      t[i] = arguments[i];
    return (r = this.translator) == null ? void 0 : r.exists(...t);
  }
  setDefaultNamespace(e) {
    this.options.defaultNS = e;
  }
  hasLoadedNamespace(e) {
    let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    if (!this.isInitialized)
      return this.logger.warn("hasLoadedNamespace: i18next was not initialized", this.languages), !1;
    if (!this.languages || !this.languages.length)
      return this.logger.warn("hasLoadedNamespace: i18n.languages were undefined or empty", this.languages), !1;
    const i = t.lng || this.resolvedLanguage || this.languages[0], r = this.options ? this.options.fallbackLng : !1, s = this.languages[this.languages.length - 1];
    if (i.toLowerCase() === "cimode") return !0;
    const o = (a, l) => {
      const c = this.services.backendConnector.state[`${a}|${l}`];
      return c === -1 || c === 0 || c === 2;
    };
    if (t.precheck) {
      const a = t.precheck(this, o);
      if (a !== void 0) return a;
    }
    return !!(this.hasResourceBundle(i, e) || !this.services.backendConnector.backend || this.options.resources && !this.options.partialBundledLanguages || o(i, e) && (!r || o(s, e)));
  }
  loadNamespaces(e, t) {
    const i = ns();
    return this.options.ns ? (_e(e) && (e = [e]), e.forEach((r) => {
      this.options.ns.indexOf(r) < 0 && this.options.ns.push(r);
    }), this.loadResources((r) => {
      i.resolve(), t && t(r);
    }), i) : (t && t(), Promise.resolve());
  }
  loadLanguages(e, t) {
    const i = ns();
    _e(e) && (e = [e]);
    const r = this.options.preload || [], s = e.filter((o) => r.indexOf(o) < 0 && this.services.languageUtils.isSupportedCode(o));
    return s.length ? (this.options.preload = r.concat(s), this.loadResources((o) => {
      i.resolve(), t && t(o);
    }), i) : (t && t(), Promise.resolve());
  }
  dir(e) {
    var r, s;
    if (e || (e = this.resolvedLanguage || (((r = this.languages) == null ? void 0 : r.length) > 0 ? this.languages[0] : this.language)), !e) return "rtl";
    const t = ["ar", "shu", "sqr", "ssh", "xaa", "yhd", "yud", "aao", "abh", "abv", "acm", "acq", "acw", "acx", "acy", "adf", "ads", "aeb", "aec", "afb", "ajp", "apc", "apd", "arb", "arq", "ars", "ary", "arz", "auz", "avl", "ayh", "ayl", "ayn", "ayp", "bbz", "pga", "he", "iw", "ps", "pbt", "pbu", "pst", "prp", "prd", "ug", "ur", "ydd", "yds", "yih", "ji", "yi", "hbo", "men", "xmn", "fa", "jpr", "peo", "pes", "prs", "dv", "sam", "ckb"], i = ((s = this.services) == null ? void 0 : s.languageUtils) || new af(df());
    return t.indexOf(i.getLanguagePartFromCode(e)) > -1 || e.toLowerCase().indexOf("-arab") > 1 ? "rtl" : "ltr";
  }
  static createInstance() {
    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, t = arguments.length > 1 ? arguments[1] : void 0;
    return new Ds(e, t);
  }
  cloneInstance() {
    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : xo;
    const i = e.forkResourceStore;
    i && delete e.forkResourceStore;
    const r = {
      ...this.options,
      ...e,
      isClone: !0
    }, s = new Ds(r);
    if ((e.debug !== void 0 || e.prefix !== void 0) && (s.logger = s.logger.clone(e)), ["store", "services", "language"].forEach((a) => {
      s[a] = this[a];
    }), s.services = {
      ...this.services
    }, s.services.utils = {
      hasLoadedNamespace: s.hasLoadedNamespace.bind(s)
    }, i) {
      const a = Object.keys(this.store.data).reduce((l, c) => (l[c] = {
        ...this.store.data[c]
      }, Object.keys(l[c]).reduce((u, d) => (u[d] = {
        ...l[c][d]
      }, u), {})), {});
      s.store = new rf(a, r), s.services.resourceStore = s.store;
    }
    return s.translator = new oa(s.services, r), s.translator.on("*", function(a) {
      for (var l = arguments.length, c = new Array(l > 1 ? l - 1 : 0), u = 1; u < l; u++)
        c[u - 1] = arguments[u];
      s.emit(a, ...c);
    }), s.init(r, t), s.translator.options = r, s.translator.backendConnector.services.utils = {
      hasLoadedNamespace: s.hasLoadedNamespace.bind(s)
    }, s;
  }
  toJSON() {
    return {
      options: this.options,
      store: this.store,
      language: this.language,
      languages: this.languages,
      resolvedLanguage: this.resolvedLanguage
    };
  }
}
const et = Ds.createInstance();
et.createInstance = Ds.createInstance;
et.createInstance;
et.dir;
et.init;
et.loadResources;
et.reloadResources;
et.use;
et.changeLanguage;
et.getFixedT;
et.t;
et.exists;
et.setDefaultNamespace;
et.hasLoadedNamespace;
et.loadNamespaces;
et.loadLanguages;
const M1 = "インデントを増やす", O1 = "スタイル", N1 = "右揃え", L1 = "取り消し線", R1 = "中央揃え", I1 = "やり直す", P1 = "URL", D1 = "行", $1 = "中央揃え", z1 = "リンクを解除", B1 = "両端揃え", H1 = "リンク", F1 = "下線", V1 = "リッチテキストエディタ", j1 = "書式設定済み", W1 = "保存", U1 = "上揃え", K1 = "キャンセル", q1 = "同じウィンドウ", G1 = "斜体", J1 = "列", X1 = "インデントを減らす", Y1 = "ツールバー", Z1 = "挿入", Q1 = "表", ev = "元に戻す", tv = "ファイル", nv = "高さ", iv = "定型文", rv = "下揃え", sv = "テキスト", ov = "セル", av = "引用", lv = "太字", cv = "画像", uv = "タイトル", dv = "左揃え", fv = "段落", hv = "なし", pv = "スコープ", mv = "幅", gv = "新規ウィンドウ", _v = {
  "Failed to parse HTML: [_1]": "HTMLの解析に失敗しました: [_1]",
  Indent: M1,
  "Edit Link": "リンクを編集",
  "Vertical align": "縦配置",
  "Cell Spacing": "セルの間隔",
  Style: O1,
  "Column group": "列グループ",
  "Available Paragraph Styles": "追加可能な段落スタイル",
  "Heading 2": "見出し 2",
  "Available Items": "追加可能なアイテム",
  "Cell Padding": "セル内のスペース",
  "Text Color": "テキストの色",
  HORIZONTAL_ALIGN_RIGHT: N1,
  "Cell properties": "セルのプロパティ",
  "Border Width": "枠線幅",
  "Paste as HTML": "HTMLとして貼り付け",
  "MTRichTextEditor Settings": "リッチテキストエディタ設定",
  Strike: L1,
  "Highlight Color": "ハイライトの色",
  "Link Text": "リンク元テキスト",
  "Embed object": "埋め込みオブジェクト",
  "Paste as text": "テキストとして貼り付け",
  "Remove Format": "書式をクリア",
  "Insert Link": "リンク挿入",
  HORIZONTAL_ALIGN_CENTER: R1,
  Redo: I1,
  "Cell Properties": "セルのプロパティ",
  URL: P1,
  Row: D1,
  "Insert table": "表の挿入",
  VERTICAL_ALIGN_MIDDLE: $1,
  Unlink: z1,
  HORIZONTAL_ALIGN_JUSTIFY: B1,
  "Properties for style attributes": "style属性のプロパティ",
  Link: H1,
  Underline: F1,
  "Align Center": "中央揃え",
  "Insert HTML": "HTMLの挿入",
  "Can not get data from [_1]: [_2]": "[_1]からデータを取得できませんでした: [_2]",
  "Add color to the palette": "カラーパレットに色を追加",
  "Select All": "すべて選択",
  "Insert Boilerplate": "定型文の挿入",
  MTRichTextEditor: V1,
  "Delete column": "列の削除",
  Preformatted: j1,
  "Delete row": "行の削除",
  "Heading 5": "見出し 5",
  "Full Screen": "フルスクリーン",
  Save: W1,
  "Align Left": "左揃え",
  "Insert Image": "画像の挿入",
  "Heading 4": "見出し 4",
  VERTICAL_ALIGN_TOP: U1,
  "Insert (s)": "挿入 (s)",
  "Insert column after": "後に列を挿入",
  "Row group": "行グループ",
  "Link URL": "リンクURL",
  "Specify the default value of a parameter when using the oEmbed API to obtain the embed code for content from an external service. <br>Since the handling of the specified parameters depends on the specifications of each service, it may not always be embedded at the specified size.": "外部サービスのコンテンツの埋め込みコードをoEmbed APIを利用して取得する際の、パラメータの初期値を指定します。<br>指定したパラメータの扱いはサービス毎の仕様によるため、必ずしも指定した通りのサイズで埋め込まれるとは限りません。",
  "Cell type": "セルの種類",
  Cancel: K1,
  "Heading 6": "見出し 6",
  "Heading 1": "見出し 1",
  LINK_TARGET_SELF: q1,
  Italic: G1,
  "Link Target": "リンクの開き方...",
  Column: J1,
  "Save (s)": "保存 (s)",
  "Embed webpage as inline link": "ウェブページの埋め込み (インラインリンク)",
  "Edit attributes": "属性値の編集",
  "Heading 3": "見出し 3",
  Outdent: X1,
  "Ordered List": "番号付き箇条書き",
  "Cancel (x)": "キャンセル (x)",
  Toolbar: Y1,
  "Data attributes": "データ属性",
  Insert: Z1,
  Table: Q1,
  Undo: ev,
  "Parameters for oEmbed API": "oEmbed API呼び出しで指定するパラメータ",
  "Retrieval of data when embedding web pages": "ウェブページの埋め込み時のデータ取得",
  "Failed to get embed object: [_1]": "埋め込みオブジェクトの取得に失敗しました: [_1]",
  File: tv,
  "Align Right": "右揃え",
  'Specify the color to be used for "Text color" and "highlight color".': "「テキストの色」や「ハイライトの色」で利用する色を指定します。",
  Height: nv,
  "Table Properties": "表のプロパティ",
  Boilerplate: iv,
  VERTICAL_ALIGN_BOTTOM: rv,
  "Source Code": "ソースコード",
  "Paste as link": "リンクとして貼り付け",
  Text: sv,
  Cell: ov,
  "Toggle to HTML structure editing mode": "HTML構造編集モードへの切り替え",
  "Embed inline": "インライン埋め込み",
  Blockquote: av,
  "Select the style to be used in the paragraph style.": "段落スタイルで利用するスタイルを選択します。",
  "Bullet List": "箇条書き",
  "Select items to use in the toolbar.": "ツールバーで利用するアイテムを選択します。",
  "Insert File": "アセットの挿入",
  "Toggle to HTML editing mode": "HTML編集モードへの切り替え",
  "Merge cells": "セルを結合",
  Bold: lv,
  "Horizontal align": "横配置",
  "Convert from Markdown": "Markdownから変換",
  "Row Properties": "行のプロパティ",
  "Select the rules that allow the retrieval of web page metadata. This selection affects the ability to embed web page content.": "ウェブページのメタデータの取得を許可するルールを選択します。この選択はウェブページの内容を埋め込む機能に影響します。",
  "Allow data to be retrieved from URLs of sites in the system": "システム内のサイトのURLに対してデータ取得を許可する",
  "Do not allow data to be retrieved": "データ取得を許可しない",
  Image: cv,
  "Insert column before": "前に列を挿入",
  "Paragraph Styles": "段落スタイル",
  "Edit Image": "画像を編集",
  "Color Palette": "カラーパレット",
  "Delete Image": "画像を削除",
  "Split cell": "セルを分割",
  "Select the properties you want to keep in the pasted HTML. Unselected properties will be removed.": "style属性のプロパティを選択してください。選択しないプロパティは削除されます。",
  "Horizontal Rule": "水平罫線",
  "Table properties": "表のプロパティ",
  Title: uv,
  "Header cell": "ヘッダーセル",
  HORIZONTAL_ALIGN_LEFT: dv,
  "Insert row after": "後に行を挿入",
  "Row properties": "行のプロパティ",
  Paragraph: fv,
  "Select the data attributes you want to keep in the pasted HTML. Unselected attributes will be removed.": "保持したいデータ属性を選択してください。選択しない属性は削除されます。",
  "Delete table": "表の削除",
  None: hv,
  "Insert row before": "前に行を挿入",
  "Allow data to be retrieved from any URL": "任意のURLに対してデータ取得を許可する",
  "Embed webpage as card": "ウェブページの埋め込み (カード)",
  Scope: pv,
  "Class name": "クラス名",
  Width: mv,
  LINK_TARGET_BLANK: gv
}, bv = "Left", vv = "Bottom", yv = "Right", xv = "Current window", wv = "Justify", kv = "New window", Sv = "Center", Ev = "Top", Cv = "Middle", Tv = {
  HORIZONTAL_ALIGN_LEFT: bv,
  "Vertical align": "Vertical align",
  VERTICAL_ALIGN_BOTTOM: vv,
  HORIZONTAL_ALIGN_RIGHT: yv,
  LINK_TARGET_SELF: xv,
  HORIZONTAL_ALIGN_JUSTIFY: wv,
  LINK_TARGET_BLANK: kv,
  HORIZONTAL_ALIGN_CENTER: Sv,
  VERTICAL_ALIGN_TOP: Ev,
  VERTICAL_ALIGN_MIDDLE: Cv
};
et.init({
  fallbackLng: "en",
  resources: {
    ja: {
      translation: _v
    },
    en: {
      translation: Tv
    }
  }
});
const I = (...n) => {
  if (typeof n[0] == "string")
    return et.t(...n);
  {
    let e = "";
    const [t, ...i] = n;
    for (let r = 0; r < t.length; r++)
      e += t[r] + et.t(i[r]);
    return e;
  }
};
function kt(n) {
  this.content = n;
}
kt.prototype = {
  constructor: kt,
  find: function(n) {
    for (var e = 0; e < this.content.length; e += 2)
      if (this.content[e] === n) return e;
    return -1;
  },
  // :: (string) → ?any
  // Retrieve the value stored under `key`, or return undefined when
  // no such key exists.
  get: function(n) {
    var e = this.find(n);
    return e == -1 ? void 0 : this.content[e + 1];
  },
  // :: (string, any, ?string) → OrderedMap
  // Create a new map by replacing the value of `key` with a new
  // value, or adding a binding to the end of the map. If `newKey` is
  // given, the key of the binding will be replaced with that key.
  update: function(n, e, t) {
    var i = t && t != n ? this.remove(t) : this, r = i.find(n), s = i.content.slice();
    return r == -1 ? s.push(t || n, e) : (s[r + 1] = e, t && (s[r] = t)), new kt(s);
  },
  // :: (string) → OrderedMap
  // Return a map with the given key removed, if it existed.
  remove: function(n) {
    var e = this.find(n);
    if (e == -1) return this;
    var t = this.content.slice();
    return t.splice(e, 2), new kt(t);
  },
  // :: (string, any) → OrderedMap
  // Add a new key to the start of the map.
  addToStart: function(n, e) {
    return new kt([n, e].concat(this.remove(n).content));
  },
  // :: (string, any) → OrderedMap
  // Add a new key to the end of the map.
  addToEnd: function(n, e) {
    var t = this.remove(n).content.slice();
    return t.push(n, e), new kt(t);
  },
  // :: (string, string, any) → OrderedMap
  // Add a key after the given key. If `place` is not found, the new
  // key is added to the end.
  addBefore: function(n, e, t) {
    var i = this.remove(e), r = i.content.slice(), s = i.find(n);
    return r.splice(s == -1 ? r.length : s, 0, e, t), new kt(r);
  },
  // :: ((key: string, value: any))
  // Call the given function for each key/value pair in the map, in
  // order.
  forEach: function(n) {
    for (var e = 0; e < this.content.length; e += 2)
      n(this.content[e], this.content[e + 1]);
  },
  // :: (union<Object, OrderedMap>) → OrderedMap
  // Create a new map by prepending the keys in this map that don't
  // appear in `map` before the keys in `map`.
  prepend: function(n) {
    return n = kt.from(n), n.size ? new kt(n.content.concat(this.subtract(n).content)) : this;
  },
  // :: (union<Object, OrderedMap>) → OrderedMap
  // Create a new map by appending the keys in this map that don't
  // appear in `map` after the keys in `map`.
  append: function(n) {
    return n = kt.from(n), n.size ? new kt(this.subtract(n).content.concat(n.content)) : this;
  },
  // :: (union<Object, OrderedMap>) → OrderedMap
  // Create a map containing all the keys in this map that don't
  // appear in `map`.
  subtract: function(n) {
    var e = this;
    n = kt.from(n);
    for (var t = 0; t < n.content.length; t += 2)
      e = e.remove(n.content[t]);
    return e;
  },
  // :: () → Object
  // Turn ordered map into a plain object.
  toObject: function() {
    var n = {};
    return this.forEach(function(e, t) {
      n[e] = t;
    }), n;
  },
  // :: number
  // The amount of keys in this map.
  get size() {
    return this.content.length >> 1;
  }
};
kt.from = function(n) {
  if (n instanceof kt) return n;
  var e = [];
  if (n) for (var t in n) e.push(t, n[t]);
  return new kt(e);
};
function sm(n, e, t) {
  for (let i = 0; ; i++) {
    if (i == n.childCount || i == e.childCount)
      return n.childCount == e.childCount ? null : t;
    let r = n.child(i), s = e.child(i);
    if (r == s) {
      t += r.nodeSize;
      continue;
    }
    if (!r.sameMarkup(s))
      return t;
    if (r.isText && r.text != s.text) {
      for (let o = 0; r.text[o] == s.text[o]; o++)
        t++;
      return t;
    }
    if (r.content.size || s.content.size) {
      let o = sm(r.content, s.content, t + 1);
      if (o != null)
        return o;
    }
    t += r.nodeSize;
  }
}
function om(n, e, t, i) {
  for (let r = n.childCount, s = e.childCount; ; ) {
    if (r == 0 || s == 0)
      return r == s ? null : { a: t, b: i };
    let o = n.child(--r), a = e.child(--s), l = o.nodeSize;
    if (o == a) {
      t -= l, i -= l;
      continue;
    }
    if (!o.sameMarkup(a))
      return { a: t, b: i };
    if (o.isText && o.text != a.text) {
      let c = 0, u = Math.min(o.text.length, a.text.length);
      for (; c < u && o.text[o.text.length - c - 1] == a.text[a.text.length - c - 1]; )
        c++, t--, i--;
      return { a: t, b: i };
    }
    if (o.content.size || a.content.size) {
      let c = om(o.content, a.content, t - 1, i - 1);
      if (c)
        return c;
    }
    t -= l, i -= l;
  }
}
class $ {
  /**
  @internal
  */
  constructor(e, t) {
    if (this.content = e, this.size = t || 0, t == null)
      for (let i = 0; i < e.length; i++)
        this.size += e[i].nodeSize;
  }
  /**
  Invoke a callback for all descendant nodes between the given two
  positions (relative to start of this fragment). Doesn't descend
  into a node when the callback returns `false`.
  */
  nodesBetween(e, t, i, r = 0, s) {
    for (let o = 0, a = 0; a < t; o++) {
      let l = this.content[o], c = a + l.nodeSize;
      if (c > e && i(l, r + a, s || null, o) !== !1 && l.content.size) {
        let u = a + 1;
        l.nodesBetween(Math.max(0, e - u), Math.min(l.content.size, t - u), i, r + u);
      }
      a = c;
    }
  }
  /**
  Call the given callback for every descendant node. `pos` will be
  relative to the start of the fragment. The callback may return
  `false` to prevent traversal of a given node's children.
  */
  descendants(e) {
    this.nodesBetween(0, this.size, e);
  }
  /**
  Extract the text between `from` and `to`. See the same method on
  [`Node`](https://prosemirror.net/docs/ref/#model.Node.textBetween).
  */
  textBetween(e, t, i, r) {
    let s = "", o = !0;
    return this.nodesBetween(e, t, (a, l) => {
      let c = a.isText ? a.text.slice(Math.max(e, l) - l, t - l) : a.isLeaf ? r ? typeof r == "function" ? r(a) : r : a.type.spec.leafText ? a.type.spec.leafText(a) : "" : "";
      a.isBlock && (a.isLeaf && c || a.isTextblock) && i && (o ? o = !1 : s += i), s += c;
    }, 0), s;
  }
  /**
  Create a new fragment containing the combined content of this
  fragment and the other.
  */
  append(e) {
    if (!e.size)
      return this;
    if (!this.size)
      return e;
    let t = this.lastChild, i = e.firstChild, r = this.content.slice(), s = 0;
    for (t.isText && t.sameMarkup(i) && (r[r.length - 1] = t.withText(t.text + i.text), s = 1); s < e.content.length; s++)
      r.push(e.content[s]);
    return new $(r, this.size + e.size);
  }
  /**
  Cut out the sub-fragment between the two given positions.
  */
  cut(e, t = this.size) {
    if (e == 0 && t == this.size)
      return this;
    let i = [], r = 0;
    if (t > e)
      for (let s = 0, o = 0; o < t; s++) {
        let a = this.content[s], l = o + a.nodeSize;
        l > e && ((o < e || l > t) && (a.isText ? a = a.cut(Math.max(0, e - o), Math.min(a.text.length, t - o)) : a = a.cut(Math.max(0, e - o - 1), Math.min(a.content.size, t - o - 1))), i.push(a), r += a.nodeSize), o = l;
      }
    return new $(i, r);
  }
  /**
  @internal
  */
  cutByIndex(e, t) {
    return e == t ? $.empty : e == 0 && t == this.content.length ? this : new $(this.content.slice(e, t));
  }
  /**
  Create a new fragment in which the node at the given index is
  replaced by the given node.
  */
  replaceChild(e, t) {
    let i = this.content[e];
    if (i == t)
      return this;
    let r = this.content.slice(), s = this.size + t.nodeSize - i.nodeSize;
    return r[e] = t, new $(r, s);
  }
  /**
  Create a new fragment by prepending the given node to this
  fragment.
  */
  addToStart(e) {
    return new $([e].concat(this.content), this.size + e.nodeSize);
  }
  /**
  Create a new fragment by appending the given node to this
  fragment.
  */
  addToEnd(e) {
    return new $(this.content.concat(e), this.size + e.nodeSize);
  }
  /**
  Compare this fragment to another one.
  */
  eq(e) {
    if (this.content.length != e.content.length)
      return !1;
    for (let t = 0; t < this.content.length; t++)
      if (!this.content[t].eq(e.content[t]))
        return !1;
    return !0;
  }
  /**
  The first child of the fragment, or `null` if it is empty.
  */
  get firstChild() {
    return this.content.length ? this.content[0] : null;
  }
  /**
  The last child of the fragment, or `null` if it is empty.
  */
  get lastChild() {
    return this.content.length ? this.content[this.content.length - 1] : null;
  }
  /**
  The number of child nodes in this fragment.
  */
  get childCount() {
    return this.content.length;
  }
  /**
  Get the child node at the given index. Raise an error when the
  index is out of range.
  */
  child(e) {
    let t = this.content[e];
    if (!t)
      throw new RangeError("Index " + e + " out of range for " + this);
    return t;
  }
  /**
  Get the child node at the given index, if it exists.
  */
  maybeChild(e) {
    return this.content[e] || null;
  }
  /**
  Call `f` for every child node, passing the node, its offset
  into this parent node, and its index.
  */
  forEach(e) {
    for (let t = 0, i = 0; t < this.content.length; t++) {
      let r = this.content[t];
      e(r, i, t), i += r.nodeSize;
    }
  }
  /**
  Find the first position at which this fragment and another
  fragment differ, or `null` if they are the same.
  */
  findDiffStart(e, t = 0) {
    return sm(this, e, t);
  }
  /**
  Find the first position, searching from the end, at which this
  fragment and the given fragment differ, or `null` if they are
  the same. Since this position will not be the same in both
  nodes, an object with two separate positions is returned.
  */
  findDiffEnd(e, t = this.size, i = e.size) {
    return om(this, e, t, i);
  }
  /**
  Find the index and inner offset corresponding to a given relative
  position in this fragment. The result object will be reused
  (overwritten) the next time the function is called. @internal
  */
  findIndex(e, t = -1) {
    if (e == 0)
      return wo(0, e);
    if (e == this.size)
      return wo(this.content.length, e);
    if (e > this.size || e < 0)
      throw new RangeError(`Position ${e} outside of fragment (${this})`);
    for (let i = 0, r = 0; ; i++) {
      let s = this.child(i), o = r + s.nodeSize;
      if (o >= e)
        return o == e || t > 0 ? wo(i + 1, o) : wo(i, r);
      r = o;
    }
  }
  /**
  Return a debugging string that describes this fragment.
  */
  toString() {
    return "<" + this.toStringInner() + ">";
  }
  /**
  @internal
  */
  toStringInner() {
    return this.content.join(", ");
  }
  /**
  Create a JSON-serializeable representation of this fragment.
  */
  toJSON() {
    return this.content.length ? this.content.map((e) => e.toJSON()) : null;
  }
  /**
  Deserialize a fragment from its JSON representation.
  */
  static fromJSON(e, t) {
    if (!t)
      return $.empty;
    if (!Array.isArray(t))
      throw new RangeError("Invalid input for Fragment.fromJSON");
    return new $(t.map(e.nodeFromJSON));
  }
  /**
  Build a fragment from an array of nodes. Ensures that adjacent
  text nodes with the same marks are joined together.
  */
  static fromArray(e) {
    if (!e.length)
      return $.empty;
    let t, i = 0;
    for (let r = 0; r < e.length; r++) {
      let s = e[r];
      i += s.nodeSize, r && s.isText && e[r - 1].sameMarkup(s) ? (t || (t = e.slice(0, r)), t[t.length - 1] = s.withText(t[t.length - 1].text + s.text)) : t && t.push(s);
    }
    return new $(t || e, i);
  }
  /**
  Create a fragment from something that can be interpreted as a
  set of nodes. For `null`, it returns the empty fragment. For a
  fragment, the fragment itself. For a node or array of nodes, a
  fragment containing those nodes.
  */
  static from(e) {
    if (!e)
      return $.empty;
    if (e instanceof $)
      return e;
    if (Array.isArray(e))
      return this.fromArray(e);
    if (e.attrs)
      return new $([e], e.nodeSize);
    throw new RangeError("Can not convert " + e + " to a Fragment" + (e.nodesBetween ? " (looks like multiple versions of prosemirror-model were loaded)" : ""));
  }
}
$.empty = new $([], 0);
const Il = { index: 0, offset: 0 };
function wo(n, e) {
  return Il.index = n, Il.offset = e, Il;
}
function aa(n, e) {
  if (n === e)
    return !0;
  if (!(n && typeof n == "object") || !(e && typeof e == "object"))
    return !1;
  let t = Array.isArray(n);
  if (Array.isArray(e) != t)
    return !1;
  if (t) {
    if (n.length != e.length)
      return !1;
    for (let i = 0; i < n.length; i++)
      if (!aa(n[i], e[i]))
        return !1;
  } else {
    for (let i in n)
      if (!(i in e) || !aa(n[i], e[i]))
        return !1;
    for (let i in e)
      if (!(i in n))
        return !1;
  }
  return !0;
}
let Fe = class $c {
  /**
  @internal
  */
  constructor(e, t) {
    this.type = e, this.attrs = t;
  }
  /**
  Given a set of marks, create a new set which contains this one as
  well, in the right position. If this mark is already in the set,
  the set itself is returned. If any marks that are set to be
  [exclusive](https://prosemirror.net/docs/ref/#model.MarkSpec.excludes) with this mark are present,
  those are replaced by this one.
  */
  addToSet(e) {
    let t, i = !1;
    for (let r = 0; r < e.length; r++) {
      let s = e[r];
      if (this.eq(s))
        return e;
      if (this.type.excludes(s.type))
        t || (t = e.slice(0, r));
      else {
        if (s.type.excludes(this.type))
          return e;
        !i && s.type.rank > this.type.rank && (t || (t = e.slice(0, r)), t.push(this), i = !0), t && t.push(s);
      }
    }
    return t || (t = e.slice()), i || t.push(this), t;
  }
  /**
  Remove this mark from the given set, returning a new set. If this
  mark is not in the set, the set itself is returned.
  */
  removeFromSet(e) {
    for (let t = 0; t < e.length; t++)
      if (this.eq(e[t]))
        return e.slice(0, t).concat(e.slice(t + 1));
    return e;
  }
  /**
  Test whether this mark is in the given set of marks.
  */
  isInSet(e) {
    for (let t = 0; t < e.length; t++)
      if (this.eq(e[t]))
        return !0;
    return !1;
  }
  /**
  Test whether this mark has the same type and attributes as
  another mark.
  */
  eq(e) {
    return this == e || this.type == e.type && aa(this.attrs, e.attrs);
  }
  /**
  Convert this mark to a JSON-serializeable representation.
  */
  toJSON() {
    let e = { type: this.type.name };
    for (let t in this.attrs) {
      e.attrs = this.attrs;
      break;
    }
    return e;
  }
  /**
  Deserialize a mark from JSON.
  */
  static fromJSON(e, t) {
    if (!t)
      throw new RangeError("Invalid input for Mark.fromJSON");
    let i = e.marks[t.type];
    if (!i)
      throw new RangeError(`There is no mark type ${t.type} in this schema`);
    let r = i.create(t.attrs);
    return i.checkAttrs(r.attrs), r;
  }
  /**
  Test whether two sets of marks are identical.
  */
  static sameSet(e, t) {
    if (e == t)
      return !0;
    if (e.length != t.length)
      return !1;
    for (let i = 0; i < e.length; i++)
      if (!e[i].eq(t[i]))
        return !1;
    return !0;
  }
  /**
  Create a properly sorted mark set from null, a single mark, or an
  unsorted array of marks.
  */
  static setFrom(e) {
    if (!e || Array.isArray(e) && e.length == 0)
      return $c.none;
    if (e instanceof $c)
      return [e];
    let t = e.slice();
    return t.sort((i, r) => i.type.rank - r.type.rank), t;
  }
};
Fe.none = [];
class la extends Error {
}
class X {
  /**
  Create a slice. When specifying a non-zero open depth, you must
  make sure that there are nodes of at least that depth at the
  appropriate side of the fragment—i.e. if the fragment is an
  empty paragraph node, `openStart` and `openEnd` can't be greater
  than 1.
  
  It is not necessary for the content of open nodes to conform to
  the schema's content constraints, though it should be a valid
  start/end/middle for such a node, depending on which sides are
  open.
  */
  constructor(e, t, i) {
    this.content = e, this.openStart = t, this.openEnd = i;
  }
  /**
  The size this slice would add when inserted into a document.
  */
  get size() {
    return this.content.size - this.openStart - this.openEnd;
  }
  /**
  @internal
  */
  insertAt(e, t) {
    let i = lm(this.content, e + this.openStart, t);
    return i && new X(i, this.openStart, this.openEnd);
  }
  /**
  @internal
  */
  removeBetween(e, t) {
    return new X(am(this.content, e + this.openStart, t + this.openStart), this.openStart, this.openEnd);
  }
  /**
  Tests whether this slice is equal to another slice.
  */
  eq(e) {
    return this.content.eq(e.content) && this.openStart == e.openStart && this.openEnd == e.openEnd;
  }
  /**
  @internal
  */
  toString() {
    return this.content + "(" + this.openStart + "," + this.openEnd + ")";
  }
  /**
  Convert a slice to a JSON-serializable representation.
  */
  toJSON() {
    if (!this.content.size)
      return null;
    let e = { content: this.content.toJSON() };
    return this.openStart > 0 && (e.openStart = this.openStart), this.openEnd > 0 && (e.openEnd = this.openEnd), e;
  }
  /**
  Deserialize a slice from its JSON representation.
  */
  static fromJSON(e, t) {
    if (!t)
      return X.empty;
    let i = t.openStart || 0, r = t.openEnd || 0;
    if (typeof i != "number" || typeof r != "number")
      throw new RangeError("Invalid input for Slice.fromJSON");
    return new X($.fromJSON(e, t.content), i, r);
  }
  /**
  Create a slice from a fragment by taking the maximum possible
  open value on both side of the fragment.
  */
  static maxOpen(e, t = !0) {
    let i = 0, r = 0;
    for (let s = e.firstChild; s && !s.isLeaf && (t || !s.type.spec.isolating); s = s.firstChild)
      i++;
    for (let s = e.lastChild; s && !s.isLeaf && (t || !s.type.spec.isolating); s = s.lastChild)
      r++;
    return new X(e, i, r);
  }
}
X.empty = new X($.empty, 0, 0);
function am(n, e, t) {
  let { index: i, offset: r } = n.findIndex(e), s = n.maybeChild(i), { index: o, offset: a } = n.findIndex(t);
  if (r == e || s.isText) {
    if (a != t && !n.child(o).isText)
      throw new RangeError("Removing non-flat range");
    return n.cut(0, e).append(n.cut(t));
  }
  if (i != o)
    throw new RangeError("Removing non-flat range");
  return n.replaceChild(i, s.copy(am(s.content, e - r - 1, t - r - 1)));
}
function lm(n, e, t, i) {
  let { index: r, offset: s } = n.findIndex(e), o = n.maybeChild(r);
  if (s == e || o.isText)
    return n.cut(0, e).append(t).append(n.cut(e));
  let a = lm(o.content, e - s - 1, t);
  return a && n.replaceChild(r, o.copy(a));
}
function Av(n, e, t) {
  if (t.openStart > n.depth)
    throw new la("Inserted content deeper than insertion position");
  if (n.depth - t.openStart != e.depth - t.openEnd)
    throw new la("Inconsistent open depths");
  return cm(n, e, t, 0);
}
function cm(n, e, t, i) {
  let r = n.index(i), s = n.node(i);
  if (r == e.index(i) && i < n.depth - t.openStart) {
    let o = cm(n, e, t, i + 1);
    return s.copy(s.content.replaceChild(r, o));
  } else if (t.content.size)
    if (!t.openStart && !t.openEnd && n.depth == i && e.depth == i) {
      let o = n.parent, a = o.content;
      return Vi(o, a.cut(0, n.parentOffset).append(t.content).append(a.cut(e.parentOffset)));
    } else {
      let { start: o, end: a } = Mv(t, n);
      return Vi(s, dm(n, o, a, e, i));
    }
  else return Vi(s, ca(n, e, i));
}
function um(n, e) {
  if (!e.type.compatibleContent(n.type))
    throw new la("Cannot join " + e.type.name + " onto " + n.type.name);
}
function zc(n, e, t) {
  let i = n.node(t);
  return um(i, e.node(t)), i;
}
function Fi(n, e) {
  let t = e.length - 1;
  t >= 0 && n.isText && n.sameMarkup(e[t]) ? e[t] = n.withText(e[t].text + n.text) : e.push(n);
}
function ks(n, e, t, i) {
  let r = (e || n).node(t), s = 0, o = e ? e.index(t) : r.childCount;
  n && (s = n.index(t), n.depth > t ? s++ : n.textOffset && (Fi(n.nodeAfter, i), s++));
  for (let a = s; a < o; a++)
    Fi(r.child(a), i);
  e && e.depth == t && e.textOffset && Fi(e.nodeBefore, i);
}
function Vi(n, e) {
  return n.type.checkContent(e), n.copy(e);
}
function dm(n, e, t, i, r) {
  let s = n.depth > r && zc(n, e, r + 1), o = i.depth > r && zc(t, i, r + 1), a = [];
  return ks(null, n, r, a), s && o && e.index(r) == t.index(r) ? (um(s, o), Fi(Vi(s, dm(n, e, t, i, r + 1)), a)) : (s && Fi(Vi(s, ca(n, e, r + 1)), a), ks(e, t, r, a), o && Fi(Vi(o, ca(t, i, r + 1)), a)), ks(i, null, r, a), new $(a);
}
function ca(n, e, t) {
  let i = [];
  if (ks(null, n, t, i), n.depth > t) {
    let r = zc(n, e, t + 1);
    Fi(Vi(r, ca(n, e, t + 1)), i);
  }
  return ks(e, null, t, i), new $(i);
}
function Mv(n, e) {
  let t = e.depth - n.openStart, r = e.node(t).copy(n.content);
  for (let s = t - 1; s >= 0; s--)
    r = e.node(s).copy($.from(r));
  return {
    start: r.resolveNoCache(n.openStart + t),
    end: r.resolveNoCache(r.content.size - n.openEnd - t)
  };
}
class $s {
  /**
  @internal
  */
  constructor(e, t, i) {
    this.pos = e, this.path = t, this.parentOffset = i, this.depth = t.length / 3 - 1;
  }
  /**
  @internal
  */
  resolveDepth(e) {
    return e == null ? this.depth : e < 0 ? this.depth + e : e;
  }
  /**
  The parent node that the position points into. Note that even if
  a position points into a text node, that node is not considered
  the parent—text nodes are ‘flat’ in this model, and have no content.
  */
  get parent() {
    return this.node(this.depth);
  }
  /**
  The root node in which the position was resolved.
  */
  get doc() {
    return this.node(0);
  }
  /**
  The ancestor node at the given level. `p.node(p.depth)` is the
  same as `p.parent`.
  */
  node(e) {
    return this.path[this.resolveDepth(e) * 3];
  }
  /**
  The index into the ancestor at the given level. If this points
  at the 3rd node in the 2nd paragraph on the top level, for
  example, `p.index(0)` is 1 and `p.index(1)` is 2.
  */
  index(e) {
    return this.path[this.resolveDepth(e) * 3 + 1];
  }
  /**
  The index pointing after this position into the ancestor at the
  given level.
  */
  indexAfter(e) {
    return e = this.resolveDepth(e), this.index(e) + (e == this.depth && !this.textOffset ? 0 : 1);
  }
  /**
  The (absolute) position at the start of the node at the given
  level.
  */
  start(e) {
    return e = this.resolveDepth(e), e == 0 ? 0 : this.path[e * 3 - 1] + 1;
  }
  /**
  The (absolute) position at the end of the node at the given
  level.
  */
  end(e) {
    return e = this.resolveDepth(e), this.start(e) + this.node(e).content.size;
  }
  /**
  The (absolute) position directly before the wrapping node at the
  given level, or, when `depth` is `this.depth + 1`, the original
  position.
  */
  before(e) {
    if (e = this.resolveDepth(e), !e)
      throw new RangeError("There is no position before the top-level node");
    return e == this.depth + 1 ? this.pos : this.path[e * 3 - 1];
  }
  /**
  The (absolute) position directly after the wrapping node at the
  given level, or the original position when `depth` is `this.depth + 1`.
  */
  after(e) {
    if (e = this.resolveDepth(e), !e)
      throw new RangeError("There is no position after the top-level node");
    return e == this.depth + 1 ? this.pos : this.path[e * 3 - 1] + this.path[e * 3].nodeSize;
  }
  /**
  When this position points into a text node, this returns the
  distance between the position and the start of the text node.
  Will be zero for positions that point between nodes.
  */
  get textOffset() {
    return this.pos - this.path[this.path.length - 1];
  }
  /**
  Get the node directly after the position, if any. If the position
  points into a text node, only the part of that node after the
  position is returned.
  */
  get nodeAfter() {
    let e = this.parent, t = this.index(this.depth);
    if (t == e.childCount)
      return null;
    let i = this.pos - this.path[this.path.length - 1], r = e.child(t);
    return i ? e.child(t).cut(i) : r;
  }
  /**
  Get the node directly before the position, if any. If the
  position points into a text node, only the part of that node
  before the position is returned.
  */
  get nodeBefore() {
    let e = this.index(this.depth), t = this.pos - this.path[this.path.length - 1];
    return t ? this.parent.child(e).cut(0, t) : e == 0 ? null : this.parent.child(e - 1);
  }
  /**
  Get the position at the given index in the parent node at the
  given depth (which defaults to `this.depth`).
  */
  posAtIndex(e, t) {
    t = this.resolveDepth(t);
    let i = this.path[t * 3], r = t == 0 ? 0 : this.path[t * 3 - 1] + 1;
    for (let s = 0; s < e; s++)
      r += i.child(s).nodeSize;
    return r;
  }
  /**
  Get the marks at this position, factoring in the surrounding
  marks' [`inclusive`](https://prosemirror.net/docs/ref/#model.MarkSpec.inclusive) property. If the
  position is at the start of a non-empty node, the marks of the
  node after it (if any) are returned.
  */
  marks() {
    let e = this.parent, t = this.index();
    if (e.content.size == 0)
      return Fe.none;
    if (this.textOffset)
      return e.child(t).marks;
    let i = e.maybeChild(t - 1), r = e.maybeChild(t);
    if (!i) {
      let a = i;
      i = r, r = a;
    }
    let s = i.marks;
    for (var o = 0; o < s.length; o++)
      s[o].type.spec.inclusive === !1 && (!r || !s[o].isInSet(r.marks)) && (s = s[o--].removeFromSet(s));
    return s;
  }
  /**
  Get the marks after the current position, if any, except those
  that are non-inclusive and not present at position `$end`. This
  is mostly useful for getting the set of marks to preserve after a
  deletion. Will return `null` if this position is at the end of
  its parent node or its parent node isn't a textblock (in which
  case no marks should be preserved).
  */
  marksAcross(e) {
    let t = this.parent.maybeChild(this.index());
    if (!t || !t.isInline)
      return null;
    let i = t.marks, r = e.parent.maybeChild(e.index());
    for (var s = 0; s < i.length; s++)
      i[s].type.spec.inclusive === !1 && (!r || !i[s].isInSet(r.marks)) && (i = i[s--].removeFromSet(i));
    return i;
  }
  /**
  The depth up to which this position and the given (non-resolved)
  position share the same parent nodes.
  */
  sharedDepth(e) {
    for (let t = this.depth; t > 0; t--)
      if (this.start(t) <= e && this.end(t) >= e)
        return t;
    return 0;
  }
  /**
  Returns a range based on the place where this position and the
  given position diverge around block content. If both point into
  the same textblock, for example, a range around that textblock
  will be returned. If they point into different blocks, the range
  around those blocks in their shared ancestor is returned. You can
  pass in an optional predicate that will be called with a parent
  node to see if a range into that parent is acceptable.
  */
  blockRange(e = this, t) {
    if (e.pos < this.pos)
      return e.blockRange(this);
    for (let i = this.depth - (this.parent.inlineContent || this.pos == e.pos ? 1 : 0); i >= 0; i--)
      if (e.pos <= this.end(i) && (!t || t(this.node(i))))
        return new ua(this, e, i);
    return null;
  }
  /**
  Query whether the given position shares the same parent node.
  */
  sameParent(e) {
    return this.pos - this.parentOffset == e.pos - e.parentOffset;
  }
  /**
  Return the greater of this and the given position.
  */
  max(e) {
    return e.pos > this.pos ? e : this;
  }
  /**
  Return the smaller of this and the given position.
  */
  min(e) {
    return e.pos < this.pos ? e : this;
  }
  /**
  @internal
  */
  toString() {
    let e = "";
    for (let t = 1; t <= this.depth; t++)
      e += (e ? "/" : "") + this.node(t).type.name + "_" + this.index(t - 1);
    return e + ":" + this.parentOffset;
  }
  /**
  @internal
  */
  static resolve(e, t) {
    if (!(t >= 0 && t <= e.content.size))
      throw new RangeError("Position " + t + " out of range");
    let i = [], r = 0, s = t;
    for (let o = e; ; ) {
      let { index: a, offset: l } = o.content.findIndex(s), c = s - l;
      if (i.push(o, a, r + l), !c || (o = o.child(a), o.isText))
        break;
      s = c - 1, r += l + 1;
    }
    return new $s(t, i, s);
  }
  /**
  @internal
  */
  static resolveCached(e, t) {
    let i = hf.get(e);
    if (i)
      for (let s = 0; s < i.elts.length; s++) {
        let o = i.elts[s];
        if (o.pos == t)
          return o;
      }
    else
      hf.set(e, i = new Ov());
    let r = i.elts[i.i] = $s.resolve(e, t);
    return i.i = (i.i + 1) % Nv, r;
  }
}
class Ov {
  constructor() {
    this.elts = [], this.i = 0;
  }
}
const Nv = 12, hf = /* @__PURE__ */ new WeakMap();
class ua {
  /**
  Construct a node range. `$from` and `$to` should point into the
  same node until at least the given `depth`, since a node range
  denotes an adjacent set of nodes in a single parent node.
  */
  constructor(e, t, i) {
    this.$from = e, this.$to = t, this.depth = i;
  }
  /**
  The position at the start of the range.
  */
  get start() {
    return this.$from.before(this.depth + 1);
  }
  /**
  The position at the end of the range.
  */
  get end() {
    return this.$to.after(this.depth + 1);
  }
  /**
  The parent node that the range points into.
  */
  get parent() {
    return this.$from.node(this.depth);
  }
  /**
  The start index of the range in the parent node.
  */
  get startIndex() {
    return this.$from.index(this.depth);
  }
  /**
  The end index of the range in the parent node.
  */
  get endIndex() {
    return this.$to.indexAfter(this.depth);
  }
}
const Lv = /* @__PURE__ */ Object.create(null);
let Hn = class Bc {
  /**
  @internal
  */
  constructor(e, t, i, r = Fe.none) {
    this.type = e, this.attrs = t, this.marks = r, this.content = i || $.empty;
  }
  /**
  The array of this node's child nodes.
  */
  get children() {
    return this.content.content;
  }
  /**
  The size of this node, as defined by the integer-based [indexing
  scheme](/docs/guide/#doc.indexing). For text nodes, this is the
  amount of characters. For other leaf nodes, it is one. For
  non-leaf nodes, it is the size of the content plus two (the
  start and end token).
  */
  get nodeSize() {
    return this.isLeaf ? 1 : 2 + this.content.size;
  }
  /**
  The number of children that the node has.
  */
  get childCount() {
    return this.content.childCount;
  }
  /**
  Get the child node at the given index. Raises an error when the
  index is out of range.
  */
  child(e) {
    return this.content.child(e);
  }
  /**
  Get the child node at the given index, if it exists.
  */
  maybeChild(e) {
    return this.content.maybeChild(e);
  }
  /**
  Call `f` for every child node, passing the node, its offset
  into this parent node, and its index.
  */
  forEach(e) {
    this.content.forEach(e);
  }
  /**
  Invoke a callback for all descendant nodes recursively between
  the given two positions that are relative to start of this
  node's content. The callback is invoked with the node, its
  position relative to the original node (method receiver),
  its parent node, and its child index. When the callback returns
  false for a given node, that node's children will not be
  recursed over. The last parameter can be used to specify a
  starting position to count from.
  */
  nodesBetween(e, t, i, r = 0) {
    this.content.nodesBetween(e, t, i, r, this);
  }
  /**
  Call the given callback for every descendant node. Doesn't
  descend into a node when the callback returns `false`.
  */
  descendants(e) {
    this.nodesBetween(0, this.content.size, e);
  }
  /**
  Concatenates all the text nodes found in this fragment and its
  children.
  */
  get textContent() {
    return this.isLeaf && this.type.spec.leafText ? this.type.spec.leafText(this) : this.textBetween(0, this.content.size, "");
  }
  /**
  Get all text between positions `from` and `to`. When
  `blockSeparator` is given, it will be inserted to separate text
  from different block nodes. If `leafText` is given, it'll be
  inserted for every non-text leaf node encountered, otherwise
  [`leafText`](https://prosemirror.net/docs/ref/#model.NodeSpec^leafText) will be used.
  */
  textBetween(e, t, i, r) {
    return this.content.textBetween(e, t, i, r);
  }
  /**
  Returns this node's first child, or `null` if there are no
  children.
  */
  get firstChild() {
    return this.content.firstChild;
  }
  /**
  Returns this node's last child, or `null` if there are no
  children.
  */
  get lastChild() {
    return this.content.lastChild;
  }
  /**
  Test whether two nodes represent the same piece of document.
  */
  eq(e) {
    return this == e || this.sameMarkup(e) && this.content.eq(e.content);
  }
  /**
  Compare the markup (type, attributes, and marks) of this node to
  those of another. Returns `true` if both have the same markup.
  */
  sameMarkup(e) {
    return this.hasMarkup(e.type, e.attrs, e.marks);
  }
  /**
  Check whether this node's markup correspond to the given type,
  attributes, and marks.
  */
  hasMarkup(e, t, i) {
    return this.type == e && aa(this.attrs, t || e.defaultAttrs || Lv) && Fe.sameSet(this.marks, i || Fe.none);
  }
  /**
  Create a new node with the same markup as this node, containing
  the given content (or empty, if no content is given).
  */
  copy(e = null) {
    return e == this.content ? this : new Bc(this.type, this.attrs, e, this.marks);
  }
  /**
  Create a copy of this node, with the given set of marks instead
  of the node's own marks.
  */
  mark(e) {
    return e == this.marks ? this : new Bc(this.type, this.attrs, this.content, e);
  }
  /**
  Create a copy of this node with only the content between the
  given positions. If `to` is not given, it defaults to the end of
  the node.
  */
  cut(e, t = this.content.size) {
    return e == 0 && t == this.content.size ? this : this.copy(this.content.cut(e, t));
  }
  /**
  Cut out the part of the document between the given positions, and
  return it as a `Slice` object.
  */
  slice(e, t = this.content.size, i = !1) {
    if (e == t)
      return X.empty;
    let r = this.resolve(e), s = this.resolve(t), o = i ? 0 : r.sharedDepth(t), a = r.start(o), c = r.node(o).content.cut(r.pos - a, s.pos - a);
    return new X(c, r.depth - o, s.depth - o);
  }
  /**
  Replace the part of the document between the given positions with
  the given slice. The slice must 'fit', meaning its open sides
  must be able to connect to the surrounding content, and its
  content nodes must be valid children for the node they are placed
  into. If any of this is violated, an error of type
  [`ReplaceError`](https://prosemirror.net/docs/ref/#model.ReplaceError) is thrown.
  */
  replace(e, t, i) {
    return Av(this.resolve(e), this.resolve(t), i);
  }
  /**
  Find the node directly after the given position.
  */
  nodeAt(e) {
    for (let t = this; ; ) {
      let { index: i, offset: r } = t.content.findIndex(e);
      if (t = t.maybeChild(i), !t)
        return null;
      if (r == e || t.isText)
        return t;
      e -= r + 1;
    }
  }
  /**
  Find the (direct) child node after the given offset, if any,
  and return it along with its index and offset relative to this
  node.
  */
  childAfter(e) {
    let { index: t, offset: i } = this.content.findIndex(e);
    return { node: this.content.maybeChild(t), index: t, offset: i };
  }
  /**
  Find the (direct) child node before the given offset, if any,
  and return it along with its index and offset relative to this
  node.
  */
  childBefore(e) {
    if (e == 0)
      return { node: null, index: 0, offset: 0 };
    let { index: t, offset: i } = this.content.findIndex(e);
    if (i < e)
      return { node: this.content.child(t), index: t, offset: i };
    let r = this.content.child(t - 1);
    return { node: r, index: t - 1, offset: i - r.nodeSize };
  }
  /**
  Resolve the given position in the document, returning an
  [object](https://prosemirror.net/docs/ref/#model.ResolvedPos) with information about its context.
  */
  resolve(e) {
    return $s.resolveCached(this, e);
  }
  /**
  @internal
  */
  resolveNoCache(e) {
    return $s.resolve(this, e);
  }
  /**
  Test whether a given mark or mark type occurs in this document
  between the two given positions.
  */
  rangeHasMark(e, t, i) {
    let r = !1;
    return t > e && this.nodesBetween(e, t, (s) => (i.isInSet(s.marks) && (r = !0), !r)), r;
  }
  /**
  True when this is a block (non-inline node)
  */
  get isBlock() {
    return this.type.isBlock;
  }
  /**
  True when this is a textblock node, a block node with inline
  content.
  */
  get isTextblock() {
    return this.type.isTextblock;
  }
  /**
  True when this node allows inline content.
  */
  get inlineContent() {
    return this.type.inlineContent;
  }
  /**
  True when this is an inline node (a text node or a node that can
  appear among text).
  */
  get isInline() {
    return this.type.isInline;
  }
  /**
  True when this is a text node.
  */
  get isText() {
    return this.type.isText;
  }
  /**
  True when this is a leaf node.
  */
  get isLeaf() {
    return this.type.isLeaf;
  }
  /**
  True when this is an atom, i.e. when it does not have directly
  editable content. This is usually the same as `isLeaf`, but can
  be configured with the [`atom` property](https://prosemirror.net/docs/ref/#model.NodeSpec.atom)
  on a node's spec (typically used when the node is displayed as
  an uneditable [node view](https://prosemirror.net/docs/ref/#view.NodeView)).
  */
  get isAtom() {
    return this.type.isAtom;
  }
  /**
  Return a string representation of this node for debugging
  purposes.
  */
  toString() {
    if (this.type.spec.toDebugString)
      return this.type.spec.toDebugString(this);
    let e = this.type.name;
    return this.content.size && (e += "(" + this.content.toStringInner() + ")"), fm(this.marks, e);
  }
  /**
  Get the content match in this node at the given index.
  */
  contentMatchAt(e) {
    let t = this.type.contentMatch.matchFragment(this.content, 0, e);
    if (!t)
      throw new Error("Called contentMatchAt on a node with invalid content");
    return t;
  }
  /**
  Test whether replacing the range between `from` and `to` (by
  child index) with the given replacement fragment (which defaults
  to the empty fragment) would leave the node's content valid. You
  can optionally pass `start` and `end` indices into the
  replacement fragment.
  */
  canReplace(e, t, i = $.empty, r = 0, s = i.childCount) {
    let o = this.contentMatchAt(e).matchFragment(i, r, s), a = o && o.matchFragment(this.content, t);
    if (!a || !a.validEnd)
      return !1;
    for (let l = r; l < s; l++)
      if (!this.type.allowsMarks(i.child(l).marks))
        return !1;
    return !0;
  }
  /**
  Test whether replacing the range `from` to `to` (by index) with
  a node of the given type would leave the node's content valid.
  */
  canReplaceWith(e, t, i, r) {
    if (r && !this.type.allowsMarks(r))
      return !1;
    let s = this.contentMatchAt(e).matchType(i), o = s && s.matchFragment(this.content, t);
    return o ? o.validEnd : !1;
  }
  /**
  Test whether the given node's content could be appended to this
  node. If that node is empty, this will only return true if there
  is at least one node type that can appear in both nodes (to avoid
  merging completely incompatible nodes).
  */
  canAppend(e) {
    return e.content.size ? this.canReplace(this.childCount, this.childCount, e.content) : this.type.compatibleContent(e.type);
  }
  /**
  Check whether this node and its descendants conform to the
  schema, and raise an exception when they do not.
  */
  check() {
    this.type.checkContent(this.content), this.type.checkAttrs(this.attrs);
    let e = Fe.none;
    for (let t = 0; t < this.marks.length; t++) {
      let i = this.marks[t];
      i.type.checkAttrs(i.attrs), e = i.addToSet(e);
    }
    if (!Fe.sameSet(e, this.marks))
      throw new RangeError(`Invalid collection of marks for node ${this.type.name}: ${this.marks.map((t) => t.type.name)}`);
    this.content.forEach((t) => t.check());
  }
  /**
  Return a JSON-serializeable representation of this node.
  */
  toJSON() {
    let e = { type: this.type.name };
    for (let t in this.attrs) {
      e.attrs = this.attrs;
      break;
    }
    return this.content.size && (e.content = this.content.toJSON()), this.marks.length && (e.marks = this.marks.map((t) => t.toJSON())), e;
  }
  /**
  Deserialize a node from its JSON representation.
  */
  static fromJSON(e, t) {
    if (!t)
      throw new RangeError("Invalid input for Node.fromJSON");
    let i;
    if (t.marks) {
      if (!Array.isArray(t.marks))
        throw new RangeError("Invalid mark data for Node.fromJSON");
      i = t.marks.map(e.markFromJSON);
    }
    if (t.type == "text") {
      if (typeof t.text != "string")
        throw new RangeError("Invalid text node in JSON");
      return e.text(t.text, i);
    }
    let r = $.fromJSON(e, t.content), s = e.nodeType(t.type).create(t.attrs, r, i);
    return s.type.checkAttrs(s.attrs), s;
  }
};
Hn.prototype.text = void 0;
class da extends Hn {
  /**
  @internal
  */
  constructor(e, t, i, r) {
    if (super(e, t, null, r), !i)
      throw new RangeError("Empty text nodes are not allowed");
    this.text = i;
  }
  toString() {
    return this.type.spec.toDebugString ? this.type.spec.toDebugString(this) : fm(this.marks, JSON.stringify(this.text));
  }
  get textContent() {
    return this.text;
  }
  textBetween(e, t) {
    return this.text.slice(e, t);
  }
  get nodeSize() {
    return this.text.length;
  }
  mark(e) {
    return e == this.marks ? this : new da(this.type, this.attrs, this.text, e);
  }
  withText(e) {
    return e == this.text ? this : new da(this.type, this.attrs, e, this.marks);
  }
  cut(e = 0, t = this.text.length) {
    return e == 0 && t == this.text.length ? this : this.withText(this.text.slice(e, t));
  }
  eq(e) {
    return this.sameMarkup(e) && this.text == e.text;
  }
  toJSON() {
    let e = super.toJSON();
    return e.text = this.text, e;
  }
}
function fm(n, e) {
  for (let t = n.length - 1; t >= 0; t--)
    e = n[t].type.name + "(" + e + ")";
  return e;
}
class Ki {
  /**
  @internal
  */
  constructor(e) {
    this.validEnd = e, this.next = [], this.wrapCache = [];
  }
  /**
  @internal
  */
  static parse(e, t) {
    let i = new Rv(e, t);
    if (i.next == null)
      return Ki.empty;
    let r = hm(i);
    i.next && i.err("Unexpected trailing text");
    let s = Hv(Bv(r));
    return Fv(s, i), s;
  }
  /**
  Match a node type, returning a match after that node if
  successful.
  */
  matchType(e) {
    for (let t = 0; t < this.next.length; t++)
      if (this.next[t].type == e)
        return this.next[t].next;
    return null;
  }
  /**
  Try to match a fragment. Returns the resulting match when
  successful.
  */
  matchFragment(e, t = 0, i = e.childCount) {
    let r = this;
    for (let s = t; r && s < i; s++)
      r = r.matchType(e.child(s).type);
    return r;
  }
  /**
  @internal
  */
  get inlineContent() {
    return this.next.length != 0 && this.next[0].type.isInline;
  }
  /**
  Get the first matching node type at this match position that can
  be generated.
  */
  get defaultType() {
    for (let e = 0; e < this.next.length; e++) {
      let { type: t } = this.next[e];
      if (!(t.isText || t.hasRequiredAttrs()))
        return t;
    }
    return null;
  }
  /**
  @internal
  */
  compatible(e) {
    for (let t = 0; t < this.next.length; t++)
      for (let i = 0; i < e.next.length; i++)
        if (this.next[t].type == e.next[i].type)
          return !0;
    return !1;
  }
  /**
  Try to match the given fragment, and if that fails, see if it can
  be made to match by inserting nodes in front of it. When
  successful, return a fragment of inserted nodes (which may be
  empty if nothing had to be inserted). When `toEnd` is true, only
  return a fragment if the resulting match goes to the end of the
  content expression.
  */
  fillBefore(e, t = !1, i = 0) {
    let r = [this];
    function s(o, a) {
      let l = o.matchFragment(e, i);
      if (l && (!t || l.validEnd))
        return $.from(a.map((c) => c.createAndFill()));
      for (let c = 0; c < o.next.length; c++) {
        let { type: u, next: d } = o.next[c];
        if (!(u.isText || u.hasRequiredAttrs()) && r.indexOf(d) == -1) {
          r.push(d);
          let f = s(d, a.concat(u));
          if (f)
            return f;
        }
      }
      return null;
    }
    return s(this, []);
  }
  /**
  Find a set of wrapping node types that would allow a node of the
  given type to appear at this position. The result may be empty
  (when it fits directly) and will be null when no such wrapping
  exists.
  */
  findWrapping(e) {
    for (let i = 0; i < this.wrapCache.length; i += 2)
      if (this.wrapCache[i] == e)
        return this.wrapCache[i + 1];
    let t = this.computeWrapping(e);
    return this.wrapCache.push(e, t), t;
  }
  /**
  @internal
  */
  computeWrapping(e) {
    let t = /* @__PURE__ */ Object.create(null), i = [{ match: this, type: null, via: null }];
    for (; i.length; ) {
      let r = i.shift(), s = r.match;
      if (s.matchType(e)) {
        let o = [];
        for (let a = r; a.type; a = a.via)
          o.push(a.type);
        return o.reverse();
      }
      for (let o = 0; o < s.next.length; o++) {
        let { type: a, next: l } = s.next[o];
        !a.isLeaf && !a.hasRequiredAttrs() && !(a.name in t) && (!r.type || l.validEnd) && (i.push({ match: a.contentMatch, type: a, via: r }), t[a.name] = !0);
      }
    }
    return null;
  }
  /**
  The number of outgoing edges this node has in the finite
  automaton that describes the content expression.
  */
  get edgeCount() {
    return this.next.length;
  }
  /**
  Get the _n_​th outgoing edge from this node in the finite
  automaton that describes the content expression.
  */
  edge(e) {
    if (e >= this.next.length)
      throw new RangeError(`There's no ${e}th edge in this content match`);
    return this.next[e];
  }
  /**
  @internal
  */
  toString() {
    let e = [];
    function t(i) {
      e.push(i);
      for (let r = 0; r < i.next.length; r++)
        e.indexOf(i.next[r].next) == -1 && t(i.next[r].next);
    }
    return t(this), e.map((i, r) => {
      let s = r + (i.validEnd ? "*" : " ") + " ";
      for (let o = 0; o < i.next.length; o++)
        s += (o ? ", " : "") + i.next[o].type.name + "->" + e.indexOf(i.next[o].next);
      return s;
    }).join(`
`);
  }
}
Ki.empty = new Ki(!0);
class Rv {
  constructor(e, t) {
    this.string = e, this.nodeTypes = t, this.inline = null, this.pos = 0, this.tokens = e.split(/\s*(?=\b|\W|$)/), this.tokens[this.tokens.length - 1] == "" && this.tokens.pop(), this.tokens[0] == "" && this.tokens.shift();
  }
  get next() {
    return this.tokens[this.pos];
  }
  eat(e) {
    return this.next == e && (this.pos++ || !0);
  }
  err(e) {
    throw new SyntaxError(e + " (in content expression '" + this.string + "')");
  }
}
function hm(n) {
  let e = [];
  do
    e.push(Iv(n));
  while (n.eat("|"));
  return e.length == 1 ? e[0] : { type: "choice", exprs: e };
}
function Iv(n) {
  let e = [];
  do
    e.push(Pv(n));
  while (n.next && n.next != ")" && n.next != "|");
  return e.length == 1 ? e[0] : { type: "seq", exprs: e };
}
function Pv(n) {
  let e = zv(n);
  for (; ; )
    if (n.eat("+"))
      e = { type: "plus", expr: e };
    else if (n.eat("*"))
      e = { type: "star", expr: e };
    else if (n.eat("?"))
      e = { type: "opt", expr: e };
    else if (n.eat("{"))
      e = Dv(n, e);
    else
      break;
  return e;
}
function pf(n) {
  /\D/.test(n.next) && n.err("Expected number, got '" + n.next + "'");
  let e = Number(n.next);
  return n.pos++, e;
}
function Dv(n, e) {
  let t = pf(n), i = t;
  return n.eat(",") && (n.next != "}" ? i = pf(n) : i = -1), n.eat("}") || n.err("Unclosed braced range"), { type: "range", min: t, max: i, expr: e };
}
function $v(n, e) {
  let t = n.nodeTypes, i = t[e];
  if (i)
    return [i];
  let r = [];
  for (let s in t) {
    let o = t[s];
    o.isInGroup(e) && r.push(o);
  }
  return r.length == 0 && n.err("No node type or group '" + e + "' found"), r;
}
function zv(n) {
  if (n.eat("(")) {
    let e = hm(n);
    return n.eat(")") || n.err("Missing closing paren"), e;
  } else if (/\W/.test(n.next))
    n.err("Unexpected token '" + n.next + "'");
  else {
    let e = $v(n, n.next).map((t) => (n.inline == null ? n.inline = t.isInline : n.inline != t.isInline && n.err("Mixing inline and block content"), { type: "name", value: t }));
    return n.pos++, e.length == 1 ? e[0] : { type: "choice", exprs: e };
  }
}
function Bv(n) {
  let e = [[]];
  return r(s(n, 0), t()), e;
  function t() {
    return e.push([]) - 1;
  }
  function i(o, a, l) {
    let c = { term: l, to: a };
    return e[o].push(c), c;
  }
  function r(o, a) {
    o.forEach((l) => l.to = a);
  }
  function s(o, a) {
    if (o.type == "choice")
      return o.exprs.reduce((l, c) => l.concat(s(c, a)), []);
    if (o.type == "seq")
      for (let l = 0; ; l++) {
        let c = s(o.exprs[l], a);
        if (l == o.exprs.length - 1)
          return c;
        r(c, a = t());
      }
    else if (o.type == "star") {
      let l = t();
      return i(a, l), r(s(o.expr, l), l), [i(l)];
    } else if (o.type == "plus") {
      let l = t();
      return r(s(o.expr, a), l), r(s(o.expr, l), l), [i(l)];
    } else {
      if (o.type == "opt")
        return [i(a)].concat(s(o.expr, a));
      if (o.type == "range") {
        let l = a;
        for (let c = 0; c < o.min; c++) {
          let u = t();
          r(s(o.expr, l), u), l = u;
        }
        if (o.max == -1)
          r(s(o.expr, l), l);
        else
          for (let c = o.min; c < o.max; c++) {
            let u = t();
            i(l, u), r(s(o.expr, l), u), l = u;
          }
        return [i(l)];
      } else {
        if (o.type == "name")
          return [i(a, void 0, o.value)];
        throw new Error("Unknown expr type");
      }
    }
  }
}
function pm(n, e) {
  return e - n;
}
function mf(n, e) {
  let t = [];
  return i(e), t.sort(pm);
  function i(r) {
    let s = n[r];
    if (s.length == 1 && !s[0].term)
      return i(s[0].to);
    t.push(r);
    for (let o = 0; o < s.length; o++) {
      let { term: a, to: l } = s[o];
      !a && t.indexOf(l) == -1 && i(l);
    }
  }
}
function Hv(n) {
  let e = /* @__PURE__ */ Object.create(null);
  return t(mf(n, 0));
  function t(i) {
    let r = [];
    i.forEach((o) => {
      n[o].forEach(({ term: a, to: l }) => {
        if (!a)
          return;
        let c;
        for (let u = 0; u < r.length; u++)
          r[u][0] == a && (c = r[u][1]);
        mf(n, l).forEach((u) => {
          c || r.push([a, c = []]), c.indexOf(u) == -1 && c.push(u);
        });
      });
    });
    let s = e[i.join(",")] = new Ki(i.indexOf(n.length - 1) > -1);
    for (let o = 0; o < r.length; o++) {
      let a = r[o][1].sort(pm);
      s.next.push({ type: r[o][0], next: e[a.join(",")] || t(a) });
    }
    return s;
  }
}
function Fv(n, e) {
  for (let t = 0, i = [n]; t < i.length; t++) {
    let r = i[t], s = !r.validEnd, o = [];
    for (let a = 0; a < r.next.length; a++) {
      let { type: l, next: c } = r.next[a];
      o.push(l.name), s && !(l.isText || l.hasRequiredAttrs()) && (s = !1), i.indexOf(c) == -1 && i.push(c);
    }
    s && e.err("Only non-generatable nodes (" + o.join(", ") + ") in a required position (see https://prosemirror.net/docs/guide/#generatable)");
  }
}
function mm(n) {
  let e = /* @__PURE__ */ Object.create(null);
  for (let t in n) {
    let i = n[t];
    if (!i.hasDefault)
      return null;
    e[t] = i.default;
  }
  return e;
}
function gm(n, e) {
  let t = /* @__PURE__ */ Object.create(null);
  for (let i in n) {
    let r = e && e[i];
    if (r === void 0) {
      let s = n[i];
      if (s.hasDefault)
        r = s.default;
      else
        throw new RangeError("No value supplied for attribute " + i);
    }
    t[i] = r;
  }
  return t;
}
function _m(n, e, t, i) {
  for (let r in e)
    if (!(r in n))
      throw new RangeError(`Unsupported attribute ${r} for ${t} of type ${r}`);
  for (let r in n) {
    let s = n[r];
    s.validate && s.validate(e[r]);
  }
}
function bm(n, e) {
  let t = /* @__PURE__ */ Object.create(null);
  if (e)
    for (let i in e)
      t[i] = new jv(n, i, e[i]);
  return t;
}
let gf = class vm {
  /**
  @internal
  */
  constructor(e, t, i) {
    this.name = e, this.schema = t, this.spec = i, this.markSet = null, this.groups = i.group ? i.group.split(" ") : [], this.attrs = bm(e, i.attrs), this.defaultAttrs = mm(this.attrs), this.contentMatch = null, this.inlineContent = null, this.isBlock = !(i.inline || e == "text"), this.isText = e == "text";
  }
  /**
  True if this is an inline type.
  */
  get isInline() {
    return !this.isBlock;
  }
  /**
  True if this is a textblock type, a block that contains inline
  content.
  */
  get isTextblock() {
    return this.isBlock && this.inlineContent;
  }
  /**
  True for node types that allow no content.
  */
  get isLeaf() {
    return this.contentMatch == Ki.empty;
  }
  /**
  True when this node is an atom, i.e. when it does not have
  directly editable content.
  */
  get isAtom() {
    return this.isLeaf || !!this.spec.atom;
  }
  /**
  Return true when this node type is part of the given
  [group](https://prosemirror.net/docs/ref/#model.NodeSpec.group).
  */
  isInGroup(e) {
    return this.groups.indexOf(e) > -1;
  }
  /**
  The node type's [whitespace](https://prosemirror.net/docs/ref/#model.NodeSpec.whitespace) option.
  */
  get whitespace() {
    return this.spec.whitespace || (this.spec.code ? "pre" : "normal");
  }
  /**
  Tells you whether this node type has any required attributes.
  */
  hasRequiredAttrs() {
    for (let e in this.attrs)
      if (this.attrs[e].isRequired)
        return !0;
    return !1;
  }
  /**
  Indicates whether this node allows some of the same content as
  the given node type.
  */
  compatibleContent(e) {
    return this == e || this.contentMatch.compatible(e.contentMatch);
  }
  /**
  @internal
  */
  computeAttrs(e) {
    return !e && this.defaultAttrs ? this.defaultAttrs : gm(this.attrs, e);
  }
  /**
  Create a `Node` of this type. The given attributes are
  checked and defaulted (you can pass `null` to use the type's
  defaults entirely, if no required attributes exist). `content`
  may be a `Fragment`, a node, an array of nodes, or
  `null`. Similarly `marks` may be `null` to default to the empty
  set of marks.
  */
  create(e = null, t, i) {
    if (this.isText)
      throw new Error("NodeType.create can't construct text nodes");
    return new Hn(this, this.computeAttrs(e), $.from(t), Fe.setFrom(i));
  }
  /**
  Like [`create`](https://prosemirror.net/docs/ref/#model.NodeType.create), but check the given content
  against the node type's content restrictions, and throw an error
  if it doesn't match.
  */
  createChecked(e = null, t, i) {
    return t = $.from(t), this.checkContent(t), new Hn(this, this.computeAttrs(e), t, Fe.setFrom(i));
  }
  /**
  Like [`create`](https://prosemirror.net/docs/ref/#model.NodeType.create), but see if it is
  necessary to add nodes to the start or end of the given fragment
  to make it fit the node. If no fitting wrapping can be found,
  return null. Note that, due to the fact that required nodes can
  always be created, this will always succeed if you pass null or
  `Fragment.empty` as content.
  */
  createAndFill(e = null, t, i) {
    if (e = this.computeAttrs(e), t = $.from(t), t.size) {
      let o = this.contentMatch.fillBefore(t);
      if (!o)
        return null;
      t = o.append(t);
    }
    let r = this.contentMatch.matchFragment(t), s = r && r.fillBefore($.empty, !0);
    return s ? new Hn(this, e, t.append(s), Fe.setFrom(i)) : null;
  }
  /**
  Returns true if the given fragment is valid content for this node
  type.
  */
  validContent(e) {
    let t = this.contentMatch.matchFragment(e);
    if (!t || !t.validEnd)
      return !1;
    for (let i = 0; i < e.childCount; i++)
      if (!this.allowsMarks(e.child(i).marks))
        return !1;
    return !0;
  }
  /**
  Throws a RangeError if the given fragment is not valid content for this
  node type.
  @internal
  */
  checkContent(e) {
    if (!this.validContent(e))
      throw new RangeError(`Invalid content for node ${this.name}: ${e.toString().slice(0, 50)}`);
  }
  /**
  @internal
  */
  checkAttrs(e) {
    _m(this.attrs, e, "node", this.name);
  }
  /**
  Check whether the given mark type is allowed in this node.
  */
  allowsMarkType(e) {
    return this.markSet == null || this.markSet.indexOf(e) > -1;
  }
  /**
  Test whether the given set of marks are allowed in this node.
  */
  allowsMarks(e) {
    if (this.markSet == null)
      return !0;
    for (let t = 0; t < e.length; t++)
      if (!this.allowsMarkType(e[t].type))
        return !1;
    return !0;
  }
  /**
  Removes the marks that are not allowed in this node from the given set.
  */
  allowedMarks(e) {
    if (this.markSet == null)
      return e;
    let t;
    for (let i = 0; i < e.length; i++)
      this.allowsMarkType(e[i].type) ? t && t.push(e[i]) : t || (t = e.slice(0, i));
    return t ? t.length ? t : Fe.none : e;
  }
  /**
  @internal
  */
  static compile(e, t) {
    let i = /* @__PURE__ */ Object.create(null);
    e.forEach((s, o) => i[s] = new vm(s, t, o));
    let r = t.spec.topNode || "doc";
    if (!i[r])
      throw new RangeError("Schema is missing its top node type ('" + r + "')");
    if (!i.text)
      throw new RangeError("Every schema needs a 'text' type");
    for (let s in i.text.attrs)
      throw new RangeError("The text node type should not have attributes");
    return i;
  }
};
function Vv(n, e, t) {
  let i = t.split("|");
  return (r) => {
    let s = r === null ? "null" : typeof r;
    if (i.indexOf(s) < 0)
      throw new RangeError(`Expected value of type ${i} for attribute ${e} on type ${n}, got ${s}`);
  };
}
class jv {
  constructor(e, t, i) {
    this.hasDefault = Object.prototype.hasOwnProperty.call(i, "default"), this.default = i.default, this.validate = typeof i.validate == "string" ? Vv(e, t, i.validate) : i.validate;
  }
  get isRequired() {
    return !this.hasDefault;
  }
}
class nl {
  /**
  @internal
  */
  constructor(e, t, i, r) {
    this.name = e, this.rank = t, this.schema = i, this.spec = r, this.attrs = bm(e, r.attrs), this.excluded = null;
    let s = mm(this.attrs);
    this.instance = s ? new Fe(this, s) : null;
  }
  /**
  Create a mark of this type. `attrs` may be `null` or an object
  containing only some of the mark's attributes. The others, if
  they have defaults, will be added.
  */
  create(e = null) {
    return !e && this.instance ? this.instance : new Fe(this, gm(this.attrs, e));
  }
  /**
  @internal
  */
  static compile(e, t) {
    let i = /* @__PURE__ */ Object.create(null), r = 0;
    return e.forEach((s, o) => i[s] = new nl(s, r++, t, o)), i;
  }
  /**
  When there is a mark of this type in the given set, a new set
  without it is returned. Otherwise, the input set is returned.
  */
  removeFromSet(e) {
    for (var t = 0; t < e.length; t++)
      e[t].type == this && (e = e.slice(0, t).concat(e.slice(t + 1)), t--);
    return e;
  }
  /**
  Tests whether there is a mark of this type in the given set.
  */
  isInSet(e) {
    for (let t = 0; t < e.length; t++)
      if (e[t].type == this)
        return e[t];
  }
  /**
  @internal
  */
  checkAttrs(e) {
    _m(this.attrs, e, "mark", this.name);
  }
  /**
  Queries whether a given mark type is
  [excluded](https://prosemirror.net/docs/ref/#model.MarkSpec.excludes) by this one.
  */
  excludes(e) {
    return this.excluded.indexOf(e) > -1;
  }
}
class ym {
  /**
  Construct a schema from a schema [specification](https://prosemirror.net/docs/ref/#model.SchemaSpec).
  */
  constructor(e) {
    this.linebreakReplacement = null, this.cached = /* @__PURE__ */ Object.create(null);
    let t = this.spec = {};
    for (let r in e)
      t[r] = e[r];
    t.nodes = kt.from(e.nodes), t.marks = kt.from(e.marks || {}), this.nodes = gf.compile(this.spec.nodes, this), this.marks = nl.compile(this.spec.marks, this);
    let i = /* @__PURE__ */ Object.create(null);
    for (let r in this.nodes) {
      if (r in this.marks)
        throw new RangeError(r + " can not be both a node and a mark");
      let s = this.nodes[r], o = s.spec.content || "", a = s.spec.marks;
      if (s.contentMatch = i[o] || (i[o] = Ki.parse(o, this.nodes)), s.inlineContent = s.contentMatch.inlineContent, s.spec.linebreakReplacement) {
        if (this.linebreakReplacement)
          throw new RangeError("Multiple linebreak nodes defined");
        if (!s.isInline || !s.isLeaf)
          throw new RangeError("Linebreak replacement nodes must be inline leaf nodes");
        this.linebreakReplacement = s;
      }
      s.markSet = a == "_" ? null : a ? _f(this, a.split(" ")) : a == "" || !s.inlineContent ? [] : null;
    }
    for (let r in this.marks) {
      let s = this.marks[r], o = s.spec.excludes;
      s.excluded = o == null ? [s] : o == "" ? [] : _f(this, o.split(" "));
    }
    this.nodeFromJSON = this.nodeFromJSON.bind(this), this.markFromJSON = this.markFromJSON.bind(this), this.topNodeType = this.nodes[this.spec.topNode || "doc"], this.cached.wrappings = /* @__PURE__ */ Object.create(null);
  }
  /**
  Create a node in this schema. The `type` may be a string or a
  `NodeType` instance. Attributes will be extended with defaults,
  `content` may be a `Fragment`, `null`, a `Node`, or an array of
  nodes.
  */
  node(e, t = null, i, r) {
    if (typeof e == "string")
      e = this.nodeType(e);
    else if (e instanceof gf) {
      if (e.schema != this)
        throw new RangeError("Node type from different schema used (" + e.name + ")");
    } else throw new RangeError("Invalid node type: " + e);
    return e.createChecked(t, i, r);
  }
  /**
  Create a text node in the schema. Empty text nodes are not
  allowed.
  */
  text(e, t) {
    let i = this.nodes.text;
    return new da(i, i.defaultAttrs, e, Fe.setFrom(t));
  }
  /**
  Create a mark with the given type and attributes.
  */
  mark(e, t) {
    return typeof e == "string" && (e = this.marks[e]), e.create(t);
  }
  /**
  Deserialize a node from its JSON representation. This method is
  bound.
  */
  nodeFromJSON(e) {
    return Hn.fromJSON(this, e);
  }
  /**
  Deserialize a mark from its JSON representation. This method is
  bound.
  */
  markFromJSON(e) {
    return Fe.fromJSON(this, e);
  }
  /**
  @internal
  */
  nodeType(e) {
    let t = this.nodes[e];
    if (!t)
      throw new RangeError("Unknown node type: " + e);
    return t;
  }
}
function _f(n, e) {
  let t = [];
  for (let i = 0; i < e.length; i++) {
    let r = e[i], s = n.marks[r], o = s;
    if (s)
      t.push(s);
    else
      for (let a in n.marks) {
        let l = n.marks[a];
        (r == "_" || l.spec.group && l.spec.group.split(" ").indexOf(r) > -1) && t.push(o = l);
      }
    if (!o)
      throw new SyntaxError("Unknown mark type: '" + e[i] + "'");
  }
  return t;
}
function Wv(n) {
  return n.tag != null;
}
function Uv(n) {
  return n.style != null;
}
let vr = class Hc {
  /**
  Create a parser that targets the given schema, using the given
  parsing rules.
  */
  constructor(e, t) {
    this.schema = e, this.rules = t, this.tags = [], this.styles = [];
    let i = this.matchedStyles = [];
    t.forEach((r) => {
      if (Wv(r))
        this.tags.push(r);
      else if (Uv(r)) {
        let s = /[^=]*/.exec(r.style)[0];
        i.indexOf(s) < 0 && i.push(s), this.styles.push(r);
      }
    }), this.normalizeLists = !this.tags.some((r) => {
      if (!/^(ul|ol)\b/.test(r.tag) || !r.node)
        return !1;
      let s = e.nodes[r.node];
      return s.contentMatch.matchType(s);
    });
  }
  /**
  Parse a document from the content of a DOM node.
  */
  parse(e, t = {}) {
    let i = new vf(this, t, !1);
    return i.addAll(e, Fe.none, t.from, t.to), i.finish();
  }
  /**
  Parses the content of the given DOM node, like
  [`parse`](https://prosemirror.net/docs/ref/#model.DOMParser.parse), and takes the same set of
  options. But unlike that method, which produces a whole node,
  this one returns a slice that is open at the sides, meaning that
  the schema constraints aren't applied to the start of nodes to
  the left of the input and the end of nodes at the end.
  */
  parseSlice(e, t = {}) {
    let i = new vf(this, t, !0);
    return i.addAll(e, Fe.none, t.from, t.to), X.maxOpen(i.finish());
  }
  /**
  @internal
  */
  matchTag(e, t, i) {
    for (let r = i ? this.tags.indexOf(i) + 1 : 0; r < this.tags.length; r++) {
      let s = this.tags[r];
      if (Gv(e, s.tag) && (s.namespace === void 0 || e.namespaceURI == s.namespace) && (!s.context || t.matchesContext(s.context))) {
        if (s.getAttrs) {
          let o = s.getAttrs(e);
          if (o === !1)
            continue;
          s.attrs = o || void 0;
        }
        return s;
      }
    }
  }
  /**
  @internal
  */
  matchStyle(e, t, i, r) {
    for (let s = r ? this.styles.indexOf(r) + 1 : 0; s < this.styles.length; s++) {
      let o = this.styles[s], a = o.style;
      if (!(a.indexOf(e) != 0 || o.context && !i.matchesContext(o.context) || // Test that the style string either precisely matches the prop,
      // or has an '=' sign after the prop, followed by the given
      // value.
      a.length > e.length && (a.charCodeAt(e.length) != 61 || a.slice(e.length + 1) != t))) {
        if (o.getAttrs) {
          let l = o.getAttrs(t);
          if (l === !1)
            continue;
          o.attrs = l || void 0;
        }
        return o;
      }
    }
  }
  /**
  @internal
  */
  static schemaRules(e) {
    let t = [];
    function i(r) {
      let s = r.priority == null ? 50 : r.priority, o = 0;
      for (; o < t.length; o++) {
        let a = t[o];
        if ((a.priority == null ? 50 : a.priority) < s)
          break;
      }
      t.splice(o, 0, r);
    }
    for (let r in e.marks) {
      let s = e.marks[r].spec.parseDOM;
      s && s.forEach((o) => {
        i(o = yf(o)), o.mark || o.ignore || o.clearMark || (o.mark = r);
      });
    }
    for (let r in e.nodes) {
      let s = e.nodes[r].spec.parseDOM;
      s && s.forEach((o) => {
        i(o = yf(o)), o.node || o.ignore || o.mark || (o.node = r);
      });
    }
    return t;
  }
  /**
  Construct a DOM parser using the parsing rules listed in a
  schema's [node specs](https://prosemirror.net/docs/ref/#model.NodeSpec.parseDOM), reordered by
  [priority](https://prosemirror.net/docs/ref/#model.ParseRule.priority).
  */
  static fromSchema(e) {
    return e.cached.domParser || (e.cached.domParser = new Hc(e, Hc.schemaRules(e)));
  }
};
const xm = {
  address: !0,
  article: !0,
  aside: !0,
  blockquote: !0,
  canvas: !0,
  dd: !0,
  div: !0,
  dl: !0,
  fieldset: !0,
  figcaption: !0,
  figure: !0,
  footer: !0,
  form: !0,
  h1: !0,
  h2: !0,
  h3: !0,
  h4: !0,
  h5: !0,
  h6: !0,
  header: !0,
  hgroup: !0,
  hr: !0,
  li: !0,
  noscript: !0,
  ol: !0,
  output: !0,
  p: !0,
  pre: !0,
  section: !0,
  table: !0,
  tfoot: !0,
  ul: !0
}, Kv = {
  head: !0,
  noscript: !0,
  object: !0,
  script: !0,
  style: !0,
  title: !0
}, wm = { ol: !0, ul: !0 }, zs = 1, Fc = 2, Uo = 4;
function bf(n, e, t) {
  return e != null ? (e ? zs : 0) | (e === "full" ? Fc : 0) : n && n.whitespace == "pre" ? zs | Fc : t & -5;
}
class ko {
  constructor(e, t, i, r, s, o) {
    this.type = e, this.attrs = t, this.marks = i, this.solid = r, this.options = o, this.content = [], this.activeMarks = Fe.none, this.match = s || (o & Uo ? null : e.contentMatch);
  }
  findWrapping(e) {
    if (!this.match) {
      if (!this.type)
        return [];
      let t = this.type.contentMatch.fillBefore($.from(e));
      if (t)
        this.match = this.type.contentMatch.matchFragment(t);
      else {
        let i = this.type.contentMatch, r;
        return (r = i.findWrapping(e.type)) ? (this.match = i, r) : null;
      }
    }
    return this.match.findWrapping(e.type);
  }
  finish(e) {
    if (!(this.options & zs)) {
      let i = this.content[this.content.length - 1], r;
      if (i && i.isText && (r = /[ \t\r\n\u000c]+$/.exec(i.text))) {
        let s = i;
        i.text.length == r[0].length ? this.content.pop() : this.content[this.content.length - 1] = s.withText(s.text.slice(0, s.text.length - r[0].length));
      }
    }
    let t = $.from(this.content);
    return !e && this.match && (t = t.append(this.match.fillBefore($.empty, !0))), this.type ? this.type.create(this.attrs, t, this.marks) : t;
  }
  inlineContext(e) {
    return this.type ? this.type.inlineContent : this.content.length ? this.content[0].isInline : e.parentNode && !xm.hasOwnProperty(e.parentNode.nodeName.toLowerCase());
  }
}
class vf {
  constructor(e, t, i) {
    this.parser = e, this.options = t, this.isOpen = i, this.open = 0, this.localPreserveWS = !1;
    let r = t.topNode, s, o = bf(null, t.preserveWhitespace, 0) | (i ? Uo : 0);
    r ? s = new ko(r.type, r.attrs, Fe.none, !0, t.topMatch || r.type.contentMatch, o) : i ? s = new ko(null, null, Fe.none, !0, null, o) : s = new ko(e.schema.topNodeType, null, Fe.none, !0, null, o), this.nodes = [s], this.find = t.findPositions, this.needsBlock = !1;
  }
  get top() {
    return this.nodes[this.open];
  }
  // Add a DOM node to the content. Text is inserted as text node,
  // otherwise, the node is passed to `addElement` or, if it has a
  // `style` attribute, `addElementWithStyles`.
  addDOM(e, t) {
    e.nodeType == 3 ? this.addTextNode(e, t) : e.nodeType == 1 && this.addElement(e, t);
  }
  addTextNode(e, t) {
    let i = e.nodeValue, r = this.top, s = r.options & Fc ? "full" : this.localPreserveWS || (r.options & zs) > 0;
    if (s === "full" || r.inlineContext(e) || /[^ \t\r\n\u000c]/.test(i)) {
      if (s)
        s !== "full" ? i = i.replace(/\r?\n|\r/g, " ") : i = i.replace(/\r\n?/g, `
`);
      else if (i = i.replace(/[ \t\r\n\u000c]+/g, " "), /^[ \t\r\n\u000c]/.test(i) && this.open == this.nodes.length - 1) {
        let o = r.content[r.content.length - 1], a = e.previousSibling;
        (!o || a && a.nodeName == "BR" || o.isText && /[ \t\r\n\u000c]$/.test(o.text)) && (i = i.slice(1));
      }
      i && this.insertNode(this.parser.schema.text(i), t), this.findInText(e);
    } else
      this.findInside(e);
  }
  // Try to find a handler for the given tag and use that to parse. If
  // none is found, the element's content nodes are added directly.
  addElement(e, t, i) {
    let r = this.localPreserveWS, s = this.top;
    (e.tagName == "PRE" || /pre/.test(e.style && e.style.whiteSpace)) && (this.localPreserveWS = !0);
    let o = e.nodeName.toLowerCase(), a;
    wm.hasOwnProperty(o) && this.parser.normalizeLists && qv(e);
    let l = this.options.ruleFromNode && this.options.ruleFromNode(e) || (a = this.parser.matchTag(e, this, i));
    e: if (l ? l.ignore : Kv.hasOwnProperty(o))
      this.findInside(e), this.ignoreFallback(e, t);
    else if (!l || l.skip || l.closeParent) {
      l && l.closeParent ? this.open = Math.max(0, this.open - 1) : l && l.skip.nodeType && (e = l.skip);
      let c, u = this.needsBlock;
      if (xm.hasOwnProperty(o))
        s.content.length && s.content[0].isInline && this.open && (this.open--, s = this.top), c = !0, s.type || (this.needsBlock = !0);
      else if (!e.firstChild) {
        this.leafFallback(e, t);
        break e;
      }
      let d = l && l.skip ? t : this.readStyles(e, t);
      d && this.addAll(e, d), c && this.sync(s), this.needsBlock = u;
    } else {
      let c = this.readStyles(e, t);
      c && this.addElementByRule(e, l, c, l.consuming === !1 ? a : void 0);
    }
    this.localPreserveWS = r;
  }
  // Called for leaf DOM nodes that would otherwise be ignored
  leafFallback(e, t) {
    e.nodeName == "BR" && this.top.type && this.top.type.inlineContent && this.addTextNode(e.ownerDocument.createTextNode(`
`), t);
  }
  // Called for ignored nodes
  ignoreFallback(e, t) {
    e.nodeName == "BR" && (!this.top.type || !this.top.type.inlineContent) && this.findPlace(this.parser.schema.text("-"), t);
  }
  // Run any style parser associated with the node's styles. Either
  // return an updated array of marks, or null to indicate some of the
  // styles had a rule with `ignore` set.
  readStyles(e, t) {
    let i = e.style;
    if (i && i.length)
      for (let r = 0; r < this.parser.matchedStyles.length; r++) {
        let s = this.parser.matchedStyles[r], o = i.getPropertyValue(s);
        if (o)
          for (let a = void 0; ; ) {
            let l = this.parser.matchStyle(s, o, this, a);
            if (!l)
              break;
            if (l.ignore)
              return null;
            if (l.clearMark ? t = t.filter((c) => !l.clearMark(c)) : t = t.concat(this.parser.schema.marks[l.mark].create(l.attrs)), l.consuming === !1)
              a = l;
            else
              break;
          }
      }
    return t;
  }
  // Look up a handler for the given node. If none are found, return
  // false. Otherwise, apply it, use its return value to drive the way
  // the node's content is wrapped, and return true.
  addElementByRule(e, t, i, r) {
    let s, o;
    if (t.node)
      if (o = this.parser.schema.nodes[t.node], o.isLeaf)
        this.insertNode(o.create(t.attrs), i) || this.leafFallback(e, i);
      else {
        let l = this.enter(o, t.attrs || null, i, t.preserveWhitespace);
        l && (s = !0, i = l);
      }
    else {
      let l = this.parser.schema.marks[t.mark];
      i = i.concat(l.create(t.attrs));
    }
    let a = this.top;
    if (o && o.isLeaf)
      this.findInside(e);
    else if (r)
      this.addElement(e, i, r);
    else if (t.getContent)
      this.findInside(e), t.getContent(e, this.parser.schema).forEach((l) => this.insertNode(l, i));
    else {
      let l = e;
      typeof t.contentElement == "string" ? l = e.querySelector(t.contentElement) : typeof t.contentElement == "function" ? l = t.contentElement(e) : t.contentElement && (l = t.contentElement), this.findAround(e, l, !0), this.addAll(l, i), this.findAround(e, l, !1);
    }
    s && this.sync(a) && this.open--;
  }
  // Add all child nodes between `startIndex` and `endIndex` (or the
  // whole node, if not given). If `sync` is passed, use it to
  // synchronize after every block element.
  addAll(e, t, i, r) {
    let s = i || 0;
    for (let o = i ? e.childNodes[i] : e.firstChild, a = r == null ? null : e.childNodes[r]; o != a; o = o.nextSibling, ++s)
      this.findAtPoint(e, s), this.addDOM(o, t);
    this.findAtPoint(e, s);
  }
  // Try to find a way to fit the given node type into the current
  // context. May add intermediate wrappers and/or leave non-solid
  // nodes that we're in.
  findPlace(e, t) {
    let i, r;
    for (let s = this.open; s >= 0; s--) {
      let o = this.nodes[s], a = o.findWrapping(e);
      if (a && (!i || i.length > a.length) && (i = a, r = o, !a.length) || o.solid)
        break;
    }
    if (!i)
      return null;
    this.sync(r);
    for (let s = 0; s < i.length; s++)
      t = this.enterInner(i[s], null, t, !1);
    return t;
  }
  // Try to insert the given node, adjusting the context when needed.
  insertNode(e, t) {
    if (e.isInline && this.needsBlock && !this.top.type) {
      let r = this.textblockFromContext();
      r && (t = this.enterInner(r, null, t));
    }
    let i = this.findPlace(e, t);
    if (i) {
      this.closeExtra();
      let r = this.top;
      r.match && (r.match = r.match.matchType(e.type));
      let s = Fe.none;
      for (let o of i.concat(e.marks))
        (r.type ? r.type.allowsMarkType(o.type) : xf(o.type, e.type)) && (s = o.addToSet(s));
      return r.content.push(e.mark(s)), !0;
    }
    return !1;
  }
  // Try to start a node of the given type, adjusting the context when
  // necessary.
  enter(e, t, i, r) {
    let s = this.findPlace(e.create(t), i);
    return s && (s = this.enterInner(e, t, i, !0, r)), s;
  }
  // Open a node of the given type
  enterInner(e, t, i, r = !1, s) {
    this.closeExtra();
    let o = this.top;
    o.match = o.match && o.match.matchType(e);
    let a = bf(e, s, o.options);
    o.options & Uo && o.content.length == 0 && (a |= Uo);
    let l = Fe.none;
    return i = i.filter((c) => (o.type ? o.type.allowsMarkType(c.type) : xf(c.type, e)) ? (l = c.addToSet(l), !1) : !0), this.nodes.push(new ko(e, t, l, r, null, a)), this.open++, i;
  }
  // Make sure all nodes above this.open are finished and added to
  // their parents
  closeExtra(e = !1) {
    let t = this.nodes.length - 1;
    if (t > this.open) {
      for (; t > this.open; t--)
        this.nodes[t - 1].content.push(this.nodes[t].finish(e));
      this.nodes.length = this.open + 1;
    }
  }
  finish() {
    return this.open = 0, this.closeExtra(this.isOpen), this.nodes[0].finish(!!(this.isOpen || this.options.topOpen));
  }
  sync(e) {
    for (let t = this.open; t >= 0; t--) {
      if (this.nodes[t] == e)
        return this.open = t, !0;
      this.localPreserveWS && (this.nodes[t].options |= zs);
    }
    return !1;
  }
  get currentPos() {
    this.closeExtra();
    let e = 0;
    for (let t = this.open; t >= 0; t--) {
      let i = this.nodes[t].content;
      for (let r = i.length - 1; r >= 0; r--)
        e += i[r].nodeSize;
      t && e++;
    }
    return e;
  }
  findAtPoint(e, t) {
    if (this.find)
      for (let i = 0; i < this.find.length; i++)
        this.find[i].node == e && this.find[i].offset == t && (this.find[i].pos = this.currentPos);
  }
  findInside(e) {
    if (this.find)
      for (let t = 0; t < this.find.length; t++)
        this.find[t].pos == null && e.nodeType == 1 && e.contains(this.find[t].node) && (this.find[t].pos = this.currentPos);
  }
  findAround(e, t, i) {
    if (e != t && this.find)
      for (let r = 0; r < this.find.length; r++)
        this.find[r].pos == null && e.nodeType == 1 && e.contains(this.find[r].node) && t.compareDocumentPosition(this.find[r].node) & (i ? 2 : 4) && (this.find[r].pos = this.currentPos);
  }
  findInText(e) {
    if (this.find)
      for (let t = 0; t < this.find.length; t++)
        this.find[t].node == e && (this.find[t].pos = this.currentPos - (e.nodeValue.length - this.find[t].offset));
  }
  // Determines whether the given context string matches this context.
  matchesContext(e) {
    if (e.indexOf("|") > -1)
      return e.split(/\s*\|\s*/).some(this.matchesContext, this);
    let t = e.split("/"), i = this.options.context, r = !this.isOpen && (!i || i.parent.type == this.nodes[0].type), s = -(i ? i.depth + 1 : 0) + (r ? 0 : 1), o = (a, l) => {
      for (; a >= 0; a--) {
        let c = t[a];
        if (c == "") {
          if (a == t.length - 1 || a == 0)
            continue;
          for (; l >= s; l--)
            if (o(a - 1, l))
              return !0;
          return !1;
        } else {
          let u = l > 0 || l == 0 && r ? this.nodes[l].type : i && l >= s ? i.node(l - s).type : null;
          if (!u || u.name != c && !u.isInGroup(c))
            return !1;
          l--;
        }
      }
      return !0;
    };
    return o(t.length - 1, this.open);
  }
  textblockFromContext() {
    let e = this.options.context;
    if (e)
      for (let t = e.depth; t >= 0; t--) {
        let i = e.node(t).contentMatchAt(e.indexAfter(t)).defaultType;
        if (i && i.isTextblock && i.defaultAttrs)
          return i;
      }
    for (let t in this.parser.schema.nodes) {
      let i = this.parser.schema.nodes[t];
      if (i.isTextblock && i.defaultAttrs)
        return i;
    }
  }
}
function qv(n) {
  for (let e = n.firstChild, t = null; e; e = e.nextSibling) {
    let i = e.nodeType == 1 ? e.nodeName.toLowerCase() : null;
    i && wm.hasOwnProperty(i) && t ? (t.appendChild(e), e = t) : i == "li" ? t = e : i && (t = null);
  }
}
function Gv(n, e) {
  return (n.matches || n.msMatchesSelector || n.webkitMatchesSelector || n.mozMatchesSelector).call(n, e);
}
function yf(n) {
  let e = {};
  for (let t in n)
    e[t] = n[t];
  return e;
}
function xf(n, e) {
  let t = e.schema.nodes;
  for (let i in t) {
    let r = t[i];
    if (!r.allowsMarkType(n))
      continue;
    let s = [], o = (a) => {
      s.push(a);
      for (let l = 0; l < a.edgeCount; l++) {
        let { type: c, next: u } = a.edge(l);
        if (c == e || s.indexOf(u) < 0 && o(u))
          return !0;
      }
    };
    if (o(r.contentMatch))
      return !0;
  }
}
class Zi {
  /**
  Create a serializer. `nodes` should map node names to functions
  that take a node and return a description of the corresponding
  DOM. `marks` does the same for mark names, but also gets an
  argument that tells it whether the mark's content is block or
  inline content (for typical use, it'll always be inline). A mark
  serializer may be `null` to indicate that marks of that type
  should not be serialized.
  */
  constructor(e, t) {
    this.nodes = e, this.marks = t;
  }
  /**
  Serialize the content of this fragment to a DOM fragment. When
  not in the browser, the `document` option, containing a DOM
  document, should be passed so that the serializer can create
  nodes.
  */
  serializeFragment(e, t = {}, i) {
    i || (i = Pl(t).createDocumentFragment());
    let r = i, s = [];
    return e.forEach((o) => {
      if (s.length || o.marks.length) {
        let a = 0, l = 0;
        for (; a < s.length && l < o.marks.length; ) {
          let c = o.marks[l];
          if (!this.marks[c.type.name]) {
            l++;
            continue;
          }
          if (!c.eq(s[a][0]) || c.type.spec.spanning === !1)
            break;
          a++, l++;
        }
        for (; a < s.length; )
          r = s.pop()[1];
        for (; l < o.marks.length; ) {
          let c = o.marks[l++], u = this.serializeMark(c, o.isInline, t);
          u && (s.push([c, r]), r.appendChild(u.dom), r = u.contentDOM || u.dom);
        }
      }
      r.appendChild(this.serializeNodeInner(o, t));
    }), i;
  }
  /**
  @internal
  */
  serializeNodeInner(e, t) {
    let { dom: i, contentDOM: r } = Ko(Pl(t), this.nodes[e.type.name](e), null, e.attrs);
    if (r) {
      if (e.isLeaf)
        throw new RangeError("Content hole not allowed in a leaf node spec");
      this.serializeFragment(e.content, t, r);
    }
    return i;
  }
  /**
  Serialize this node to a DOM node. This can be useful when you
  need to serialize a part of a document, as opposed to the whole
  document. To serialize a whole document, use
  [`serializeFragment`](https://prosemirror.net/docs/ref/#model.DOMSerializer.serializeFragment) on
  its [content](https://prosemirror.net/docs/ref/#model.Node.content).
  */
  serializeNode(e, t = {}) {
    let i = this.serializeNodeInner(e, t);
    for (let r = e.marks.length - 1; r >= 0; r--) {
      let s = this.serializeMark(e.marks[r], e.isInline, t);
      s && ((s.contentDOM || s.dom).appendChild(i), i = s.dom);
    }
    return i;
  }
  /**
  @internal
  */
  serializeMark(e, t, i = {}) {
    let r = this.marks[e.type.name];
    return r && Ko(Pl(i), r(e, t), null, e.attrs);
  }
  static renderSpec(e, t, i = null, r) {
    return Ko(e, t, i, r);
  }
  /**
  Build a serializer using the [`toDOM`](https://prosemirror.net/docs/ref/#model.NodeSpec.toDOM)
  properties in a schema's node and mark specs.
  */
  static fromSchema(e) {
    return e.cached.domSerializer || (e.cached.domSerializer = new Zi(this.nodesFromSchema(e), this.marksFromSchema(e)));
  }
  /**
  Gather the serializers in a schema's node specs into an object.
  This can be useful as a base to build a custom serializer from.
  */
  static nodesFromSchema(e) {
    let t = wf(e.nodes);
    return t.text || (t.text = (i) => i.text), t;
  }
  /**
  Gather the serializers in a schema's mark specs into an object.
  */
  static marksFromSchema(e) {
    return wf(e.marks);
  }
}
function wf(n) {
  let e = {};
  for (let t in n) {
    let i = n[t].spec.toDOM;
    i && (e[t] = i);
  }
  return e;
}
function Pl(n) {
  return n.document || window.document;
}
const kf = /* @__PURE__ */ new WeakMap();
function Jv(n) {
  let e = kf.get(n);
  return e === void 0 && kf.set(n, e = Xv(n)), e;
}
function Xv(n) {
  let e = null;
  function t(i) {
    if (i && typeof i == "object")
      if (Array.isArray(i))
        if (typeof i[0] == "string")
          e || (e = []), e.push(i);
        else
          for (let r = 0; r < i.length; r++)
            t(i[r]);
      else
        for (let r in i)
          t(i[r]);
  }
  return t(n), e;
}
function Ko(n, e, t, i) {
  if (typeof e == "string")
    return { dom: n.createTextNode(e) };
  if (e.nodeType != null)
    return { dom: e };
  if (e.dom && e.dom.nodeType != null)
    return e;
  let r = e[0], s;
  if (typeof r != "string")
    throw new RangeError("Invalid array passed to renderSpec");
  if (i && (s = Jv(i)) && s.indexOf(e) > -1)
    throw new RangeError("Using an array from an attribute object as a DOM spec. This may be an attempted cross site scripting attack.");
  let o = r.indexOf(" ");
  o > 0 && (t = r.slice(0, o), r = r.slice(o + 1));
  let a, l = t ? n.createElementNS(t, r) : n.createElement(r), c = e[1], u = 1;
  if (c && typeof c == "object" && c.nodeType == null && !Array.isArray(c)) {
    u = 2;
    for (let d in c)
      if (c[d] != null) {
        let f = d.indexOf(" ");
        f > 0 ? l.setAttributeNS(d.slice(0, f), d.slice(f + 1), c[d]) : l.setAttribute(d, c[d]);
      }
  }
  for (let d = u; d < e.length; d++) {
    let f = e[d];
    if (f === 0) {
      if (d < e.length - 1 || d > u)
        throw new RangeError("Content hole must be the only child of its parent node");
      return { dom: l, contentDOM: l };
    } else {
      let { dom: h, contentDOM: p } = Ko(n, f, t, i);
      if (l.appendChild(h), p) {
        if (a)
          throw new RangeError("Multiple content holes");
        a = p;
      }
    }
  }
  return { dom: l, contentDOM: a };
}
const km = 65535, Sm = Math.pow(2, 16);
function Yv(n, e) {
  return n + e * Sm;
}
function Sf(n) {
  return n & km;
}
function Zv(n) {
  return (n - (n & km)) / Sm;
}
const Em = 1, Cm = 2, qo = 4, Tm = 8;
class Vc {
  /**
  @internal
  */
  constructor(e, t, i) {
    this.pos = e, this.delInfo = t, this.recover = i;
  }
  /**
  Tells you whether the position was deleted, that is, whether the
  step removed the token on the side queried (via the `assoc`)
  argument from the document.
  */
  get deleted() {
    return (this.delInfo & Tm) > 0;
  }
  /**
  Tells you whether the token before the mapped position was deleted.
  */
  get deletedBefore() {
    return (this.delInfo & (Em | qo)) > 0;
  }
  /**
  True when the token after the mapped position was deleted.
  */
  get deletedAfter() {
    return (this.delInfo & (Cm | qo)) > 0;
  }
  /**
  Tells whether any of the steps mapped through deletes across the
  position (including both the token before and after the
  position).
  */
  get deletedAcross() {
    return (this.delInfo & qo) > 0;
  }
}
class en {
  /**
  Create a position map. The modifications to the document are
  represented as an array of numbers, in which each group of three
  represents a modified chunk as `[start, oldSize, newSize]`.
  */
  constructor(e, t = !1) {
    if (this.ranges = e, this.inverted = t, !e.length && en.empty)
      return en.empty;
  }
  /**
  @internal
  */
  recover(e) {
    let t = 0, i = Sf(e);
    if (!this.inverted)
      for (let r = 0; r < i; r++)
        t += this.ranges[r * 3 + 2] - this.ranges[r * 3 + 1];
    return this.ranges[i * 3] + t + Zv(e);
  }
  mapResult(e, t = 1) {
    return this._map(e, t, !1);
  }
  map(e, t = 1) {
    return this._map(e, t, !0);
  }
  /**
  @internal
  */
  _map(e, t, i) {
    let r = 0, s = this.inverted ? 2 : 1, o = this.inverted ? 1 : 2;
    for (let a = 0; a < this.ranges.length; a += 3) {
      let l = this.ranges[a] - (this.inverted ? r : 0);
      if (l > e)
        break;
      let c = this.ranges[a + s], u = this.ranges[a + o], d = l + c;
      if (e <= d) {
        let f = c ? e == l ? -1 : e == d ? 1 : t : t, h = l + r + (f < 0 ? 0 : u);
        if (i)
          return h;
        let p = e == (t < 0 ? l : d) ? null : Yv(a / 3, e - l), b = e == l ? Cm : e == d ? Em : qo;
        return (t < 0 ? e != l : e != d) && (b |= Tm), new Vc(h, b, p);
      }
      r += u - c;
    }
    return i ? e + r : new Vc(e + r, 0, null);
  }
  /**
  @internal
  */
  touches(e, t) {
    let i = 0, r = Sf(t), s = this.inverted ? 2 : 1, o = this.inverted ? 1 : 2;
    for (let a = 0; a < this.ranges.length; a += 3) {
      let l = this.ranges[a] - (this.inverted ? i : 0);
      if (l > e)
        break;
      let c = this.ranges[a + s], u = l + c;
      if (e <= u && a == r * 3)
        return !0;
      i += this.ranges[a + o] - c;
    }
    return !1;
  }
  /**
  Calls the given function on each of the changed ranges included in
  this map.
  */
  forEach(e) {
    let t = this.inverted ? 2 : 1, i = this.inverted ? 1 : 2;
    for (let r = 0, s = 0; r < this.ranges.length; r += 3) {
      let o = this.ranges[r], a = o - (this.inverted ? s : 0), l = o + (this.inverted ? 0 : s), c = this.ranges[r + t], u = this.ranges[r + i];
      e(a, a + c, l, l + u), s += u - c;
    }
  }
  /**
  Create an inverted version of this map. The result can be used to
  map positions in the post-step document to the pre-step document.
  */
  invert() {
    return new en(this.ranges, !this.inverted);
  }
  /**
  @internal
  */
  toString() {
    return (this.inverted ? "-" : "") + JSON.stringify(this.ranges);
  }
  /**
  Create a map that moves all positions by offset `n` (which may be
  negative). This can be useful when applying steps meant for a
  sub-document to a larger document, or vice-versa.
  */
  static offset(e) {
    return e == 0 ? en.empty : new en(e < 0 ? [0, -e, 0] : [0, 0, e]);
  }
}
en.empty = new en([]);
class yr {
  /**
  Create a new mapping with the given position maps.
  */
  constructor(e = [], t, i = 0, r = e.length) {
    this.maps = e, this.mirror = t, this.from = i, this.to = r;
  }
  /**
  Create a mapping that maps only through a part of this one.
  */
  slice(e = 0, t = this.maps.length) {
    return new yr(this.maps, this.mirror, e, t);
  }
  /**
  @internal
  */
  copy() {
    return new yr(this.maps.slice(), this.mirror && this.mirror.slice(), this.from, this.to);
  }
  /**
  Add a step map to the end of this mapping. If `mirrors` is
  given, it should be the index of the step map that is the mirror
  image of this one.
  */
  appendMap(e, t) {
    this.to = this.maps.push(e), t != null && this.setMirror(this.maps.length - 1, t);
  }
  /**
  Add all the step maps in a given mapping to this one (preserving
  mirroring information).
  */
  appendMapping(e) {
    for (let t = 0, i = this.maps.length; t < e.maps.length; t++) {
      let r = e.getMirror(t);
      this.appendMap(e.maps[t], r != null && r < t ? i + r : void 0);
    }
  }
  /**
  Finds the offset of the step map that mirrors the map at the
  given offset, in this mapping (as per the second argument to
  `appendMap`).
  */
  getMirror(e) {
    if (this.mirror) {
      for (let t = 0; t < this.mirror.length; t++)
        if (this.mirror[t] == e)
          return this.mirror[t + (t % 2 ? -1 : 1)];
    }
  }
  /**
  @internal
  */
  setMirror(e, t) {
    this.mirror || (this.mirror = []), this.mirror.push(e, t);
  }
  /**
  Append the inverse of the given mapping to this one.
  */
  appendMappingInverted(e) {
    for (let t = e.maps.length - 1, i = this.maps.length + e.maps.length; t >= 0; t--) {
      let r = e.getMirror(t);
      this.appendMap(e.maps[t].invert(), r != null && r > t ? i - r - 1 : void 0);
    }
  }
  /**
  Create an inverted version of this mapping.
  */
  invert() {
    let e = new yr();
    return e.appendMappingInverted(this), e;
  }
  /**
  Map a position through this mapping.
  */
  map(e, t = 1) {
    if (this.mirror)
      return this._map(e, t, !0);
    for (let i = this.from; i < this.to; i++)
      e = this.maps[i].map(e, t);
    return e;
  }
  /**
  Map a position through this mapping, returning a mapping
  result.
  */
  mapResult(e, t = 1) {
    return this._map(e, t, !1);
  }
  /**
  @internal
  */
  _map(e, t, i) {
    let r = 0;
    for (let s = this.from; s < this.to; s++) {
      let o = this.maps[s], a = o.mapResult(e, t);
      if (a.recover != null) {
        let l = this.getMirror(s);
        if (l != null && l > s && l < this.to) {
          s = l, e = this.maps[l].recover(a.recover);
          continue;
        }
      }
      r |= a.delInfo, e = a.pos;
    }
    return i ? e : new Vc(e, r, null);
  }
}
const Dl = /* @__PURE__ */ Object.create(null);
class Pt {
  /**
  Get the step map that represents the changes made by this step,
  and which can be used to transform between positions in the old
  and the new document.
  */
  getMap() {
    return en.empty;
  }
  /**
  Try to merge this step with another one, to be applied directly
  after it. Returns the merged step when possible, null if the
  steps can't be merged.
  */
  merge(e) {
    return null;
  }
  /**
  Deserialize a step from its JSON representation. Will call
  through to the step class' own implementation of this method.
  */
  static fromJSON(e, t) {
    if (!t || !t.stepType)
      throw new RangeError("Invalid input for Step.fromJSON");
    let i = Dl[t.stepType];
    if (!i)
      throw new RangeError(`No step type ${t.stepType} defined`);
    return i.fromJSON(e, t);
  }
  /**
  To be able to serialize steps to JSON, each step needs a string
  ID to attach to its JSON representation. Use this method to
  register an ID for your step classes. Try to pick something
  that's unlikely to clash with steps from other modules.
  */
  static jsonID(e, t) {
    if (e in Dl)
      throw new RangeError("Duplicate use of step JSON ID " + e);
    return Dl[e] = t, t.prototype.jsonID = e, t;
  }
}
class ct {
  /**
  @internal
  */
  constructor(e, t) {
    this.doc = e, this.failed = t;
  }
  /**
  Create a successful step result.
  */
  static ok(e) {
    return new ct(e, null);
  }
  /**
  Create a failed step result.
  */
  static fail(e) {
    return new ct(null, e);
  }
  /**
  Call [`Node.replace`](https://prosemirror.net/docs/ref/#model.Node.replace) with the given
  arguments. Create a successful result if it succeeds, and a
  failed one if it throws a `ReplaceError`.
  */
  static fromReplace(e, t, i, r) {
    try {
      return ct.ok(e.replace(t, i, r));
    } catch (s) {
      if (s instanceof la)
        return ct.fail(s.message);
      throw s;
    }
  }
}
function Iu(n, e, t) {
  let i = [];
  for (let r = 0; r < n.childCount; r++) {
    let s = n.child(r);
    s.content.size && (s = s.copy(Iu(s.content, e, s))), s.isInline && (s = e(s, t, r)), i.push(s);
  }
  return $.fromArray(i);
}
class _i extends Pt {
  /**
  Create a mark step.
  */
  constructor(e, t, i) {
    super(), this.from = e, this.to = t, this.mark = i;
  }
  apply(e) {
    let t = e.slice(this.from, this.to), i = e.resolve(this.from), r = i.node(i.sharedDepth(this.to)), s = new X(Iu(t.content, (o, a) => !o.isAtom || !a.type.allowsMarkType(this.mark.type) ? o : o.mark(this.mark.addToSet(o.marks)), r), t.openStart, t.openEnd);
    return ct.fromReplace(e, this.from, this.to, s);
  }
  invert() {
    return new Sn(this.from, this.to, this.mark);
  }
  map(e) {
    let t = e.mapResult(this.from, 1), i = e.mapResult(this.to, -1);
    return t.deleted && i.deleted || t.pos >= i.pos ? null : new _i(t.pos, i.pos, this.mark);
  }
  merge(e) {
    return e instanceof _i && e.mark.eq(this.mark) && this.from <= e.to && this.to >= e.from ? new _i(Math.min(this.from, e.from), Math.max(this.to, e.to), this.mark) : null;
  }
  toJSON() {
    return {
      stepType: "addMark",
      mark: this.mark.toJSON(),
      from: this.from,
      to: this.to
    };
  }
  /**
  @internal
  */
  static fromJSON(e, t) {
    if (typeof t.from != "number" || typeof t.to != "number")
      throw new RangeError("Invalid input for AddMarkStep.fromJSON");
    return new _i(t.from, t.to, e.markFromJSON(t.mark));
  }
}
Pt.jsonID("addMark", _i);
class Sn extends Pt {
  /**
  Create a mark-removing step.
  */
  constructor(e, t, i) {
    super(), this.from = e, this.to = t, this.mark = i;
  }
  apply(e) {
    let t = e.slice(this.from, this.to), i = new X(Iu(t.content, (r) => r.mark(this.mark.removeFromSet(r.marks)), e), t.openStart, t.openEnd);
    return ct.fromReplace(e, this.from, this.to, i);
  }
  invert() {
    return new _i(this.from, this.to, this.mark);
  }
  map(e) {
    let t = e.mapResult(this.from, 1), i = e.mapResult(this.to, -1);
    return t.deleted && i.deleted || t.pos >= i.pos ? null : new Sn(t.pos, i.pos, this.mark);
  }
  merge(e) {
    return e instanceof Sn && e.mark.eq(this.mark) && this.from <= e.to && this.to >= e.from ? new Sn(Math.min(this.from, e.from), Math.max(this.to, e.to), this.mark) : null;
  }
  toJSON() {
    return {
      stepType: "removeMark",
      mark: this.mark.toJSON(),
      from: this.from,
      to: this.to
    };
  }
  /**
  @internal
  */
  static fromJSON(e, t) {
    if (typeof t.from != "number" || typeof t.to != "number")
      throw new RangeError("Invalid input for RemoveMarkStep.fromJSON");
    return new Sn(t.from, t.to, e.markFromJSON(t.mark));
  }
}
Pt.jsonID("removeMark", Sn);
class bi extends Pt {
  /**
  Create a node mark step.
  */
  constructor(e, t) {
    super(), this.pos = e, this.mark = t;
  }
  apply(e) {
    let t = e.nodeAt(this.pos);
    if (!t)
      return ct.fail("No node at mark step's position");
    let i = t.type.create(t.attrs, null, this.mark.addToSet(t.marks));
    return ct.fromReplace(e, this.pos, this.pos + 1, new X($.from(i), 0, t.isLeaf ? 0 : 1));
  }
  invert(e) {
    let t = e.nodeAt(this.pos);
    if (t) {
      let i = this.mark.addToSet(t.marks);
      if (i.length == t.marks.length) {
        for (let r = 0; r < t.marks.length; r++)
          if (!t.marks[r].isInSet(i))
            return new bi(this.pos, t.marks[r]);
        return new bi(this.pos, this.mark);
      }
    }
    return new Dr(this.pos, this.mark);
  }
  map(e) {
    let t = e.mapResult(this.pos, 1);
    return t.deletedAfter ? null : new bi(t.pos, this.mark);
  }
  toJSON() {
    return { stepType: "addNodeMark", pos: this.pos, mark: this.mark.toJSON() };
  }
  /**
  @internal
  */
  static fromJSON(e, t) {
    if (typeof t.pos != "number")
      throw new RangeError("Invalid input for AddNodeMarkStep.fromJSON");
    return new bi(t.pos, e.markFromJSON(t.mark));
  }
}
Pt.jsonID("addNodeMark", bi);
class Dr extends Pt {
  /**
  Create a mark-removing step.
  */
  constructor(e, t) {
    super(), this.pos = e, this.mark = t;
  }
  apply(e) {
    let t = e.nodeAt(this.pos);
    if (!t)
      return ct.fail("No node at mark step's position");
    let i = t.type.create(t.attrs, null, this.mark.removeFromSet(t.marks));
    return ct.fromReplace(e, this.pos, this.pos + 1, new X($.from(i), 0, t.isLeaf ? 0 : 1));
  }
  invert(e) {
    let t = e.nodeAt(this.pos);
    return !t || !this.mark.isInSet(t.marks) ? this : new bi(this.pos, this.mark);
  }
  map(e) {
    let t = e.mapResult(this.pos, 1);
    return t.deletedAfter ? null : new Dr(t.pos, this.mark);
  }
  toJSON() {
    return { stepType: "removeNodeMark", pos: this.pos, mark: this.mark.toJSON() };
  }
  /**
  @internal
  */
  static fromJSON(e, t) {
    if (typeof t.pos != "number")
      throw new RangeError("Invalid input for RemoveNodeMarkStep.fromJSON");
    return new Dr(t.pos, e.markFromJSON(t.mark));
  }
}
Pt.jsonID("removeNodeMark", Dr);
class _t extends Pt {
  /**
  The given `slice` should fit the 'gap' between `from` and
  `to`—the depths must line up, and the surrounding nodes must be
  able to be joined with the open sides of the slice. When
  `structure` is true, the step will fail if the content between
  from and to is not just a sequence of closing and then opening
  tokens (this is to guard against rebased replace steps
  overwriting something they weren't supposed to).
  */
  constructor(e, t, i, r = !1) {
    super(), this.from = e, this.to = t, this.slice = i, this.structure = r;
  }
  apply(e) {
    return this.structure && jc(e, this.from, this.to) ? ct.fail("Structure replace would overwrite content") : ct.fromReplace(e, this.from, this.to, this.slice);
  }
  getMap() {
    return new en([this.from, this.to - this.from, this.slice.size]);
  }
  invert(e) {
    return new _t(this.from, this.from + this.slice.size, e.slice(this.from, this.to));
  }
  map(e) {
    let t = e.mapResult(this.from, 1), i = e.mapResult(this.to, -1);
    return t.deletedAcross && i.deletedAcross ? null : new _t(t.pos, Math.max(t.pos, i.pos), this.slice);
  }
  merge(e) {
    if (!(e instanceof _t) || e.structure || this.structure)
      return null;
    if (this.from + this.slice.size == e.from && !this.slice.openEnd && !e.slice.openStart) {
      let t = this.slice.size + e.slice.size == 0 ? X.empty : new X(this.slice.content.append(e.slice.content), this.slice.openStart, e.slice.openEnd);
      return new _t(this.from, this.to + (e.to - e.from), t, this.structure);
    } else if (e.to == this.from && !this.slice.openStart && !e.slice.openEnd) {
      let t = this.slice.size + e.slice.size == 0 ? X.empty : new X(e.slice.content.append(this.slice.content), e.slice.openStart, this.slice.openEnd);
      return new _t(e.from, this.to, t, this.structure);
    } else
      return null;
  }
  toJSON() {
    let e = { stepType: "replace", from: this.from, to: this.to };
    return this.slice.size && (e.slice = this.slice.toJSON()), this.structure && (e.structure = !0), e;
  }
  /**
  @internal
  */
  static fromJSON(e, t) {
    if (typeof t.from != "number" || typeof t.to != "number")
      throw new RangeError("Invalid input for ReplaceStep.fromJSON");
    return new _t(t.from, t.to, X.fromJSON(e, t.slice), !!t.structure);
  }
}
Pt.jsonID("replace", _t);
class vt extends Pt {
  /**
  Create a replace-around step with the given range and gap.
  `insert` should be the point in the slice into which the content
  of the gap should be moved. `structure` has the same meaning as
  it has in the [`ReplaceStep`](https://prosemirror.net/docs/ref/#transform.ReplaceStep) class.
  */
  constructor(e, t, i, r, s, o, a = !1) {
    super(), this.from = e, this.to = t, this.gapFrom = i, this.gapTo = r, this.slice = s, this.insert = o, this.structure = a;
  }
  apply(e) {
    if (this.structure && (jc(e, this.from, this.gapFrom) || jc(e, this.gapTo, this.to)))
      return ct.fail("Structure gap-replace would overwrite content");
    let t = e.slice(this.gapFrom, this.gapTo);
    if (t.openStart || t.openEnd)
      return ct.fail("Gap is not a flat range");
    let i = this.slice.insertAt(this.insert, t.content);
    return i ? ct.fromReplace(e, this.from, this.to, i) : ct.fail("Content does not fit in gap");
  }
  getMap() {
    return new en([
      this.from,
      this.gapFrom - this.from,
      this.insert,
      this.gapTo,
      this.to - this.gapTo,
      this.slice.size - this.insert
    ]);
  }
  invert(e) {
    let t = this.gapTo - this.gapFrom;
    return new vt(this.from, this.from + this.slice.size + t, this.from + this.insert, this.from + this.insert + t, e.slice(this.from, this.to).removeBetween(this.gapFrom - this.from, this.gapTo - this.from), this.gapFrom - this.from, this.structure);
  }
  map(e) {
    let t = e.mapResult(this.from, 1), i = e.mapResult(this.to, -1), r = this.from == this.gapFrom ? t.pos : e.map(this.gapFrom, -1), s = this.to == this.gapTo ? i.pos : e.map(this.gapTo, 1);
    return t.deletedAcross && i.deletedAcross || r < t.pos || s > i.pos ? null : new vt(t.pos, i.pos, r, s, this.slice, this.insert, this.structure);
  }
  toJSON() {
    let e = {
      stepType: "replaceAround",
      from: this.from,
      to: this.to,
      gapFrom: this.gapFrom,
      gapTo: this.gapTo,
      insert: this.insert
    };
    return this.slice.size && (e.slice = this.slice.toJSON()), this.structure && (e.structure = !0), e;
  }
  /**
  @internal
  */
  static fromJSON(e, t) {
    if (typeof t.from != "number" || typeof t.to != "number" || typeof t.gapFrom != "number" || typeof t.gapTo != "number" || typeof t.insert != "number")
      throw new RangeError("Invalid input for ReplaceAroundStep.fromJSON");
    return new vt(t.from, t.to, t.gapFrom, t.gapTo, X.fromJSON(e, t.slice), t.insert, !!t.structure);
  }
}
Pt.jsonID("replaceAround", vt);
function jc(n, e, t) {
  let i = n.resolve(e), r = t - e, s = i.depth;
  for (; r > 0 && s > 0 && i.indexAfter(s) == i.node(s).childCount; )
    s--, r--;
  if (r > 0) {
    let o = i.node(s).maybeChild(i.indexAfter(s));
    for (; r > 0; ) {
      if (!o || o.isLeaf)
        return !0;
      o = o.firstChild, r--;
    }
  }
  return !1;
}
function Qv(n, e, t, i) {
  let r = [], s = [], o, a;
  n.doc.nodesBetween(e, t, (l, c, u) => {
    if (!l.isInline)
      return;
    let d = l.marks;
    if (!i.isInSet(d) && u.type.allowsMarkType(i.type)) {
      let f = Math.max(c, e), h = Math.min(c + l.nodeSize, t), p = i.addToSet(d);
      for (let b = 0; b < d.length; b++)
        d[b].isInSet(p) || (o && o.to == f && o.mark.eq(d[b]) ? o.to = h : r.push(o = new Sn(f, h, d[b])));
      a && a.to == f ? a.to = h : s.push(a = new _i(f, h, i));
    }
  }), r.forEach((l) => n.step(l)), s.forEach((l) => n.step(l));
}
function ey(n, e, t, i) {
  let r = [], s = 0;
  n.doc.nodesBetween(e, t, (o, a) => {
    if (!o.isInline)
      return;
    s++;
    let l = null;
    if (i instanceof nl) {
      let c = o.marks, u;
      for (; u = i.isInSet(c); )
        (l || (l = [])).push(u), c = u.removeFromSet(c);
    } else i ? i.isInSet(o.marks) && (l = [i]) : l = o.marks;
    if (l && l.length) {
      let c = Math.min(a + o.nodeSize, t);
      for (let u = 0; u < l.length; u++) {
        let d = l[u], f;
        for (let h = 0; h < r.length; h++) {
          let p = r[h];
          p.step == s - 1 && d.eq(r[h].style) && (f = p);
        }
        f ? (f.to = c, f.step = s) : r.push({ style: d, from: Math.max(a, e), to: c, step: s });
      }
    }
  }), r.forEach((o) => n.step(new Sn(o.from, o.to, o.style)));
}
function Pu(n, e, t, i = t.contentMatch, r = !0) {
  let s = n.doc.nodeAt(e), o = [], a = e + 1;
  for (let l = 0; l < s.childCount; l++) {
    let c = s.child(l), u = a + c.nodeSize, d = i.matchType(c.type);
    if (!d)
      o.push(new _t(a, u, X.empty));
    else {
      i = d;
      for (let f = 0; f < c.marks.length; f++)
        t.allowsMarkType(c.marks[f].type) || n.step(new Sn(a, u, c.marks[f]));
      if (r && c.isText && t.whitespace != "pre") {
        let f, h = /\r?\n|\r/g, p;
        for (; f = h.exec(c.text); )
          p || (p = new X($.from(t.schema.text(" ", t.allowedMarks(c.marks))), 0, 0)), o.push(new _t(a + f.index, a + f.index + f[0].length, p));
      }
    }
    a = u;
  }
  if (!i.validEnd) {
    let l = i.fillBefore($.empty, !0);
    n.replace(a, a, new X(l, 0, 0));
  }
  for (let l = o.length - 1; l >= 0; l--)
    n.step(o[l]);
}
function ty(n, e, t) {
  return (e == 0 || n.canReplace(e, n.childCount)) && (t == n.childCount || n.canReplace(0, t));
}
function Kr(n) {
  let t = n.parent.content.cutByIndex(n.startIndex, n.endIndex);
  for (let i = n.depth; ; --i) {
    let r = n.$from.node(i), s = n.$from.index(i), o = n.$to.indexAfter(i);
    if (i < n.depth && r.canReplace(s, o, t))
      return i;
    if (i == 0 || r.type.spec.isolating || !ty(r, s, o))
      break;
  }
  return null;
}
function ny(n, e, t) {
  let { $from: i, $to: r, depth: s } = e, o = i.before(s + 1), a = r.after(s + 1), l = o, c = a, u = $.empty, d = 0;
  for (let p = s, b = !1; p > t; p--)
    b || i.index(p) > 0 ? (b = !0, u = $.from(i.node(p).copy(u)), d++) : l--;
  let f = $.empty, h = 0;
  for (let p = s, b = !1; p > t; p--)
    b || r.after(p + 1) < r.end(p) ? (b = !0, f = $.from(r.node(p).copy(f)), h++) : c++;
  n.step(new vt(l, c, o, a, new X(u.append(f), d, h), u.size - d, !0));
}
function Du(n, e, t = null, i = n) {
  let r = iy(n, e), s = r && ry(i, e);
  return s ? r.map(Ef).concat({ type: e, attrs: t }).concat(s.map(Ef)) : null;
}
function Ef(n) {
  return { type: n, attrs: null };
}
function iy(n, e) {
  let { parent: t, startIndex: i, endIndex: r } = n, s = t.contentMatchAt(i).findWrapping(e);
  if (!s)
    return null;
  let o = s.length ? s[0] : e;
  return t.canReplaceWith(i, r, o) ? s : null;
}
function ry(n, e) {
  let { parent: t, startIndex: i, endIndex: r } = n, s = t.child(i), o = e.contentMatch.findWrapping(s.type);
  if (!o)
    return null;
  let l = (o.length ? o[o.length - 1] : e).contentMatch;
  for (let c = i; l && c < r; c++)
    l = l.matchType(t.child(c).type);
  return !l || !l.validEnd ? null : o;
}
function sy(n, e, t) {
  let i = $.empty;
  for (let o = t.length - 1; o >= 0; o--) {
    if (i.size) {
      let a = t[o].type.contentMatch.matchFragment(i);
      if (!a || !a.validEnd)
        throw new RangeError("Wrapper type given to Transform.wrap does not form valid content of its parent wrapper");
    }
    i = $.from(t[o].type.create(t[o].attrs, i));
  }
  let r = e.start, s = e.end;
  n.step(new vt(r, s, r, s, new X(i, 0, 0), t.length, !0));
}
function oy(n, e, t, i, r) {
  if (!i.isTextblock)
    throw new RangeError("Type given to setBlockType should be a textblock");
  let s = n.steps.length;
  n.doc.nodesBetween(e, t, (o, a) => {
    let l = typeof r == "function" ? r(o) : r;
    if (o.isTextblock && !o.hasMarkup(i, l) && ay(n.doc, n.mapping.slice(s).map(a), i)) {
      let c = null;
      if (i.schema.linebreakReplacement) {
        let h = i.whitespace == "pre", p = !!i.contentMatch.matchType(i.schema.linebreakReplacement);
        h && !p ? c = !1 : !h && p && (c = !0);
      }
      c === !1 && Mm(n, o, a, s), Pu(n, n.mapping.slice(s).map(a, 1), i, void 0, c === null);
      let u = n.mapping.slice(s), d = u.map(a, 1), f = u.map(a + o.nodeSize, 1);
      return n.step(new vt(d, f, d + 1, f - 1, new X($.from(i.create(l, null, o.marks)), 0, 0), 1, !0)), c === !0 && Am(n, o, a, s), !1;
    }
  });
}
function Am(n, e, t, i) {
  e.forEach((r, s) => {
    if (r.isText) {
      let o, a = /\r?\n|\r/g;
      for (; o = a.exec(r.text); ) {
        let l = n.mapping.slice(i).map(t + 1 + s + o.index);
        n.replaceWith(l, l + 1, e.type.schema.linebreakReplacement.create());
      }
    }
  });
}
function Mm(n, e, t, i) {
  e.forEach((r, s) => {
    if (r.type == r.type.schema.linebreakReplacement) {
      let o = n.mapping.slice(i).map(t + 1 + s);
      n.replaceWith(o, o + 1, e.type.schema.text(`
`));
    }
  });
}
function ay(n, e, t) {
  let i = n.resolve(e), r = i.index();
  return i.parent.canReplaceWith(r, r + 1, t);
}
function ly(n, e, t, i, r) {
  let s = n.doc.nodeAt(e);
  if (!s)
    throw new RangeError("No node at given position");
  t || (t = s.type);
  let o = t.create(i, null, r || s.marks);
  if (s.isLeaf)
    return n.replaceWith(e, e + s.nodeSize, o);
  if (!t.validContent(s.content))
    throw new RangeError("Invalid content for node type " + t.name);
  n.step(new vt(e, e + s.nodeSize, e + 1, e + s.nodeSize - 1, new X($.from(o), 0, 0), 1, !0));
}
function Qn(n, e, t = 1, i) {
  let r = n.resolve(e), s = r.depth - t, o = i && i[i.length - 1] || r.parent;
  if (s < 0 || r.parent.type.spec.isolating || !r.parent.canReplace(r.index(), r.parent.childCount) || !o.type.validContent(r.parent.content.cutByIndex(r.index(), r.parent.childCount)))
    return !1;
  for (let c = r.depth - 1, u = t - 2; c > s; c--, u--) {
    let d = r.node(c), f = r.index(c);
    if (d.type.spec.isolating)
      return !1;
    let h = d.content.cutByIndex(f, d.childCount), p = i && i[u + 1];
    p && (h = h.replaceChild(0, p.type.create(p.attrs)));
    let b = i && i[u] || d;
    if (!d.canReplace(f + 1, d.childCount) || !b.type.validContent(h))
      return !1;
  }
  let a = r.indexAfter(s), l = i && i[0];
  return r.node(s).canReplaceWith(a, a, l ? l.type : r.node(s + 1).type);
}
function cy(n, e, t = 1, i) {
  let r = n.doc.resolve(e), s = $.empty, o = $.empty;
  for (let a = r.depth, l = r.depth - t, c = t - 1; a > l; a--, c--) {
    s = $.from(r.node(a).copy(s));
    let u = i && i[c];
    o = $.from(u ? u.type.create(u.attrs, o) : r.node(a).copy(o));
  }
  n.step(new _t(e, e, new X(s.append(o), t, t), !0));
}
function Ei(n, e) {
  let t = n.resolve(e), i = t.index();
  return Om(t.nodeBefore, t.nodeAfter) && t.parent.canReplace(i, i + 1);
}
function uy(n, e) {
  e.content.size || n.type.compatibleContent(e.type);
  let t = n.contentMatchAt(n.childCount), { linebreakReplacement: i } = n.type.schema;
  for (let r = 0; r < e.childCount; r++) {
    let s = e.child(r), o = s.type == i ? n.type.schema.nodes.text : s.type;
    if (t = t.matchType(o), !t || !n.type.allowsMarks(s.marks))
      return !1;
  }
  return t.validEnd;
}
function Om(n, e) {
  return !!(n && e && !n.isLeaf && uy(n, e));
}
function il(n, e, t = -1) {
  let i = n.resolve(e);
  for (let r = i.depth; ; r--) {
    let s, o, a = i.index(r);
    if (r == i.depth ? (s = i.nodeBefore, o = i.nodeAfter) : t > 0 ? (s = i.node(r + 1), a++, o = i.node(r).maybeChild(a)) : (s = i.node(r).maybeChild(a - 1), o = i.node(r + 1)), s && !s.isTextblock && Om(s, o) && i.node(r).canReplace(a, a + 1))
      return e;
    if (r == 0)
      break;
    e = t < 0 ? i.before(r) : i.after(r);
  }
}
function dy(n, e, t) {
  let i = null, { linebreakReplacement: r } = n.doc.type.schema, s = n.doc.resolve(e - t), o = s.node().type;
  if (r && o.inlineContent) {
    let u = o.whitespace == "pre", d = !!o.contentMatch.matchType(r);
    u && !d ? i = !1 : !u && d && (i = !0);
  }
  let a = n.steps.length;
  if (i === !1) {
    let u = n.doc.resolve(e + t);
    Mm(n, u.node(), u.before(), a);
  }
  o.inlineContent && Pu(n, e + t - 1, o, s.node().contentMatchAt(s.index()), i == null);
  let l = n.mapping.slice(a), c = l.map(e - t);
  if (n.step(new _t(c, l.map(e + t, -1), X.empty, !0)), i === !0) {
    let u = n.doc.resolve(c);
    Am(n, u.node(), u.before(), n.steps.length);
  }
  return n;
}
function fy(n, e, t) {
  let i = n.resolve(e);
  if (i.parent.canReplaceWith(i.index(), i.index(), t))
    return e;
  if (i.parentOffset == 0)
    for (let r = i.depth - 1; r >= 0; r--) {
      let s = i.index(r);
      if (i.node(r).canReplaceWith(s, s, t))
        return i.before(r + 1);
      if (s > 0)
        return null;
    }
  if (i.parentOffset == i.parent.content.size)
    for (let r = i.depth - 1; r >= 0; r--) {
      let s = i.indexAfter(r);
      if (i.node(r).canReplaceWith(s, s, t))
        return i.after(r + 1);
      if (s < i.node(r).childCount)
        return null;
    }
  return null;
}
function Nm(n, e, t) {
  let i = n.resolve(e);
  if (!t.content.size)
    return e;
  let r = t.content;
  for (let s = 0; s < t.openStart; s++)
    r = r.firstChild.content;
  for (let s = 1; s <= (t.openStart == 0 && t.size ? 2 : 1); s++)
    for (let o = i.depth; o >= 0; o--) {
      let a = o == i.depth ? 0 : i.pos <= (i.start(o + 1) + i.end(o + 1)) / 2 ? -1 : 1, l = i.index(o) + (a > 0 ? 1 : 0), c = i.node(o), u = !1;
      if (s == 1)
        u = c.canReplace(l, l, r);
      else {
        let d = c.contentMatchAt(l).findWrapping(r.firstChild.type);
        u = d && c.canReplaceWith(l, l, d[0]);
      }
      if (u)
        return a == 0 ? i.pos : a < 0 ? i.before(o + 1) : i.after(o + 1);
    }
  return null;
}
function rl(n, e, t = e, i = X.empty) {
  if (e == t && !i.size)
    return null;
  let r = n.resolve(e), s = n.resolve(t);
  return Lm(r, s, i) ? new _t(e, t, i) : new hy(r, s, i).fit();
}
function Lm(n, e, t) {
  return !t.openStart && !t.openEnd && n.start() == e.start() && n.parent.canReplace(n.index(), e.index(), t.content);
}
class hy {
  constructor(e, t, i) {
    this.$from = e, this.$to = t, this.unplaced = i, this.frontier = [], this.placed = $.empty;
    for (let r = 0; r <= e.depth; r++) {
      let s = e.node(r);
      this.frontier.push({
        type: s.type,
        match: s.contentMatchAt(e.indexAfter(r))
      });
    }
    for (let r = e.depth; r > 0; r--)
      this.placed = $.from(e.node(r).copy(this.placed));
  }
  get depth() {
    return this.frontier.length - 1;
  }
  fit() {
    for (; this.unplaced.size; ) {
      let c = this.findFittable();
      c ? this.placeNodes(c) : this.openMore() || this.dropNode();
    }
    let e = this.mustMoveInline(), t = this.placed.size - this.depth - this.$from.depth, i = this.$from, r = this.close(e < 0 ? this.$to : i.doc.resolve(e));
    if (!r)
      return null;
    let s = this.placed, o = i.depth, a = r.depth;
    for (; o && a && s.childCount == 1; )
      s = s.firstChild.content, o--, a--;
    let l = new X(s, o, a);
    return e > -1 ? new vt(i.pos, e, this.$to.pos, this.$to.end(), l, t) : l.size || i.pos != this.$to.pos ? new _t(i.pos, r.pos, l) : null;
  }
  // Find a position on the start spine of `this.unplaced` that has
  // content that can be moved somewhere on the frontier. Returns two
  // depths, one for the slice and one for the frontier.
  findFittable() {
    let e = this.unplaced.openStart;
    for (let t = this.unplaced.content, i = 0, r = this.unplaced.openEnd; i < e; i++) {
      let s = t.firstChild;
      if (t.childCount > 1 && (r = 0), s.type.spec.isolating && r <= i) {
        e = i;
        break;
      }
      t = s.content;
    }
    for (let t = 1; t <= 2; t++)
      for (let i = t == 1 ? e : this.unplaced.openStart; i >= 0; i--) {
        let r, s = null;
        i ? (s = $l(this.unplaced.content, i - 1).firstChild, r = s.content) : r = this.unplaced.content;
        let o = r.firstChild;
        for (let a = this.depth; a >= 0; a--) {
          let { type: l, match: c } = this.frontier[a], u, d = null;
          if (t == 1 && (o ? c.matchType(o.type) || (d = c.fillBefore($.from(o), !1)) : s && l.compatibleContent(s.type)))
            return { sliceDepth: i, frontierDepth: a, parent: s, inject: d };
          if (t == 2 && o && (u = c.findWrapping(o.type)))
            return { sliceDepth: i, frontierDepth: a, parent: s, wrap: u };
          if (s && c.matchType(s.type))
            break;
        }
      }
  }
  openMore() {
    let { content: e, openStart: t, openEnd: i } = this.unplaced, r = $l(e, t);
    return !r.childCount || r.firstChild.isLeaf ? !1 : (this.unplaced = new X(e, t + 1, Math.max(i, r.size + t >= e.size - i ? t + 1 : 0)), !0);
  }
  dropNode() {
    let { content: e, openStart: t, openEnd: i } = this.unplaced, r = $l(e, t);
    if (r.childCount <= 1 && t > 0) {
      let s = e.size - t <= t + r.size;
      this.unplaced = new X(ms(e, t - 1, 1), t - 1, s ? t - 1 : i);
    } else
      this.unplaced = new X(ms(e, t, 1), t, i);
  }
  // Move content from the unplaced slice at `sliceDepth` to the
  // frontier node at `frontierDepth`. Close that frontier node when
  // applicable.
  placeNodes({ sliceDepth: e, frontierDepth: t, parent: i, inject: r, wrap: s }) {
    for (; this.depth > t; )
      this.closeFrontierNode();
    if (s)
      for (let b = 0; b < s.length; b++)
        this.openFrontierNode(s[b]);
    let o = this.unplaced, a = i ? i.content : o.content, l = o.openStart - e, c = 0, u = [], { match: d, type: f } = this.frontier[t];
    if (r) {
      for (let b = 0; b < r.childCount; b++)
        u.push(r.child(b));
      d = d.matchFragment(r);
    }
    let h = a.size + e - (o.content.size - o.openEnd);
    for (; c < a.childCount; ) {
      let b = a.child(c), m = d.matchType(b.type);
      if (!m)
        break;
      c++, (c > 1 || l == 0 || b.content.size) && (d = m, u.push(Rm(b.mark(f.allowedMarks(b.marks)), c == 1 ? l : 0, c == a.childCount ? h : -1)));
    }
    let p = c == a.childCount;
    p || (h = -1), this.placed = gs(this.placed, t, $.from(u)), this.frontier[t].match = d, p && h < 0 && i && i.type == this.frontier[this.depth].type && this.frontier.length > 1 && this.closeFrontierNode();
    for (let b = 0, m = a; b < h; b++) {
      let g = m.lastChild;
      this.frontier.push({ type: g.type, match: g.contentMatchAt(g.childCount) }), m = g.content;
    }
    this.unplaced = p ? e == 0 ? X.empty : new X(ms(o.content, e - 1, 1), e - 1, h < 0 ? o.openEnd : e - 1) : new X(ms(o.content, e, c), o.openStart, o.openEnd);
  }
  mustMoveInline() {
    if (!this.$to.parent.isTextblock)
      return -1;
    let e = this.frontier[this.depth], t;
    if (!e.type.isTextblock || !zl(this.$to, this.$to.depth, e.type, e.match, !1) || this.$to.depth == this.depth && (t = this.findCloseLevel(this.$to)) && t.depth == this.depth)
      return -1;
    let { depth: i } = this.$to, r = this.$to.after(i);
    for (; i > 1 && r == this.$to.end(--i); )
      ++r;
    return r;
  }
  findCloseLevel(e) {
    e: for (let t = Math.min(this.depth, e.depth); t >= 0; t--) {
      let { match: i, type: r } = this.frontier[t], s = t < e.depth && e.end(t + 1) == e.pos + (e.depth - (t + 1)), o = zl(e, t, r, i, s);
      if (o) {
        for (let a = t - 1; a >= 0; a--) {
          let { match: l, type: c } = this.frontier[a], u = zl(e, a, c, l, !0);
          if (!u || u.childCount)
            continue e;
        }
        return { depth: t, fit: o, move: s ? e.doc.resolve(e.after(t + 1)) : e };
      }
    }
  }
  close(e) {
    let t = this.findCloseLevel(e);
    if (!t)
      return null;
    for (; this.depth > t.depth; )
      this.closeFrontierNode();
    t.fit.childCount && (this.placed = gs(this.placed, t.depth, t.fit)), e = t.move;
    for (let i = t.depth + 1; i <= e.depth; i++) {
      let r = e.node(i), s = r.type.contentMatch.fillBefore(r.content, !0, e.index(i));
      this.openFrontierNode(r.type, r.attrs, s);
    }
    return e;
  }
  openFrontierNode(e, t = null, i) {
    let r = this.frontier[this.depth];
    r.match = r.match.matchType(e), this.placed = gs(this.placed, this.depth, $.from(e.create(t, i))), this.frontier.push({ type: e, match: e.contentMatch });
  }
  closeFrontierNode() {
    let t = this.frontier.pop().match.fillBefore($.empty, !0);
    t.childCount && (this.placed = gs(this.placed, this.frontier.length, t));
  }
}
function ms(n, e, t) {
  return e == 0 ? n.cutByIndex(t, n.childCount) : n.replaceChild(0, n.firstChild.copy(ms(n.firstChild.content, e - 1, t)));
}
function gs(n, e, t) {
  return e == 0 ? n.append(t) : n.replaceChild(n.childCount - 1, n.lastChild.copy(gs(n.lastChild.content, e - 1, t)));
}
function $l(n, e) {
  for (let t = 0; t < e; t++)
    n = n.firstChild.content;
  return n;
}
function Rm(n, e, t) {
  if (e <= 0)
    return n;
  let i = n.content;
  return e > 1 && (i = i.replaceChild(0, Rm(i.firstChild, e - 1, i.childCount == 1 ? t - 1 : 0))), e > 0 && (i = n.type.contentMatch.fillBefore(i).append(i), t <= 0 && (i = i.append(n.type.contentMatch.matchFragment(i).fillBefore($.empty, !0)))), n.copy(i);
}
function zl(n, e, t, i, r) {
  let s = n.node(e), o = r ? n.indexAfter(e) : n.index(e);
  if (o == s.childCount && !t.compatibleContent(s.type))
    return null;
  let a = i.fillBefore(s.content, !0, o);
  return a && !py(t, s.content, o) ? a : null;
}
function py(n, e, t) {
  for (let i = t; i < e.childCount; i++)
    if (!n.allowsMarks(e.child(i).marks))
      return !0;
  return !1;
}
function my(n) {
  return n.spec.defining || n.spec.definingForContent;
}
function gy(n, e, t, i) {
  if (!i.size)
    return n.deleteRange(e, t);
  let r = n.doc.resolve(e), s = n.doc.resolve(t);
  if (Lm(r, s, i))
    return n.step(new _t(e, t, i));
  let o = Pm(r, n.doc.resolve(t));
  o[o.length - 1] == 0 && o.pop();
  let a = -(r.depth + 1);
  o.unshift(a);
  for (let f = r.depth, h = r.pos - 1; f > 0; f--, h--) {
    let p = r.node(f).type.spec;
    if (p.defining || p.definingAsContext || p.isolating)
      break;
    o.indexOf(f) > -1 ? a = f : r.before(f) == h && o.splice(1, 0, -f);
  }
  let l = o.indexOf(a), c = [], u = i.openStart;
  for (let f = i.content, h = 0; ; h++) {
    let p = f.firstChild;
    if (c.push(p), h == i.openStart)
      break;
    f = p.content;
  }
  for (let f = u - 1; f >= 0; f--) {
    let h = c[f], p = my(h.type);
    if (p && !h.sameMarkup(r.node(Math.abs(a) - 1)))
      u = f;
    else if (p || !h.type.isTextblock)
      break;
  }
  for (let f = i.openStart; f >= 0; f--) {
    let h = (f + u + 1) % (i.openStart + 1), p = c[h];
    if (p)
      for (let b = 0; b < o.length; b++) {
        let m = o[(b + l) % o.length], g = !0;
        m < 0 && (g = !1, m = -m);
        let v = r.node(m - 1), x = r.index(m - 1);
        if (v.canReplaceWith(x, x, p.type, p.marks))
          return n.replace(r.before(m), g ? s.after(m) : t, new X(Im(i.content, 0, i.openStart, h), h, i.openEnd));
      }
  }
  let d = n.steps.length;
  for (let f = o.length - 1; f >= 0 && (n.replace(e, t, i), !(n.steps.length > d)); f--) {
    let h = o[f];
    h < 0 || (e = r.before(h), t = s.after(h));
  }
}
function Im(n, e, t, i, r) {
  if (e < t) {
    let s = n.firstChild;
    n = n.replaceChild(0, s.copy(Im(s.content, e + 1, t, i, s)));
  }
  if (e > i) {
    let s = r.contentMatchAt(0), o = s.fillBefore(n).append(n);
    n = o.append(s.matchFragment(o).fillBefore($.empty, !0));
  }
  return n;
}
function _y(n, e, t, i) {
  if (!i.isInline && e == t && n.doc.resolve(e).parent.content.size) {
    let r = fy(n.doc, e, i.type);
    r != null && (e = t = r);
  }
  n.replaceRange(e, t, new X($.from(i), 0, 0));
}
function by(n, e, t) {
  let i = n.doc.resolve(e), r = n.doc.resolve(t), s = Pm(i, r);
  for (let o = 0; o < s.length; o++) {
    let a = s[o], l = o == s.length - 1;
    if (l && a == 0 || i.node(a).type.contentMatch.validEnd)
      return n.delete(i.start(a), r.end(a));
    if (a > 0 && (l || i.node(a - 1).canReplace(i.index(a - 1), r.indexAfter(a - 1))))
      return n.delete(i.before(a), r.after(a));
  }
  for (let o = 1; o <= i.depth && o <= r.depth; o++)
    if (e - i.start(o) == i.depth - o && t > i.end(o) && r.end(o) - t != r.depth - o && i.start(o - 1) == r.start(o - 1) && i.node(o - 1).canReplace(i.index(o - 1), r.index(o - 1)))
      return n.delete(i.before(o), t);
  n.delete(e, t);
}
function Pm(n, e) {
  let t = [], i = Math.min(n.depth, e.depth);
  for (let r = i; r >= 0; r--) {
    let s = n.start(r);
    if (s < n.pos - (n.depth - r) || e.end(r) > e.pos + (e.depth - r) || n.node(r).type.spec.isolating || e.node(r).type.spec.isolating)
      break;
    (s == e.start(r) || r == n.depth && r == e.depth && n.parent.inlineContent && e.parent.inlineContent && r && e.start(r - 1) == s - 1) && t.push(r);
  }
  return t;
}
class xr extends Pt {
  /**
  Construct an attribute step.
  */
  constructor(e, t, i) {
    super(), this.pos = e, this.attr = t, this.value = i;
  }
  apply(e) {
    let t = e.nodeAt(this.pos);
    if (!t)
      return ct.fail("No node at attribute step's position");
    let i = /* @__PURE__ */ Object.create(null);
    for (let s in t.attrs)
      i[s] = t.attrs[s];
    i[this.attr] = this.value;
    let r = t.type.create(i, null, t.marks);
    return ct.fromReplace(e, this.pos, this.pos + 1, new X($.from(r), 0, t.isLeaf ? 0 : 1));
  }
  getMap() {
    return en.empty;
  }
  invert(e) {
    return new xr(this.pos, this.attr, e.nodeAt(this.pos).attrs[this.attr]);
  }
  map(e) {
    let t = e.mapResult(this.pos, 1);
    return t.deletedAfter ? null : new xr(t.pos, this.attr, this.value);
  }
  toJSON() {
    return { stepType: "attr", pos: this.pos, attr: this.attr, value: this.value };
  }
  static fromJSON(e, t) {
    if (typeof t.pos != "number" || typeof t.attr != "string")
      throw new RangeError("Invalid input for AttrStep.fromJSON");
    return new xr(t.pos, t.attr, t.value);
  }
}
Pt.jsonID("attr", xr);
class Bs extends Pt {
  /**
  Construct an attribute step.
  */
  constructor(e, t) {
    super(), this.attr = e, this.value = t;
  }
  apply(e) {
    let t = /* @__PURE__ */ Object.create(null);
    for (let r in e.attrs)
      t[r] = e.attrs[r];
    t[this.attr] = this.value;
    let i = e.type.create(t, e.content, e.marks);
    return ct.ok(i);
  }
  getMap() {
    return en.empty;
  }
  invert(e) {
    return new Bs(this.attr, e.attrs[this.attr]);
  }
  map(e) {
    return this;
  }
  toJSON() {
    return { stepType: "docAttr", attr: this.attr, value: this.value };
  }
  static fromJSON(e, t) {
    if (typeof t.attr != "string")
      throw new RangeError("Invalid input for DocAttrStep.fromJSON");
    return new Bs(t.attr, t.value);
  }
}
Pt.jsonID("docAttr", Bs);
let $r = class extends Error {
};
$r = function n(e) {
  let t = Error.call(this, e);
  return t.__proto__ = n.prototype, t;
};
$r.prototype = Object.create(Error.prototype);
$r.prototype.constructor = $r;
$r.prototype.name = "TransformError";
class $u {
  /**
  Create a transform that starts with the given document.
  */
  constructor(e) {
    this.doc = e, this.steps = [], this.docs = [], this.mapping = new yr();
  }
  /**
  The starting document.
  */
  get before() {
    return this.docs.length ? this.docs[0] : this.doc;
  }
  /**
  Apply a new step in this transform, saving the result. Throws an
  error when the step fails.
  */
  step(e) {
    let t = this.maybeStep(e);
    if (t.failed)
      throw new $r(t.failed);
    return this;
  }
  /**
  Try to apply a step in this transformation, ignoring it if it
  fails. Returns the step result.
  */
  maybeStep(e) {
    let t = e.apply(this.doc);
    return t.failed || this.addStep(e, t.doc), t;
  }
  /**
  True when the document has been changed (when there are any
  steps).
  */
  get docChanged() {
    return this.steps.length > 0;
  }
  /**
  @internal
  */
  addStep(e, t) {
    this.docs.push(this.doc), this.steps.push(e), this.mapping.appendMap(e.getMap()), this.doc = t;
  }
  /**
  Replace the part of the document between `from` and `to` with the
  given `slice`.
  */
  replace(e, t = e, i = X.empty) {
    let r = rl(this.doc, e, t, i);
    return r && this.step(r), this;
  }
  /**
  Replace the given range with the given content, which may be a
  fragment, node, or array of nodes.
  */
  replaceWith(e, t, i) {
    return this.replace(e, t, new X($.from(i), 0, 0));
  }
  /**
  Delete the content between the given positions.
  */
  delete(e, t) {
    return this.replace(e, t, X.empty);
  }
  /**
  Insert the given content at the given position.
  */
  insert(e, t) {
    return this.replaceWith(e, e, t);
  }
  /**
  Replace a range of the document with a given slice, using
  `from`, `to`, and the slice's
  [`openStart`](https://prosemirror.net/docs/ref/#model.Slice.openStart) property as hints, rather
  than fixed start and end points. This method may grow the
  replaced area or close open nodes in the slice in order to get a
  fit that is more in line with WYSIWYG expectations, by dropping
  fully covered parent nodes of the replaced region when they are
  marked [non-defining as
  context](https://prosemirror.net/docs/ref/#model.NodeSpec.definingAsContext), or including an
  open parent node from the slice that _is_ marked as [defining
  its content](https://prosemirror.net/docs/ref/#model.NodeSpec.definingForContent).
  
  This is the method, for example, to handle paste. The similar
  [`replace`](https://prosemirror.net/docs/ref/#transform.Transform.replace) method is a more
  primitive tool which will _not_ move the start and end of its given
  range, and is useful in situations where you need more precise
  control over what happens.
  */
  replaceRange(e, t, i) {
    return gy(this, e, t, i), this;
  }
  /**
  Replace the given range with a node, but use `from` and `to` as
  hints, rather than precise positions. When from and to are the same
  and are at the start or end of a parent node in which the given
  node doesn't fit, this method may _move_ them out towards a parent
  that does allow the given node to be placed. When the given range
  completely covers a parent node, this method may completely replace
  that parent node.
  */
  replaceRangeWith(e, t, i) {
    return _y(this, e, t, i), this;
  }
  /**
  Delete the given range, expanding it to cover fully covered
  parent nodes until a valid replace is found.
  */
  deleteRange(e, t) {
    return by(this, e, t), this;
  }
  /**
  Split the content in the given range off from its parent, if there
  is sibling content before or after it, and move it up the tree to
  the depth specified by `target`. You'll probably want to use
  [`liftTarget`](https://prosemirror.net/docs/ref/#transform.liftTarget) to compute `target`, to make
  sure the lift is valid.
  */
  lift(e, t) {
    return ny(this, e, t), this;
  }
  /**
  Join the blocks around the given position. If depth is 2, their
  last and first siblings are also joined, and so on.
  */
  join(e, t = 1) {
    return dy(this, e, t), this;
  }
  /**
  Wrap the given [range](https://prosemirror.net/docs/ref/#model.NodeRange) in the given set of wrappers.
  The wrappers are assumed to be valid in this position, and should
  probably be computed with [`findWrapping`](https://prosemirror.net/docs/ref/#transform.findWrapping).
  */
  wrap(e, t) {
    return sy(this, e, t), this;
  }
  /**
  Set the type of all textblocks (partly) between `from` and `to` to
  the given node type with the given attributes.
  */
  setBlockType(e, t = e, i, r = null) {
    return oy(this, e, t, i, r), this;
  }
  /**
  Change the type, attributes, and/or marks of the node at `pos`.
  When `type` isn't given, the existing node type is preserved,
  */
  setNodeMarkup(e, t, i = null, r) {
    return ly(this, e, t, i, r), this;
  }
  /**
  Set a single attribute on a given node to a new value.
  The `pos` addresses the document content. Use `setDocAttribute`
  to set attributes on the document itself.
  */
  setNodeAttribute(e, t, i) {
    return this.step(new xr(e, t, i)), this;
  }
  /**
  Set a single attribute on the document to a new value.
  */
  setDocAttribute(e, t) {
    return this.step(new Bs(e, t)), this;
  }
  /**
  Add a mark to the node at position `pos`.
  */
  addNodeMark(e, t) {
    return this.step(new bi(e, t)), this;
  }
  /**
  Remove a mark (or a mark of the given type) from the node at
  position `pos`.
  */
  removeNodeMark(e, t) {
    if (!(t instanceof Fe)) {
      let i = this.doc.nodeAt(e);
      if (!i)
        throw new RangeError("No node at position " + e);
      if (t = t.isInSet(i.marks), !t)
        return this;
    }
    return this.step(new Dr(e, t)), this;
  }
  /**
  Split the node at the given position, and optionally, if `depth` is
  greater than one, any number of nodes above that. By default, the
  parts split off will inherit the node type of the original node.
  This can be changed by passing an array of types and attributes to
  use after the split.
  */
  split(e, t = 1, i) {
    return cy(this, e, t, i), this;
  }
  /**
  Add the given mark to the inline content between `from` and `to`.
  */
  addMark(e, t, i) {
    return Qv(this, e, t, i), this;
  }
  /**
  Remove marks from inline nodes between `from` and `to`. When
  `mark` is a single mark, remove precisely that mark. When it is
  a mark type, remove all marks of that type. When it is null,
  remove all marks of any type.
  */
  removeMark(e, t, i) {
    return ey(this, e, t, i), this;
  }
  /**
  Removes all marks and nodes from the content of the node at
  `pos` that don't match the given new parent node type. Accepts
  an optional starting [content match](https://prosemirror.net/docs/ref/#model.ContentMatch) as
  third argument.
  */
  clearIncompatible(e, t, i) {
    return Pu(this, e, t, i), this;
  }
}
const Bl = /* @__PURE__ */ Object.create(null);
class pe {
  /**
  Initialize a selection with the head and anchor and ranges. If no
  ranges are given, constructs a single range across `$anchor` and
  `$head`.
  */
  constructor(e, t, i) {
    this.$anchor = e, this.$head = t, this.ranges = i || [new Dm(e.min(t), e.max(t))];
  }
  /**
  The selection's anchor, as an unresolved position.
  */
  get anchor() {
    return this.$anchor.pos;
  }
  /**
  The selection's head.
  */
  get head() {
    return this.$head.pos;
  }
  /**
  The lower bound of the selection's main range.
  */
  get from() {
    return this.$from.pos;
  }
  /**
  The upper bound of the selection's main range.
  */
  get to() {
    return this.$to.pos;
  }
  /**
  The resolved lower  bound of the selection's main range.
  */
  get $from() {
    return this.ranges[0].$from;
  }
  /**
  The resolved upper bound of the selection's main range.
  */
  get $to() {
    return this.ranges[0].$to;
  }
  /**
  Indicates whether the selection contains any content.
  */
  get empty() {
    let e = this.ranges;
    for (let t = 0; t < e.length; t++)
      if (e[t].$from.pos != e[t].$to.pos)
        return !1;
    return !0;
  }
  /**
  Get the content of this selection as a slice.
  */
  content() {
    return this.$from.doc.slice(this.from, this.to, !0);
  }
  /**
  Replace the selection with a slice or, if no slice is given,
  delete the selection. Will append to the given transaction.
  */
  replace(e, t = X.empty) {
    let i = t.content.lastChild, r = null;
    for (let a = 0; a < t.openEnd; a++)
      r = i, i = i.lastChild;
    let s = e.steps.length, o = this.ranges;
    for (let a = 0; a < o.length; a++) {
      let { $from: l, $to: c } = o[a], u = e.mapping.slice(s);
      e.replaceRange(u.map(l.pos), u.map(c.pos), a ? X.empty : t), a == 0 && Af(e, s, (i ? i.isInline : r && r.isTextblock) ? -1 : 1);
    }
  }
  /**
  Replace the selection with the given node, appending the changes
  to the given transaction.
  */
  replaceWith(e, t) {
    let i = e.steps.length, r = this.ranges;
    for (let s = 0; s < r.length; s++) {
      let { $from: o, $to: a } = r[s], l = e.mapping.slice(i), c = l.map(o.pos), u = l.map(a.pos);
      s ? e.deleteRange(c, u) : (e.replaceRangeWith(c, u, t), Af(e, i, t.isInline ? -1 : 1));
    }
  }
  /**
  Find a valid cursor or leaf node selection starting at the given
  position and searching back if `dir` is negative, and forward if
  positive. When `textOnly` is true, only consider cursor
  selections. Will return null when no valid selection position is
  found.
  */
  static findFrom(e, t, i = !1) {
    let r = e.parent.inlineContent ? new fe(e) : cr(e.node(0), e.parent, e.pos, e.index(), t, i);
    if (r)
      return r;
    for (let s = e.depth - 1; s >= 0; s--) {
      let o = t < 0 ? cr(e.node(0), e.node(s), e.before(s + 1), e.index(s), t, i) : cr(e.node(0), e.node(s), e.after(s + 1), e.index(s) + 1, t, i);
      if (o)
        return o;
    }
    return null;
  }
  /**
  Find a valid cursor or leaf node selection near the given
  position. Searches forward first by default, but if `bias` is
  negative, it will search backwards first.
  */
  static near(e, t = 1) {
    return this.findFrom(e, t) || this.findFrom(e, -t) || new Gt(e.node(0));
  }
  /**
  Find the cursor or leaf node selection closest to the start of
  the given document. Will return an
  [`AllSelection`](https://prosemirror.net/docs/ref/#state.AllSelection) if no valid position
  exists.
  */
  static atStart(e) {
    return cr(e, e, 0, 0, 1) || new Gt(e);
  }
  /**
  Find the cursor or leaf node selection closest to the end of the
  given document.
  */
  static atEnd(e) {
    return cr(e, e, e.content.size, e.childCount, -1) || new Gt(e);
  }
  /**
  Deserialize the JSON representation of a selection. Must be
  implemented for custom classes (as a static class method).
  */
  static fromJSON(e, t) {
    if (!t || !t.type)
      throw new RangeError("Invalid input for Selection.fromJSON");
    let i = Bl[t.type];
    if (!i)
      throw new RangeError(`No selection type ${t.type} defined`);
    return i.fromJSON(e, t);
  }
  /**
  To be able to deserialize selections from JSON, custom selection
  classes must register themselves with an ID string, so that they
  can be disambiguated. Try to pick something that's unlikely to
  clash with classes from other modules.
  */
  static jsonID(e, t) {
    if (e in Bl)
      throw new RangeError("Duplicate use of selection JSON ID " + e);
    return Bl[e] = t, t.prototype.jsonID = e, t;
  }
  /**
  Get a [bookmark](https://prosemirror.net/docs/ref/#state.SelectionBookmark) for this selection,
  which is a value that can be mapped without having access to a
  current document, and later resolved to a real selection for a
  given document again. (This is used mostly by the history to
  track and restore old selections.) The default implementation of
  this method just converts the selection to a text selection and
  returns the bookmark for that.
  */
  getBookmark() {
    return fe.between(this.$anchor, this.$head).getBookmark();
  }
}
pe.prototype.visible = !0;
class Dm {
  /**
  Create a range.
  */
  constructor(e, t) {
    this.$from = e, this.$to = t;
  }
}
let Cf = !1;
function Tf(n) {
  !Cf && !n.parent.inlineContent && (Cf = !0, console.warn("TextSelection endpoint not pointing into a node with inline content (" + n.parent.type.name + ")"));
}
class fe extends pe {
  /**
  Construct a text selection between the given points.
  */
  constructor(e, t = e) {
    Tf(e), Tf(t), super(e, t);
  }
  /**
  Returns a resolved position if this is a cursor selection (an
  empty text selection), and null otherwise.
  */
  get $cursor() {
    return this.$anchor.pos == this.$head.pos ? this.$head : null;
  }
  map(e, t) {
    let i = e.resolve(t.map(this.head));
    if (!i.parent.inlineContent)
      return pe.near(i);
    let r = e.resolve(t.map(this.anchor));
    return new fe(r.parent.inlineContent ? r : i, i);
  }
  replace(e, t = X.empty) {
    if (super.replace(e, t), t == X.empty) {
      let i = this.$from.marksAcross(this.$to);
      i && e.ensureMarks(i);
    }
  }
  eq(e) {
    return e instanceof fe && e.anchor == this.anchor && e.head == this.head;
  }
  getBookmark() {
    return new sl(this.anchor, this.head);
  }
  toJSON() {
    return { type: "text", anchor: this.anchor, head: this.head };
  }
  /**
  @internal
  */
  static fromJSON(e, t) {
    if (typeof t.anchor != "number" || typeof t.head != "number")
      throw new RangeError("Invalid input for TextSelection.fromJSON");
    return new fe(e.resolve(t.anchor), e.resolve(t.head));
  }
  /**
  Create a text selection from non-resolved positions.
  */
  static create(e, t, i = t) {
    let r = e.resolve(t);
    return new this(r, i == t ? r : e.resolve(i));
  }
  /**
  Return a text selection that spans the given positions or, if
  they aren't text positions, find a text selection near them.
  `bias` determines whether the method searches forward (default)
  or backwards (negative number) first. Will fall back to calling
  [`Selection.near`](https://prosemirror.net/docs/ref/#state.Selection^near) when the document
  doesn't contain a valid text position.
  */
  static between(e, t, i) {
    let r = e.pos - t.pos;
    if ((!i || r) && (i = r >= 0 ? 1 : -1), !t.parent.inlineContent) {
      let s = pe.findFrom(t, i, !0) || pe.findFrom(t, -i, !0);
      if (s)
        t = s.$head;
      else
        return pe.near(t, i);
    }
    return e.parent.inlineContent || (r == 0 ? e = t : (e = (pe.findFrom(e, -i, !0) || pe.findFrom(e, i, !0)).$anchor, e.pos < t.pos != r < 0 && (e = t))), new fe(e, t);
  }
}
pe.jsonID("text", fe);
class sl {
  constructor(e, t) {
    this.anchor = e, this.head = t;
  }
  map(e) {
    return new sl(e.map(this.anchor), e.map(this.head));
  }
  resolve(e) {
    return fe.between(e.resolve(this.anchor), e.resolve(this.head));
  }
}
class le extends pe {
  /**
  Create a node selection. Does not verify the validity of its
  argument.
  */
  constructor(e) {
    let t = e.nodeAfter, i = e.node(0).resolve(e.pos + t.nodeSize);
    super(e, i), this.node = t;
  }
  map(e, t) {
    let { deleted: i, pos: r } = t.mapResult(this.anchor), s = e.resolve(r);
    return i ? pe.near(s) : new le(s);
  }
  content() {
    return new X($.from(this.node), 0, 0);
  }
  eq(e) {
    return e instanceof le && e.anchor == this.anchor;
  }
  toJSON() {
    return { type: "node", anchor: this.anchor };
  }
  getBookmark() {
    return new zu(this.anchor);
  }
  /**
  @internal
  */
  static fromJSON(e, t) {
    if (typeof t.anchor != "number")
      throw new RangeError("Invalid input for NodeSelection.fromJSON");
    return new le(e.resolve(t.anchor));
  }
  /**
  Create a node selection from non-resolved positions.
  */
  static create(e, t) {
    return new le(e.resolve(t));
  }
  /**
  Determines whether the given node may be selected as a node
  selection.
  */
  static isSelectable(e) {
    return !e.isText && e.type.spec.selectable !== !1;
  }
}
le.prototype.visible = !1;
pe.jsonID("node", le);
class zu {
  constructor(e) {
    this.anchor = e;
  }
  map(e) {
    let { deleted: t, pos: i } = e.mapResult(this.anchor);
    return t ? new sl(i, i) : new zu(i);
  }
  resolve(e) {
    let t = e.resolve(this.anchor), i = t.nodeAfter;
    return i && le.isSelectable(i) ? new le(t) : pe.near(t);
  }
}
class Gt extends pe {
  /**
  Create an all-selection over the given document.
  */
  constructor(e) {
    super(e.resolve(0), e.resolve(e.content.size));
  }
  replace(e, t = X.empty) {
    if (t == X.empty) {
      e.delete(0, e.doc.content.size);
      let i = pe.atStart(e.doc);
      i.eq(e.selection) || e.setSelection(i);
    } else
      super.replace(e, t);
  }
  toJSON() {
    return { type: "all" };
  }
  /**
  @internal
  */
  static fromJSON(e) {
    return new Gt(e);
  }
  map(e) {
    return new Gt(e);
  }
  eq(e) {
    return e instanceof Gt;
  }
  getBookmark() {
    return vy;
  }
}
pe.jsonID("all", Gt);
const vy = {
  map() {
    return this;
  },
  resolve(n) {
    return new Gt(n);
  }
};
function cr(n, e, t, i, r, s = !1) {
  if (e.inlineContent)
    return fe.create(n, t);
  for (let o = i - (r > 0 ? 0 : 1); r > 0 ? o < e.childCount : o >= 0; o += r) {
    let a = e.child(o);
    if (a.isAtom) {
      if (!s && le.isSelectable(a))
        return le.create(n, t - (r < 0 ? a.nodeSize : 0));
    } else {
      let l = cr(n, a, t + r, r < 0 ? a.childCount : 0, r, s);
      if (l)
        return l;
    }
    t += a.nodeSize * r;
  }
  return null;
}
function Af(n, e, t) {
  let i = n.steps.length - 1;
  if (i < e)
    return;
  let r = n.steps[i];
  if (!(r instanceof _t || r instanceof vt))
    return;
  let s = n.mapping.maps[i], o;
  s.forEach((a, l, c, u) => {
    o == null && (o = u);
  }), n.setSelection(pe.near(n.doc.resolve(o), t));
}
const Mf = 1, Of = 2, Nf = 4;
class yy extends $u {
  /**
  @internal
  */
  constructor(e) {
    super(e.doc), this.curSelectionFor = 0, this.updated = 0, this.meta = /* @__PURE__ */ Object.create(null), this.time = Date.now(), this.curSelection = e.selection, this.storedMarks = e.storedMarks;
  }
  /**
  The transaction's current selection. This defaults to the editor
  selection [mapped](https://prosemirror.net/docs/ref/#state.Selection.map) through the steps in the
  transaction, but can be overwritten with
  [`setSelection`](https://prosemirror.net/docs/ref/#state.Transaction.setSelection).
  */
  get selection() {
    return this.curSelectionFor < this.steps.length && (this.curSelection = this.curSelection.map(this.doc, this.mapping.slice(this.curSelectionFor)), this.curSelectionFor = this.steps.length), this.curSelection;
  }
  /**
  Update the transaction's current selection. Will determine the
  selection that the editor gets when the transaction is applied.
  */
  setSelection(e) {
    if (e.$from.doc != this.doc)
      throw new RangeError("Selection passed to setSelection must point at the current document");
    return this.curSelection = e, this.curSelectionFor = this.steps.length, this.updated = (this.updated | Mf) & -3, this.storedMarks = null, this;
  }
  /**
  Whether the selection was explicitly updated by this transaction.
  */
  get selectionSet() {
    return (this.updated & Mf) > 0;
  }
  /**
  Set the current stored marks.
  */
  setStoredMarks(e) {
    return this.storedMarks = e, this.updated |= Of, this;
  }
  /**
  Make sure the current stored marks or, if that is null, the marks
  at the selection, match the given set of marks. Does nothing if
  this is already the case.
  */
  ensureMarks(e) {
    return Fe.sameSet(this.storedMarks || this.selection.$from.marks(), e) || this.setStoredMarks(e), this;
  }
  /**
  Add a mark to the set of stored marks.
  */
  addStoredMark(e) {
    return this.ensureMarks(e.addToSet(this.storedMarks || this.selection.$head.marks()));
  }
  /**
  Remove a mark or mark type from the set of stored marks.
  */
  removeStoredMark(e) {
    return this.ensureMarks(e.removeFromSet(this.storedMarks || this.selection.$head.marks()));
  }
  /**
  Whether the stored marks were explicitly set for this transaction.
  */
  get storedMarksSet() {
    return (this.updated & Of) > 0;
  }
  /**
  @internal
  */
  addStep(e, t) {
    super.addStep(e, t), this.updated = this.updated & -3, this.storedMarks = null;
  }
  /**
  Update the timestamp for the transaction.
  */
  setTime(e) {
    return this.time = e, this;
  }
  /**
  Replace the current selection with the given slice.
  */
  replaceSelection(e) {
    return this.selection.replace(this, e), this;
  }
  /**
  Replace the selection with the given node. When `inheritMarks` is
  true and the content is inline, it inherits the marks from the
  place where it is inserted.
  */
  replaceSelectionWith(e, t = !0) {
    let i = this.selection;
    return t && (e = e.mark(this.storedMarks || (i.empty ? i.$from.marks() : i.$from.marksAcross(i.$to) || Fe.none))), i.replaceWith(this, e), this;
  }
  /**
  Delete the selection.
  */
  deleteSelection() {
    return this.selection.replace(this), this;
  }
  /**
  Replace the given range, or the selection if no range is given,
  with a text node containing the given string.
  */
  insertText(e, t, i) {
    let r = this.doc.type.schema;
    if (t == null)
      return e ? this.replaceSelectionWith(r.text(e), !0) : this.deleteSelection();
    {
      if (i == null && (i = t), i = i ?? t, !e)
        return this.deleteRange(t, i);
      let s = this.storedMarks;
      if (!s) {
        let o = this.doc.resolve(t);
        s = i == t ? o.marks() : o.marksAcross(this.doc.resolve(i));
      }
      return this.replaceRangeWith(t, i, r.text(e, s)), this.selection.empty || this.setSelection(pe.near(this.selection.$to)), this;
    }
  }
  /**
  Store a metadata property in this transaction, keyed either by
  name or by plugin.
  */
  setMeta(e, t) {
    return this.meta[typeof e == "string" ? e : e.key] = t, this;
  }
  /**
  Retrieve a metadata property for a given name or plugin.
  */
  getMeta(e) {
    return this.meta[typeof e == "string" ? e : e.key];
  }
  /**
  Returns true if this transaction doesn't contain any metadata,
  and can thus safely be extended.
  */
  get isGeneric() {
    for (let e in this.meta)
      return !1;
    return !0;
  }
  /**
  Indicate that the editor should scroll the selection into view
  when updated to the state produced by this transaction.
  */
  scrollIntoView() {
    return this.updated |= Nf, this;
  }
  /**
  True when this transaction has had `scrollIntoView` called on it.
  */
  get scrolledIntoView() {
    return (this.updated & Nf) > 0;
  }
}
function Lf(n, e) {
  return !e || !n ? n : n.bind(e);
}
class _s {
  constructor(e, t, i) {
    this.name = e, this.init = Lf(t.init, i), this.apply = Lf(t.apply, i);
  }
}
const xy = [
  new _s("doc", {
    init(n) {
      return n.doc || n.schema.topNodeType.createAndFill();
    },
    apply(n) {
      return n.doc;
    }
  }),
  new _s("selection", {
    init(n, e) {
      return n.selection || pe.atStart(e.doc);
    },
    apply(n) {
      return n.selection;
    }
  }),
  new _s("storedMarks", {
    init(n) {
      return n.storedMarks || null;
    },
    apply(n, e, t, i) {
      return i.selection.$cursor ? n.storedMarks : null;
    }
  }),
  new _s("scrollToSelection", {
    init() {
      return 0;
    },
    apply(n, e) {
      return n.scrolledIntoView ? e + 1 : e;
    }
  })
];
class Hl {
  constructor(e, t) {
    this.schema = e, this.plugins = [], this.pluginsByKey = /* @__PURE__ */ Object.create(null), this.fields = xy.slice(), t && t.forEach((i) => {
      if (this.pluginsByKey[i.key])
        throw new RangeError("Adding different instances of a keyed plugin (" + i.key + ")");
      this.plugins.push(i), this.pluginsByKey[i.key] = i, i.spec.state && this.fields.push(new _s(i.key, i.spec.state, i));
    });
  }
}
class pr {
  /**
  @internal
  */
  constructor(e) {
    this.config = e;
  }
  /**
  The schema of the state's document.
  */
  get schema() {
    return this.config.schema;
  }
  /**
  The plugins that are active in this state.
  */
  get plugins() {
    return this.config.plugins;
  }
  /**
  Apply the given transaction to produce a new state.
  */
  apply(e) {
    return this.applyTransaction(e).state;
  }
  /**
  @internal
  */
  filterTransaction(e, t = -1) {
    for (let i = 0; i < this.config.plugins.length; i++)
      if (i != t) {
        let r = this.config.plugins[i];
        if (r.spec.filterTransaction && !r.spec.filterTransaction.call(r, e, this))
          return !1;
      }
    return !0;
  }
  /**
  Verbose variant of [`apply`](https://prosemirror.net/docs/ref/#state.EditorState.apply) that
  returns the precise transactions that were applied (which might
  be influenced by the [transaction
  hooks](https://prosemirror.net/docs/ref/#state.PluginSpec.filterTransaction) of
  plugins) along with the new state.
  */
  applyTransaction(e) {
    if (!this.filterTransaction(e))
      return { state: this, transactions: [] };
    let t = [e], i = this.applyInner(e), r = null;
    for (; ; ) {
      let s = !1;
      for (let o = 0; o < this.config.plugins.length; o++) {
        let a = this.config.plugins[o];
        if (a.spec.appendTransaction) {
          let l = r ? r[o].n : 0, c = r ? r[o].state : this, u = l < t.length && a.spec.appendTransaction.call(a, l ? t.slice(l) : t, c, i);
          if (u && i.filterTransaction(u, o)) {
            if (u.setMeta("appendedTransaction", e), !r) {
              r = [];
              for (let d = 0; d < this.config.plugins.length; d++)
                r.push(d < o ? { state: i, n: t.length } : { state: this, n: 0 });
            }
            t.push(u), i = i.applyInner(u), s = !0;
          }
          r && (r[o] = { state: i, n: t.length });
        }
      }
      if (!s)
        return { state: i, transactions: t };
    }
  }
  /**
  @internal
  */
  applyInner(e) {
    if (!e.before.eq(this.doc))
      throw new RangeError("Applying a mismatched transaction");
    let t = new pr(this.config), i = this.config.fields;
    for (let r = 0; r < i.length; r++) {
      let s = i[r];
      t[s.name] = s.apply(e, this[s.name], this, t);
    }
    return t;
  }
  /**
  Start a [transaction](https://prosemirror.net/docs/ref/#state.Transaction) from this state.
  */
  get tr() {
    return new yy(this);
  }
  /**
  Create a new state.
  */
  static create(e) {
    let t = new Hl(e.doc ? e.doc.type.schema : e.schema, e.plugins), i = new pr(t);
    for (let r = 0; r < t.fields.length; r++)
      i[t.fields[r].name] = t.fields[r].init(e, i);
    return i;
  }
  /**
  Create a new state based on this one, but with an adjusted set
  of active plugins. State fields that exist in both sets of
  plugins are kept unchanged. Those that no longer exist are
  dropped, and those that are new are initialized using their
  [`init`](https://prosemirror.net/docs/ref/#state.StateField.init) method, passing in the new
  configuration object..
  */
  reconfigure(e) {
    let t = new Hl(this.schema, e.plugins), i = t.fields, r = new pr(t);
    for (let s = 0; s < i.length; s++) {
      let o = i[s].name;
      r[o] = this.hasOwnProperty(o) ? this[o] : i[s].init(e, r);
    }
    return r;
  }
  /**
  Serialize this state to JSON. If you want to serialize the state
  of plugins, pass an object mapping property names to use in the
  resulting JSON object to plugin objects. The argument may also be
  a string or number, in which case it is ignored, to support the
  way `JSON.stringify` calls `toString` methods.
  */
  toJSON(e) {
    let t = { doc: this.doc.toJSON(), selection: this.selection.toJSON() };
    if (this.storedMarks && (t.storedMarks = this.storedMarks.map((i) => i.toJSON())), e && typeof e == "object")
      for (let i in e) {
        if (i == "doc" || i == "selection")
          throw new RangeError("The JSON fields `doc` and `selection` are reserved");
        let r = e[i], s = r.spec.state;
        s && s.toJSON && (t[i] = s.toJSON.call(r, this[r.key]));
      }
    return t;
  }
  /**
  Deserialize a JSON representation of a state. `config` should
  have at least a `schema` field, and should contain array of
  plugins to initialize the state with. `pluginFields` can be used
  to deserialize the state of plugins, by associating plugin
  instances with the property names they use in the JSON object.
  */
  static fromJSON(e, t, i) {
    if (!t)
      throw new RangeError("Invalid input for EditorState.fromJSON");
    if (!e.schema)
      throw new RangeError("Required config field 'schema' missing");
    let r = new Hl(e.schema, e.plugins), s = new pr(r);
    return r.fields.forEach((o) => {
      if (o.name == "doc")
        s.doc = Hn.fromJSON(e.schema, t.doc);
      else if (o.name == "selection")
        s.selection = pe.fromJSON(s.doc, t.selection);
      else if (o.name == "storedMarks")
        t.storedMarks && (s.storedMarks = t.storedMarks.map(e.schema.markFromJSON));
      else {
        if (i)
          for (let a in i) {
            let l = i[a], c = l.spec.state;
            if (l.key == o.name && c && c.fromJSON && Object.prototype.hasOwnProperty.call(t, a)) {
              s[o.name] = c.fromJSON.call(l, e, t[a], s);
              return;
            }
          }
        s[o.name] = o.init(e, s);
      }
    }), s;
  }
}
function $m(n, e, t) {
  for (let i in n) {
    let r = n[i];
    r instanceof Function ? r = r.bind(e) : i == "handleDOMEvents" && (r = $m(r, e, {})), t[i] = r;
  }
  return t;
}
class Je {
  /**
  Create a plugin.
  */
  constructor(e) {
    this.spec = e, this.props = {}, e.props && $m(e.props, this, this.props), this.key = e.key ? e.key.key : zm("plugin");
  }
  /**
  Extract the plugin's state field from an editor state.
  */
  getState(e) {
    return e[this.key];
  }
}
const Fl = /* @__PURE__ */ Object.create(null);
function zm(n) {
  return n in Fl ? n + "$" + ++Fl[n] : (Fl[n] = 0, n + "$");
}
class dt {
  /**
  Create a plugin key.
  */
  constructor(e = "key") {
    this.key = zm(e);
  }
  /**
  Get the active plugin with this key, if any, from an editor
  state.
  */
  get(e) {
    return e.config.pluginsByKey[this.key];
  }
  /**
  Get the plugin's state from an editor state.
  */
  getState(e) {
    return e[this.key];
  }
}
const St = function(n) {
  for (var e = 0; ; e++)
    if (n = n.previousSibling, !n)
      return e;
}, zr = function(n) {
  let e = n.assignedSlot || n.parentNode;
  return e && e.nodeType == 11 ? e.host : e;
};
let Wc = null;
const Jn = function(n, e, t) {
  let i = Wc || (Wc = document.createRange());
  return i.setEnd(n, t ?? n.nodeValue.length), i.setStart(n, e || 0), i;
}, wy = function() {
  Wc = null;
}, qi = function(n, e, t, i) {
  return t && (Rf(n, e, t, i, -1) || Rf(n, e, t, i, 1));
}, ky = /^(img|br|input|textarea|hr)$/i;
function Rf(n, e, t, i, r) {
  for (; ; ) {
    if (n == t && e == i)
      return !0;
    if (e == (r < 0 ? 0 : fn(n))) {
      let s = n.parentNode;
      if (!s || s.nodeType != 1 || to(n) || ky.test(n.nodeName) || n.contentEditable == "false")
        return !1;
      e = St(n) + (r < 0 ? 0 : 1), n = s;
    } else if (n.nodeType == 1) {
      if (n = n.childNodes[e + (r < 0 ? -1 : 0)], n.contentEditable == "false")
        return !1;
      e = r < 0 ? fn(n) : 0;
    } else
      return !1;
  }
}
function fn(n) {
  return n.nodeType == 3 ? n.nodeValue.length : n.childNodes.length;
}
function Sy(n, e) {
  for (; ; ) {
    if (n.nodeType == 3 && e)
      return n;
    if (n.nodeType == 1 && e > 0) {
      if (n.contentEditable == "false")
        return null;
      n = n.childNodes[e - 1], e = fn(n);
    } else if (n.parentNode && !to(n))
      e = St(n), n = n.parentNode;
    else
      return null;
  }
}
function Ey(n, e) {
  for (; ; ) {
    if (n.nodeType == 3 && e < n.nodeValue.length)
      return n;
    if (n.nodeType == 1 && e < n.childNodes.length) {
      if (n.contentEditable == "false")
        return null;
      n = n.childNodes[e], e = 0;
    } else if (n.parentNode && !to(n))
      e = St(n) + 1, n = n.parentNode;
    else
      return null;
  }
}
function Cy(n, e, t) {
  for (let i = e == 0, r = e == fn(n); i || r; ) {
    if (n == t)
      return !0;
    let s = St(n);
    if (n = n.parentNode, !n)
      return !1;
    i = i && s == 0, r = r && s == fn(n);
  }
}
function to(n) {
  let e;
  for (let t = n; t && !(e = t.pmViewDesc); t = t.parentNode)
    ;
  return e && e.node && e.node.isBlock && (e.dom == n || e.contentDOM == n);
}
const ol = function(n) {
  return n.focusNode && qi(n.focusNode, n.focusOffset, n.anchorNode, n.anchorOffset);
};
function Ni(n, e) {
  let t = document.createEvent("Event");
  return t.initEvent("keydown", !0, !0), t.keyCode = n, t.key = t.code = e, t;
}
function Ty(n) {
  let e = n.activeElement;
  for (; e && e.shadowRoot; )
    e = e.shadowRoot.activeElement;
  return e;
}
function Ay(n, e, t) {
  if (n.caretPositionFromPoint)
    try {
      let i = n.caretPositionFromPoint(e, t);
      if (i)
        return { node: i.offsetNode, offset: Math.min(fn(i.offsetNode), i.offset) };
    } catch {
    }
  if (n.caretRangeFromPoint) {
    let i = n.caretRangeFromPoint(e, t);
    if (i)
      return { node: i.startContainer, offset: Math.min(fn(i.startContainer), i.startOffset) };
  }
}
const Fn = typeof navigator < "u" ? navigator : null, If = typeof document < "u" ? document : null, Ci = Fn && Fn.userAgent || "", Uc = /Edge\/(\d+)/.exec(Ci), Bm = /MSIE \d/.exec(Ci), Kc = /Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(Ci), Jt = !!(Bm || Kc || Uc), yi = Bm ? document.documentMode : Kc ? +Kc[1] : Uc ? +Uc[1] : 0, Cn = !Jt && /gecko\/(\d+)/i.test(Ci);
Cn && +(/Firefox\/(\d+)/.exec(Ci) || [0, 0])[1];
const qc = !Jt && /Chrome\/(\d+)/.exec(Ci), Nt = !!qc, Hm = qc ? +qc[1] : 0, Bt = !Jt && !!Fn && /Apple Computer/.test(Fn.vendor), Br = Bt && (/Mobile\/\w+/.test(Ci) || !!Fn && Fn.maxTouchPoints > 2), dn = Br || (Fn ? /Mac/.test(Fn.platform) : !1), My = Fn ? /Win/.test(Fn.platform) : !1, Yn = /Android \d/.test(Ci), no = !!If && "webkitFontSmoothing" in If.documentElement.style, Oy = no ? +(/\bAppleWebKit\/(\d+)/.exec(navigator.userAgent) || [0, 0])[1] : 0;
function Ny(n) {
  let e = n.defaultView && n.defaultView.visualViewport;
  return e ? {
    left: 0,
    right: e.width,
    top: 0,
    bottom: e.height
  } : {
    left: 0,
    right: n.documentElement.clientWidth,
    top: 0,
    bottom: n.documentElement.clientHeight
  };
}
function Wn(n, e) {
  return typeof n == "number" ? n : n[e];
}
function Ly(n) {
  let e = n.getBoundingClientRect(), t = e.width / n.offsetWidth || 1, i = e.height / n.offsetHeight || 1;
  return {
    left: e.left,
    right: e.left + n.clientWidth * t,
    top: e.top,
    bottom: e.top + n.clientHeight * i
  };
}
function Pf(n, e, t) {
  let i = n.someProp("scrollThreshold") || 0, r = n.someProp("scrollMargin") || 5, s = n.dom.ownerDocument;
  for (let o = t || n.dom; o; ) {
    if (o.nodeType != 1) {
      o = zr(o);
      continue;
    }
    let a = o, l = a == s.body, c = l ? Ny(s) : Ly(a), u = 0, d = 0;
    if (e.top < c.top + Wn(i, "top") ? d = -(c.top - e.top + Wn(r, "top")) : e.bottom > c.bottom - Wn(i, "bottom") && (d = e.bottom - e.top > c.bottom - c.top ? e.top + Wn(r, "top") - c.top : e.bottom - c.bottom + Wn(r, "bottom")), e.left < c.left + Wn(i, "left") ? u = -(c.left - e.left + Wn(r, "left")) : e.right > c.right - Wn(i, "right") && (u = e.right - c.right + Wn(r, "right")), u || d)
      if (l)
        s.defaultView.scrollBy(u, d);
      else {
        let h = a.scrollLeft, p = a.scrollTop;
        d && (a.scrollTop += d), u && (a.scrollLeft += u);
        let b = a.scrollLeft - h, m = a.scrollTop - p;
        e = { left: e.left - b, top: e.top - m, right: e.right - b, bottom: e.bottom - m };
      }
    let f = l ? "fixed" : getComputedStyle(o).position;
    if (/^(fixed|sticky)$/.test(f))
      break;
    o = f == "absolute" ? o.offsetParent : zr(o);
  }
}
function Ry(n) {
  let e = n.dom.getBoundingClientRect(), t = Math.max(0, e.top), i, r;
  for (let s = (e.left + e.right) / 2, o = t + 1; o < Math.min(innerHeight, e.bottom); o += 5) {
    let a = n.root.elementFromPoint(s, o);
    if (!a || a == n.dom || !n.dom.contains(a))
      continue;
    let l = a.getBoundingClientRect();
    if (l.top >= t - 20) {
      i = a, r = l.top;
      break;
    }
  }
  return { refDOM: i, refTop: r, stack: Fm(n.dom) };
}
function Fm(n) {
  let e = [], t = n.ownerDocument;
  for (let i = n; i && (e.push({ dom: i, top: i.scrollTop, left: i.scrollLeft }), n != t); i = zr(i))
    ;
  return e;
}
function Iy({ refDOM: n, refTop: e, stack: t }) {
  let i = n ? n.getBoundingClientRect().top : 0;
  Vm(t, i == 0 ? 0 : i - e);
}
function Vm(n, e) {
  for (let t = 0; t < n.length; t++) {
    let { dom: i, top: r, left: s } = n[t];
    i.scrollTop != r + e && (i.scrollTop = r + e), i.scrollLeft != s && (i.scrollLeft = s);
  }
}
let or = null;
function Py(n) {
  if (n.setActive)
    return n.setActive();
  if (or)
    return n.focus(or);
  let e = Fm(n);
  n.focus(or == null ? {
    get preventScroll() {
      return or = { preventScroll: !0 }, !0;
    }
  } : void 0), or || (or = !1, Vm(e, 0));
}
function jm(n, e) {
  let t, i = 2e8, r, s = 0, o = e.top, a = e.top, l, c;
  for (let u = n.firstChild, d = 0; u; u = u.nextSibling, d++) {
    let f;
    if (u.nodeType == 1)
      f = u.getClientRects();
    else if (u.nodeType == 3)
      f = Jn(u).getClientRects();
    else
      continue;
    for (let h = 0; h < f.length; h++) {
      let p = f[h];
      if (p.top <= o && p.bottom >= a) {
        o = Math.max(p.bottom, o), a = Math.min(p.top, a);
        let b = p.left > e.left ? p.left - e.left : p.right < e.left ? e.left - p.right : 0;
        if (b < i) {
          t = u, i = b, r = b && t.nodeType == 3 ? {
            left: p.right < e.left ? p.right : p.left,
            top: e.top
          } : e, u.nodeType == 1 && b && (s = d + (e.left >= (p.left + p.right) / 2 ? 1 : 0));
          continue;
        }
      } else p.top > e.top && !l && p.left <= e.left && p.right >= e.left && (l = u, c = { left: Math.max(p.left, Math.min(p.right, e.left)), top: p.top });
      !t && (e.left >= p.right && e.top >= p.top || e.left >= p.left && e.top >= p.bottom) && (s = d + 1);
    }
  }
  return !t && l && (t = l, r = c, i = 0), t && t.nodeType == 3 ? Dy(t, r) : !t || i && t.nodeType == 1 ? { node: n, offset: s } : jm(t, r);
}
function Dy(n, e) {
  let t = n.nodeValue.length, i = document.createRange();
  for (let r = 0; r < t; r++) {
    i.setEnd(n, r + 1), i.setStart(n, r);
    let s = ai(i, 1);
    if (s.top != s.bottom && Bu(e, s))
      return { node: n, offset: r + (e.left >= (s.left + s.right) / 2 ? 1 : 0) };
  }
  return { node: n, offset: 0 };
}
function Bu(n, e) {
  return n.left >= e.left - 1 && n.left <= e.right + 1 && n.top >= e.top - 1 && n.top <= e.bottom + 1;
}
function $y(n, e) {
  let t = n.parentNode;
  return t && /^li$/i.test(t.nodeName) && e.left < n.getBoundingClientRect().left ? t : n;
}
function zy(n, e, t) {
  let { node: i, offset: r } = jm(e, t), s = -1;
  if (i.nodeType == 1 && !i.firstChild) {
    let o = i.getBoundingClientRect();
    s = o.left != o.right && t.left > (o.left + o.right) / 2 ? 1 : -1;
  }
  return n.docView.posFromDOM(i, r, s);
}
function By(n, e, t, i) {
  let r = -1;
  for (let s = e, o = !1; s != n.dom; ) {
    let a = n.docView.nearestDesc(s, !0), l;
    if (!a)
      return null;
    if (a.dom.nodeType == 1 && (a.node.isBlock && a.parent || !a.contentDOM) && // Ignore elements with zero-size bounding rectangles
    ((l = a.dom.getBoundingClientRect()).width || l.height) && (a.node.isBlock && a.parent && (!o && l.left > i.left || l.top > i.top ? r = a.posBefore : (!o && l.right < i.left || l.bottom < i.top) && (r = a.posAfter), o = !0), !a.contentDOM && r < 0 && !a.node.isText))
      return (a.node.isBlock ? i.top < (l.top + l.bottom) / 2 : i.left < (l.left + l.right) / 2) ? a.posBefore : a.posAfter;
    s = a.dom.parentNode;
  }
  return r > -1 ? r : n.docView.posFromDOM(e, t, -1);
}
function Wm(n, e, t) {
  let i = n.childNodes.length;
  if (i && t.top < t.bottom)
    for (let r = Math.max(0, Math.min(i - 1, Math.floor(i * (e.top - t.top) / (t.bottom - t.top)) - 2)), s = r; ; ) {
      let o = n.childNodes[s];
      if (o.nodeType == 1) {
        let a = o.getClientRects();
        for (let l = 0; l < a.length; l++) {
          let c = a[l];
          if (Bu(e, c))
            return Wm(o, e, c);
        }
      }
      if ((s = (s + 1) % i) == r)
        break;
    }
  return n;
}
function Hy(n, e) {
  let t = n.dom.ownerDocument, i, r = 0, s = Ay(t, e.left, e.top);
  s && ({ node: i, offset: r } = s);
  let o = (n.root.elementFromPoint ? n.root : t).elementFromPoint(e.left, e.top), a;
  if (!o || !n.dom.contains(o.nodeType != 1 ? o.parentNode : o)) {
    let c = n.dom.getBoundingClientRect();
    if (!Bu(e, c) || (o = Wm(n.dom, e, c), !o))
      return null;
  }
  if (Bt)
    for (let c = o; i && c; c = zr(c))
      c.draggable && (i = void 0);
  if (o = $y(o, e), i) {
    if (Cn && i.nodeType == 1 && (r = Math.min(r, i.childNodes.length), r < i.childNodes.length)) {
      let u = i.childNodes[r], d;
      u.nodeName == "IMG" && (d = u.getBoundingClientRect()).right <= e.left && d.bottom > e.top && r++;
    }
    let c;
    no && r && i.nodeType == 1 && (c = i.childNodes[r - 1]).nodeType == 1 && c.contentEditable == "false" && c.getBoundingClientRect().top >= e.top && r--, i == n.dom && r == i.childNodes.length - 1 && i.lastChild.nodeType == 1 && e.top > i.lastChild.getBoundingClientRect().bottom ? a = n.state.doc.content.size : (r == 0 || i.nodeType != 1 || i.childNodes[r - 1].nodeName != "BR") && (a = By(n, i, r, e));
  }
  a == null && (a = zy(n, o, e));
  let l = n.docView.nearestDesc(o, !0);
  return { pos: a, inside: l ? l.posAtStart - l.border : -1 };
}
function Df(n) {
  return n.top < n.bottom || n.left < n.right;
}
function ai(n, e) {
  let t = n.getClientRects();
  if (t.length) {
    let i = t[e < 0 ? 0 : t.length - 1];
    if (Df(i))
      return i;
  }
  return Array.prototype.find.call(t, Df) || n.getBoundingClientRect();
}
const Fy = /[\u0590-\u05f4\u0600-\u06ff\u0700-\u08ac]/;
function Um(n, e, t) {
  let { node: i, offset: r, atom: s } = n.docView.domFromPos(e, t < 0 ? -1 : 1), o = no || Cn;
  if (i.nodeType == 3)
    if (o && (Fy.test(i.nodeValue) || (t < 0 ? !r : r == i.nodeValue.length))) {
      let l = ai(Jn(i, r, r), t);
      if (Cn && r && /\s/.test(i.nodeValue[r - 1]) && r < i.nodeValue.length) {
        let c = ai(Jn(i, r - 1, r - 1), -1);
        if (c.top == l.top) {
          let u = ai(Jn(i, r, r + 1), -1);
          if (u.top != l.top)
            return is(u, u.left < c.left);
        }
      }
      return l;
    } else {
      let l = r, c = r, u = t < 0 ? 1 : -1;
      return t < 0 && !r ? (c++, u = -1) : t >= 0 && r == i.nodeValue.length ? (l--, u = 1) : t < 0 ? l-- : c++, is(ai(Jn(i, l, c), u), u < 0);
    }
  if (!n.state.doc.resolve(e - (s || 0)).parent.inlineContent) {
    if (s == null && r && (t < 0 || r == fn(i))) {
      let l = i.childNodes[r - 1];
      if (l.nodeType == 1)
        return Vl(l.getBoundingClientRect(), !1);
    }
    if (s == null && r < fn(i)) {
      let l = i.childNodes[r];
      if (l.nodeType == 1)
        return Vl(l.getBoundingClientRect(), !0);
    }
    return Vl(i.getBoundingClientRect(), t >= 0);
  }
  if (s == null && r && (t < 0 || r == fn(i))) {
    let l = i.childNodes[r - 1], c = l.nodeType == 3 ? Jn(l, fn(l) - (o ? 0 : 1)) : l.nodeType == 1 && (l.nodeName != "BR" || !l.nextSibling) ? l : null;
    if (c)
      return is(ai(c, 1), !1);
  }
  if (s == null && r < fn(i)) {
    let l = i.childNodes[r];
    for (; l.pmViewDesc && l.pmViewDesc.ignoreForCoords; )
      l = l.nextSibling;
    let c = l ? l.nodeType == 3 ? Jn(l, 0, o ? 0 : 1) : l.nodeType == 1 ? l : null : null;
    if (c)
      return is(ai(c, -1), !0);
  }
  return is(ai(i.nodeType == 3 ? Jn(i) : i, -t), t >= 0);
}
function is(n, e) {
  if (n.width == 0)
    return n;
  let t = e ? n.left : n.right;
  return { top: n.top, bottom: n.bottom, left: t, right: t };
}
function Vl(n, e) {
  if (n.height == 0)
    return n;
  let t = e ? n.top : n.bottom;
  return { top: t, bottom: t, left: n.left, right: n.right };
}
function Km(n, e, t) {
  let i = n.state, r = n.root.activeElement;
  i != e && n.updateState(e), r != n.dom && n.focus();
  try {
    return t();
  } finally {
    i != e && n.updateState(i), r != n.dom && r && r.focus();
  }
}
function Vy(n, e, t) {
  let i = e.selection, r = t == "up" ? i.$from : i.$to;
  return Km(n, e, () => {
    let { node: s } = n.docView.domFromPos(r.pos, t == "up" ? -1 : 1);
    for (; ; ) {
      let a = n.docView.nearestDesc(s, !0);
      if (!a)
        break;
      if (a.node.isBlock) {
        s = a.contentDOM || a.dom;
        break;
      }
      s = a.dom.parentNode;
    }
    let o = Um(n, r.pos, 1);
    for (let a = s.firstChild; a; a = a.nextSibling) {
      let l;
      if (a.nodeType == 1)
        l = a.getClientRects();
      else if (a.nodeType == 3)
        l = Jn(a, 0, a.nodeValue.length).getClientRects();
      else
        continue;
      for (let c = 0; c < l.length; c++) {
        let u = l[c];
        if (u.bottom > u.top + 1 && (t == "up" ? o.top - u.top > (u.bottom - o.top) * 2 : u.bottom - o.bottom > (o.bottom - u.top) * 2))
          return !1;
      }
    }
    return !0;
  });
}
const jy = /[\u0590-\u08ac]/;
function Wy(n, e, t) {
  let { $head: i } = e.selection;
  if (!i.parent.isTextblock)
    return !1;
  let r = i.parentOffset, s = !r, o = r == i.parent.content.size, a = n.domSelection();
  return a ? !jy.test(i.parent.textContent) || !a.modify ? t == "left" || t == "backward" ? s : o : Km(n, e, () => {
    let { focusNode: l, focusOffset: c, anchorNode: u, anchorOffset: d } = n.domSelectionRange(), f = a.caretBidiLevel;
    a.modify("move", t, "character");
    let h = i.depth ? n.docView.domAfterPos(i.before()) : n.dom, { focusNode: p, focusOffset: b } = n.domSelectionRange(), m = p && !h.contains(p.nodeType == 1 ? p : p.parentNode) || l == p && c == b;
    try {
      a.collapse(u, d), l && (l != u || c != d) && a.extend && a.extend(l, c);
    } catch {
    }
    return f != null && (a.caretBidiLevel = f), m;
  }) : i.pos == i.start() || i.pos == i.end();
}
let $f = null, zf = null, Bf = !1;
function Uy(n, e, t) {
  return $f == e && zf == t ? Bf : ($f = e, zf = t, Bf = t == "up" || t == "down" ? Vy(n, e, t) : Wy(n, e, t));
}
const hn = 0, Hf = 1, Li = 2, Vn = 3;
class io {
  constructor(e, t, i, r) {
    this.parent = e, this.children = t, this.dom = i, this.contentDOM = r, this.dirty = hn, i.pmViewDesc = this;
  }
  // Used to check whether a given description corresponds to a
  // widget/mark/node.
  matchesWidget(e) {
    return !1;
  }
  matchesMark(e) {
    return !1;
  }
  matchesNode(e, t, i) {
    return !1;
  }
  matchesHack(e) {
    return !1;
  }
  // When parsing in-editor content (in domchange.js), we allow
  // descriptions to determine the parse rules that should be used to
  // parse them.
  parseRule() {
    return null;
  }
  // Used by the editor's event handler to ignore events that come
  // from certain descs.
  stopEvent(e) {
    return !1;
  }
  // The size of the content represented by this desc.
  get size() {
    let e = 0;
    for (let t = 0; t < this.children.length; t++)
      e += this.children[t].size;
    return e;
  }
  // For block nodes, this represents the space taken up by their
  // start/end tokens.
  get border() {
    return 0;
  }
  destroy() {
    this.parent = void 0, this.dom.pmViewDesc == this && (this.dom.pmViewDesc = void 0);
    for (let e = 0; e < this.children.length; e++)
      this.children[e].destroy();
  }
  posBeforeChild(e) {
    for (let t = 0, i = this.posAtStart; ; t++) {
      let r = this.children[t];
      if (r == e)
        return i;
      i += r.size;
    }
  }
  get posBefore() {
    return this.parent.posBeforeChild(this);
  }
  get posAtStart() {
    return this.parent ? this.parent.posBeforeChild(this) + this.border : 0;
  }
  get posAfter() {
    return this.posBefore + this.size;
  }
  get posAtEnd() {
    return this.posAtStart + this.size - 2 * this.border;
  }
  localPosFromDOM(e, t, i) {
    if (this.contentDOM && this.contentDOM.contains(e.nodeType == 1 ? e : e.parentNode))
      if (i < 0) {
        let s, o;
        if (e == this.contentDOM)
          s = e.childNodes[t - 1];
        else {
          for (; e.parentNode != this.contentDOM; )
            e = e.parentNode;
          s = e.previousSibling;
        }
        for (; s && !((o = s.pmViewDesc) && o.parent == this); )
          s = s.previousSibling;
        return s ? this.posBeforeChild(o) + o.size : this.posAtStart;
      } else {
        let s, o;
        if (e == this.contentDOM)
          s = e.childNodes[t];
        else {
          for (; e.parentNode != this.contentDOM; )
            e = e.parentNode;
          s = e.nextSibling;
        }
        for (; s && !((o = s.pmViewDesc) && o.parent == this); )
          s = s.nextSibling;
        return s ? this.posBeforeChild(o) : this.posAtEnd;
      }
    let r;
    if (e == this.dom && this.contentDOM)
      r = t > St(this.contentDOM);
    else if (this.contentDOM && this.contentDOM != this.dom && this.dom.contains(this.contentDOM))
      r = e.compareDocumentPosition(this.contentDOM) & 2;
    else if (this.dom.firstChild) {
      if (t == 0)
        for (let s = e; ; s = s.parentNode) {
          if (s == this.dom) {
            r = !1;
            break;
          }
          if (s.previousSibling)
            break;
        }
      if (r == null && t == e.childNodes.length)
        for (let s = e; ; s = s.parentNode) {
          if (s == this.dom) {
            r = !0;
            break;
          }
          if (s.nextSibling)
            break;
        }
    }
    return r ?? i > 0 ? this.posAtEnd : this.posAtStart;
  }
  nearestDesc(e, t = !1) {
    for (let i = !0, r = e; r; r = r.parentNode) {
      let s = this.getDesc(r), o;
      if (s && (!t || s.node))
        if (i && (o = s.nodeDOM) && !(o.nodeType == 1 ? o.contains(e.nodeType == 1 ? e : e.parentNode) : o == e))
          i = !1;
        else
          return s;
    }
  }
  getDesc(e) {
    let t = e.pmViewDesc;
    for (let i = t; i; i = i.parent)
      if (i == this)
        return t;
  }
  posFromDOM(e, t, i) {
    for (let r = e; r; r = r.parentNode) {
      let s = this.getDesc(r);
      if (s)
        return s.localPosFromDOM(e, t, i);
    }
    return -1;
  }
  // Find the desc for the node after the given pos, if any. (When a
  // parent node overrode rendering, there might not be one.)
  descAt(e) {
    for (let t = 0, i = 0; t < this.children.length; t++) {
      let r = this.children[t], s = i + r.size;
      if (i == e && s != i) {
        for (; !r.border && r.children.length; )
          for (let o = 0; o < r.children.length; o++) {
            let a = r.children[o];
            if (a.size) {
              r = a;
              break;
            }
          }
        return r;
      }
      if (e < s)
        return r.descAt(e - i - r.border);
      i = s;
    }
  }
  domFromPos(e, t) {
    if (!this.contentDOM)
      return { node: this.dom, offset: 0, atom: e + 1 };
    let i = 0, r = 0;
    for (let s = 0; i < this.children.length; i++) {
      let o = this.children[i], a = s + o.size;
      if (a > e || o instanceof Gm) {
        r = e - s;
        break;
      }
      s = a;
    }
    if (r)
      return this.children[i].domFromPos(r - this.children[i].border, t);
    for (let s; i && !(s = this.children[i - 1]).size && s instanceof qm && s.side >= 0; i--)
      ;
    if (t <= 0) {
      let s, o = !0;
      for (; s = i ? this.children[i - 1] : null, !(!s || s.dom.parentNode == this.contentDOM); i--, o = !1)
        ;
      return s && t && o && !s.border && !s.domAtom ? s.domFromPos(s.size, t) : { node: this.contentDOM, offset: s ? St(s.dom) + 1 : 0 };
    } else {
      let s, o = !0;
      for (; s = i < this.children.length ? this.children[i] : null, !(!s || s.dom.parentNode == this.contentDOM); i++, o = !1)
        ;
      return s && o && !s.border && !s.domAtom ? s.domFromPos(0, t) : { node: this.contentDOM, offset: s ? St(s.dom) : this.contentDOM.childNodes.length };
    }
  }
  // Used to find a DOM range in a single parent for a given changed
  // range.
  parseRange(e, t, i = 0) {
    if (this.children.length == 0)
      return { node: this.contentDOM, from: e, to: t, fromOffset: 0, toOffset: this.contentDOM.childNodes.length };
    let r = -1, s = -1;
    for (let o = i, a = 0; ; a++) {
      let l = this.children[a], c = o + l.size;
      if (r == -1 && e <= c) {
        let u = o + l.border;
        if (e >= u && t <= c - l.border && l.node && l.contentDOM && this.contentDOM.contains(l.contentDOM))
          return l.parseRange(e, t, u);
        e = o;
        for (let d = a; d > 0; d--) {
          let f = this.children[d - 1];
          if (f.size && f.dom.parentNode == this.contentDOM && !f.emptyChildAt(1)) {
            r = St(f.dom) + 1;
            break;
          }
          e -= f.size;
        }
        r == -1 && (r = 0);
      }
      if (r > -1 && (c > t || a == this.children.length - 1)) {
        t = c;
        for (let u = a + 1; u < this.children.length; u++) {
          let d = this.children[u];
          if (d.size && d.dom.parentNode == this.contentDOM && !d.emptyChildAt(-1)) {
            s = St(d.dom);
            break;
          }
          t += d.size;
        }
        s == -1 && (s = this.contentDOM.childNodes.length);
        break;
      }
      o = c;
    }
    return { node: this.contentDOM, from: e, to: t, fromOffset: r, toOffset: s };
  }
  emptyChildAt(e) {
    if (this.border || !this.contentDOM || !this.children.length)
      return !1;
    let t = this.children[e < 0 ? 0 : this.children.length - 1];
    return t.size == 0 || t.emptyChildAt(e);
  }
  domAfterPos(e) {
    let { node: t, offset: i } = this.domFromPos(e, 0);
    if (t.nodeType != 1 || i == t.childNodes.length)
      throw new RangeError("No node after pos " + e);
    return t.childNodes[i];
  }
  // View descs are responsible for setting any selection that falls
  // entirely inside of them, so that custom implementations can do
  // custom things with the selection. Note that this falls apart when
  // a selection starts in such a node and ends in another, in which
  // case we just use whatever domFromPos produces as a best effort.
  setSelection(e, t, i, r = !1) {
    let s = Math.min(e, t), o = Math.max(e, t);
    for (let h = 0, p = 0; h < this.children.length; h++) {
      let b = this.children[h], m = p + b.size;
      if (s > p && o < m)
        return b.setSelection(e - p - b.border, t - p - b.border, i, r);
      p = m;
    }
    let a = this.domFromPos(e, e ? -1 : 1), l = t == e ? a : this.domFromPos(t, t ? -1 : 1), c = i.root.getSelection(), u = i.domSelectionRange(), d = !1;
    if ((Cn || Bt) && e == t) {
      let { node: h, offset: p } = a;
      if (h.nodeType == 3) {
        if (d = !!(p && h.nodeValue[p - 1] == `
`), d && p == h.nodeValue.length)
          for (let b = h, m; b; b = b.parentNode) {
            if (m = b.nextSibling) {
              m.nodeName == "BR" && (a = l = { node: m.parentNode, offset: St(m) + 1 });
              break;
            }
            let g = b.pmViewDesc;
            if (g && g.node && g.node.isBlock)
              break;
          }
      } else {
        let b = h.childNodes[p - 1];
        d = b && (b.nodeName == "BR" || b.contentEditable == "false");
      }
    }
    if (Cn && u.focusNode && u.focusNode != l.node && u.focusNode.nodeType == 1) {
      let h = u.focusNode.childNodes[u.focusOffset];
      h && h.contentEditable == "false" && (r = !0);
    }
    if (!(r || d && Bt) && qi(a.node, a.offset, u.anchorNode, u.anchorOffset) && qi(l.node, l.offset, u.focusNode, u.focusOffset))
      return;
    let f = !1;
    if ((c.extend || e == t) && !d) {
      c.collapse(a.node, a.offset);
      try {
        e != t && c.extend(l.node, l.offset), f = !0;
      } catch {
      }
    }
    if (!f) {
      if (e > t) {
        let p = a;
        a = l, l = p;
      }
      let h = document.createRange();
      h.setEnd(l.node, l.offset), h.setStart(a.node, a.offset), c.removeAllRanges(), c.addRange(h);
    }
  }
  ignoreMutation(e) {
    return !this.contentDOM && e.type != "selection";
  }
  get contentLost() {
    return this.contentDOM && this.contentDOM != this.dom && !this.dom.contains(this.contentDOM);
  }
  // Remove a subtree of the element tree that has been touched
  // by a DOM change, so that the next update will redraw it.
  markDirty(e, t) {
    for (let i = 0, r = 0; r < this.children.length; r++) {
      let s = this.children[r], o = i + s.size;
      if (i == o ? e <= o && t >= i : e < o && t > i) {
        let a = i + s.border, l = o - s.border;
        if (e >= a && t <= l) {
          this.dirty = e == i || t == o ? Li : Hf, e == a && t == l && (s.contentLost || s.dom.parentNode != this.contentDOM) ? s.dirty = Vn : s.markDirty(e - a, t - a);
          return;
        } else
          s.dirty = s.dom == s.contentDOM && s.dom.parentNode == this.contentDOM && !s.children.length ? Li : Vn;
      }
      i = o;
    }
    this.dirty = Li;
  }
  markParentsDirty() {
    let e = 1;
    for (let t = this.parent; t; t = t.parent, e++) {
      let i = e == 1 ? Li : Hf;
      t.dirty < i && (t.dirty = i);
    }
  }
  get domAtom() {
    return !1;
  }
  get ignoreForCoords() {
    return !1;
  }
  isText(e) {
    return !1;
  }
}
class qm extends io {
  constructor(e, t, i, r) {
    let s, o = t.type.toDOM;
    if (typeof o == "function" && (o = o(i, () => {
      if (!s)
        return r;
      if (s.parent)
        return s.parent.posBeforeChild(s);
    })), !t.type.spec.raw) {
      if (o.nodeType != 1) {
        let a = document.createElement("span");
        a.appendChild(o), o = a;
      }
      o.contentEditable = "false", o.classList.add("ProseMirror-widget");
    }
    super(e, [], o, null), this.widget = t, this.widget = t, s = this;
  }
  matchesWidget(e) {
    return this.dirty == hn && e.type.eq(this.widget.type);
  }
  parseRule() {
    return { ignore: !0 };
  }
  stopEvent(e) {
    let t = this.widget.spec.stopEvent;
    return t ? t(e) : !1;
  }
  ignoreMutation(e) {
    return e.type != "selection" || this.widget.spec.ignoreSelection;
  }
  destroy() {
    this.widget.type.destroy(this.dom), super.destroy();
  }
  get domAtom() {
    return !0;
  }
  get side() {
    return this.widget.type.side;
  }
}
class Ky extends io {
  constructor(e, t, i, r) {
    super(e, [], t, null), this.textDOM = i, this.text = r;
  }
  get size() {
    return this.text.length;
  }
  localPosFromDOM(e, t) {
    return e != this.textDOM ? this.posAtStart + (t ? this.size : 0) : this.posAtStart + t;
  }
  domFromPos(e) {
    return { node: this.textDOM, offset: e };
  }
  ignoreMutation(e) {
    return e.type === "characterData" && e.target.nodeValue == e.oldValue;
  }
}
class Gi extends io {
  constructor(e, t, i, r, s) {
    super(e, [], i, r), this.mark = t, this.spec = s;
  }
  static create(e, t, i, r) {
    let s = r.nodeViews[t.type.name], o = s && s(t, r, i);
    return (!o || !o.dom) && (o = Zi.renderSpec(document, t.type.spec.toDOM(t, i), null, t.attrs)), new Gi(e, t, o.dom, o.contentDOM || o.dom, o);
  }
  parseRule() {
    return this.dirty & Vn || this.mark.type.spec.reparseInView ? null : { mark: this.mark.type.name, attrs: this.mark.attrs, contentElement: this.contentDOM };
  }
  matchesMark(e) {
    return this.dirty != Vn && this.mark.eq(e);
  }
  markDirty(e, t) {
    if (super.markDirty(e, t), this.dirty != hn) {
      let i = this.parent;
      for (; !i.node; )
        i = i.parent;
      i.dirty < this.dirty && (i.dirty = this.dirty), this.dirty = hn;
    }
  }
  slice(e, t, i) {
    let r = Gi.create(this.parent, this.mark, !0, i), s = this.children, o = this.size;
    t < o && (s = Jc(s, t, o, i)), e > 0 && (s = Jc(s, 0, e, i));
    for (let a = 0; a < s.length; a++)
      s[a].parent = r;
    return r.children = s, r;
  }
  ignoreMutation(e) {
    return this.spec.ignoreMutation ? this.spec.ignoreMutation(e) : super.ignoreMutation(e);
  }
  destroy() {
    this.spec.destroy && this.spec.destroy(), super.destroy();
  }
}
class xi extends io {
  constructor(e, t, i, r, s, o, a, l, c) {
    super(e, [], s, o), this.node = t, this.outerDeco = i, this.innerDeco = r, this.nodeDOM = a;
  }
  // By default, a node is rendered using the `toDOM` method from the
  // node type spec. But client code can use the `nodeViews` spec to
  // supply a custom node view, which can influence various aspects of
  // the way the node works.
  //
  // (Using subclassing for this was intentionally decided against,
  // since it'd require exposing a whole slew of finicky
  // implementation details to the user code that they probably will
  // never need.)
  static create(e, t, i, r, s, o) {
    let a = s.nodeViews[t.type.name], l, c = a && a(t, s, () => {
      if (!l)
        return o;
      if (l.parent)
        return l.parent.posBeforeChild(l);
    }, i, r), u = c && c.dom, d = c && c.contentDOM;
    if (t.isText) {
      if (!u)
        u = document.createTextNode(t.text);
      else if (u.nodeType != 3)
        throw new RangeError("Text must be rendered as a DOM text node");
    } else u || ({ dom: u, contentDOM: d } = Zi.renderSpec(document, t.type.spec.toDOM(t), null, t.attrs));
    !d && !t.isText && u.nodeName != "BR" && (u.hasAttribute("contenteditable") || (u.contentEditable = "false"), t.type.spec.draggable && (u.draggable = !0));
    let f = u;
    return u = Ym(u, i, t), c ? l = new qy(e, t, i, r, u, d || null, f, c, s, o + 1) : t.isText ? new al(e, t, i, r, u, f, s) : new xi(e, t, i, r, u, d || null, f, s, o + 1);
  }
  parseRule() {
    if (this.node.type.spec.reparseInView)
      return null;
    let e = { node: this.node.type.name, attrs: this.node.attrs };
    if (this.node.type.whitespace == "pre" && (e.preserveWhitespace = "full"), !this.contentDOM)
      e.getContent = () => this.node.content;
    else if (!this.contentLost)
      e.contentElement = this.contentDOM;
    else {
      for (let t = this.children.length - 1; t >= 0; t--) {
        let i = this.children[t];
        if (this.dom.contains(i.dom.parentNode)) {
          e.contentElement = i.dom.parentNode;
          break;
        }
      }
      e.contentElement || (e.getContent = () => $.empty);
    }
    return e;
  }
  matchesNode(e, t, i) {
    return this.dirty == hn && e.eq(this.node) && fa(t, this.outerDeco) && i.eq(this.innerDeco);
  }
  get size() {
    return this.node.nodeSize;
  }
  get border() {
    return this.node.isLeaf ? 0 : 1;
  }
  // Syncs `this.children` to match `this.node.content` and the local
  // decorations, possibly introducing nesting for marks. Then, in a
  // separate step, syncs the DOM inside `this.contentDOM` to
  // `this.children`.
  updateChildren(e, t) {
    let i = this.node.inlineContent, r = t, s = e.composing ? this.localCompositionInfo(e, t) : null, o = s && s.pos > -1 ? s : null, a = s && s.pos < 0, l = new Jy(this, o && o.node, e);
    Zy(this.node, this.innerDeco, (c, u, d) => {
      c.spec.marks ? l.syncToMarks(c.spec.marks, i, e) : c.type.side >= 0 && !d && l.syncToMarks(u == this.node.childCount ? Fe.none : this.node.child(u).marks, i, e), l.placeWidget(c, e, r);
    }, (c, u, d, f) => {
      l.syncToMarks(c.marks, i, e);
      let h;
      l.findNodeMatch(c, u, d, f) || a && e.state.selection.from > r && e.state.selection.to < r + c.nodeSize && (h = l.findIndexWithChild(s.node)) > -1 && l.updateNodeAt(c, u, d, h, e) || l.updateNextNode(c, u, d, e, f, r) || l.addNode(c, u, d, e, r), r += c.nodeSize;
    }), l.syncToMarks([], i, e), this.node.isTextblock && l.addTextblockHacks(), l.destroyRest(), (l.changed || this.dirty == Li) && (o && this.protectLocalComposition(e, o), Jm(this.contentDOM, this.children, e), Br && Qy(this.dom));
  }
  localCompositionInfo(e, t) {
    let { from: i, to: r } = e.state.selection;
    if (!(e.state.selection instanceof fe) || i < t || r > t + this.node.content.size)
      return null;
    let s = e.input.compositionNode;
    if (!s || !this.dom.contains(s.parentNode))
      return null;
    if (this.node.inlineContent) {
      let o = s.nodeValue, a = ex(this.node.content, o, i - t, r - t);
      return a < 0 ? null : { node: s, pos: a, text: o };
    } else
      return { node: s, pos: -1, text: "" };
  }
  protectLocalComposition(e, { node: t, pos: i, text: r }) {
    if (this.getDesc(t))
      return;
    let s = t;
    for (; s.parentNode != this.contentDOM; s = s.parentNode) {
      for (; s.previousSibling; )
        s.parentNode.removeChild(s.previousSibling);
      for (; s.nextSibling; )
        s.parentNode.removeChild(s.nextSibling);
      s.pmViewDesc && (s.pmViewDesc = void 0);
    }
    let o = new Ky(this, s, t, r);
    e.input.compositionNodes.push(o), this.children = Jc(this.children, i, i + r.length, e, o);
  }
  // If this desc must be updated to match the given node decoration,
  // do so and return true.
  update(e, t, i, r) {
    return this.dirty == Vn || !e.sameMarkup(this.node) ? !1 : (this.updateInner(e, t, i, r), !0);
  }
  updateInner(e, t, i, r) {
    this.updateOuterDeco(t), this.node = e, this.innerDeco = i, this.contentDOM && this.updateChildren(r, this.posAtStart), this.dirty = hn;
  }
  updateOuterDeco(e) {
    if (fa(e, this.outerDeco))
      return;
    let t = this.nodeDOM.nodeType != 1, i = this.dom;
    this.dom = Xm(this.dom, this.nodeDOM, Gc(this.outerDeco, this.node, t), Gc(e, this.node, t)), this.dom != i && (i.pmViewDesc = void 0, this.dom.pmViewDesc = this), this.outerDeco = e;
  }
  // Mark this node as being the selected node.
  selectNode() {
    this.nodeDOM.nodeType == 1 && this.nodeDOM.classList.add("ProseMirror-selectednode"), (this.contentDOM || !this.node.type.spec.draggable) && (this.dom.draggable = !0);
  }
  // Remove selected node marking from this node.
  deselectNode() {
    this.nodeDOM.nodeType == 1 && (this.nodeDOM.classList.remove("ProseMirror-selectednode"), (this.contentDOM || !this.node.type.spec.draggable) && this.dom.removeAttribute("draggable"));
  }
  get domAtom() {
    return this.node.isAtom;
  }
}
function Ff(n, e, t, i, r) {
  Ym(i, e, n);
  let s = new xi(void 0, n, e, t, i, i, i, r, 0);
  return s.contentDOM && s.updateChildren(r, 0), s;
}
class al extends xi {
  constructor(e, t, i, r, s, o, a) {
    super(e, t, i, r, s, null, o, a, 0);
  }
  parseRule() {
    let e = this.nodeDOM.parentNode;
    for (; e && e != this.dom && !e.pmIsDeco; )
      e = e.parentNode;
    return { skip: e || !0 };
  }
  update(e, t, i, r) {
    return this.dirty == Vn || this.dirty != hn && !this.inParent() || !e.sameMarkup(this.node) ? !1 : (this.updateOuterDeco(t), (this.dirty != hn || e.text != this.node.text) && e.text != this.nodeDOM.nodeValue && (this.nodeDOM.nodeValue = e.text, r.trackWrites == this.nodeDOM && (r.trackWrites = null)), this.node = e, this.dirty = hn, !0);
  }
  inParent() {
    let e = this.parent.contentDOM;
    for (let t = this.nodeDOM; t; t = t.parentNode)
      if (t == e)
        return !0;
    return !1;
  }
  domFromPos(e) {
    return { node: this.nodeDOM, offset: e };
  }
  localPosFromDOM(e, t, i) {
    return e == this.nodeDOM ? this.posAtStart + Math.min(t, this.node.text.length) : super.localPosFromDOM(e, t, i);
  }
  ignoreMutation(e) {
    return e.type != "characterData" && e.type != "selection";
  }
  slice(e, t, i) {
    let r = this.node.cut(e, t), s = document.createTextNode(r.text);
    return new al(this.parent, r, this.outerDeco, this.innerDeco, s, s, i);
  }
  markDirty(e, t) {
    super.markDirty(e, t), this.dom != this.nodeDOM && (e == 0 || t == this.nodeDOM.nodeValue.length) && (this.dirty = Vn);
  }
  get domAtom() {
    return !1;
  }
  isText(e) {
    return this.node.text == e;
  }
}
class Gm extends io {
  parseRule() {
    return { ignore: !0 };
  }
  matchesHack(e) {
    return this.dirty == hn && this.dom.nodeName == e;
  }
  get domAtom() {
    return !0;
  }
  get ignoreForCoords() {
    return this.dom.nodeName == "IMG";
  }
}
class qy extends xi {
  constructor(e, t, i, r, s, o, a, l, c, u) {
    super(e, t, i, r, s, o, a, c, u), this.spec = l;
  }
  // A custom `update` method gets to decide whether the update goes
  // through. If it does, and there's a `contentDOM` node, our logic
  // updates the children.
  update(e, t, i, r) {
    if (this.dirty == Vn)
      return !1;
    if (this.spec.update && (this.node.type == e.type || this.spec.multiType)) {
      let s = this.spec.update(e, t, i);
      return s && this.updateInner(e, t, i, r), s;
    } else return !this.contentDOM && !e.isLeaf ? !1 : super.update(e, t, i, r);
  }
  selectNode() {
    this.spec.selectNode ? this.spec.selectNode() : super.selectNode();
  }
  deselectNode() {
    this.spec.deselectNode ? this.spec.deselectNode() : super.deselectNode();
  }
  setSelection(e, t, i, r) {
    this.spec.setSelection ? this.spec.setSelection(e, t, i.root) : super.setSelection(e, t, i, r);
  }
  destroy() {
    this.spec.destroy && this.spec.destroy(), super.destroy();
  }
  stopEvent(e) {
    return this.spec.stopEvent ? this.spec.stopEvent(e) : !1;
  }
  ignoreMutation(e) {
    return this.spec.ignoreMutation ? this.spec.ignoreMutation(e) : super.ignoreMutation(e);
  }
}
function Jm(n, e, t) {
  let i = n.firstChild, r = !1;
  for (let s = 0; s < e.length; s++) {
    let o = e[s], a = o.dom;
    if (a.parentNode == n) {
      for (; a != i; )
        i = Vf(i), r = !0;
      i = i.nextSibling;
    } else
      r = !0, n.insertBefore(a, i);
    if (o instanceof Gi) {
      let l = i ? i.previousSibling : n.lastChild;
      Jm(o.contentDOM, o.children, t), i = l ? l.nextSibling : n.firstChild;
    }
  }
  for (; i; )
    i = Vf(i), r = !0;
  r && t.trackWrites == n && (t.trackWrites = null);
}
const Ss = function(n) {
  n && (this.nodeName = n);
};
Ss.prototype = /* @__PURE__ */ Object.create(null);
const Ri = [new Ss()];
function Gc(n, e, t) {
  if (n.length == 0)
    return Ri;
  let i = t ? Ri[0] : new Ss(), r = [i];
  for (let s = 0; s < n.length; s++) {
    let o = n[s].type.attrs;
    if (o) {
      o.nodeName && r.push(i = new Ss(o.nodeName));
      for (let a in o) {
        let l = o[a];
        l != null && (t && r.length == 1 && r.push(i = new Ss(e.isInline ? "span" : "div")), a == "class" ? i.class = (i.class ? i.class + " " : "") + l : a == "style" ? i.style = (i.style ? i.style + ";" : "") + l : a != "nodeName" && (i[a] = l));
      }
    }
  }
  return r;
}
function Xm(n, e, t, i) {
  if (t == Ri && i == Ri)
    return e;
  let r = e;
  for (let s = 0; s < i.length; s++) {
    let o = i[s], a = t[s];
    if (s) {
      let l;
      a && a.nodeName == o.nodeName && r != n && (l = r.parentNode) && l.nodeName.toLowerCase() == o.nodeName || (l = document.createElement(o.nodeName), l.pmIsDeco = !0, l.appendChild(r), a = Ri[0]), r = l;
    }
    Gy(r, a || Ri[0], o);
  }
  return r;
}
function Gy(n, e, t) {
  for (let i in e)
    i != "class" && i != "style" && i != "nodeName" && !(i in t) && n.removeAttribute(i);
  for (let i in t)
    i != "class" && i != "style" && i != "nodeName" && t[i] != e[i] && n.setAttribute(i, t[i]);
  if (e.class != t.class) {
    let i = e.class ? e.class.split(" ").filter(Boolean) : [], r = t.class ? t.class.split(" ").filter(Boolean) : [];
    for (let s = 0; s < i.length; s++)
      r.indexOf(i[s]) == -1 && n.classList.remove(i[s]);
    for (let s = 0; s < r.length; s++)
      i.indexOf(r[s]) == -1 && n.classList.add(r[s]);
    n.classList.length == 0 && n.removeAttribute("class");
  }
  if (e.style != t.style) {
    if (e.style) {
      let i = /\s*([\w\-\xa1-\uffff]+)\s*:(?:"(?:\\.|[^"])*"|'(?:\\.|[^'])*'|\(.*?\)|[^;])*/g, r;
      for (; r = i.exec(e.style); )
        n.style.removeProperty(r[1]);
    }
    t.style && (n.style.cssText += t.style);
  }
}
function Ym(n, e, t) {
  return Xm(n, n, Ri, Gc(e, t, n.nodeType != 1));
}
function fa(n, e) {
  if (n.length != e.length)
    return !1;
  for (let t = 0; t < n.length; t++)
    if (!n[t].type.eq(e[t].type))
      return !1;
  return !0;
}
function Vf(n) {
  let e = n.nextSibling;
  return n.parentNode.removeChild(n), e;
}
class Jy {
  constructor(e, t, i) {
    this.lock = t, this.view = i, this.index = 0, this.stack = [], this.changed = !1, this.top = e, this.preMatch = Xy(e.node.content, e);
  }
  // Destroy and remove the children between the given indices in
  // `this.top`.
  destroyBetween(e, t) {
    if (e != t) {
      for (let i = e; i < t; i++)
        this.top.children[i].destroy();
      this.top.children.splice(e, t - e), this.changed = !0;
    }
  }
  // Destroy all remaining children in `this.top`.
  destroyRest() {
    this.destroyBetween(this.index, this.top.children.length);
  }
  // Sync the current stack of mark descs with the given array of
  // marks, reusing existing mark descs when possible.
  syncToMarks(e, t, i) {
    let r = 0, s = this.stack.length >> 1, o = Math.min(s, e.length);
    for (; r < o && (r == s - 1 ? this.top : this.stack[r + 1 << 1]).matchesMark(e[r]) && e[r].type.spec.spanning !== !1; )
      r++;
    for (; r < s; )
      this.destroyRest(), this.top.dirty = hn, this.index = this.stack.pop(), this.top = this.stack.pop(), s--;
    for (; s < e.length; ) {
      this.stack.push(this.top, this.index + 1);
      let a = -1;
      for (let l = this.index; l < Math.min(this.index + 3, this.top.children.length); l++) {
        let c = this.top.children[l];
        if (c.matchesMark(e[s]) && !this.isLocked(c.dom)) {
          a = l;
          break;
        }
      }
      if (a > -1)
        a > this.index && (this.changed = !0, this.destroyBetween(this.index, a)), this.top = this.top.children[this.index];
      else {
        let l = Gi.create(this.top, e[s], t, i);
        this.top.children.splice(this.index, 0, l), this.top = l, this.changed = !0;
      }
      this.index = 0, s++;
    }
  }
  // Try to find a node desc matching the given data. Skip over it and
  // return true when successful.
  findNodeMatch(e, t, i, r) {
    let s = -1, o;
    if (r >= this.preMatch.index && (o = this.preMatch.matches[r - this.preMatch.index]).parent == this.top && o.matchesNode(e, t, i))
      s = this.top.children.indexOf(o, this.index);
    else
      for (let a = this.index, l = Math.min(this.top.children.length, a + 5); a < l; a++) {
        let c = this.top.children[a];
        if (c.matchesNode(e, t, i) && !this.preMatch.matched.has(c)) {
          s = a;
          break;
        }
      }
    return s < 0 ? !1 : (this.destroyBetween(this.index, s), this.index++, !0);
  }
  updateNodeAt(e, t, i, r, s) {
    let o = this.top.children[r];
    return o.dirty == Vn && o.dom == o.contentDOM && (o.dirty = Li), o.update(e, t, i, s) ? (this.destroyBetween(this.index, r), this.index++, !0) : !1;
  }
  findIndexWithChild(e) {
    for (; ; ) {
      let t = e.parentNode;
      if (!t)
        return -1;
      if (t == this.top.contentDOM) {
        let i = e.pmViewDesc;
        if (i) {
          for (let r = this.index; r < this.top.children.length; r++)
            if (this.top.children[r] == i)
              return r;
        }
        return -1;
      }
      e = t;
    }
  }
  // Try to update the next node, if any, to the given data. Checks
  // pre-matches to avoid overwriting nodes that could still be used.
  updateNextNode(e, t, i, r, s, o) {
    for (let a = this.index; a < this.top.children.length; a++) {
      let l = this.top.children[a];
      if (l instanceof xi) {
        let c = this.preMatch.matched.get(l);
        if (c != null && c != s)
          return !1;
        let u = l.dom, d, f = this.isLocked(u) && !(e.isText && l.node && l.node.isText && l.nodeDOM.nodeValue == e.text && l.dirty != Vn && fa(t, l.outerDeco));
        if (!f && l.update(e, t, i, r))
          return this.destroyBetween(this.index, a), l.dom != u && (this.changed = !0), this.index++, !0;
        if (!f && (d = this.recreateWrapper(l, e, t, i, r, o)))
          return this.destroyBetween(this.index, a), this.top.children[this.index] = d, d.contentDOM && (d.dirty = Li, d.updateChildren(r, o + 1), d.dirty = hn), this.changed = !0, this.index++, !0;
        break;
      }
    }
    return !1;
  }
  // When a node with content is replaced by a different node with
  // identical content, move over its children.
  recreateWrapper(e, t, i, r, s, o) {
    if (e.dirty || t.isAtom || !e.children.length || !e.node.content.eq(t.content) || !fa(i, e.outerDeco) || !r.eq(e.innerDeco))
      return null;
    let a = xi.create(this.top, t, i, r, s, o);
    if (a.contentDOM) {
      a.children = e.children, e.children = [];
      for (let l of a.children)
        l.parent = a;
    }
    return e.destroy(), a;
  }
  // Insert the node as a newly created node desc.
  addNode(e, t, i, r, s) {
    let o = xi.create(this.top, e, t, i, r, s);
    o.contentDOM && o.updateChildren(r, s + 1), this.top.children.splice(this.index++, 0, o), this.changed = !0;
  }
  placeWidget(e, t, i) {
    let r = this.index < this.top.children.length ? this.top.children[this.index] : null;
    if (r && r.matchesWidget(e) && (e == r.widget || !r.widget.type.toDOM.parentNode))
      this.index++;
    else {
      let s = new qm(this.top, e, t, i);
      this.top.children.splice(this.index++, 0, s), this.changed = !0;
    }
  }
  // Make sure a textblock looks and behaves correctly in
  // contentEditable.
  addTextblockHacks() {
    let e = this.top.children[this.index - 1], t = this.top;
    for (; e instanceof Gi; )
      t = e, e = t.children[t.children.length - 1];
    (!e || // Empty textblock
    !(e instanceof al) || /\n$/.test(e.node.text) || this.view.requiresGeckoHackNode && /\s$/.test(e.node.text)) && ((Bt || Nt) && e && e.dom.contentEditable == "false" && this.addHackNode("IMG", t), this.addHackNode("BR", this.top));
  }
  addHackNode(e, t) {
    if (t == this.top && this.index < t.children.length && t.children[this.index].matchesHack(e))
      this.index++;
    else {
      let i = document.createElement(e);
      e == "IMG" && (i.className = "ProseMirror-separator", i.alt = ""), e == "BR" && (i.className = "ProseMirror-trailingBreak");
      let r = new Gm(this.top, [], i, null);
      t != this.top ? t.children.push(r) : t.children.splice(this.index++, 0, r), this.changed = !0;
    }
  }
  isLocked(e) {
    return this.lock && (e == this.lock || e.nodeType == 1 && e.contains(this.lock.parentNode));
  }
}
function Xy(n, e) {
  let t = e, i = t.children.length, r = n.childCount, s = /* @__PURE__ */ new Map(), o = [];
  e: for (; r > 0; ) {
    let a;
    for (; ; )
      if (i) {
        let c = t.children[i - 1];
        if (c instanceof Gi)
          t = c, i = c.children.length;
        else {
          a = c, i--;
          break;
        }
      } else {
        if (t == e)
          break e;
        i = t.parent.children.indexOf(t), t = t.parent;
      }
    let l = a.node;
    if (l) {
      if (l != n.child(r - 1))
        break;
      --r, s.set(a, r), o.push(a);
    }
  }
  return { index: r, matched: s, matches: o.reverse() };
}
function Yy(n, e) {
  return n.type.side - e.type.side;
}
function Zy(n, e, t, i) {
  let r = e.locals(n), s = 0;
  if (r.length == 0) {
    for (let c = 0; c < n.childCount; c++) {
      let u = n.child(c);
      i(u, r, e.forChild(s, u), c), s += u.nodeSize;
    }
    return;
  }
  let o = 0, a = [], l = null;
  for (let c = 0; ; ) {
    let u, d;
    for (; o < r.length && r[o].to == s; ) {
      let m = r[o++];
      m.widget && (u ? (d || (d = [u])).push(m) : u = m);
    }
    if (u)
      if (d) {
        d.sort(Yy);
        for (let m = 0; m < d.length; m++)
          t(d[m], c, !!l);
      } else
        t(u, c, !!l);
    let f, h;
    if (l)
      h = -1, f = l, l = null;
    else if (c < n.childCount)
      h = c, f = n.child(c++);
    else
      break;
    for (let m = 0; m < a.length; m++)
      a[m].to <= s && a.splice(m--, 1);
    for (; o < r.length && r[o].from <= s && r[o].to > s; )
      a.push(r[o++]);
    let p = s + f.nodeSize;
    if (f.isText) {
      let m = p;
      o < r.length && r[o].from < m && (m = r[o].from);
      for (let g = 0; g < a.length; g++)
        a[g].to < m && (m = a[g].to);
      m < p && (l = f.cut(m - s), f = f.cut(0, m - s), p = m, h = -1);
    } else
      for (; o < r.length && r[o].to < p; )
        o++;
    let b = f.isInline && !f.isLeaf ? a.filter((m) => !m.inline) : a.slice();
    i(f, b, e.forChild(s, f), h), s = p;
  }
}
function Qy(n) {
  if (n.nodeName == "UL" || n.nodeName == "OL") {
    let e = n.style.cssText;
    n.style.cssText = e + "; list-style: square !important", window.getComputedStyle(n).listStyle, n.style.cssText = e;
  }
}
function ex(n, e, t, i) {
  for (let r = 0, s = 0; r < n.childCount && s <= i; ) {
    let o = n.child(r++), a = s;
    if (s += o.nodeSize, !o.isText)
      continue;
    let l = o.text;
    for (; r < n.childCount; ) {
      let c = n.child(r++);
      if (s += c.nodeSize, !c.isText)
        break;
      l += c.text;
    }
    if (s >= t) {
      if (s >= i && l.slice(i - e.length - a, i - a) == e)
        return i - e.length;
      let c = a < i ? l.lastIndexOf(e, i - a - 1) : -1;
      if (c >= 0 && c + e.length + a >= t)
        return a + c;
      if (t == i && l.length >= i + e.length - a && l.slice(i - a, i - a + e.length) == e)
        return i;
    }
  }
  return -1;
}
function Jc(n, e, t, i, r) {
  let s = [];
  for (let o = 0, a = 0; o < n.length; o++) {
    let l = n[o], c = a, u = a += l.size;
    c >= t || u <= e ? s.push(l) : (c < e && s.push(l.slice(0, e - c, i)), r && (s.push(r), r = void 0), u > t && s.push(l.slice(t - c, l.size, i)));
  }
  return s;
}
function Hu(n, e = null) {
  let t = n.domSelectionRange(), i = n.state.doc;
  if (!t.focusNode)
    return null;
  let r = n.docView.nearestDesc(t.focusNode), s = r && r.size == 0, o = n.docView.posFromDOM(t.focusNode, t.focusOffset, 1);
  if (o < 0)
    return null;
  let a = i.resolve(o), l, c;
  if (ol(t)) {
    for (l = o; r && !r.node; )
      r = r.parent;
    let d = r.node;
    if (r && d.isAtom && le.isSelectable(d) && r.parent && !(d.isInline && Cy(t.focusNode, t.focusOffset, r.dom))) {
      let f = r.posBefore;
      c = new le(o == f ? a : i.resolve(f));
    }
  } else {
    if (t instanceof n.dom.ownerDocument.defaultView.Selection && t.rangeCount > 1) {
      let d = o, f = o;
      for (let h = 0; h < t.rangeCount; h++) {
        let p = t.getRangeAt(h);
        d = Math.min(d, n.docView.posFromDOM(p.startContainer, p.startOffset, 1)), f = Math.max(f, n.docView.posFromDOM(p.endContainer, p.endOffset, -1));
      }
      if (d < 0)
        return null;
      [l, o] = f == n.state.selection.anchor ? [f, d] : [d, f], a = i.resolve(o);
    } else
      l = n.docView.posFromDOM(t.anchorNode, t.anchorOffset, 1);
    if (l < 0)
      return null;
  }
  let u = i.resolve(l);
  if (!c) {
    let d = e == "pointer" || n.state.selection.head < a.pos && !s ? 1 : -1;
    c = Fu(n, u, a, d);
  }
  return c;
}
function Zm(n) {
  return n.editable ? n.hasFocus() : eg(n) && document.activeElement && document.activeElement.contains(n.dom);
}
function ei(n, e = !1) {
  let t = n.state.selection;
  if (Qm(n, t), !!Zm(n)) {
    if (!e && n.input.mouseDown && n.input.mouseDown.allowDefault && Nt) {
      let i = n.domSelectionRange(), r = n.domObserver.currentSelection;
      if (i.anchorNode && r.anchorNode && qi(i.anchorNode, i.anchorOffset, r.anchorNode, r.anchorOffset)) {
        n.input.mouseDown.delayedSelectionSync = !0, n.domObserver.setCurSelection();
        return;
      }
    }
    if (n.domObserver.disconnectSelection(), n.cursorWrapper)
      nx(n);
    else {
      let { anchor: i, head: r } = t, s, o;
      jf && !(t instanceof fe) && (t.$from.parent.inlineContent || (s = Wf(n, t.from)), !t.empty && !t.$from.parent.inlineContent && (o = Wf(n, t.to))), n.docView.setSelection(i, r, n, e), jf && (s && Uf(s), o && Uf(o)), t.visible ? n.dom.classList.remove("ProseMirror-hideselection") : (n.dom.classList.add("ProseMirror-hideselection"), "onselectionchange" in document && tx(n));
    }
    n.domObserver.setCurSelection(), n.domObserver.connectSelection();
  }
}
const jf = Bt || Nt && Hm < 63;
function Wf(n, e) {
  let { node: t, offset: i } = n.docView.domFromPos(e, 0), r = i < t.childNodes.length ? t.childNodes[i] : null, s = i ? t.childNodes[i - 1] : null;
  if (Bt && r && r.contentEditable == "false")
    return jl(r);
  if ((!r || r.contentEditable == "false") && (!s || s.contentEditable == "false")) {
    if (r)
      return jl(r);
    if (s)
      return jl(s);
  }
}
function jl(n) {
  return n.contentEditable = "true", Bt && n.draggable && (n.draggable = !1, n.wasDraggable = !0), n;
}
function Uf(n) {
  n.contentEditable = "false", n.wasDraggable && (n.draggable = !0, n.wasDraggable = null);
}
function tx(n) {
  let e = n.dom.ownerDocument;
  e.removeEventListener("selectionchange", n.input.hideSelectionGuard);
  let t = n.domSelectionRange(), i = t.anchorNode, r = t.anchorOffset;
  e.addEventListener("selectionchange", n.input.hideSelectionGuard = () => {
    (t.anchorNode != i || t.anchorOffset != r) && (e.removeEventListener("selectionchange", n.input.hideSelectionGuard), setTimeout(() => {
      (!Zm(n) || n.state.selection.visible) && n.dom.classList.remove("ProseMirror-hideselection");
    }, 20));
  });
}
function nx(n) {
  let e = n.domSelection(), t = document.createRange();
  if (!e)
    return;
  let i = n.cursorWrapper.dom, r = i.nodeName == "IMG";
  r ? t.setStart(i.parentNode, St(i) + 1) : t.setStart(i, 0), t.collapse(!0), e.removeAllRanges(), e.addRange(t), !r && !n.state.selection.visible && Jt && yi <= 11 && (i.disabled = !0, i.disabled = !1);
}
function Qm(n, e) {
  if (e instanceof le) {
    let t = n.docView.descAt(e.from);
    t != n.lastSelectedViewDesc && (Kf(n), t && t.selectNode(), n.lastSelectedViewDesc = t);
  } else
    Kf(n);
}
function Kf(n) {
  n.lastSelectedViewDesc && (n.lastSelectedViewDesc.parent && n.lastSelectedViewDesc.deselectNode(), n.lastSelectedViewDesc = void 0);
}
function Fu(n, e, t, i) {
  return n.someProp("createSelectionBetween", (r) => r(n, e, t)) || fe.between(e, t, i);
}
function qf(n) {
  return n.editable && !n.hasFocus() ? !1 : eg(n);
}
function eg(n) {
  let e = n.domSelectionRange();
  if (!e.anchorNode)
    return !1;
  try {
    return n.dom.contains(e.anchorNode.nodeType == 3 ? e.anchorNode.parentNode : e.anchorNode) && (n.editable || n.dom.contains(e.focusNode.nodeType == 3 ? e.focusNode.parentNode : e.focusNode));
  } catch {
    return !1;
  }
}
function ix(n) {
  let e = n.docView.domFromPos(n.state.selection.anchor, 0), t = n.domSelectionRange();
  return qi(e.node, e.offset, t.anchorNode, t.anchorOffset);
}
function Xc(n, e) {
  let { $anchor: t, $head: i } = n.selection, r = e > 0 ? t.max(i) : t.min(i), s = r.parent.inlineContent ? r.depth ? n.doc.resolve(e > 0 ? r.after() : r.before()) : null : r;
  return s && pe.findFrom(s, e);
}
function li(n, e) {
  return n.dispatch(n.state.tr.setSelection(e).scrollIntoView()), !0;
}
function Gf(n, e, t) {
  let i = n.state.selection;
  if (i instanceof fe)
    if (t.indexOf("s") > -1) {
      let { $head: r } = i, s = r.textOffset ? null : e < 0 ? r.nodeBefore : r.nodeAfter;
      if (!s || s.isText || !s.isLeaf)
        return !1;
      let o = n.state.doc.resolve(r.pos + s.nodeSize * (e < 0 ? -1 : 1));
      return li(n, new fe(i.$anchor, o));
    } else if (i.empty) {
      if (n.endOfTextblock(e > 0 ? "forward" : "backward")) {
        let r = Xc(n.state, e);
        return r && r instanceof le ? li(n, r) : !1;
      } else if (!(dn && t.indexOf("m") > -1)) {
        let r = i.$head, s = r.textOffset ? null : e < 0 ? r.nodeBefore : r.nodeAfter, o;
        if (!s || s.isText)
          return !1;
        let a = e < 0 ? r.pos - s.nodeSize : r.pos;
        return s.isAtom || (o = n.docView.descAt(a)) && !o.contentDOM ? le.isSelectable(s) ? li(n, new le(e < 0 ? n.state.doc.resolve(r.pos - s.nodeSize) : r)) : no ? li(n, new fe(n.state.doc.resolve(e < 0 ? a : a + s.nodeSize))) : !1 : !1;
      }
    } else return !1;
  else {
    if (i instanceof le && i.node.isInline)
      return li(n, new fe(e > 0 ? i.$to : i.$from));
    {
      let r = Xc(n.state, e);
      return r ? li(n, r) : !1;
    }
  }
}
function ha(n) {
  return n.nodeType == 3 ? n.nodeValue.length : n.childNodes.length;
}
function Es(n, e) {
  let t = n.pmViewDesc;
  return t && t.size == 0 && (e < 0 || n.nextSibling || n.nodeName != "BR");
}
function ar(n, e) {
  return e < 0 ? rx(n) : sx(n);
}
function rx(n) {
  let e = n.domSelectionRange(), t = e.focusNode, i = e.focusOffset;
  if (!t)
    return;
  let r, s, o = !1;
  for (Cn && t.nodeType == 1 && i < ha(t) && Es(t.childNodes[i], -1) && (o = !0); ; )
    if (i > 0) {
      if (t.nodeType != 1)
        break;
      {
        let a = t.childNodes[i - 1];
        if (Es(a, -1))
          r = t, s = --i;
        else if (a.nodeType == 3)
          t = a, i = t.nodeValue.length;
        else
          break;
      }
    } else {
      if (tg(t))
        break;
      {
        let a = t.previousSibling;
        for (; a && Es(a, -1); )
          r = t.parentNode, s = St(a), a = a.previousSibling;
        if (a)
          t = a, i = ha(t);
        else {
          if (t = t.parentNode, t == n.dom)
            break;
          i = 0;
        }
      }
    }
  o ? Yc(n, t, i) : r && Yc(n, r, s);
}
function sx(n) {
  let e = n.domSelectionRange(), t = e.focusNode, i = e.focusOffset;
  if (!t)
    return;
  let r = ha(t), s, o;
  for (; ; )
    if (i < r) {
      if (t.nodeType != 1)
        break;
      let a = t.childNodes[i];
      if (Es(a, 1))
        s = t, o = ++i;
      else
        break;
    } else {
      if (tg(t))
        break;
      {
        let a = t.nextSibling;
        for (; a && Es(a, 1); )
          s = a.parentNode, o = St(a) + 1, a = a.nextSibling;
        if (a)
          t = a, i = 0, r = ha(t);
        else {
          if (t = t.parentNode, t == n.dom)
            break;
          i = r = 0;
        }
      }
    }
  s && Yc(n, s, o);
}
function tg(n) {
  let e = n.pmViewDesc;
  return e && e.node && e.node.isBlock;
}
function ox(n, e) {
  for (; n && e == n.childNodes.length && !to(n); )
    e = St(n) + 1, n = n.parentNode;
  for (; n && e < n.childNodes.length; ) {
    let t = n.childNodes[e];
    if (t.nodeType == 3)
      return t;
    if (t.nodeType == 1 && t.contentEditable == "false")
      break;
    n = t, e = 0;
  }
}
function ax(n, e) {
  for (; n && !e && !to(n); )
    e = St(n), n = n.parentNode;
  for (; n && e; ) {
    let t = n.childNodes[e - 1];
    if (t.nodeType == 3)
      return t;
    if (t.nodeType == 1 && t.contentEditable == "false")
      break;
    n = t, e = n.childNodes.length;
  }
}
function Yc(n, e, t) {
  if (e.nodeType != 3) {
    let s, o;
    (o = ox(e, t)) ? (e = o, t = 0) : (s = ax(e, t)) && (e = s, t = s.nodeValue.length);
  }
  let i = n.domSelection();
  if (!i)
    return;
  if (ol(i)) {
    let s = document.createRange();
    s.setEnd(e, t), s.setStart(e, t), i.removeAllRanges(), i.addRange(s);
  } else i.extend && i.extend(e, t);
  n.domObserver.setCurSelection();
  let { state: r } = n;
  setTimeout(() => {
    n.state == r && ei(n);
  }, 50);
}
function Jf(n, e) {
  let t = n.state.doc.resolve(e);
  if (!(Nt || My) && t.parent.inlineContent) {
    let r = n.coordsAtPos(e);
    if (e > t.start()) {
      let s = n.coordsAtPos(e - 1), o = (s.top + s.bottom) / 2;
      if (o > r.top && o < r.bottom && Math.abs(s.left - r.left) > 1)
        return s.left < r.left ? "ltr" : "rtl";
    }
    if (e < t.end()) {
      let s = n.coordsAtPos(e + 1), o = (s.top + s.bottom) / 2;
      if (o > r.top && o < r.bottom && Math.abs(s.left - r.left) > 1)
        return s.left > r.left ? "ltr" : "rtl";
    }
  }
  return getComputedStyle(n.dom).direction == "rtl" ? "rtl" : "ltr";
}
function Xf(n, e, t) {
  let i = n.state.selection;
  if (i instanceof fe && !i.empty || t.indexOf("s") > -1 || dn && t.indexOf("m") > -1)
    return !1;
  let { $from: r, $to: s } = i;
  if (!r.parent.inlineContent || n.endOfTextblock(e < 0 ? "up" : "down")) {
    let o = Xc(n.state, e);
    if (o && o instanceof le)
      return li(n, o);
  }
  if (!r.parent.inlineContent) {
    let o = e < 0 ? r : s, a = i instanceof Gt ? pe.near(o, e) : pe.findFrom(o, e);
    return a ? li(n, a) : !1;
  }
  return !1;
}
function Yf(n, e) {
  if (!(n.state.selection instanceof fe))
    return !0;
  let { $head: t, $anchor: i, empty: r } = n.state.selection;
  if (!t.sameParent(i))
    return !0;
  if (!r)
    return !1;
  if (n.endOfTextblock(e > 0 ? "forward" : "backward"))
    return !0;
  let s = !t.textOffset && (e < 0 ? t.nodeBefore : t.nodeAfter);
  if (s && !s.isText) {
    let o = n.state.tr;
    return e < 0 ? o.delete(t.pos - s.nodeSize, t.pos) : o.delete(t.pos, t.pos + s.nodeSize), n.dispatch(o), !0;
  }
  return !1;
}
function Zf(n, e, t) {
  n.domObserver.stop(), e.contentEditable = t, n.domObserver.start();
}
function lx(n) {
  if (!Bt || n.state.selection.$head.parentOffset > 0)
    return !1;
  let { focusNode: e, focusOffset: t } = n.domSelectionRange();
  if (e && e.nodeType == 1 && t == 0 && e.firstChild && e.firstChild.contentEditable == "false") {
    let i = e.firstChild;
    Zf(n, i, "true"), setTimeout(() => Zf(n, i, "false"), 20);
  }
  return !1;
}
function cx(n) {
  let e = "";
  return n.ctrlKey && (e += "c"), n.metaKey && (e += "m"), n.altKey && (e += "a"), n.shiftKey && (e += "s"), e;
}
function ux(n, e) {
  let t = e.keyCode, i = cx(e);
  if (t == 8 || dn && t == 72 && i == "c")
    return Yf(n, -1) || ar(n, -1);
  if (t == 46 && !e.shiftKey || dn && t == 68 && i == "c")
    return Yf(n, 1) || ar(n, 1);
  if (t == 13 || t == 27)
    return !0;
  if (t == 37 || dn && t == 66 && i == "c") {
    let r = t == 37 ? Jf(n, n.state.selection.from) == "ltr" ? -1 : 1 : -1;
    return Gf(n, r, i) || ar(n, r);
  } else if (t == 39 || dn && t == 70 && i == "c") {
    let r = t == 39 ? Jf(n, n.state.selection.from) == "ltr" ? 1 : -1 : 1;
    return Gf(n, r, i) || ar(n, r);
  } else {
    if (t == 38 || dn && t == 80 && i == "c")
      return Xf(n, -1, i) || ar(n, -1);
    if (t == 40 || dn && t == 78 && i == "c")
      return lx(n) || Xf(n, 1, i) || ar(n, 1);
    if (i == (dn ? "m" : "c") && (t == 66 || t == 73 || t == 89 || t == 90))
      return !0;
  }
  return !1;
}
function Vu(n, e) {
  n.someProp("transformCopied", (h) => {
    e = h(e, n);
  });
  let t = [], { content: i, openStart: r, openEnd: s } = e;
  for (; r > 1 && s > 1 && i.childCount == 1 && i.firstChild.childCount == 1; ) {
    r--, s--;
    let h = i.firstChild;
    t.push(h.type.name, h.attrs != h.type.defaultAttrs ? h.attrs : null), i = h.content;
  }
  let o = n.someProp("clipboardSerializer") || Zi.fromSchema(n.state.schema), a = ag(), l = a.createElement("div");
  l.appendChild(o.serializeFragment(i, { document: a }));
  let c = l.firstChild, u, d = 0;
  for (; c && c.nodeType == 1 && (u = og[c.nodeName.toLowerCase()]); ) {
    for (let h = u.length - 1; h >= 0; h--) {
      let p = a.createElement(u[h]);
      for (; l.firstChild; )
        p.appendChild(l.firstChild);
      l.appendChild(p), d++;
    }
    c = l.firstChild;
  }
  c && c.nodeType == 1 && c.setAttribute("data-pm-slice", `${r} ${s}${d ? ` -${d}` : ""} ${JSON.stringify(t)}`);
  let f = n.someProp("clipboardTextSerializer", (h) => h(e, n)) || e.content.textBetween(0, e.content.size, `

`);
  return { dom: l, text: f, slice: e };
}
function ng(n, e, t, i, r) {
  let s = r.parent.type.spec.code, o, a;
  if (!t && !e)
    return null;
  let l = e && (i || s || !t);
  if (l) {
    if (n.someProp("transformPastedText", (f) => {
      e = f(e, s || i, n);
    }), s)
      return e ? new X($.from(n.state.schema.text(e.replace(/\r\n?/g, `
`))), 0, 0) : X.empty;
    let d = n.someProp("clipboardTextParser", (f) => f(e, r, i, n));
    if (d)
      a = d;
    else {
      let f = r.marks(), { schema: h } = n.state, p = Zi.fromSchema(h);
      o = document.createElement("div"), e.split(/(?:\r\n?|\n)+/).forEach((b) => {
        let m = o.appendChild(document.createElement("p"));
        b && m.appendChild(p.serializeNode(h.text(b, f)));
      });
    }
  } else
    n.someProp("transformPastedHTML", (d) => {
      t = d(t, n);
    }), o = px(t), no && mx(o);
  let c = o && o.querySelector("[data-pm-slice]"), u = c && /^(\d+) (\d+)(?: -(\d+))? (.*)/.exec(c.getAttribute("data-pm-slice") || "");
  if (u && u[3])
    for (let d = +u[3]; d > 0; d--) {
      let f = o.firstChild;
      for (; f && f.nodeType != 1; )
        f = f.nextSibling;
      if (!f)
        break;
      o = f;
    }
  if (a || (a = (n.someProp("clipboardParser") || n.someProp("domParser") || vr.fromSchema(n.state.schema)).parseSlice(o, {
    preserveWhitespace: !!(l || u),
    context: r,
    ruleFromNode(f) {
      return f.nodeName == "BR" && !f.nextSibling && f.parentNode && !dx.test(f.parentNode.nodeName) ? { ignore: !0 } : null;
    }
  })), u)
    a = gx(Qf(a, +u[1], +u[2]), u[4]);
  else if (a = X.maxOpen(fx(a.content, r), !0), a.openStart || a.openEnd) {
    let d = 0, f = 0;
    for (let h = a.content.firstChild; d < a.openStart && !h.type.spec.isolating; d++, h = h.firstChild)
      ;
    for (let h = a.content.lastChild; f < a.openEnd && !h.type.spec.isolating; f++, h = h.lastChild)
      ;
    a = Qf(a, d, f);
  }
  return n.someProp("transformPasted", (d) => {
    a = d(a, n);
  }), a;
}
const dx = /^(a|abbr|acronym|b|cite|code|del|em|i|ins|kbd|label|output|q|ruby|s|samp|span|strong|sub|sup|time|u|tt|var)$/i;
function fx(n, e) {
  if (n.childCount < 2)
    return n;
  for (let t = e.depth; t >= 0; t--) {
    let r = e.node(t).contentMatchAt(e.index(t)), s, o = [];
    if (n.forEach((a) => {
      if (!o)
        return;
      let l = r.findWrapping(a.type), c;
      if (!l)
        return o = null;
      if (c = o.length && s.length && rg(l, s, a, o[o.length - 1], 0))
        o[o.length - 1] = c;
      else {
        o.length && (o[o.length - 1] = sg(o[o.length - 1], s.length));
        let u = ig(a, l);
        o.push(u), r = r.matchType(u.type), s = l;
      }
    }), o)
      return $.from(o);
  }
  return n;
}
function ig(n, e, t = 0) {
  for (let i = e.length - 1; i >= t; i--)
    n = e[i].create(null, $.from(n));
  return n;
}
function rg(n, e, t, i, r) {
  if (r < n.length && r < e.length && n[r] == e[r]) {
    let s = rg(n, e, t, i.lastChild, r + 1);
    if (s)
      return i.copy(i.content.replaceChild(i.childCount - 1, s));
    if (i.contentMatchAt(i.childCount).matchType(r == n.length - 1 ? t.type : n[r + 1]))
      return i.copy(i.content.append($.from(ig(t, n, r + 1))));
  }
}
function sg(n, e) {
  if (e == 0)
    return n;
  let t = n.content.replaceChild(n.childCount - 1, sg(n.lastChild, e - 1)), i = n.contentMatchAt(n.childCount).fillBefore($.empty, !0);
  return n.copy(t.append(i));
}
function Zc(n, e, t, i, r, s) {
  let o = e < 0 ? n.firstChild : n.lastChild, a = o.content;
  return n.childCount > 1 && (s = 0), r < i - 1 && (a = Zc(a, e, t, i, r + 1, s)), r >= t && (a = e < 0 ? o.contentMatchAt(0).fillBefore(a, s <= r).append(a) : a.append(o.contentMatchAt(o.childCount).fillBefore($.empty, !0))), n.replaceChild(e < 0 ? 0 : n.childCount - 1, o.copy(a));
}
function Qf(n, e, t) {
  return e < n.openStart && (n = new X(Zc(n.content, -1, e, n.openStart, 0, n.openEnd), e, n.openEnd)), t < n.openEnd && (n = new X(Zc(n.content, 1, t, n.openEnd, 0, 0), n.openStart, t)), n;
}
const og = {
  thead: ["table"],
  tbody: ["table"],
  tfoot: ["table"],
  caption: ["table"],
  colgroup: ["table"],
  col: ["table", "colgroup"],
  tr: ["table", "tbody"],
  td: ["table", "tbody", "tr"],
  th: ["table", "tbody", "tr"]
};
let eh = null;
function ag() {
  return eh || (eh = document.implementation.createHTMLDocument("title"));
}
let Wl = null;
function hx(n) {
  let e = window.trustedTypes;
  return e ? (Wl || (Wl = e.createPolicy("ProseMirrorClipboard", { createHTML: (t) => t })), Wl.createHTML(n)) : n;
}
function px(n) {
  let e = /^(\s*<meta [^>]*>)*/.exec(n);
  e && (n = n.slice(e[0].length));
  let t = ag().createElement("div"), i = /<([a-z][^>\s]+)/i.exec(n), r;
  if ((r = i && og[i[1].toLowerCase()]) && (n = r.map((s) => "<" + s + ">").join("") + n + r.map((s) => "</" + s + ">").reverse().join("")), t.innerHTML = hx(n), r)
    for (let s = 0; s < r.length; s++)
      t = t.querySelector(r[s]) || t;
  return t;
}
function mx(n) {
  let e = n.querySelectorAll(Nt ? "span:not([class]):not([style])" : "span.Apple-converted-space");
  for (let t = 0; t < e.length; t++) {
    let i = e[t];
    i.childNodes.length == 1 && i.textContent == " " && i.parentNode && i.parentNode.replaceChild(n.ownerDocument.createTextNode(" "), i);
  }
}
function gx(n, e) {
  if (!n.size)
    return n;
  let t = n.content.firstChild.type.schema, i;
  try {
    i = JSON.parse(e);
  } catch {
    return n;
  }
  let { content: r, openStart: s, openEnd: o } = n;
  for (let a = i.length - 2; a >= 0; a -= 2) {
    let l = t.nodes[i[a]];
    if (!l || l.hasRequiredAttrs())
      break;
    r = $.from(l.create(i[a + 1], r)), s++, o++;
  }
  return new X(r, s, o);
}
const Ht = {}, Ft = {}, _x = { touchstart: !0, touchmove: !0 };
class bx {
  constructor() {
    this.shiftKey = !1, this.mouseDown = null, this.lastKeyCode = null, this.lastKeyCodeTime = 0, this.lastClick = { time: 0, x: 0, y: 0, type: "" }, this.lastSelectionOrigin = null, this.lastSelectionTime = 0, this.lastIOSEnter = 0, this.lastIOSEnterFallbackTimeout = -1, this.lastFocus = 0, this.lastTouch = 0, this.lastChromeDelete = 0, this.composing = !1, this.compositionNode = null, this.composingTimeout = -1, this.compositionNodes = [], this.compositionEndedAt = -2e8, this.compositionID = 1, this.compositionPendingChanges = 0, this.domChangeCount = 0, this.eventHandlers = /* @__PURE__ */ Object.create(null), this.hideSelectionGuard = null;
  }
}
function vx(n) {
  for (let e in Ht) {
    let t = Ht[e];
    n.dom.addEventListener(e, n.input.eventHandlers[e] = (i) => {
      xx(n, i) && !ju(n, i) && (n.editable || !(i.type in Ft)) && t(n, i);
    }, _x[e] ? { passive: !0 } : void 0);
  }
  Bt && n.dom.addEventListener("input", () => null), Qc(n);
}
function vi(n, e) {
  n.input.lastSelectionOrigin = e, n.input.lastSelectionTime = Date.now();
}
function yx(n) {
  n.domObserver.stop();
  for (let e in n.input.eventHandlers)
    n.dom.removeEventListener(e, n.input.eventHandlers[e]);
  clearTimeout(n.input.composingTimeout), clearTimeout(n.input.lastIOSEnterFallbackTimeout);
}
function Qc(n) {
  n.someProp("handleDOMEvents", (e) => {
    for (let t in e)
      n.input.eventHandlers[t] || n.dom.addEventListener(t, n.input.eventHandlers[t] = (i) => ju(n, i));
  });
}
function ju(n, e) {
  return n.someProp("handleDOMEvents", (t) => {
    let i = t[e.type];
    return i ? i(n, e) || e.defaultPrevented : !1;
  });
}
function xx(n, e) {
  if (!e.bubbles)
    return !0;
  if (e.defaultPrevented)
    return !1;
  for (let t = e.target; t != n.dom; t = t.parentNode)
    if (!t || t.nodeType == 11 || t.pmViewDesc && t.pmViewDesc.stopEvent(e))
      return !1;
  return !0;
}
function wx(n, e) {
  !ju(n, e) && Ht[e.type] && (n.editable || !(e.type in Ft)) && Ht[e.type](n, e);
}
Ft.keydown = (n, e) => {
  let t = e;
  if (n.input.shiftKey = t.keyCode == 16 || t.shiftKey, !cg(n, t) && (n.input.lastKeyCode = t.keyCode, n.input.lastKeyCodeTime = Date.now(), !(Yn && Nt && t.keyCode == 13)))
    if (t.keyCode != 229 && n.domObserver.forceFlush(), Br && t.keyCode == 13 && !t.ctrlKey && !t.altKey && !t.metaKey) {
      let i = Date.now();
      n.input.lastIOSEnter = i, n.input.lastIOSEnterFallbackTimeout = setTimeout(() => {
        n.input.lastIOSEnter == i && (n.someProp("handleKeyDown", (r) => r(n, Ni(13, "Enter"))), n.input.lastIOSEnter = 0);
      }, 200);
    } else n.someProp("handleKeyDown", (i) => i(n, t)) || ux(n, t) ? t.preventDefault() : vi(n, "key");
};
Ft.keyup = (n, e) => {
  e.keyCode == 16 && (n.input.shiftKey = !1);
};
Ft.keypress = (n, e) => {
  let t = e;
  if (cg(n, t) || !t.charCode || t.ctrlKey && !t.altKey || dn && t.metaKey)
    return;
  if (n.someProp("handleKeyPress", (r) => r(n, t))) {
    t.preventDefault();
    return;
  }
  let i = n.state.selection;
  if (!(i instanceof fe) || !i.$from.sameParent(i.$to)) {
    let r = String.fromCharCode(t.charCode);
    !/[\r\n]/.test(r) && !n.someProp("handleTextInput", (s) => s(n, i.$from.pos, i.$to.pos, r)) && n.dispatch(n.state.tr.insertText(r).scrollIntoView()), t.preventDefault();
  }
};
function ll(n) {
  return { left: n.clientX, top: n.clientY };
}
function kx(n, e) {
  let t = e.x - n.clientX, i = e.y - n.clientY;
  return t * t + i * i < 100;
}
function Wu(n, e, t, i, r) {
  if (i == -1)
    return !1;
  let s = n.state.doc.resolve(i);
  for (let o = s.depth + 1; o > 0; o--)
    if (n.someProp(e, (a) => o > s.depth ? a(n, t, s.nodeAfter, s.before(o), r, !0) : a(n, t, s.node(o), s.before(o), r, !1)))
      return !0;
  return !1;
}
function wr(n, e, t) {
  if (n.focused || n.focus(), n.state.selection.eq(e))
    return;
  let i = n.state.tr.setSelection(e);
  i.setMeta("pointer", !0), n.dispatch(i);
}
function Sx(n, e) {
  if (e == -1)
    return !1;
  let t = n.state.doc.resolve(e), i = t.nodeAfter;
  return i && i.isAtom && le.isSelectable(i) ? (wr(n, new le(t)), !0) : !1;
}
function Ex(n, e) {
  if (e == -1)
    return !1;
  let t = n.state.selection, i, r;
  t instanceof le && (i = t.node);
  let s = n.state.doc.resolve(e);
  for (let o = s.depth + 1; o > 0; o--) {
    let a = o > s.depth ? s.nodeAfter : s.node(o);
    if (le.isSelectable(a)) {
      i && t.$from.depth > 0 && o >= t.$from.depth && s.before(t.$from.depth + 1) == t.$from.pos ? r = s.before(t.$from.depth) : r = s.before(o);
      break;
    }
  }
  return r != null ? (wr(n, le.create(n.state.doc, r)), !0) : !1;
}
function Cx(n, e, t, i, r) {
  return Wu(n, "handleClickOn", e, t, i) || n.someProp("handleClick", (s) => s(n, e, i)) || (r ? Ex(n, t) : Sx(n, t));
}
function Tx(n, e, t, i) {
  return Wu(n, "handleDoubleClickOn", e, t, i) || n.someProp("handleDoubleClick", (r) => r(n, e, i));
}
function Ax(n, e, t, i) {
  return Wu(n, "handleTripleClickOn", e, t, i) || n.someProp("handleTripleClick", (r) => r(n, e, i)) || Mx(n, t, i);
}
function Mx(n, e, t) {
  if (t.button != 0)
    return !1;
  let i = n.state.doc;
  if (e == -1)
    return i.inlineContent ? (wr(n, fe.create(i, 0, i.content.size)), !0) : !1;
  let r = i.resolve(e);
  for (let s = r.depth + 1; s > 0; s--) {
    let o = s > r.depth ? r.nodeAfter : r.node(s), a = r.before(s);
    if (o.inlineContent)
      wr(n, fe.create(i, a + 1, a + 1 + o.content.size));
    else if (le.isSelectable(o))
      wr(n, le.create(i, a));
    else
      continue;
    return !0;
  }
}
function Uu(n) {
  return pa(n);
}
const lg = dn ? "metaKey" : "ctrlKey";
Ht.mousedown = (n, e) => {
  let t = e;
  n.input.shiftKey = t.shiftKey;
  let i = Uu(n), r = Date.now(), s = "singleClick";
  r - n.input.lastClick.time < 500 && kx(t, n.input.lastClick) && !t[lg] && (n.input.lastClick.type == "singleClick" ? s = "doubleClick" : n.input.lastClick.type == "doubleClick" && (s = "tripleClick")), n.input.lastClick = { time: r, x: t.clientX, y: t.clientY, type: s };
  let o = n.posAtCoords(ll(t));
  o && (s == "singleClick" ? (n.input.mouseDown && n.input.mouseDown.done(), n.input.mouseDown = new Ox(n, o, t, !!i)) : (s == "doubleClick" ? Tx : Ax)(n, o.pos, o.inside, t) ? t.preventDefault() : vi(n, "pointer"));
};
class Ox {
  constructor(e, t, i, r) {
    this.view = e, this.pos = t, this.event = i, this.flushed = r, this.delayedSelectionSync = !1, this.mightDrag = null, this.startDoc = e.state.doc, this.selectNode = !!i[lg], this.allowDefault = i.shiftKey;
    let s, o;
    if (t.inside > -1)
      s = e.state.doc.nodeAt(t.inside), o = t.inside;
    else {
      let u = e.state.doc.resolve(t.pos);
      s = u.parent, o = u.depth ? u.before() : 0;
    }
    const a = r ? null : i.target, l = a ? e.docView.nearestDesc(a, !0) : null;
    this.target = l && l.dom.nodeType == 1 ? l.dom : null;
    let { selection: c } = e.state;
    (i.button == 0 && s.type.spec.draggable && s.type.spec.selectable !== !1 || c instanceof le && c.from <= o && c.to > o) && (this.mightDrag = {
      node: s,
      pos: o,
      addAttr: !!(this.target && !this.target.draggable),
      setUneditable: !!(this.target && Cn && !this.target.hasAttribute("contentEditable"))
    }), this.target && this.mightDrag && (this.mightDrag.addAttr || this.mightDrag.setUneditable) && (this.view.domObserver.stop(), this.mightDrag.addAttr && (this.target.draggable = !0), this.mightDrag.setUneditable && setTimeout(() => {
      this.view.input.mouseDown == this && this.target.setAttribute("contentEditable", "false");
    }, 20), this.view.domObserver.start()), e.root.addEventListener("mouseup", this.up = this.up.bind(this)), e.root.addEventListener("mousemove", this.move = this.move.bind(this)), vi(e, "pointer");
  }
  done() {
    this.view.root.removeEventListener("mouseup", this.up), this.view.root.removeEventListener("mousemove", this.move), this.mightDrag && this.target && (this.view.domObserver.stop(), this.mightDrag.addAttr && this.target.removeAttribute("draggable"), this.mightDrag.setUneditable && this.target.removeAttribute("contentEditable"), this.view.domObserver.start()), this.delayedSelectionSync && setTimeout(() => ei(this.view)), this.view.input.mouseDown = null;
  }
  up(e) {
    if (this.done(), !this.view.dom.contains(e.target))
      return;
    let t = this.pos;
    this.view.state.doc != this.startDoc && (t = this.view.posAtCoords(ll(e))), this.updateAllowDefault(e), this.allowDefault || !t ? vi(this.view, "pointer") : Cx(this.view, t.pos, t.inside, e, this.selectNode) ? e.preventDefault() : e.button == 0 && (this.flushed || // Safari ignores clicks on draggable elements
    Bt && this.mightDrag && !this.mightDrag.node.isAtom || // Chrome will sometimes treat a node selection as a
    // cursor, but still report that the node is selected
    // when asked through getSelection. You'll then get a
    // situation where clicking at the point where that
    // (hidden) cursor is doesn't change the selection, and
    // thus doesn't get a reaction from ProseMirror. This
    // works around that.
    Nt && !this.view.state.selection.visible && Math.min(Math.abs(t.pos - this.view.state.selection.from), Math.abs(t.pos - this.view.state.selection.to)) <= 2) ? (wr(this.view, pe.near(this.view.state.doc.resolve(t.pos))), e.preventDefault()) : vi(this.view, "pointer");
  }
  move(e) {
    this.updateAllowDefault(e), vi(this.view, "pointer"), e.buttons == 0 && this.done();
  }
  updateAllowDefault(e) {
    !this.allowDefault && (Math.abs(this.event.x - e.clientX) > 4 || Math.abs(this.event.y - e.clientY) > 4) && (this.allowDefault = !0);
  }
}
Ht.touchstart = (n) => {
  n.input.lastTouch = Date.now(), Uu(n), vi(n, "pointer");
};
Ht.touchmove = (n) => {
  n.input.lastTouch = Date.now(), vi(n, "pointer");
};
Ht.contextmenu = (n) => Uu(n);
function cg(n, e) {
  return n.composing ? !0 : Bt && Math.abs(e.timeStamp - n.input.compositionEndedAt) < 500 ? (n.input.compositionEndedAt = -2e8, !0) : !1;
}
const Nx = Yn ? 5e3 : -1;
Ft.compositionstart = Ft.compositionupdate = (n) => {
  if (!n.composing) {
    n.domObserver.flush();
    let { state: e } = n, t = e.selection.$to;
    if (e.selection instanceof fe && (e.storedMarks || !t.textOffset && t.parentOffset && t.nodeBefore.marks.some((i) => i.type.spec.inclusive === !1)))
      n.markCursor = n.state.storedMarks || t.marks(), pa(n, !0), n.markCursor = null;
    else if (pa(n, !e.selection.empty), Cn && e.selection.empty && t.parentOffset && !t.textOffset && t.nodeBefore.marks.length) {
      let i = n.domSelectionRange();
      for (let r = i.focusNode, s = i.focusOffset; r && r.nodeType == 1 && s != 0; ) {
        let o = s < 0 ? r.lastChild : r.childNodes[s - 1];
        if (!o)
          break;
        if (o.nodeType == 3) {
          let a = n.domSelection();
          a && a.collapse(o, o.nodeValue.length);
          break;
        } else
          r = o, s = -1;
      }
    }
    n.input.composing = !0;
  }
  ug(n, Nx);
};
Ft.compositionend = (n, e) => {
  n.composing && (n.input.composing = !1, n.input.compositionEndedAt = e.timeStamp, n.input.compositionPendingChanges = n.domObserver.pendingRecords().length ? n.input.compositionID : 0, n.input.compositionNode = null, n.input.compositionPendingChanges && Promise.resolve().then(() => n.domObserver.flush()), n.input.compositionID++, ug(n, 20));
};
function ug(n, e) {
  clearTimeout(n.input.composingTimeout), e > -1 && (n.input.composingTimeout = setTimeout(() => pa(n), e));
}
function dg(n) {
  for (n.composing && (n.input.composing = !1, n.input.compositionEndedAt = Rx()); n.input.compositionNodes.length > 0; )
    n.input.compositionNodes.pop().markParentsDirty();
}
function Lx(n) {
  let e = n.domSelectionRange();
  if (!e.focusNode)
    return null;
  let t = Sy(e.focusNode, e.focusOffset), i = Ey(e.focusNode, e.focusOffset);
  if (t && i && t != i) {
    let r = i.pmViewDesc, s = n.domObserver.lastChangedTextNode;
    if (t == s || i == s)
      return s;
    if (!r || !r.isText(i.nodeValue))
      return i;
    if (n.input.compositionNode == i) {
      let o = t.pmViewDesc;
      if (!(!o || !o.isText(t.nodeValue)))
        return i;
    }
  }
  return t || i;
}
function Rx() {
  let n = document.createEvent("Event");
  return n.initEvent("event", !0, !0), n.timeStamp;
}
function pa(n, e = !1) {
  if (!(Yn && n.domObserver.flushingSoon >= 0)) {
    if (n.domObserver.forceFlush(), dg(n), e || n.docView && n.docView.dirty) {
      let t = Hu(n);
      return t && !t.eq(n.state.selection) ? n.dispatch(n.state.tr.setSelection(t)) : (n.markCursor || e) && !n.state.selection.empty ? n.dispatch(n.state.tr.deleteSelection()) : n.updateState(n.state), !0;
    }
    return !1;
  }
}
function Ix(n, e) {
  if (!n.dom.parentNode)
    return;
  let t = n.dom.parentNode.appendChild(document.createElement("div"));
  t.appendChild(e), t.style.cssText = "position: fixed; left: -10000px; top: 10px";
  let i = getSelection(), r = document.createRange();
  r.selectNodeContents(e), n.dom.blur(), i.removeAllRanges(), i.addRange(r), setTimeout(() => {
    t.parentNode && t.parentNode.removeChild(t), n.focus();
  }, 50);
}
const Hs = Jt && yi < 15 || Br && Oy < 604;
Ht.copy = Ft.cut = (n, e) => {
  let t = e, i = n.state.selection, r = t.type == "cut";
  if (i.empty)
    return;
  let s = Hs ? null : t.clipboardData, o = i.content(), { dom: a, text: l } = Vu(n, o);
  s ? (t.preventDefault(), s.clearData(), s.setData("text/html", a.innerHTML), s.setData("text/plain", l)) : Ix(n, a), r && n.dispatch(n.state.tr.deleteSelection().scrollIntoView().setMeta("uiEvent", "cut"));
};
function Px(n) {
  return n.openStart == 0 && n.openEnd == 0 && n.content.childCount == 1 ? n.content.firstChild : null;
}
function Dx(n, e) {
  if (!n.dom.parentNode)
    return;
  let t = n.input.shiftKey || n.state.selection.$from.parent.type.spec.code, i = n.dom.parentNode.appendChild(document.createElement(t ? "textarea" : "div"));
  t || (i.contentEditable = "true"), i.style.cssText = "position: fixed; left: -10000px; top: 10px", i.focus();
  let r = n.input.shiftKey && n.input.lastKeyCode != 45;
  setTimeout(() => {
    n.focus(), i.parentNode && i.parentNode.removeChild(i), t ? Fs(n, i.value, null, r, e) : Fs(n, i.textContent, i.innerHTML, r, e);
  }, 50);
}
function Fs(n, e, t, i, r) {
  let s = ng(n, e, t, i, n.state.selection.$from);
  if (n.someProp("handlePaste", (l) => l(n, r, s || X.empty)))
    return !0;
  if (!s)
    return !1;
  let o = Px(s), a = o ? n.state.tr.replaceSelectionWith(o, i) : n.state.tr.replaceSelection(s);
  return n.dispatch(a.scrollIntoView().setMeta("paste", !0).setMeta("uiEvent", "paste")), !0;
}
function fg(n) {
  let e = n.getData("text/plain") || n.getData("Text");
  if (e)
    return e;
  let t = n.getData("text/uri-list");
  return t ? t.replace(/\r?\n/g, " ") : "";
}
Ft.paste = (n, e) => {
  let t = e;
  if (n.composing && !Yn)
    return;
  let i = Hs ? null : t.clipboardData, r = n.input.shiftKey && n.input.lastKeyCode != 45;
  i && Fs(n, fg(i), i.getData("text/html"), r, t) ? t.preventDefault() : Dx(n, t);
};
class hg {
  constructor(e, t, i) {
    this.slice = e, this.move = t, this.node = i;
  }
}
const pg = dn ? "altKey" : "ctrlKey";
Ht.dragstart = (n, e) => {
  let t = e, i = n.input.mouseDown;
  if (i && i.done(), !t.dataTransfer)
    return;
  let r = n.state.selection, s = r.empty ? null : n.posAtCoords(ll(t)), o;
  if (!(s && s.pos >= r.from && s.pos <= (r instanceof le ? r.to - 1 : r.to))) {
    if (i && i.mightDrag)
      o = le.create(n.state.doc, i.mightDrag.pos);
    else if (t.target && t.target.nodeType == 1) {
      let d = n.docView.nearestDesc(t.target, !0);
      d && d.node.type.spec.draggable && d != n.docView && (o = le.create(n.state.doc, d.posBefore));
    }
  }
  let a = (o || n.state.selection).content(), { dom: l, text: c, slice: u } = Vu(n, a);
  (!t.dataTransfer.files.length || !Nt || Hm > 120) && t.dataTransfer.clearData(), t.dataTransfer.setData(Hs ? "Text" : "text/html", l.innerHTML), t.dataTransfer.effectAllowed = "copyMove", Hs || t.dataTransfer.setData("text/plain", c), n.dragging = new hg(u, !t[pg], o);
};
Ht.dragend = (n) => {
  let e = n.dragging;
  window.setTimeout(() => {
    n.dragging == e && (n.dragging = null);
  }, 50);
};
Ft.dragover = Ft.dragenter = (n, e) => e.preventDefault();
Ft.drop = (n, e) => {
  let t = e, i = n.dragging;
  if (n.dragging = null, !t.dataTransfer)
    return;
  let r = n.posAtCoords(ll(t));
  if (!r)
    return;
  let s = n.state.doc.resolve(r.pos), o = i && i.slice;
  o ? n.someProp("transformPasted", (p) => {
    o = p(o, n);
  }) : o = ng(n, fg(t.dataTransfer), Hs ? null : t.dataTransfer.getData("text/html"), !1, s);
  let a = !!(i && !t[pg]);
  if (n.someProp("handleDrop", (p) => p(n, t, o || X.empty, a))) {
    t.preventDefault();
    return;
  }
  if (!o)
    return;
  t.preventDefault();
  let l = o ? Nm(n.state.doc, s.pos, o) : s.pos;
  l == null && (l = s.pos);
  let c = n.state.tr;
  if (a) {
    let { node: p } = i;
    p ? p.replace(c) : c.deleteSelection();
  }
  let u = c.mapping.map(l), d = o.openStart == 0 && o.openEnd == 0 && o.content.childCount == 1, f = c.doc;
  if (d ? c.replaceRangeWith(u, u, o.content.firstChild) : c.replaceRange(u, u, o), c.doc.eq(f))
    return;
  let h = c.doc.resolve(u);
  if (d && le.isSelectable(o.content.firstChild) && h.nodeAfter && h.nodeAfter.sameMarkup(o.content.firstChild))
    c.setSelection(new le(h));
  else {
    let p = c.mapping.map(l);
    c.mapping.maps[c.mapping.maps.length - 1].forEach((b, m, g, v) => p = v), c.setSelection(Fu(n, h, c.doc.resolve(p)));
  }
  n.focus(), n.dispatch(c.setMeta("uiEvent", "drop"));
};
Ht.focus = (n) => {
  n.input.lastFocus = Date.now(), n.focused || (n.domObserver.stop(), n.dom.classList.add("ProseMirror-focused"), n.domObserver.start(), n.focused = !0, setTimeout(() => {
    n.docView && n.hasFocus() && !n.domObserver.currentSelection.eq(n.domSelectionRange()) && ei(n);
  }, 20));
};
Ht.blur = (n, e) => {
  let t = e;
  n.focused && (n.domObserver.stop(), n.dom.classList.remove("ProseMirror-focused"), n.domObserver.start(), t.relatedTarget && n.dom.contains(t.relatedTarget) && n.domObserver.currentSelection.clear(), n.focused = !1);
};
Ht.beforeinput = (n, e) => {
  if (Nt && Yn && e.inputType == "deleteContentBackward") {
    n.domObserver.flushSoon();
    let { domChangeCount: i } = n.input;
    setTimeout(() => {
      if (n.input.domChangeCount != i || (n.dom.blur(), n.focus(), n.someProp("handleKeyDown", (s) => s(n, Ni(8, "Backspace")))))
        return;
      let { $cursor: r } = n.state.selection;
      r && r.pos > 0 && n.dispatch(n.state.tr.delete(r.pos - 1, r.pos).scrollIntoView());
    }, 50);
  }
};
for (let n in Ft)
  Ht[n] = Ft[n];
function Vs(n, e) {
  if (n == e)
    return !0;
  for (let t in n)
    if (n[t] !== e[t])
      return !1;
  for (let t in e)
    if (!(t in n))
      return !1;
  return !0;
}
class ma {
  constructor(e, t) {
    this.toDOM = e, this.spec = t || ji, this.side = this.spec.side || 0;
  }
  map(e, t, i, r) {
    let { pos: s, deleted: o } = e.mapResult(t.from + r, this.side < 0 ? -1 : 1);
    return o ? null : new bt(s - i, s - i, this);
  }
  valid() {
    return !0;
  }
  eq(e) {
    return this == e || e instanceof ma && (this.spec.key && this.spec.key == e.spec.key || this.toDOM == e.toDOM && Vs(this.spec, e.spec));
  }
  destroy(e) {
    this.spec.destroy && this.spec.destroy(e);
  }
}
class wi {
  constructor(e, t) {
    this.attrs = e, this.spec = t || ji;
  }
  map(e, t, i, r) {
    let s = e.map(t.from + r, this.spec.inclusiveStart ? -1 : 1) - i, o = e.map(t.to + r, this.spec.inclusiveEnd ? 1 : -1) - i;
    return s >= o ? null : new bt(s, o, this);
  }
  valid(e, t) {
    return t.from < t.to;
  }
  eq(e) {
    return this == e || e instanceof wi && Vs(this.attrs, e.attrs) && Vs(this.spec, e.spec);
  }
  static is(e) {
    return e.type instanceof wi;
  }
  destroy() {
  }
}
class Ku {
  constructor(e, t) {
    this.attrs = e, this.spec = t || ji;
  }
  map(e, t, i, r) {
    let s = e.mapResult(t.from + r, 1);
    if (s.deleted)
      return null;
    let o = e.mapResult(t.to + r, -1);
    return o.deleted || o.pos <= s.pos ? null : new bt(s.pos - i, o.pos - i, this);
  }
  valid(e, t) {
    let { index: i, offset: r } = e.content.findIndex(t.from), s;
    return r == t.from && !(s = e.child(i)).isText && r + s.nodeSize == t.to;
  }
  eq(e) {
    return this == e || e instanceof Ku && Vs(this.attrs, e.attrs) && Vs(this.spec, e.spec);
  }
  destroy() {
  }
}
class bt {
  /**
  @internal
  */
  constructor(e, t, i) {
    this.from = e, this.to = t, this.type = i;
  }
  /**
  @internal
  */
  copy(e, t) {
    return new bt(e, t, this.type);
  }
  /**
  @internal
  */
  eq(e, t = 0) {
    return this.type.eq(e.type) && this.from + t == e.from && this.to + t == e.to;
  }
  /**
  @internal
  */
  map(e, t, i) {
    return this.type.map(e, this, t, i);
  }
  /**
  Creates a widget decoration, which is a DOM node that's shown in
  the document at the given position. It is recommended that you
  delay rendering the widget by passing a function that will be
  called when the widget is actually drawn in a view, but you can
  also directly pass a DOM node. `getPos` can be used to find the
  widget's current document position.
  */
  static widget(e, t, i) {
    return new bt(e, e, new ma(t, i));
  }
  /**
  Creates an inline decoration, which adds the given attributes to
  each inline node between `from` and `to`.
  */
  static inline(e, t, i, r) {
    return new bt(e, t, new wi(i, r));
  }
  /**
  Creates a node decoration. `from` and `to` should point precisely
  before and after a node in the document. That node, and only that
  node, will receive the given attributes.
  */
  static node(e, t, i, r) {
    return new bt(e, t, new Ku(i, r));
  }
  /**
  The spec provided when creating this decoration. Can be useful
  if you've stored extra information in that object.
  */
  get spec() {
    return this.type.spec;
  }
  /**
  @internal
  */
  get inline() {
    return this.type instanceof wi;
  }
  /**
  @internal
  */
  get widget() {
    return this.type instanceof ma;
  }
}
const ur = [], ji = {};
class je {
  /**
  @internal
  */
  constructor(e, t) {
    this.local = e.length ? e : ur, this.children = t.length ? t : ur;
  }
  /**
  Create a set of decorations, using the structure of the given
  document. This will consume (modify) the `decorations` array, so
  you must make a copy if you want need to preserve that.
  */
  static create(e, t) {
    return t.length ? ga(t, e, 0, ji) : Ot;
  }
  /**
  Find all decorations in this set which touch the given range
  (including decorations that start or end directly at the
  boundaries) and match the given predicate on their spec. When
  `start` and `end` are omitted, all decorations in the set are
  considered. When `predicate` isn't given, all decorations are
  assumed to match.
  */
  find(e, t, i) {
    let r = [];
    return this.findInner(e ?? 0, t ?? 1e9, r, 0, i), r;
  }
  findInner(e, t, i, r, s) {
    for (let o = 0; o < this.local.length; o++) {
      let a = this.local[o];
      a.from <= t && a.to >= e && (!s || s(a.spec)) && i.push(a.copy(a.from + r, a.to + r));
    }
    for (let o = 0; o < this.children.length; o += 3)
      if (this.children[o] < t && this.children[o + 1] > e) {
        let a = this.children[o] + 1;
        this.children[o + 2].findInner(e - a, t - a, i, r + a, s);
      }
  }
  /**
  Map the set of decorations in response to a change in the
  document.
  */
  map(e, t, i) {
    return this == Ot || e.maps.length == 0 ? this : this.mapInner(e, t, 0, 0, i || ji);
  }
  /**
  @internal
  */
  mapInner(e, t, i, r, s) {
    let o;
    for (let a = 0; a < this.local.length; a++) {
      let l = this.local[a].map(e, i, r);
      l && l.type.valid(t, l) ? (o || (o = [])).push(l) : s.onRemove && s.onRemove(this.local[a].spec);
    }
    return this.children.length ? $x(this.children, o || [], e, t, i, r, s) : o ? new je(o.sort(Wi), ur) : Ot;
  }
  /**
  Add the given array of decorations to the ones in the set,
  producing a new set. Consumes the `decorations` array. Needs
  access to the current document to create the appropriate tree
  structure.
  */
  add(e, t) {
    return t.length ? this == Ot ? je.create(e, t) : this.addInner(e, t, 0) : this;
  }
  addInner(e, t, i) {
    let r, s = 0;
    e.forEach((a, l) => {
      let c = l + i, u;
      if (u = gg(t, a, c)) {
        for (r || (r = this.children.slice()); s < r.length && r[s] < l; )
          s += 3;
        r[s] == l ? r[s + 2] = r[s + 2].addInner(a, u, c + 1) : r.splice(s, 0, l, l + a.nodeSize, ga(u, a, c + 1, ji)), s += 3;
      }
    });
    let o = mg(s ? _g(t) : t, -i);
    for (let a = 0; a < o.length; a++)
      o[a].type.valid(e, o[a]) || o.splice(a--, 1);
    return new je(o.length ? this.local.concat(o).sort(Wi) : this.local, r || this.children);
  }
  /**
  Create a new set that contains the decorations in this set, minus
  the ones in the given array.
  */
  remove(e) {
    return e.length == 0 || this == Ot ? this : this.removeInner(e, 0);
  }
  removeInner(e, t) {
    let i = this.children, r = this.local;
    for (let s = 0; s < i.length; s += 3) {
      let o, a = i[s] + t, l = i[s + 1] + t;
      for (let u = 0, d; u < e.length; u++)
        (d = e[u]) && d.from > a && d.to < l && (e[u] = null, (o || (o = [])).push(d));
      if (!o)
        continue;
      i == this.children && (i = this.children.slice());
      let c = i[s + 2].removeInner(o, a + 1);
      c != Ot ? i[s + 2] = c : (i.splice(s, 3), s -= 3);
    }
    if (r.length) {
      for (let s = 0, o; s < e.length; s++)
        if (o = e[s])
          for (let a = 0; a < r.length; a++)
            r[a].eq(o, t) && (r == this.local && (r = this.local.slice()), r.splice(a--, 1));
    }
    return i == this.children && r == this.local ? this : r.length || i.length ? new je(r, i) : Ot;
  }
  forChild(e, t) {
    if (this == Ot)
      return this;
    if (t.isLeaf)
      return je.empty;
    let i, r;
    for (let a = 0; a < this.children.length; a += 3)
      if (this.children[a] >= e) {
        this.children[a] == e && (i = this.children[a + 2]);
        break;
      }
    let s = e + 1, o = s + t.content.size;
    for (let a = 0; a < this.local.length; a++) {
      let l = this.local[a];
      if (l.from < o && l.to > s && l.type instanceof wi) {
        let c = Math.max(s, l.from) - s, u = Math.min(o, l.to) - s;
        c < u && (r || (r = [])).push(l.copy(c, u));
      }
    }
    if (r) {
      let a = new je(r.sort(Wi), ur);
      return i ? new fi([a, i]) : a;
    }
    return i || Ot;
  }
  /**
  @internal
  */
  eq(e) {
    if (this == e)
      return !0;
    if (!(e instanceof je) || this.local.length != e.local.length || this.children.length != e.children.length)
      return !1;
    for (let t = 0; t < this.local.length; t++)
      if (!this.local[t].eq(e.local[t]))
        return !1;
    for (let t = 0; t < this.children.length; t += 3)
      if (this.children[t] != e.children[t] || this.children[t + 1] != e.children[t + 1] || !this.children[t + 2].eq(e.children[t + 2]))
        return !1;
    return !0;
  }
  /**
  @internal
  */
  locals(e) {
    return qu(this.localsInner(e));
  }
  /**
  @internal
  */
  localsInner(e) {
    if (this == Ot)
      return ur;
    if (e.inlineContent || !this.local.some(wi.is))
      return this.local;
    let t = [];
    for (let i = 0; i < this.local.length; i++)
      this.local[i].type instanceof wi || t.push(this.local[i]);
    return t;
  }
  forEachSet(e) {
    e(this);
  }
}
je.empty = new je([], []);
je.removeOverlap = qu;
const Ot = je.empty;
class fi {
  constructor(e) {
    this.members = e;
  }
  map(e, t) {
    const i = this.members.map((r) => r.map(e, t, ji));
    return fi.from(i);
  }
  forChild(e, t) {
    if (t.isLeaf)
      return je.empty;
    let i = [];
    for (let r = 0; r < this.members.length; r++) {
      let s = this.members[r].forChild(e, t);
      s != Ot && (s instanceof fi ? i = i.concat(s.members) : i.push(s));
    }
    return fi.from(i);
  }
  eq(e) {
    if (!(e instanceof fi) || e.members.length != this.members.length)
      return !1;
    for (let t = 0; t < this.members.length; t++)
      if (!this.members[t].eq(e.members[t]))
        return !1;
    return !0;
  }
  locals(e) {
    let t, i = !0;
    for (let r = 0; r < this.members.length; r++) {
      let s = this.members[r].localsInner(e);
      if (s.length)
        if (!t)
          t = s;
        else {
          i && (t = t.slice(), i = !1);
          for (let o = 0; o < s.length; o++)
            t.push(s[o]);
        }
    }
    return t ? qu(i ? t : t.sort(Wi)) : ur;
  }
  // Create a group for the given array of decoration sets, or return
  // a single set when possible.
  static from(e) {
    switch (e.length) {
      case 0:
        return Ot;
      case 1:
        return e[0];
      default:
        return new fi(e.every((t) => t instanceof je) ? e : e.reduce((t, i) => t.concat(i instanceof je ? i : i.members), []));
    }
  }
  forEachSet(e) {
    for (let t = 0; t < this.members.length; t++)
      this.members[t].forEachSet(e);
  }
}
function $x(n, e, t, i, r, s, o) {
  let a = n.slice();
  for (let c = 0, u = s; c < t.maps.length; c++) {
    let d = 0;
    t.maps[c].forEach((f, h, p, b) => {
      let m = b - p - (h - f);
      for (let g = 0; g < a.length; g += 3) {
        let v = a[g + 1];
        if (v < 0 || f > v + u - d)
          continue;
        let x = a[g] + u - d;
        h >= x ? a[g + 1] = f <= x ? -2 : -1 : f >= u && m && (a[g] += m, a[g + 1] += m);
      }
      d += m;
    }), u = t.maps[c].map(u, -1);
  }
  let l = !1;
  for (let c = 0; c < a.length; c += 3)
    if (a[c + 1] < 0) {
      if (a[c + 1] == -2) {
        l = !0, a[c + 1] = -1;
        continue;
      }
      let u = t.map(n[c] + s), d = u - r;
      if (d < 0 || d >= i.content.size) {
        l = !0;
        continue;
      }
      let f = t.map(n[c + 1] + s, -1), h = f - r, { index: p, offset: b } = i.content.findIndex(d), m = i.maybeChild(p);
      if (m && b == d && b + m.nodeSize == h) {
        let g = a[c + 2].mapInner(t, m, u + 1, n[c] + s + 1, o);
        g != Ot ? (a[c] = d, a[c + 1] = h, a[c + 2] = g) : (a[c + 1] = -2, l = !0);
      } else
        l = !0;
    }
  if (l) {
    let c = zx(a, n, e, t, r, s, o), u = ga(c, i, 0, o);
    e = u.local;
    for (let d = 0; d < a.length; d += 3)
      a[d + 1] < 0 && (a.splice(d, 3), d -= 3);
    for (let d = 0, f = 0; d < u.children.length; d += 3) {
      let h = u.children[d];
      for (; f < a.length && a[f] < h; )
        f += 3;
      a.splice(f, 0, u.children[d], u.children[d + 1], u.children[d + 2]);
    }
  }
  return new je(e.sort(Wi), a);
}
function mg(n, e) {
  if (!e || !n.length)
    return n;
  let t = [];
  for (let i = 0; i < n.length; i++) {
    let r = n[i];
    t.push(new bt(r.from + e, r.to + e, r.type));
  }
  return t;
}
function zx(n, e, t, i, r, s, o) {
  function a(l, c) {
    for (let u = 0; u < l.local.length; u++) {
      let d = l.local[u].map(i, r, c);
      d ? t.push(d) : o.onRemove && o.onRemove(l.local[u].spec);
    }
    for (let u = 0; u < l.children.length; u += 3)
      a(l.children[u + 2], l.children[u] + c + 1);
  }
  for (let l = 0; l < n.length; l += 3)
    n[l + 1] == -1 && a(n[l + 2], e[l] + s + 1);
  return t;
}
function gg(n, e, t) {
  if (e.isLeaf)
    return null;
  let i = t + e.nodeSize, r = null;
  for (let s = 0, o; s < n.length; s++)
    (o = n[s]) && o.from > t && o.to < i && ((r || (r = [])).push(o), n[s] = null);
  return r;
}
function _g(n) {
  let e = [];
  for (let t = 0; t < n.length; t++)
    n[t] != null && e.push(n[t]);
  return e;
}
function ga(n, e, t, i) {
  let r = [], s = !1;
  e.forEach((a, l) => {
    let c = gg(n, a, l + t);
    if (c) {
      s = !0;
      let u = ga(c, a, t + l + 1, i);
      u != Ot && r.push(l, l + a.nodeSize, u);
    }
  });
  let o = mg(s ? _g(n) : n, -t).sort(Wi);
  for (let a = 0; a < o.length; a++)
    o[a].type.valid(e, o[a]) || (i.onRemove && i.onRemove(o[a].spec), o.splice(a--, 1));
  return o.length || r.length ? new je(o, r) : Ot;
}
function Wi(n, e) {
  return n.from - e.from || n.to - e.to;
}
function qu(n) {
  let e = n;
  for (let t = 0; t < e.length - 1; t++) {
    let i = e[t];
    if (i.from != i.to)
      for (let r = t + 1; r < e.length; r++) {
        let s = e[r];
        if (s.from == i.from) {
          s.to != i.to && (e == n && (e = n.slice()), e[r] = s.copy(s.from, i.to), th(e, r + 1, s.copy(i.to, s.to)));
          continue;
        } else {
          s.from < i.to && (e == n && (e = n.slice()), e[t] = i.copy(i.from, s.from), th(e, r, i.copy(s.from, i.to)));
          break;
        }
      }
  }
  return e;
}
function th(n, e, t) {
  for (; e < n.length && Wi(t, n[e]) > 0; )
    e++;
  n.splice(e, 0, t);
}
function Ul(n) {
  let e = [];
  return n.someProp("decorations", (t) => {
    let i = t(n.state);
    i && i != Ot && e.push(i);
  }), n.cursorWrapper && e.push(je.create(n.state.doc, [n.cursorWrapper.deco])), fi.from(e);
}
const Bx = {
  childList: !0,
  characterData: !0,
  characterDataOldValue: !0,
  attributes: !0,
  attributeOldValue: !0,
  subtree: !0
}, Hx = Jt && yi <= 11;
class Fx {
  constructor() {
    this.anchorNode = null, this.anchorOffset = 0, this.focusNode = null, this.focusOffset = 0;
  }
  set(e) {
    this.anchorNode = e.anchorNode, this.anchorOffset = e.anchorOffset, this.focusNode = e.focusNode, this.focusOffset = e.focusOffset;
  }
  clear() {
    this.anchorNode = this.focusNode = null;
  }
  eq(e) {
    return e.anchorNode == this.anchorNode && e.anchorOffset == this.anchorOffset && e.focusNode == this.focusNode && e.focusOffset == this.focusOffset;
  }
}
class Vx {
  constructor(e, t) {
    this.view = e, this.handleDOMChange = t, this.queue = [], this.flushingSoon = -1, this.observer = null, this.currentSelection = new Fx(), this.onCharData = null, this.suppressingSelectionUpdates = !1, this.lastChangedTextNode = null, this.observer = window.MutationObserver && new window.MutationObserver((i) => {
      for (let r = 0; r < i.length; r++)
        this.queue.push(i[r]);
      Jt && yi <= 11 && i.some((r) => r.type == "childList" && r.removedNodes.length || r.type == "characterData" && r.oldValue.length > r.target.nodeValue.length) ? this.flushSoon() : this.flush();
    }), Hx && (this.onCharData = (i) => {
      this.queue.push({ target: i.target, type: "characterData", oldValue: i.prevValue }), this.flushSoon();
    }), this.onSelectionChange = this.onSelectionChange.bind(this);
  }
  flushSoon() {
    this.flushingSoon < 0 && (this.flushingSoon = window.setTimeout(() => {
      this.flushingSoon = -1, this.flush();
    }, 20));
  }
  forceFlush() {
    this.flushingSoon > -1 && (window.clearTimeout(this.flushingSoon), this.flushingSoon = -1, this.flush());
  }
  start() {
    this.observer && (this.observer.takeRecords(), this.observer.observe(this.view.dom, Bx)), this.onCharData && this.view.dom.addEventListener("DOMCharacterDataModified", this.onCharData), this.connectSelection();
  }
  stop() {
    if (this.observer) {
      let e = this.observer.takeRecords();
      if (e.length) {
        for (let t = 0; t < e.length; t++)
          this.queue.push(e[t]);
        window.setTimeout(() => this.flush(), 20);
      }
      this.observer.disconnect();
    }
    this.onCharData && this.view.dom.removeEventListener("DOMCharacterDataModified", this.onCharData), this.disconnectSelection();
  }
  connectSelection() {
    this.view.dom.ownerDocument.addEventListener("selectionchange", this.onSelectionChange);
  }
  disconnectSelection() {
    this.view.dom.ownerDocument.removeEventListener("selectionchange", this.onSelectionChange);
  }
  suppressSelectionUpdates() {
    this.suppressingSelectionUpdates = !0, setTimeout(() => this.suppressingSelectionUpdates = !1, 50);
  }
  onSelectionChange() {
    if (qf(this.view)) {
      if (this.suppressingSelectionUpdates)
        return ei(this.view);
      if (Jt && yi <= 11 && !this.view.state.selection.empty) {
        let e = this.view.domSelectionRange();
        if (e.focusNode && qi(e.focusNode, e.focusOffset, e.anchorNode, e.anchorOffset))
          return this.flushSoon();
      }
      this.flush();
    }
  }
  setCurSelection() {
    this.currentSelection.set(this.view.domSelectionRange());
  }
  ignoreSelectionChange(e) {
    if (!e.focusNode)
      return !0;
    let t = /* @__PURE__ */ new Set(), i;
    for (let s = e.focusNode; s; s = zr(s))
      t.add(s);
    for (let s = e.anchorNode; s; s = zr(s))
      if (t.has(s)) {
        i = s;
        break;
      }
    let r = i && this.view.docView.nearestDesc(i);
    if (r && r.ignoreMutation({
      type: "selection",
      target: i.nodeType == 3 ? i.parentNode : i
    }))
      return this.setCurSelection(), !0;
  }
  pendingRecords() {
    if (this.observer)
      for (let e of this.observer.takeRecords())
        this.queue.push(e);
    return this.queue;
  }
  flush() {
    let { view: e } = this;
    if (!e.docView || this.flushingSoon > -1)
      return;
    let t = this.pendingRecords();
    t.length && (this.queue = []);
    let i = e.domSelectionRange(), r = !this.suppressingSelectionUpdates && !this.currentSelection.eq(i) && qf(e) && !this.ignoreSelectionChange(i), s = -1, o = -1, a = !1, l = [];
    if (e.editable)
      for (let u = 0; u < t.length; u++) {
        let d = this.registerMutation(t[u], l);
        d && (s = s < 0 ? d.from : Math.min(d.from, s), o = o < 0 ? d.to : Math.max(d.to, o), d.typeOver && (a = !0));
      }
    if (Cn && l.length) {
      let u = l.filter((d) => d.nodeName == "BR");
      if (u.length == 2) {
        let [d, f] = u;
        d.parentNode && d.parentNode.parentNode == f.parentNode ? f.remove() : d.remove();
      } else {
        let { focusNode: d } = this.currentSelection;
        for (let f of u) {
          let h = f.parentNode;
          h && h.nodeName == "LI" && (!d || Ux(e, d) != h) && f.remove();
        }
      }
    }
    let c = null;
    s < 0 && r && e.input.lastFocus > Date.now() - 200 && Math.max(e.input.lastTouch, e.input.lastClick.time) < Date.now() - 300 && ol(i) && (c = Hu(e)) && c.eq(pe.near(e.state.doc.resolve(0), 1)) ? (e.input.lastFocus = 0, ei(e), this.currentSelection.set(i), e.scrollToSelection()) : (s > -1 || r) && (s > -1 && (e.docView.markDirty(s, o), jx(e)), this.handleDOMChange(s, o, a, l), e.docView && e.docView.dirty ? e.updateState(e.state) : this.currentSelection.eq(i) || ei(e), this.currentSelection.set(i));
  }
  registerMutation(e, t) {
    if (t.indexOf(e.target) > -1)
      return null;
    let i = this.view.docView.nearestDesc(e.target);
    if (e.type == "attributes" && (i == this.view.docView || e.attributeName == "contenteditable" || // Firefox sometimes fires spurious events for null/empty styles
    e.attributeName == "style" && !e.oldValue && !e.target.getAttribute("style")) || !i || i.ignoreMutation(e))
      return null;
    if (e.type == "childList") {
      for (let u = 0; u < e.addedNodes.length; u++) {
        let d = e.addedNodes[u];
        t.push(d), d.nodeType == 3 && (this.lastChangedTextNode = d);
      }
      if (i.contentDOM && i.contentDOM != i.dom && !i.contentDOM.contains(e.target))
        return { from: i.posBefore, to: i.posAfter };
      let r = e.previousSibling, s = e.nextSibling;
      if (Jt && yi <= 11 && e.addedNodes.length)
        for (let u = 0; u < e.addedNodes.length; u++) {
          let { previousSibling: d, nextSibling: f } = e.addedNodes[u];
          (!d || Array.prototype.indexOf.call(e.addedNodes, d) < 0) && (r = d), (!f || Array.prototype.indexOf.call(e.addedNodes, f) < 0) && (s = f);
        }
      let o = r && r.parentNode == e.target ? St(r) + 1 : 0, a = i.localPosFromDOM(e.target, o, -1), l = s && s.parentNode == e.target ? St(s) : e.target.childNodes.length, c = i.localPosFromDOM(e.target, l, 1);
      return { from: a, to: c };
    } else return e.type == "attributes" ? { from: i.posAtStart - i.border, to: i.posAtEnd + i.border } : (this.lastChangedTextNode = e.target, {
      from: i.posAtStart,
      to: i.posAtEnd,
      // An event was generated for a text change that didn't change
      // any text. Mark the dom change to fall back to assuming the
      // selection was typed over with an identical value if it can't
      // find another change.
      typeOver: e.target.nodeValue == e.oldValue
    });
  }
}
let nh = /* @__PURE__ */ new WeakMap(), ih = !1;
function jx(n) {
  if (!nh.has(n) && (nh.set(n, null), ["normal", "nowrap", "pre-line"].indexOf(getComputedStyle(n.dom).whiteSpace) !== -1)) {
    if (n.requiresGeckoHackNode = Cn, ih)
      return;
    console.warn("ProseMirror expects the CSS white-space property to be set, preferably to 'pre-wrap'. It is recommended to load style/prosemirror.css from the prosemirror-view package."), ih = !0;
  }
}
function rh(n, e) {
  let t = e.startContainer, i = e.startOffset, r = e.endContainer, s = e.endOffset, o = n.domAtPos(n.state.selection.anchor);
  return qi(o.node, o.offset, r, s) && ([t, i, r, s] = [r, s, t, i]), { anchorNode: t, anchorOffset: i, focusNode: r, focusOffset: s };
}
function Wx(n, e) {
  if (e.getComposedRanges) {
    let r = e.getComposedRanges(n.root)[0];
    if (r)
      return rh(n, r);
  }
  let t;
  function i(r) {
    r.preventDefault(), r.stopImmediatePropagation(), t = r.getTargetRanges()[0];
  }
  return n.dom.addEventListener("beforeinput", i, !0), document.execCommand("indent"), n.dom.removeEventListener("beforeinput", i, !0), t ? rh(n, t) : null;
}
function Ux(n, e) {
  for (let t = e.parentNode; t && t != n.dom; t = t.parentNode) {
    let i = n.docView.nearestDesc(t, !0);
    if (i && i.node.isBlock)
      return t;
  }
  return null;
}
function Kx(n, e, t) {
  let { node: i, fromOffset: r, toOffset: s, from: o, to: a } = n.docView.parseRange(e, t), l = n.domSelectionRange(), c, u = l.anchorNode;
  if (u && n.dom.contains(u.nodeType == 1 ? u : u.parentNode) && (c = [{ node: u, offset: l.anchorOffset }], ol(l) || c.push({ node: l.focusNode, offset: l.focusOffset })), Nt && n.input.lastKeyCode === 8)
    for (let m = s; m > r; m--) {
      let g = i.childNodes[m - 1], v = g.pmViewDesc;
      if (g.nodeName == "BR" && !v) {
        s = m;
        break;
      }
      if (!v || v.size)
        break;
    }
  let d = n.state.doc, f = n.someProp("domParser") || vr.fromSchema(n.state.schema), h = d.resolve(o), p = null, b = f.parse(i, {
    topNode: h.parent,
    topMatch: h.parent.contentMatchAt(h.index()),
    topOpen: !0,
    from: r,
    to: s,
    preserveWhitespace: h.parent.type.whitespace == "pre" ? "full" : !0,
    findPositions: c,
    ruleFromNode: qx,
    context: h
  });
  if (c && c[0].pos != null) {
    let m = c[0].pos, g = c[1] && c[1].pos;
    g == null && (g = m), p = { anchor: m + o, head: g + o };
  }
  return { doc: b, sel: p, from: o, to: a };
}
function qx(n) {
  let e = n.pmViewDesc;
  if (e)
    return e.parseRule();
  if (n.nodeName == "BR" && n.parentNode) {
    if (Bt && /^(ul|ol)$/i.test(n.parentNode.nodeName)) {
      let t = document.createElement("div");
      return t.appendChild(document.createElement("li")), { skip: t };
    } else if (n.parentNode.lastChild == n || Bt && /^(tr|table)$/i.test(n.parentNode.nodeName))
      return { ignore: !0 };
  } else if (n.nodeName == "IMG" && n.getAttribute("mark-placeholder"))
    return { ignore: !0 };
  return null;
}
const Gx = /^(a|abbr|acronym|b|bd[io]|big|br|button|cite|code|data(list)?|del|dfn|em|i|ins|kbd|label|map|mark|meter|output|q|ruby|s|samp|small|span|strong|su[bp]|time|u|tt|var)$/i;
function Jx(n, e, t, i, r) {
  let s = n.input.compositionPendingChanges || (n.composing ? n.input.compositionID : 0);
  if (n.input.compositionPendingChanges = 0, e < 0) {
    let T = n.input.lastSelectionTime > Date.now() - 50 ? n.input.lastSelectionOrigin : null, _ = Hu(n, T);
    if (_ && !n.state.selection.eq(_)) {
      if (Nt && Yn && n.input.lastKeyCode === 13 && Date.now() - 100 < n.input.lastKeyCodeTime && n.someProp("handleKeyDown", (M) => M(n, Ni(13, "Enter"))))
        return;
      let C = n.state.tr.setSelection(_);
      T == "pointer" ? C.setMeta("pointer", !0) : T == "key" && C.scrollIntoView(), s && C.setMeta("composition", s), n.dispatch(C);
    }
    return;
  }
  let o = n.state.doc.resolve(e), a = o.sharedDepth(t);
  e = o.before(a + 1), t = n.state.doc.resolve(t).after(a + 1);
  let l = n.state.selection, c = Kx(n, e, t), u = n.state.doc, d = u.slice(c.from, c.to), f, h;
  n.input.lastKeyCode === 8 && Date.now() - 100 < n.input.lastKeyCodeTime ? (f = n.state.selection.to, h = "end") : (f = n.state.selection.from, h = "start"), n.input.lastKeyCode = null;
  let p = Zx(d.content, c.doc.content, c.from, f, h);
  if (p && n.input.domChangeCount++, (Br && n.input.lastIOSEnter > Date.now() - 225 || Yn) && r.some((T) => T.nodeType == 1 && !Gx.test(T.nodeName)) && (!p || p.endA >= p.endB) && n.someProp("handleKeyDown", (T) => T(n, Ni(13, "Enter")))) {
    n.input.lastIOSEnter = 0;
    return;
  }
  if (!p)
    if (i && l instanceof fe && !l.empty && l.$head.sameParent(l.$anchor) && !n.composing && !(c.sel && c.sel.anchor != c.sel.head))
      p = { start: l.from, endA: l.to, endB: l.to };
    else {
      if (c.sel) {
        let T = sh(n, n.state.doc, c.sel);
        if (T && !T.eq(n.state.selection)) {
          let _ = n.state.tr.setSelection(T);
          s && _.setMeta("composition", s), n.dispatch(_);
        }
      }
      return;
    }
  n.state.selection.from < n.state.selection.to && p.start == p.endB && n.state.selection instanceof fe && (p.start > n.state.selection.from && p.start <= n.state.selection.from + 2 && n.state.selection.from >= c.from ? p.start = n.state.selection.from : p.endA < n.state.selection.to && p.endA >= n.state.selection.to - 2 && n.state.selection.to <= c.to && (p.endB += n.state.selection.to - p.endA, p.endA = n.state.selection.to)), Jt && yi <= 11 && p.endB == p.start + 1 && p.endA == p.start && p.start > c.from && c.doc.textBetween(p.start - c.from - 1, p.start - c.from + 1) == "  " && (p.start--, p.endA--, p.endB--);
  let b = c.doc.resolveNoCache(p.start - c.from), m = c.doc.resolveNoCache(p.endB - c.from), g = u.resolve(p.start), v = b.sameParent(m) && b.parent.inlineContent && g.end() >= p.endA, x;
  if ((Br && n.input.lastIOSEnter > Date.now() - 225 && (!v || r.some((T) => T.nodeName == "DIV" || T.nodeName == "P")) || !v && b.pos < c.doc.content.size && !b.sameParent(m) && (x = pe.findFrom(c.doc.resolve(b.pos + 1), 1, !0)) && x.head == m.pos) && n.someProp("handleKeyDown", (T) => T(n, Ni(13, "Enter")))) {
    n.input.lastIOSEnter = 0;
    return;
  }
  if (n.state.selection.anchor > p.start && Yx(u, p.start, p.endA, b, m) && n.someProp("handleKeyDown", (T) => T(n, Ni(8, "Backspace")))) {
    Yn && Nt && n.domObserver.suppressSelectionUpdates();
    return;
  }
  Nt && p.endB == p.start && (n.input.lastChromeDelete = Date.now()), Yn && !v && b.start() != m.start() && m.parentOffset == 0 && b.depth == m.depth && c.sel && c.sel.anchor == c.sel.head && c.sel.head == p.endA && (p.endB -= 2, m = c.doc.resolveNoCache(p.endB - c.from), setTimeout(() => {
    n.someProp("handleKeyDown", function(T) {
      return T(n, Ni(13, "Enter"));
    });
  }, 20));
  let w = p.start, E = p.endA, k, S, y;
  if (v) {
    if (b.pos == m.pos)
      Jt && yi <= 11 && b.parentOffset == 0 && (n.domObserver.suppressSelectionUpdates(), setTimeout(() => ei(n), 20)), k = n.state.tr.delete(w, E), S = u.resolve(p.start).marksAcross(u.resolve(p.endA));
    else if (
      // Adding or removing a mark
      p.endA == p.endB && (y = Xx(b.parent.content.cut(b.parentOffset, m.parentOffset), g.parent.content.cut(g.parentOffset, p.endA - g.start())))
    )
      k = n.state.tr, y.type == "add" ? k.addMark(w, E, y.mark) : k.removeMark(w, E, y.mark);
    else if (b.parent.child(b.index()).isText && b.index() == m.index() - (m.textOffset ? 0 : 1)) {
      let T = b.parent.textBetween(b.parentOffset, m.parentOffset);
      if (n.someProp("handleTextInput", (_) => _(n, w, E, T)))
        return;
      k = n.state.tr.insertText(T, w, E);
    }
  }
  if (k || (k = n.state.tr.replace(w, E, c.doc.slice(p.start - c.from, p.endB - c.from))), c.sel) {
    let T = sh(n, k.doc, c.sel);
    T && !(Nt && n.composing && T.empty && (p.start != p.endB || n.input.lastChromeDelete < Date.now() - 100) && (T.head == w || T.head == k.mapping.map(E) - 1) || Jt && T.empty && T.head == w) && k.setSelection(T);
  }
  S && k.ensureMarks(S), s && k.setMeta("composition", s), n.dispatch(k.scrollIntoView());
}
function sh(n, e, t) {
  return Math.max(t.anchor, t.head) > e.content.size ? null : Fu(n, e.resolve(t.anchor), e.resolve(t.head));
}
function Xx(n, e) {
  let t = n.firstChild.marks, i = e.firstChild.marks, r = t, s = i, o, a, l;
  for (let u = 0; u < i.length; u++)
    r = i[u].removeFromSet(r);
  for (let u = 0; u < t.length; u++)
    s = t[u].removeFromSet(s);
  if (r.length == 1 && s.length == 0)
    a = r[0], o = "add", l = (u) => u.mark(a.addToSet(u.marks));
  else if (r.length == 0 && s.length == 1)
    a = s[0], o = "remove", l = (u) => u.mark(a.removeFromSet(u.marks));
  else
    return null;
  let c = [];
  for (let u = 0; u < e.childCount; u++)
    c.push(l(e.child(u)));
  if ($.from(c).eq(n))
    return { mark: a, type: o };
}
function Yx(n, e, t, i, r) {
  if (
    // The content must have shrunk
    t - e <= r.pos - i.pos || // newEnd must point directly at or after the end of the block that newStart points into
    Kl(i, !0, !1) < r.pos
  )
    return !1;
  let s = n.resolve(e);
  if (!i.parent.isTextblock) {
    let a = s.nodeAfter;
    return a != null && t == e + a.nodeSize;
  }
  if (s.parentOffset < s.parent.content.size || !s.parent.isTextblock)
    return !1;
  let o = n.resolve(Kl(s, !0, !0));
  return !o.parent.isTextblock || o.pos > t || Kl(o, !0, !1) < t ? !1 : i.parent.content.cut(i.parentOffset).eq(o.parent.content);
}
function Kl(n, e, t) {
  let i = n.depth, r = e ? n.end() : n.pos;
  for (; i > 0 && (e || n.indexAfter(i) == n.node(i).childCount); )
    i--, r++, e = !1;
  if (t) {
    let s = n.node(i).maybeChild(n.indexAfter(i));
    for (; s && !s.isLeaf; )
      s = s.firstChild, r++;
  }
  return r;
}
function Zx(n, e, t, i, r) {
  let s = n.findDiffStart(e, t);
  if (s == null)
    return null;
  let { a: o, b: a } = n.findDiffEnd(e, t + n.size, t + e.size);
  if (r == "end") {
    let l = Math.max(0, s - Math.min(o, a));
    i -= o + l - s;
  }
  if (o < s && n.size < e.size) {
    let l = i <= s && i >= o ? s - i : 0;
    s -= l, s && s < e.size && oh(e.textBetween(s - 1, s + 1)) && (s += l ? 1 : -1), a = s + (a - o), o = s;
  } else if (a < s) {
    let l = i <= s && i >= a ? s - i : 0;
    s -= l, s && s < n.size && oh(n.textBetween(s - 1, s + 1)) && (s += l ? 1 : -1), o = s + (o - a), a = s;
  }
  return { start: s, endA: o, endB: a };
}
function oh(n) {
  if (n.length != 2)
    return !1;
  let e = n.charCodeAt(0), t = n.charCodeAt(1);
  return e >= 56320 && e <= 57343 && t >= 55296 && t <= 56319;
}
class Qx {
  /**
  Create a view. `place` may be a DOM node that the editor should
  be appended to, a function that will place it into the document,
  or an object whose `mount` property holds the node to use as the
  document container. If it is `null`, the editor will not be
  added to the document.
  */
  constructor(e, t) {
    this._root = null, this.focused = !1, this.trackWrites = null, this.mounted = !1, this.markCursor = null, this.cursorWrapper = null, this.lastSelectedViewDesc = void 0, this.input = new bx(), this.prevDirectPlugins = [], this.pluginViews = [], this.requiresGeckoHackNode = !1, this.dragging = null, this._props = t, this.state = t.state, this.directPlugins = t.plugins || [], this.directPlugins.forEach(dh), this.dispatch = this.dispatch.bind(this), this.dom = e && e.mount || document.createElement("div"), e && (e.appendChild ? e.appendChild(this.dom) : typeof e == "function" ? e(this.dom) : e.mount && (this.mounted = !0)), this.editable = ch(this), lh(this), this.nodeViews = uh(this), this.docView = Ff(this.state.doc, ah(this), Ul(this), this.dom, this), this.domObserver = new Vx(this, (i, r, s, o) => Jx(this, i, r, s, o)), this.domObserver.start(), vx(this), this.updatePluginViews();
  }
  /**
  Holds `true` when a
  [composition](https://w3c.github.io/uievents/#events-compositionevents)
  is active.
  */
  get composing() {
    return this.input.composing;
  }
  /**
  The view's current [props](https://prosemirror.net/docs/ref/#view.EditorProps).
  */
  get props() {
    if (this._props.state != this.state) {
      let e = this._props;
      this._props = {};
      for (let t in e)
        this._props[t] = e[t];
      this._props.state = this.state;
    }
    return this._props;
  }
  /**
  Update the view's props. Will immediately cause an update to
  the DOM.
  */
  update(e) {
    e.handleDOMEvents != this._props.handleDOMEvents && Qc(this);
    let t = this._props;
    this._props = e, e.plugins && (e.plugins.forEach(dh), this.directPlugins = e.plugins), this.updateStateInner(e.state, t);
  }
  /**
  Update the view by updating existing props object with the object
  given as argument. Equivalent to `view.update(Object.assign({},
  view.props, props))`.
  */
  setProps(e) {
    let t = {};
    for (let i in this._props)
      t[i] = this._props[i];
    t.state = this.state;
    for (let i in e)
      t[i] = e[i];
    this.update(t);
  }
  /**
  Update the editor's `state` prop, without touching any of the
  other props.
  */
  updateState(e) {
    this.updateStateInner(e, this._props);
  }
  updateStateInner(e, t) {
    var i;
    let r = this.state, s = !1, o = !1;
    e.storedMarks && this.composing && (dg(this), o = !0), this.state = e;
    let a = r.plugins != e.plugins || this._props.plugins != t.plugins;
    if (a || this._props.plugins != t.plugins || this._props.nodeViews != t.nodeViews) {
      let h = uh(this);
      tw(h, this.nodeViews) && (this.nodeViews = h, s = !0);
    }
    (a || t.handleDOMEvents != this._props.handleDOMEvents) && Qc(this), this.editable = ch(this), lh(this);
    let l = Ul(this), c = ah(this), u = r.plugins != e.plugins && !r.doc.eq(e.doc) ? "reset" : e.scrollToSelection > r.scrollToSelection ? "to selection" : "preserve", d = s || !this.docView.matchesNode(e.doc, c, l);
    (d || !e.selection.eq(r.selection)) && (o = !0);
    let f = u == "preserve" && o && this.dom.style.overflowAnchor == null && Ry(this);
    if (o) {
      this.domObserver.stop();
      let h = d && (Jt || Nt) && !this.composing && !r.selection.empty && !e.selection.empty && ew(r.selection, e.selection);
      if (d) {
        let p = Nt ? this.trackWrites = this.domSelectionRange().focusNode : null;
        this.composing && (this.input.compositionNode = Lx(this)), (s || !this.docView.update(e.doc, c, l, this)) && (this.docView.updateOuterDeco(c), this.docView.destroy(), this.docView = Ff(e.doc, c, l, this.dom, this)), p && !this.trackWrites && (h = !0);
      }
      h || !(this.input.mouseDown && this.domObserver.currentSelection.eq(this.domSelectionRange()) && ix(this)) ? ei(this, h) : (Qm(this, e.selection), this.domObserver.setCurSelection()), this.domObserver.start();
    }
    this.updatePluginViews(r), !((i = this.dragging) === null || i === void 0) && i.node && !r.doc.eq(e.doc) && this.updateDraggedNode(this.dragging, r), u == "reset" ? this.dom.scrollTop = 0 : u == "to selection" ? this.scrollToSelection() : f && Iy(f);
  }
  /**
  @internal
  */
  scrollToSelection() {
    let e = this.domSelectionRange().focusNode;
    if (!(!e || !this.dom.contains(e.nodeType == 1 ? e : e.parentNode))) {
      if (!this.someProp("handleScrollToSelection", (t) => t(this))) if (this.state.selection instanceof le) {
        let t = this.docView.domAfterPos(this.state.selection.from);
        t.nodeType == 1 && Pf(this, t.getBoundingClientRect(), e);
      } else
        Pf(this, this.coordsAtPos(this.state.selection.head, 1), e);
    }
  }
  destroyPluginViews() {
    let e;
    for (; e = this.pluginViews.pop(); )
      e.destroy && e.destroy();
  }
  updatePluginViews(e) {
    if (!e || e.plugins != this.state.plugins || this.directPlugins != this.prevDirectPlugins) {
      this.prevDirectPlugins = this.directPlugins, this.destroyPluginViews();
      for (let t = 0; t < this.directPlugins.length; t++) {
        let i = this.directPlugins[t];
        i.spec.view && this.pluginViews.push(i.spec.view(this));
      }
      for (let t = 0; t < this.state.plugins.length; t++) {
        let i = this.state.plugins[t];
        i.spec.view && this.pluginViews.push(i.spec.view(this));
      }
    } else
      for (let t = 0; t < this.pluginViews.length; t++) {
        let i = this.pluginViews[t];
        i.update && i.update(this, e);
      }
  }
  updateDraggedNode(e, t) {
    let i = e.node, r = -1;
    if (this.state.doc.nodeAt(i.from) == i.node)
      r = i.from;
    else {
      let s = i.from + (this.state.doc.content.size - t.doc.content.size);
      (s > 0 && this.state.doc.nodeAt(s)) == i.node && (r = s);
    }
    this.dragging = new hg(e.slice, e.move, r < 0 ? void 0 : le.create(this.state.doc, r));
  }
  someProp(e, t) {
    let i = this._props && this._props[e], r;
    if (i != null && (r = t ? t(i) : i))
      return r;
    for (let o = 0; o < this.directPlugins.length; o++) {
      let a = this.directPlugins[o].props[e];
      if (a != null && (r = t ? t(a) : a))
        return r;
    }
    let s = this.state.plugins;
    if (s)
      for (let o = 0; o < s.length; o++) {
        let a = s[o].props[e];
        if (a != null && (r = t ? t(a) : a))
          return r;
      }
  }
  /**
  Query whether the view has focus.
  */
  hasFocus() {
    if (Jt) {
      let e = this.root.activeElement;
      if (e == this.dom)
        return !0;
      if (!e || !this.dom.contains(e))
        return !1;
      for (; e && this.dom != e && this.dom.contains(e); ) {
        if (e.contentEditable == "false")
          return !1;
        e = e.parentElement;
      }
      return !0;
    }
    return this.root.activeElement == this.dom;
  }
  /**
  Focus the editor.
  */
  focus() {
    this.domObserver.stop(), this.editable && Py(this.dom), ei(this), this.domObserver.start();
  }
  /**
  Get the document root in which the editor exists. This will
  usually be the top-level `document`, but might be a [shadow
  DOM](https://developer.mozilla.org/en-US/docs/Web/Web_Components/Shadow_DOM)
  root if the editor is inside one.
  */
  get root() {
    let e = this._root;
    if (e == null) {
      for (let t = this.dom.parentNode; t; t = t.parentNode)
        if (t.nodeType == 9 || t.nodeType == 11 && t.host)
          return t.getSelection || (Object.getPrototypeOf(t).getSelection = () => t.ownerDocument.getSelection()), this._root = t;
    }
    return e || document;
  }
  /**
  When an existing editor view is moved to a new document or
  shadow tree, call this to make it recompute its root.
  */
  updateRoot() {
    this._root = null;
  }
  /**
  Given a pair of viewport coordinates, return the document
  position that corresponds to them. May return null if the given
  coordinates aren't inside of the editor. When an object is
  returned, its `pos` property is the position nearest to the
  coordinates, and its `inside` property holds the position of the
  inner node that the position falls inside of, or -1 if it is at
  the top level, not in any node.
  */
  posAtCoords(e) {
    return Hy(this, e);
  }
  /**
  Returns the viewport rectangle at a given document position.
  `left` and `right` will be the same number, as this returns a
  flat cursor-ish rectangle. If the position is between two things
  that aren't directly adjacent, `side` determines which element
  is used. When < 0, the element before the position is used,
  otherwise the element after.
  */
  coordsAtPos(e, t = 1) {
    return Um(this, e, t);
  }
  /**
  Find the DOM position that corresponds to the given document
  position. When `side` is negative, find the position as close as
  possible to the content before the position. When positive,
  prefer positions close to the content after the position. When
  zero, prefer as shallow a position as possible.
  
  Note that you should **not** mutate the editor's internal DOM,
  only inspect it (and even that is usually not necessary).
  */
  domAtPos(e, t = 0) {
    return this.docView.domFromPos(e, t);
  }
  /**
  Find the DOM node that represents the document node after the
  given position. May return `null` when the position doesn't point
  in front of a node or if the node is inside an opaque node view.
  
  This is intended to be able to call things like
  `getBoundingClientRect` on that DOM node. Do **not** mutate the
  editor DOM directly, or add styling this way, since that will be
  immediately overriden by the editor as it redraws the node.
  */
  nodeDOM(e) {
    let t = this.docView.descAt(e);
    return t ? t.nodeDOM : null;
  }
  /**
  Find the document position that corresponds to a given DOM
  position. (Whenever possible, it is preferable to inspect the
  document structure directly, rather than poking around in the
  DOM, but sometimes—for example when interpreting an event
  target—you don't have a choice.)
  
  The `bias` parameter can be used to influence which side of a DOM
  node to use when the position is inside a leaf node.
  */
  posAtDOM(e, t, i = -1) {
    let r = this.docView.posFromDOM(e, t, i);
    if (r == null)
      throw new RangeError("DOM position not inside the editor");
    return r;
  }
  /**
  Find out whether the selection is at the end of a textblock when
  moving in a given direction. When, for example, given `"left"`,
  it will return true if moving left from the current cursor
  position would leave that position's parent textblock. Will apply
  to the view's current state by default, but it is possible to
  pass a different state.
  */
  endOfTextblock(e, t) {
    return Uy(this, t || this.state, e);
  }
  /**
  Run the editor's paste logic with the given HTML string. The
  `event`, if given, will be passed to the
  [`handlePaste`](https://prosemirror.net/docs/ref/#view.EditorProps.handlePaste) hook.
  */
  pasteHTML(e, t) {
    return Fs(this, "", e, !1, t || new ClipboardEvent("paste"));
  }
  /**
  Run the editor's paste logic with the given plain-text input.
  */
  pasteText(e, t) {
    return Fs(this, e, null, !0, t || new ClipboardEvent("paste"));
  }
  /**
  Serialize the given slice as it would be if it was copied from
  this editor. Returns a DOM element that contains a
  representation of the slice as its children, a textual
  representation, and the transformed slice (which can be
  different from the given input due to hooks like
  [`transformCopied`](https://prosemirror.net/docs/ref/#view.EditorProps.transformCopied)).
  */
  serializeForClipboard(e) {
    return Vu(this, e);
  }
  /**
  Removes the editor from the DOM and destroys all [node
  views](https://prosemirror.net/docs/ref/#view.NodeView).
  */
  destroy() {
    this.docView && (yx(this), this.destroyPluginViews(), this.mounted ? (this.docView.update(this.state.doc, [], Ul(this), this), this.dom.textContent = "") : this.dom.parentNode && this.dom.parentNode.removeChild(this.dom), this.docView.destroy(), this.docView = null, wy());
  }
  /**
  This is true when the view has been
  [destroyed](https://prosemirror.net/docs/ref/#view.EditorView.destroy) (and thus should not be
  used anymore).
  */
  get isDestroyed() {
    return this.docView == null;
  }
  /**
  Used for testing.
  */
  dispatchEvent(e) {
    return wx(this, e);
  }
  /**
  Dispatch a transaction. Will call
  [`dispatchTransaction`](https://prosemirror.net/docs/ref/#view.DirectEditorProps.dispatchTransaction)
  when given, and otherwise defaults to applying the transaction to
  the current state and calling
  [`updateState`](https://prosemirror.net/docs/ref/#view.EditorView.updateState) with the result.
  This method is bound to the view instance, so that it can be
  easily passed around.
  */
  dispatch(e) {
    let t = this._props.dispatchTransaction;
    t ? t.call(this, e) : this.updateState(this.state.apply(e));
  }
  /**
  @internal
  */
  domSelectionRange() {
    let e = this.domSelection();
    return e ? Bt && this.root.nodeType === 11 && Ty(this.dom.ownerDocument) == this.dom && Wx(this, e) || e : { focusNode: null, focusOffset: 0, anchorNode: null, anchorOffset: 0 };
  }
  /**
  @internal
  */
  domSelection() {
    return this.root.getSelection();
  }
}
function ah(n) {
  let e = /* @__PURE__ */ Object.create(null);
  return e.class = "ProseMirror", e.contenteditable = String(n.editable), n.someProp("attributes", (t) => {
    if (typeof t == "function" && (t = t(n.state)), t)
      for (let i in t)
        i == "class" ? e.class += " " + t[i] : i == "style" ? e.style = (e.style ? e.style + ";" : "") + t[i] : !e[i] && i != "contenteditable" && i != "nodeName" && (e[i] = String(t[i]));
  }), e.translate || (e.translate = "no"), [bt.node(0, n.state.doc.content.size, e)];
}
function lh(n) {
  if (n.markCursor) {
    let e = document.createElement("img");
    e.className = "ProseMirror-separator", e.setAttribute("mark-placeholder", "true"), e.setAttribute("alt", ""), n.cursorWrapper = { dom: e, deco: bt.widget(n.state.selection.from, e, { raw: !0, marks: n.markCursor }) };
  } else
    n.cursorWrapper = null;
}
function ch(n) {
  return !n.someProp("editable", (e) => e(n.state) === !1);
}
function ew(n, e) {
  let t = Math.min(n.$anchor.sharedDepth(n.head), e.$anchor.sharedDepth(e.head));
  return n.$anchor.start(t) != e.$anchor.start(t);
}
function uh(n) {
  let e = /* @__PURE__ */ Object.create(null);
  function t(i) {
    for (let r in i)
      Object.prototype.hasOwnProperty.call(e, r) || (e[r] = i[r]);
  }
  return n.someProp("nodeViews", t), n.someProp("markViews", t), e;
}
function tw(n, e) {
  let t = 0, i = 0;
  for (let r in n) {
    if (n[r] != e[r])
      return !0;
    t++;
  }
  for (let r in e)
    i++;
  return t != i;
}
function dh(n) {
  if (n.spec.state || n.spec.filterTransaction || n.spec.appendTransaction)
    throw new RangeError("Plugins passed directly to the view must not have a state component");
}
var Si = {
  8: "Backspace",
  9: "Tab",
  10: "Enter",
  12: "NumLock",
  13: "Enter",
  16: "Shift",
  17: "Control",
  18: "Alt",
  20: "CapsLock",
  27: "Escape",
  32: " ",
  33: "PageUp",
  34: "PageDown",
  35: "End",
  36: "Home",
  37: "ArrowLeft",
  38: "ArrowUp",
  39: "ArrowRight",
  40: "ArrowDown",
  44: "PrintScreen",
  45: "Insert",
  46: "Delete",
  59: ";",
  61: "=",
  91: "Meta",
  92: "Meta",
  106: "*",
  107: "+",
  108: ",",
  109: "-",
  110: ".",
  111: "/",
  144: "NumLock",
  145: "ScrollLock",
  160: "Shift",
  161: "Shift",
  162: "Control",
  163: "Control",
  164: "Alt",
  165: "Alt",
  173: "-",
  186: ";",
  187: "=",
  188: ",",
  189: "-",
  190: ".",
  191: "/",
  192: "`",
  219: "[",
  220: "\\",
  221: "]",
  222: "'"
}, _a = {
  48: ")",
  49: "!",
  50: "@",
  51: "#",
  52: "$",
  53: "%",
  54: "^",
  55: "&",
  56: "*",
  57: "(",
  59: ":",
  61: "+",
  173: "_",
  186: ":",
  187: "+",
  188: "<",
  189: "_",
  190: ">",
  191: "?",
  192: "~",
  219: "{",
  220: "|",
  221: "}",
  222: '"'
}, nw = typeof navigator < "u" && /Mac/.test(navigator.platform), iw = typeof navigator < "u" && /MSIE \d|Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(navigator.userAgent);
for (var Et = 0; Et < 10; Et++) Si[48 + Et] = Si[96 + Et] = String(Et);
for (var Et = 1; Et <= 24; Et++) Si[Et + 111] = "F" + Et;
for (var Et = 65; Et <= 90; Et++)
  Si[Et] = String.fromCharCode(Et + 32), _a[Et] = String.fromCharCode(Et);
for (var ql in Si) _a.hasOwnProperty(ql) || (_a[ql] = Si[ql]);
function rw(n) {
  var e = nw && n.metaKey && n.shiftKey && !n.ctrlKey && !n.altKey || iw && n.shiftKey && n.key && n.key.length == 1 || n.key == "Unidentified", t = !e && n.key || (n.shiftKey ? _a : Si)[n.keyCode] || n.key || "Unidentified";
  return t == "Esc" && (t = "Escape"), t == "Del" && (t = "Delete"), t == "Left" && (t = "ArrowLeft"), t == "Up" && (t = "ArrowUp"), t == "Right" && (t = "ArrowRight"), t == "Down" && (t = "ArrowDown"), t;
}
const sw = typeof navigator < "u" ? /Mac|iP(hone|[oa]d)/.test(navigator.platform) : !1;
function ow(n) {
  let e = n.split(/-(?!$)/), t = e[e.length - 1];
  t == "Space" && (t = " ");
  let i, r, s, o;
  for (let a = 0; a < e.length - 1; a++) {
    let l = e[a];
    if (/^(cmd|meta|m)$/i.test(l))
      o = !0;
    else if (/^a(lt)?$/i.test(l))
      i = !0;
    else if (/^(c|ctrl|control)$/i.test(l))
      r = !0;
    else if (/^s(hift)?$/i.test(l))
      s = !0;
    else if (/^mod$/i.test(l))
      sw ? o = !0 : r = !0;
    else
      throw new Error("Unrecognized modifier name: " + l);
  }
  return i && (t = "Alt-" + t), r && (t = "Ctrl-" + t), o && (t = "Meta-" + t), s && (t = "Shift-" + t), t;
}
function aw(n) {
  let e = /* @__PURE__ */ Object.create(null);
  for (let t in n)
    e[ow(t)] = n[t];
  return e;
}
function Gl(n, e, t = !0) {
  return e.altKey && (n = "Alt-" + n), e.ctrlKey && (n = "Ctrl-" + n), e.metaKey && (n = "Meta-" + n), t && e.shiftKey && (n = "Shift-" + n), n;
}
function lw(n) {
  return new Je({ props: { handleKeyDown: Gu(n) } });
}
function Gu(n) {
  let e = aw(n);
  return function(t, i) {
    let r = rw(i), s, o = e[Gl(r, i)];
    if (o && o(t.state, t.dispatch, t))
      return !0;
    if (r.length == 1 && r != " ") {
      if (i.shiftKey) {
        let a = e[Gl(r, i, !1)];
        if (a && a(t.state, t.dispatch, t))
          return !0;
      }
      if ((i.shiftKey || i.altKey || i.metaKey || r.charCodeAt(0) > 127) && (s = Si[i.keyCode]) && s != r) {
        let a = e[Gl(s, i)];
        if (a && a(t.state, t.dispatch, t))
          return !0;
      }
    }
    return !1;
  };
}
const Ju = (n, e) => n.selection.empty ? !1 : (e && e(n.tr.deleteSelection().scrollIntoView()), !0);
function bg(n, e) {
  let { $cursor: t } = n.selection;
  return !t || (e ? !e.endOfTextblock("backward", n) : t.parentOffset > 0) ? null : t;
}
const vg = (n, e, t) => {
  let i = bg(n, t);
  if (!i)
    return !1;
  let r = Xu(i);
  if (!r) {
    let o = i.blockRange(), a = o && Kr(o);
    return a == null ? !1 : (e && e(n.tr.lift(o, a).scrollIntoView()), !0);
  }
  let s = r.nodeBefore;
  if (Ag(n, r, e, -1))
    return !0;
  if (i.parent.content.size == 0 && (Hr(s, "end") || le.isSelectable(s)))
    for (let o = i.depth; ; o--) {
      let a = rl(n.doc, i.before(o), i.after(o), X.empty);
      if (a && a.slice.size < a.to - a.from) {
        if (e) {
          let l = n.tr.step(a);
          l.setSelection(Hr(s, "end") ? pe.findFrom(l.doc.resolve(l.mapping.map(r.pos, -1)), -1) : le.create(l.doc, r.pos - s.nodeSize)), e(l.scrollIntoView());
        }
        return !0;
      }
      if (o == 1 || i.node(o - 1).childCount > 1)
        break;
    }
  return s.isAtom && r.depth == i.depth - 1 ? (e && e(n.tr.delete(r.pos - s.nodeSize, r.pos).scrollIntoView()), !0) : !1;
}, cw = (n, e, t) => {
  let i = bg(n, t);
  if (!i)
    return !1;
  let r = Xu(i);
  return r ? yg(n, r, e) : !1;
}, uw = (n, e, t) => {
  let i = wg(n, t);
  if (!i)
    return !1;
  let r = Yu(i);
  return r ? yg(n, r, e) : !1;
};
function yg(n, e, t) {
  let i = e.nodeBefore, r = i, s = e.pos - 1;
  for (; !r.isTextblock; s--) {
    if (r.type.spec.isolating)
      return !1;
    let u = r.lastChild;
    if (!u)
      return !1;
    r = u;
  }
  let o = e.nodeAfter, a = o, l = e.pos + 1;
  for (; !a.isTextblock; l++) {
    if (a.type.spec.isolating)
      return !1;
    let u = a.firstChild;
    if (!u)
      return !1;
    a = u;
  }
  let c = rl(n.doc, s, l, X.empty);
  if (!c || c.from != s || c instanceof _t && c.slice.size >= l - s)
    return !1;
  if (t) {
    let u = n.tr.step(c);
    u.setSelection(fe.create(u.doc, s)), t(u.scrollIntoView());
  }
  return !0;
}
function Hr(n, e, t = !1) {
  for (let i = n; i; i = e == "start" ? i.firstChild : i.lastChild) {
    if (i.isTextblock)
      return !0;
    if (t && i.childCount != 1)
      return !1;
  }
  return !1;
}
const xg = (n, e, t) => {
  let { $head: i, empty: r } = n.selection, s = i;
  if (!r)
    return !1;
  if (i.parent.isTextblock) {
    if (t ? !t.endOfTextblock("backward", n) : i.parentOffset > 0)
      return !1;
    s = Xu(i);
  }
  let o = s && s.nodeBefore;
  return !o || !le.isSelectable(o) ? !1 : (e && e(n.tr.setSelection(le.create(n.doc, s.pos - o.nodeSize)).scrollIntoView()), !0);
};
function Xu(n) {
  if (!n.parent.type.spec.isolating)
    for (let e = n.depth - 1; e >= 0; e--) {
      if (n.index(e) > 0)
        return n.doc.resolve(n.before(e + 1));
      if (n.node(e).type.spec.isolating)
        break;
    }
  return null;
}
function wg(n, e) {
  let { $cursor: t } = n.selection;
  return !t || (e ? !e.endOfTextblock("forward", n) : t.parentOffset < t.parent.content.size) ? null : t;
}
const kg = (n, e, t) => {
  let i = wg(n, t);
  if (!i)
    return !1;
  let r = Yu(i);
  if (!r)
    return !1;
  let s = r.nodeAfter;
  if (Ag(n, r, e, 1))
    return !0;
  if (i.parent.content.size == 0 && (Hr(s, "start") || le.isSelectable(s))) {
    let o = rl(n.doc, i.before(), i.after(), X.empty);
    if (o && o.slice.size < o.to - o.from) {
      if (e) {
        let a = n.tr.step(o);
        a.setSelection(Hr(s, "start") ? pe.findFrom(a.doc.resolve(a.mapping.map(r.pos)), 1) : le.create(a.doc, a.mapping.map(r.pos))), e(a.scrollIntoView());
      }
      return !0;
    }
  }
  return s.isAtom && r.depth == i.depth - 1 ? (e && e(n.tr.delete(r.pos, r.pos + s.nodeSize).scrollIntoView()), !0) : !1;
}, Sg = (n, e, t) => {
  let { $head: i, empty: r } = n.selection, s = i;
  if (!r)
    return !1;
  if (i.parent.isTextblock) {
    if (t ? !t.endOfTextblock("forward", n) : i.parentOffset < i.parent.content.size)
      return !1;
    s = Yu(i);
  }
  let o = s && s.nodeAfter;
  return !o || !le.isSelectable(o) ? !1 : (e && e(n.tr.setSelection(le.create(n.doc, s.pos)).scrollIntoView()), !0);
};
function Yu(n) {
  if (!n.parent.type.spec.isolating)
    for (let e = n.depth - 1; e >= 0; e--) {
      let t = n.node(e);
      if (n.index(e) + 1 < t.childCount)
        return n.doc.resolve(n.after(e + 1));
      if (t.type.spec.isolating)
        break;
    }
  return null;
}
const dw = (n, e) => {
  let t = n.selection, i = t instanceof le, r;
  if (i) {
    if (t.node.isTextblock || !Ei(n.doc, t.from))
      return !1;
    r = t.from;
  } else if (r = il(n.doc, t.from, -1), r == null)
    return !1;
  if (e) {
    let s = n.tr.join(r);
    i && s.setSelection(le.create(s.doc, r - n.doc.resolve(r).nodeBefore.nodeSize)), e(s.scrollIntoView());
  }
  return !0;
}, fw = (n, e) => {
  let t = n.selection, i;
  if (t instanceof le) {
    if (t.node.isTextblock || !Ei(n.doc, t.to))
      return !1;
    i = t.to;
  } else if (i = il(n.doc, t.to, 1), i == null)
    return !1;
  return e && e(n.tr.join(i).scrollIntoView()), !0;
}, hw = (n, e) => {
  let { $from: t, $to: i } = n.selection, r = t.blockRange(i), s = r && Kr(r);
  return s == null ? !1 : (e && e(n.tr.lift(r, s).scrollIntoView()), !0);
}, Eg = (n, e) => {
  let { $head: t, $anchor: i } = n.selection;
  return !t.parent.type.spec.code || !t.sameParent(i) ? !1 : (e && e(n.tr.insertText(`
`).scrollIntoView()), !0);
};
function Zu(n) {
  for (let e = 0; e < n.edgeCount; e++) {
    let { type: t } = n.edge(e);
    if (t.isTextblock && !t.hasRequiredAttrs())
      return t;
  }
  return null;
}
const pw = (n, e) => {
  let { $head: t, $anchor: i } = n.selection;
  if (!t.parent.type.spec.code || !t.sameParent(i))
    return !1;
  let r = t.node(-1), s = t.indexAfter(-1), o = Zu(r.contentMatchAt(s));
  if (!o || !r.canReplaceWith(s, s, o))
    return !1;
  if (e) {
    let a = t.after(), l = n.tr.replaceWith(a, a, o.createAndFill());
    l.setSelection(pe.near(l.doc.resolve(a), 1)), e(l.scrollIntoView());
  }
  return !0;
}, Cg = (n, e) => {
  let t = n.selection, { $from: i, $to: r } = t;
  if (t instanceof Gt || i.parent.inlineContent || r.parent.inlineContent)
    return !1;
  let s = Zu(r.parent.contentMatchAt(r.indexAfter()));
  if (!s || !s.isTextblock)
    return !1;
  if (e) {
    let o = (!i.parentOffset && r.index() < r.parent.childCount ? i : r).pos, a = n.tr.insert(o, s.createAndFill());
    a.setSelection(fe.create(a.doc, o + 1)), e(a.scrollIntoView());
  }
  return !0;
}, Tg = (n, e) => {
  let { $cursor: t } = n.selection;
  if (!t || t.parent.content.size)
    return !1;
  if (t.depth > 1 && t.after() != t.end(-1)) {
    let s = t.before();
    if (Qn(n.doc, s))
      return e && e(n.tr.split(s).scrollIntoView()), !0;
  }
  let i = t.blockRange(), r = i && Kr(i);
  return r == null ? !1 : (e && e(n.tr.lift(i, r).scrollIntoView()), !0);
};
function mw(n) {
  return (e, t) => {
    let { $from: i, $to: r } = e.selection;
    if (e.selection instanceof le && e.selection.node.isBlock)
      return !i.parentOffset || !Qn(e.doc, i.pos) ? !1 : (t && t(e.tr.split(i.pos).scrollIntoView()), !0);
    if (!i.depth)
      return !1;
    let s = [], o, a, l = !1, c = !1;
    for (let h = i.depth; ; h--)
      if (i.node(h).isBlock) {
        l = i.end(h) == i.pos + (i.depth - h), c = i.start(h) == i.pos - (i.depth - h), a = Zu(i.node(h - 1).contentMatchAt(i.indexAfter(h - 1))), s.unshift(l && a ? { type: a } : null), o = h;
        break;
      } else {
        if (h == 1)
          return !1;
        s.unshift(null);
      }
    let u = e.tr;
    (e.selection instanceof fe || e.selection instanceof Gt) && u.deleteSelection();
    let d = u.mapping.map(i.pos), f = Qn(u.doc, d, s.length, s);
    if (f || (s[0] = a ? { type: a } : null, f = Qn(u.doc, d, s.length, s)), u.split(d, s.length, s), !l && c && i.node(o).type != a) {
      let h = u.mapping.map(i.before(o)), p = u.doc.resolve(h);
      a && i.node(o - 1).canReplaceWith(p.index(), p.index() + 1, a) && u.setNodeMarkup(u.mapping.map(i.before(o)), a);
    }
    return t && t(u.scrollIntoView()), !0;
  };
}
const gw = mw(), _w = (n, e) => {
  let { $from: t, to: i } = n.selection, r, s = t.sharedDepth(i);
  return s == 0 ? !1 : (r = t.before(s), e && e(n.tr.setSelection(le.create(n.doc, r))), !0);
};
function bw(n, e, t) {
  let i = e.nodeBefore, r = e.nodeAfter, s = e.index();
  return !i || !r || !i.type.compatibleContent(r.type) ? !1 : !i.content.size && e.parent.canReplace(s - 1, s) ? (t && t(n.tr.delete(e.pos - i.nodeSize, e.pos).scrollIntoView()), !0) : !e.parent.canReplace(s, s + 1) || !(r.isTextblock || Ei(n.doc, e.pos)) ? !1 : (t && t(n.tr.join(e.pos).scrollIntoView()), !0);
}
function Ag(n, e, t, i) {
  let r = e.nodeBefore, s = e.nodeAfter, o, a, l = r.type.spec.isolating || s.type.spec.isolating;
  if (!l && bw(n, e, t))
    return !0;
  let c = !l && e.parent.canReplace(e.index(), e.index() + 1);
  if (c && (o = (a = r.contentMatchAt(r.childCount)).findWrapping(s.type)) && a.matchType(o[0] || s.type).validEnd) {
    if (t) {
      let h = e.pos + s.nodeSize, p = $.empty;
      for (let g = o.length - 1; g >= 0; g--)
        p = $.from(o[g].create(null, p));
      p = $.from(r.copy(p));
      let b = n.tr.step(new vt(e.pos - 1, h, e.pos, h, new X(p, 1, 0), o.length, !0)), m = b.doc.resolve(h + 2 * o.length);
      m.nodeAfter && m.nodeAfter.type == r.type && Ei(b.doc, m.pos) && b.join(m.pos), t(b.scrollIntoView());
    }
    return !0;
  }
  let u = s.type.spec.isolating || i > 0 && l ? null : pe.findFrom(e, 1), d = u && u.$from.blockRange(u.$to), f = d && Kr(d);
  if (f != null && f >= e.depth)
    return t && t(n.tr.lift(d, f).scrollIntoView()), !0;
  if (c && Hr(s, "start", !0) && Hr(r, "end")) {
    let h = r, p = [];
    for (; p.push(h), !h.isTextblock; )
      h = h.lastChild;
    let b = s, m = 1;
    for (; !b.isTextblock; b = b.firstChild)
      m++;
    if (h.canReplace(h.childCount, h.childCount, b.content)) {
      if (t) {
        let g = $.empty;
        for (let x = p.length - 1; x >= 0; x--)
          g = $.from(p[x].copy(g));
        let v = n.tr.step(new vt(e.pos - p.length, e.pos + s.nodeSize, e.pos + m, e.pos + s.nodeSize - m, new X(g, p.length, 0), 0, !0));
        t(v.scrollIntoView());
      }
      return !0;
    }
  }
  return !1;
}
function Mg(n) {
  return function(e, t) {
    let i = e.selection, r = n < 0 ? i.$from : i.$to, s = r.depth;
    for (; r.node(s).isInline; ) {
      if (!s)
        return !1;
      s--;
    }
    return r.node(s).isTextblock ? (t && t(e.tr.setSelection(fe.create(e.doc, n < 0 ? r.start(s) : r.end(s)))), !0) : !1;
  };
}
const vw = Mg(-1), yw = Mg(1);
function xw(n, e = null) {
  return function(t, i) {
    let { $from: r, $to: s } = t.selection, o = r.blockRange(s), a = o && Du(o, n, e);
    return a ? (i && i(t.tr.wrap(o, a).scrollIntoView()), !0) : !1;
  };
}
function fh(n, e = null) {
  return function(t, i) {
    let r = !1;
    for (let s = 0; s < t.selection.ranges.length && !r; s++) {
      let { $from: { pos: o }, $to: { pos: a } } = t.selection.ranges[s];
      t.doc.nodesBetween(o, a, (l, c) => {
        if (r)
          return !1;
        if (!(!l.isTextblock || l.hasMarkup(n, e)))
          if (l.type == n)
            r = !0;
          else {
            let u = t.doc.resolve(c), d = u.index();
            r = u.parent.canReplaceWith(d, d + 1, n);
          }
      });
    }
    if (!r)
      return !1;
    if (i) {
      let s = t.tr;
      for (let o = 0; o < t.selection.ranges.length; o++) {
        let { $from: { pos: a }, $to: { pos: l } } = t.selection.ranges[o];
        s.setBlockType(a, l, n, e);
      }
      i(s.scrollIntoView());
    }
    return !0;
  };
}
function Qu(...n) {
  return function(e, t, i) {
    for (let r = 0; r < n.length; r++)
      if (n[r](e, t, i))
        return !0;
    return !1;
  };
}
Qu(Ju, vg, xg);
Qu(Ju, kg, Sg);
Qu(Eg, Cg, Tg, gw);
typeof navigator < "u" ? /Mac|iP(hone|[oa]d)/.test(navigator.platform) : typeof os < "u" && os.platform && os.platform() == "darwin";
function ww(n, e = null) {
  return function(t, i) {
    let { $from: r, $to: s } = t.selection, o = r.blockRange(s);
    if (!o)
      return !1;
    let a = i ? t.tr : null;
    return kw(a, o, n, e) ? (i && i(a.scrollIntoView()), !0) : !1;
  };
}
function kw(n, e, t, i = null) {
  let r = !1, s = e, o = e.$from.doc;
  if (e.depth >= 2 && e.$from.node(e.depth - 1).type.compatibleContent(t) && e.startIndex == 0) {
    if (e.$from.index(e.depth - 1) == 0)
      return !1;
    let l = o.resolve(e.start - 2);
    s = new ua(l, l, e.depth), e.endIndex < e.parent.childCount && (e = new ua(e.$from, o.resolve(e.$to.end(e.depth)), e.depth)), r = !0;
  }
  let a = Du(s, t, i, e);
  return a ? (n && Sw(n, e, a, r, t), !0) : !1;
}
function Sw(n, e, t, i, r) {
  let s = $.empty;
  for (let u = t.length - 1; u >= 0; u--)
    s = $.from(t[u].type.create(t[u].attrs, s));
  n.step(new vt(e.start - (i ? 2 : 0), e.end, e.start, e.end, new X(s, 0, 0), t.length, !0));
  let o = 0;
  for (let u = 0; u < t.length; u++)
    t[u].type == r && (o = u + 1);
  let a = t.length - o, l = e.start + t.length - (i ? 2 : 0), c = e.parent;
  for (let u = e.startIndex, d = e.endIndex, f = !0; u < d; u++, f = !1)
    !f && Qn(n.doc, l, a) && (n.split(l, a), l += 2 * a), l += c.child(u).nodeSize;
  return n;
}
function Ew(n) {
  return function(e, t) {
    let { $from: i, $to: r } = e.selection, s = i.blockRange(r, (o) => o.childCount > 0 && o.firstChild.type == n);
    return s ? t ? i.node(s.depth - 1).type == n ? Cw(e, t, n, s) : Tw(e, t, s) : !0 : !1;
  };
}
function Cw(n, e, t, i) {
  let r = n.tr, s = i.end, o = i.$to.end(i.depth);
  s < o && (r.step(new vt(s - 1, o, s, o, new X($.from(t.create(null, i.parent.copy())), 1, 0), 1, !0)), i = new ua(r.doc.resolve(i.$from.pos), r.doc.resolve(o), i.depth));
  const a = Kr(i);
  if (a == null)
    return !1;
  r.lift(i, a);
  let l = r.mapping.map(s, -1) - 1;
  return Ei(r.doc, l) && r.join(l), e(r.scrollIntoView()), !0;
}
function Tw(n, e, t) {
  let i = n.tr, r = t.parent;
  for (let h = t.end, p = t.endIndex - 1, b = t.startIndex; p > b; p--)
    h -= r.child(p).nodeSize, i.delete(h - 1, h + 1);
  let s = i.doc.resolve(t.start), o = s.nodeAfter;
  if (i.mapping.map(t.end) != t.start + s.nodeAfter.nodeSize)
    return !1;
  let a = t.startIndex == 0, l = t.endIndex == r.childCount, c = s.node(-1), u = s.index(-1);
  if (!c.canReplace(u + (a ? 0 : 1), u + 1, o.content.append(l ? $.empty : $.from(r))))
    return !1;
  let d = s.pos, f = d + o.nodeSize;
  return i.step(new vt(d - (a ? 1 : 0), f + (l ? 1 : 0), d + 1, f - 1, new X((a ? $.empty : $.from(r.copy($.empty))).append(l ? $.empty : $.from(r.copy($.empty))), a ? 0 : 1, l ? 0 : 1), a ? 0 : 1)), e(i.scrollIntoView()), !0;
}
function Aw(n) {
  return function(e, t) {
    let { $from: i, $to: r } = e.selection, s = i.blockRange(r, (c) => c.childCount > 0 && c.firstChild.type == n);
    if (!s)
      return !1;
    let o = s.startIndex;
    if (o == 0)
      return !1;
    let a = s.parent, l = a.child(o - 1);
    if (l.type != n)
      return !1;
    if (t) {
      let c = l.lastChild && l.lastChild.type == a.type, u = $.from(c ? n.create() : null), d = new X($.from(n.create(null, $.from(a.type.create(null, u)))), c ? 3 : 1, 0), f = s.start, h = s.end;
      t(e.tr.step(new vt(f - (c ? 3 : 1), h, f, h, d, 1, !0)).scrollIntoView());
    }
    return !0;
  };
}
var Mw = Object.defineProperty, Og = (n, e) => {
  for (var t in e)
    Mw(n, t, { get: e[t], enumerable: !0 });
};
function ro(n) {
  const { state: e, transaction: t } = n;
  let { selection: i } = t, { doc: r } = t, { storedMarks: s } = t;
  return {
    ...e,
    apply: e.apply.bind(e),
    applyTransaction: e.applyTransaction.bind(e),
    plugins: e.plugins,
    schema: e.schema,
    reconfigure: e.reconfigure.bind(e),
    toJSON: e.toJSON.bind(e),
    get storedMarks() {
      return s;
    },
    get selection() {
      return i;
    },
    get doc() {
      return r;
    },
    get tr() {
      return i = t.selection, r = t.doc, s = t.storedMarks, t;
    }
  };
}
var so = class {
  constructor(n) {
    this.editor = n.editor, this.rawCommands = this.editor.extensionManager.commands, this.customState = n.state;
  }
  get hasCustomState() {
    return !!this.customState;
  }
  get state() {
    return this.customState || this.editor.state;
  }
  get commands() {
    const { rawCommands: n, editor: e, state: t } = this, { view: i } = e, { tr: r } = t, s = this.buildProps(r);
    return Object.fromEntries(
      Object.entries(n).map(([o, a]) => [o, (...c) => {
        const u = a(...c)(s);
        return !r.getMeta("preventDispatch") && !this.hasCustomState && i.dispatch(r), u;
      }])
    );
  }
  get chain() {
    return () => this.createChain();
  }
  get can() {
    return () => this.createCan();
  }
  createChain(n, e = !0) {
    const { rawCommands: t, editor: i, state: r } = this, { view: s } = i, o = [], a = !!n, l = n || r.tr, c = () => (!a && e && !l.getMeta("preventDispatch") && !this.hasCustomState && s.dispatch(l), o.every((d) => d === !0)), u = {
      ...Object.fromEntries(
        Object.entries(t).map(([d, f]) => [d, (...p) => {
          const b = this.buildProps(l, e), m = f(...p)(b);
          return o.push(m), u;
        }])
      ),
      run: c
    };
    return u;
  }
  createCan(n) {
    const { rawCommands: e, state: t } = this, i = !1, r = n || t.tr, s = this.buildProps(r, i);
    return {
      ...Object.fromEntries(
        Object.entries(e).map(([a, l]) => [a, (...c) => l(...c)({ ...s, dispatch: void 0 })])
      ),
      chain: () => this.createChain(r, i)
    };
  }
  buildProps(n, e = !0) {
    const { rawCommands: t, editor: i, state: r } = this, { view: s } = i, o = {
      tr: n,
      editor: i,
      view: s,
      state: ro({
        state: r,
        transaction: n
      }),
      dispatch: e ? () => {
      } : void 0,
      chain: () => this.createChain(n, e),
      can: () => this.createCan(n),
      get commands() {
        return Object.fromEntries(
          Object.entries(t).map(([a, l]) => [a, (...c) => l(...c)(o)])
        );
      }
    };
    return o;
  }
}, Ow = class {
  constructor() {
    this.callbacks = {};
  }
  on(n, e) {
    return this.callbacks[n] || (this.callbacks[n] = []), this.callbacks[n].push(e), this;
  }
  emit(n, ...e) {
    const t = this.callbacks[n];
    return t && t.forEach((i) => i.apply(this, e)), this;
  }
  off(n, e) {
    const t = this.callbacks[n];
    return t && (e ? this.callbacks[n] = t.filter((i) => i !== e) : delete this.callbacks[n]), this;
  }
  once(n, e) {
    const t = (...i) => {
      this.off(n, t), e.apply(this, i);
    };
    return this.on(n, t);
  }
  removeAllListeners() {
    this.callbacks = {};
  }
};
function ed(n, e) {
  const t = new $u(n);
  return e.forEach((i) => {
    i.steps.forEach((r) => {
      t.step(r);
    });
  }), t;
}
var Ng = (n) => {
  const e = n.childNodes;
  for (let t = e.length - 1; t >= 0; t -= 1) {
    const i = e[t];
    i.nodeType === 3 && i.nodeValue && /^(\n\s\s|\n)$/.test(i.nodeValue) ? n.removeChild(i) : i.nodeType === 1 && Ng(i);
  }
  return n;
};
function mr(n) {
  if (typeof window > "u")
    throw new Error("[tiptap error]: there is no window object available, so this function cannot be used");
  const e = `<body>${n}</body>`, t = new window.DOMParser().parseFromString(e, "text/html").body;
  return Ng(t);
}
function Fr(n, e, t) {
  if (n instanceof Hn || n instanceof $)
    return n;
  t = {
    slice: !0,
    parseOptions: {},
    ...t
  };
  const i = typeof n == "object" && n !== null, r = typeof n == "string";
  if (i)
    try {
      if (Array.isArray(n) && n.length > 0)
        return $.fromArray(n.map((a) => e.nodeFromJSON(a)));
      const o = e.nodeFromJSON(n);
      return t.errorOnInvalidContent && o.check(), o;
    } catch (s) {
      if (t.errorOnInvalidContent)
        throw new Error("[tiptap error]: Invalid JSON content", { cause: s });
      return console.warn("[tiptap warn]: Invalid content.", "Passed value:", n, "Error:", s), Fr("", e, t);
    }
  if (r) {
    if (t.errorOnInvalidContent) {
      let o = !1, a = "";
      const l = new ym({
        topNode: e.spec.topNode,
        marks: e.spec.marks,
        // Prosemirror's schemas are executed such that: the last to execute, matches last
        // This means that we can add a catch-all node at the end of the schema to catch any content that we don't know how to handle
        nodes: e.spec.nodes.append({
          __tiptap__private__unknown__catch__all__node: {
            content: "inline*",
            group: "block",
            parseDOM: [
              {
                tag: "*",
                getAttrs: (c) => (o = !0, a = typeof c == "string" ? c : c.outerHTML, null)
              }
            ]
          }
        })
      });
      if (t.slice ? vr.fromSchema(l).parseSlice(mr(n), t.parseOptions) : vr.fromSchema(l).parse(mr(n), t.parseOptions), t.errorOnInvalidContent && o)
        throw new Error("[tiptap error]: Invalid HTML content", {
          cause: new Error(`Invalid element found: ${a}`)
        });
    }
    const s = vr.fromSchema(e);
    return t.slice ? s.parseSlice(mr(n), t.parseOptions).content : s.parse(mr(n), t.parseOptions);
  }
  return Fr("", e, t);
}
function ba(n, e, t = {}, i = {}) {
  return Fr(n, e, {
    slice: !1,
    parseOptions: t,
    errorOnInvalidContent: i.errorOnInvalidContent
  });
}
function Lg(n) {
  for (let e = 0; e < n.edgeCount; e += 1) {
    const { type: t } = n.edge(e);
    if (t.isTextblock && !t.hasRequiredAttrs())
      return t;
  }
  return null;
}
function Nw(n, e) {
  const t = [];
  return n.descendants((i, r) => {
    e(i) && t.push({
      node: i,
      pos: r
    });
  }), t;
}
function Rg(n, e, t) {
  const i = [];
  return n.nodesBetween(e.from, e.to, (r, s) => {
    t(r) && i.push({
      node: r,
      pos: s
    });
  }), i;
}
function td(n, e) {
  for (let t = n.depth; t > 0; t -= 1) {
    const i = n.node(t);
    if (e(i))
      return {
        pos: t > 0 ? n.before(t) : 0,
        start: n.start(t),
        depth: t,
        node: i
      };
  }
}
function Qi(n) {
  return (e) => td(e.$from, n);
}
function ae(n, e, t) {
  return n.config[e] === void 0 && n.parent ? ae(n.parent, e, t) : typeof n.config[e] == "function" ? n.config[e].bind({
    ...t,
    parent: n.parent ? ae(n.parent, e, t) : null
  }) : n.config[e];
}
function cl(n) {
  return n.map((e) => {
    const t = {
      name: e.name,
      options: e.options,
      storage: e.storage
    }, i = ae(e, "addExtensions", t);
    return i ? [e, ...cl(i())] : e;
  }).flat(10);
}
function oo(n, e) {
  const t = Zi.fromSchema(e).serializeFragment(n), r = document.implementation.createHTMLDocument().createElement("div");
  return r.appendChild(t), r.innerHTML;
}
function nd(n) {
  return typeof n == "function";
}
function Me(n, e = void 0, ...t) {
  return nd(n) ? e ? n.bind(e)(...t) : n(...t) : n;
}
function Ig(n = {}) {
  return Object.keys(n).length === 0 && n.constructor === Object;
}
function Vr(n) {
  const e = n.filter((r) => r.type === "extension"), t = n.filter((r) => r.type === "node"), i = n.filter((r) => r.type === "mark");
  return {
    baseExtensions: e,
    nodeExtensions: t,
    markExtensions: i
  };
}
function id(n) {
  const e = [], { nodeExtensions: t, markExtensions: i } = Vr(n), r = [...t, ...i], s = {
    default: null,
    validate: void 0,
    rendered: !0,
    renderHTML: null,
    parseHTML: null,
    keepOnSplit: !0,
    isRequired: !1
  };
  return n.forEach((o) => {
    const a = {
      name: o.name,
      options: o.options,
      storage: o.storage,
      extensions: r
    }, l = ae(
      o,
      "addGlobalAttributes",
      a
    );
    if (!l)
      return;
    l().forEach((u) => {
      u.types.forEach((d) => {
        Object.entries(u.attributes).forEach(([f, h]) => {
          e.push({
            type: d,
            name: f,
            attribute: {
              ...s,
              ...h
            }
          });
        });
      });
    });
  }), r.forEach((o) => {
    const a = {
      name: o.name,
      options: o.options,
      storage: o.storage
    }, l = ae(
      o,
      "addAttributes",
      a
    );
    if (!l)
      return;
    const c = l();
    Object.entries(c).forEach(([u, d]) => {
      const f = {
        ...s,
        ...d
      };
      typeof (f == null ? void 0 : f.default) == "function" && (f.default = f.default()), f != null && f.isRequired && (f == null ? void 0 : f.default) === void 0 && delete f.default, e.push({
        type: o.name,
        name: u,
        attribute: f
      });
    });
  }), e;
}
function Ce(...n) {
  return n.filter((e) => !!e).reduce((e, t) => {
    const i = { ...e };
    return Object.entries(t).forEach(([r, s]) => {
      if (!i[r]) {
        i[r] = s;
        return;
      }
      if (r === "class") {
        const a = s ? String(s).split(" ") : [], l = i[r] ? i[r].split(" ") : [], c = a.filter((u) => !l.includes(u));
        i[r] = [...l, ...c].join(" ");
      } else if (r === "style") {
        const a = s ? s.split(";").map((u) => u.trim()).filter(Boolean) : [], l = i[r] ? i[r].split(";").map((u) => u.trim()).filter(Boolean) : [], c = /* @__PURE__ */ new Map();
        l.forEach((u) => {
          const [d, f] = u.split(":").map((h) => h.trim());
          c.set(d, f);
        }), a.forEach((u) => {
          const [d, f] = u.split(":").map((h) => h.trim());
          c.set(d, f);
        }), i[r] = Array.from(c.entries()).map(([u, d]) => `${u}: ${d}`).join("; ");
      } else
        i[r] = s;
    }), i;
  }, {});
}
function js(n, e) {
  return e.filter((t) => t.type === n.type.name).filter((t) => t.attribute.rendered).map((t) => t.attribute.renderHTML ? t.attribute.renderHTML(n.attrs) || {} : {
    [t.name]: n.attrs[t.name]
  }).reduce((t, i) => Ce(t, i), {});
}
function Pg(n) {
  return typeof n != "string" ? n : n.match(/^[+-]?(?:\d*\.)?\d+$/) ? Number(n) : n === "true" ? !0 : n === "false" ? !1 : n;
}
function eu(n, e) {
  return "style" in n ? n : {
    ...n,
    getAttrs: (t) => {
      const i = n.getAttrs ? n.getAttrs(t) : n.attrs;
      if (i === !1)
        return !1;
      const r = e.reduce((s, o) => {
        const a = o.attribute.parseHTML ? o.attribute.parseHTML(t) : Pg(t.getAttribute(o.name));
        return a == null ? s : {
          ...s,
          [o.name]: a
        };
      }, {});
      return { ...i, ...r };
    }
  };
}
function hh(n) {
  return Object.fromEntries(
    // @ts-ignore
    Object.entries(n).filter(([e, t]) => e === "attrs" && Ig(t) ? !1 : t != null)
  );
}
function rd(n, e) {
  var t;
  const i = id(n), { nodeExtensions: r, markExtensions: s } = Vr(n), o = (t = r.find((c) => ae(c, "topNode"))) == null ? void 0 : t.name, a = Object.fromEntries(
    r.map((c) => {
      const u = i.filter((g) => g.type === c.name), d = {
        name: c.name,
        options: c.options,
        storage: c.storage,
        editor: e
      }, f = n.reduce((g, v) => {
        const x = ae(v, "extendNodeSchema", d);
        return {
          ...g,
          ...x ? x(c) : {}
        };
      }, {}), h = hh({
        ...f,
        content: Me(ae(c, "content", d)),
        marks: Me(ae(c, "marks", d)),
        group: Me(ae(c, "group", d)),
        inline: Me(ae(c, "inline", d)),
        atom: Me(ae(c, "atom", d)),
        selectable: Me(ae(c, "selectable", d)),
        draggable: Me(ae(c, "draggable", d)),
        code: Me(ae(c, "code", d)),
        whitespace: Me(ae(c, "whitespace", d)),
        linebreakReplacement: Me(
          ae(c, "linebreakReplacement", d)
        ),
        defining: Me(ae(c, "defining", d)),
        isolating: Me(ae(c, "isolating", d)),
        attrs: Object.fromEntries(
          u.map((g) => {
            var v, x;
            return [
              g.name,
              { default: (v = g == null ? void 0 : g.attribute) == null ? void 0 : v.default, validate: (x = g == null ? void 0 : g.attribute) == null ? void 0 : x.validate }
            ];
          })
        )
      }), p = Me(ae(c, "parseHTML", d));
      p && (h.parseDOM = p.map(
        (g) => eu(g, u)
      ));
      const b = ae(c, "renderHTML", d);
      b && (h.toDOM = (g) => b({
        node: g,
        HTMLAttributes: js(g, u)
      }));
      const m = ae(c, "renderText", d);
      return m && (h.toText = m), [c.name, h];
    })
  ), l = Object.fromEntries(
    s.map((c) => {
      const u = i.filter((m) => m.type === c.name), d = {
        name: c.name,
        options: c.options,
        storage: c.storage,
        editor: e
      }, f = n.reduce((m, g) => {
        const v = ae(g, "extendMarkSchema", d);
        return {
          ...m,
          ...v ? v(c) : {}
        };
      }, {}), h = hh({
        ...f,
        inclusive: Me(ae(c, "inclusive", d)),
        excludes: Me(ae(c, "excludes", d)),
        group: Me(ae(c, "group", d)),
        spanning: Me(ae(c, "spanning", d)),
        code: Me(ae(c, "code", d)),
        attrs: Object.fromEntries(
          u.map((m) => {
            var g, v;
            return [
              m.name,
              { default: (g = m == null ? void 0 : m.attribute) == null ? void 0 : g.default, validate: (v = m == null ? void 0 : m.attribute) == null ? void 0 : v.validate }
            ];
          })
        )
      }), p = Me(ae(c, "parseHTML", d));
      p && (h.parseDOM = p.map(
        (m) => eu(m, u)
      ));
      const b = ae(c, "renderHTML", d);
      return b && (h.toDOM = (m) => b({
        mark: m,
        HTMLAttributes: js(m, u)
      })), [c.name, h];
    })
  );
  return new ym({
    topNode: o,
    nodes: a,
    marks: l
  });
}
function Dg(n) {
  const e = n.filter((t, i) => n.indexOf(t) !== i);
  return Array.from(new Set(e));
}
function ul(n) {
  return n.sort((t, i) => {
    const r = ae(t, "priority") || 100, s = ae(i, "priority") || 100;
    return r > s ? -1 : r < s ? 1 : 0;
  });
}
function dl(n) {
  const e = ul(cl(n)), t = Dg(e.map((i) => i.name));
  return t.length && console.warn(
    `[tiptap warn]: Duplicate extension names found: [${t.map((i) => `'${i}'`).join(", ")}]. This can lead to issues.`
  ), e;
}
function fl(n, e) {
  const t = dl(n);
  return rd(t, e);
}
function Lw(n, e) {
  const t = fl(e), i = Hn.fromJSON(t, n);
  return oo(i.content, t);
}
function $g(n, e) {
  const t = fl(e), i = mr(n);
  return vr.fromSchema(t).parse(i).toJSON();
}
function sd(n, e, t) {
  const { from: i, to: r } = e, { blockSeparator: s = `

`, textSerializers: o = {} } = t || {};
  let a = "";
  return n.nodesBetween(i, r, (l, c, u, d) => {
    var f;
    l.isBlock && c > i && (a += s);
    const h = o == null ? void 0 : o[l.type.name];
    if (h)
      return u && (a += h({
        node: l,
        pos: c,
        parent: u,
        index: d,
        range: e
      })), !1;
    l.isText && (a += (f = l == null ? void 0 : l.text) == null ? void 0 : f.slice(Math.max(i, c) - c, r - c));
  }), a;
}
function od(n, e) {
  const t = {
    from: 0,
    to: n.content.size
  };
  return sd(n, t, e);
}
function hl(n) {
  return Object.fromEntries(
    Object.entries(n.nodes).filter(([, e]) => e.spec.toText).map(([e, t]) => [e, t.spec.toText])
  );
}
function Rw(n, e, t) {
  const { blockSeparator: i = `

`, textSerializers: r = {} } = t || {}, s = fl(e), o = Hn.fromJSON(s, n);
  return od(o, {
    blockSeparator: i,
    textSerializers: {
      ...hl(s),
      ...r
    }
  });
}
function jn(n, e) {
  if (typeof n == "string") {
    if (!e.marks[n])
      throw Error(`There is no mark type named '${n}'. Maybe you forgot to add the extension?`);
    return e.marks[n];
  }
  return n;
}
function ad(n, e) {
  const t = jn(e, n.schema), { from: i, to: r, empty: s } = n.selection, o = [];
  s ? (n.storedMarks && o.push(...n.storedMarks), o.push(...n.selection.$head.marks())) : n.doc.nodesBetween(i, r, (l) => {
    o.push(...l.marks);
  });
  const a = o.find((l) => l.type.name === t.name);
  return a ? { ...a.attrs } : {};
}
function it(n, e) {
  if (typeof n == "string") {
    if (!e.nodes[n])
      throw Error(`There is no node type named '${n}'. Maybe you forgot to add the extension?`);
    return e.nodes[n];
  }
  return n;
}
function zg(n, e) {
  const t = it(e, n.schema), { from: i, to: r } = n.selection, s = [];
  n.doc.nodesBetween(i, r, (a) => {
    s.push(a);
  });
  const o = s.reverse().find((a) => a.type.name === t.name);
  return o ? { ...o.attrs } : {};
}
function ao(n, e) {
  return e.nodes[n] ? "node" : e.marks[n] ? "mark" : null;
}
function ld(n, e) {
  const t = ao(
    typeof e == "string" ? e : e.name,
    n.schema
  );
  return t === "node" ? zg(n, e) : t === "mark" ? ad(n, e) : {};
}
function Bg(n, e = JSON.stringify) {
  const t = {};
  return n.filter((i) => {
    const r = e(i);
    return Object.prototype.hasOwnProperty.call(t, r) ? !1 : t[r] = !0;
  });
}
function Iw(n) {
  const e = Bg(n);
  return e.length === 1 ? e : e.filter((t, i) => !e.filter((s, o) => o !== i).some((s) => t.oldRange.from >= s.oldRange.from && t.oldRange.to <= s.oldRange.to && t.newRange.from >= s.newRange.from && t.newRange.to <= s.newRange.to));
}
function cd(n) {
  const { mapping: e, steps: t } = n, i = [];
  return e.maps.forEach((r, s) => {
    const o = [];
    if (r.ranges.length)
      r.forEach((a, l) => {
        o.push({ from: a, to: l });
      });
    else {
      const { from: a, to: l } = t[s];
      if (a === void 0 || l === void 0)
        return;
      o.push({ from: a, to: l });
    }
    o.forEach(({ from: a, to: l }) => {
      const c = e.slice(s).map(a, -1), u = e.slice(s).map(l), d = e.invert().map(c, -1), f = e.invert().map(u);
      i.push({
        oldRange: {
          from: d,
          to: f
        },
        newRange: {
          from: c,
          to: u
        }
      });
    });
  }), Iw(i);
}
function Hg(n, e = 0) {
  const i = n.type === n.type.schema.topNodeType ? 0 : 1, r = e, s = r + n.nodeSize, o = n.marks.map((c) => {
    const u = {
      type: c.type.name
    };
    return Object.keys(c.attrs).length && (u.attrs = { ...c.attrs }), u;
  }), a = { ...n.attrs }, l = {
    type: n.type.name,
    from: r,
    to: s
  };
  return Object.keys(a).length && (l.attrs = a), o.length && (l.marks = o), n.content.childCount && (l.content = [], n.forEach((c, u) => {
    var d;
    (d = l.content) == null || d.push(Hg(c, e + u + i));
  })), n.text && (l.text = n.text), l;
}
function pl(n) {
  return Object.prototype.toString.call(n) === "[object RegExp]";
}
function Ws(n, e, t = { strict: !0 }) {
  const i = Object.keys(e);
  return i.length ? i.every((r) => t.strict ? e[r] === n[r] : pl(e[r]) ? e[r].test(n[r]) : e[r] === n[r]) : !0;
}
function Fg(n, e, t = {}) {
  return n.find((i) => i.type === e && Ws(
    // Only check equality for the attributes that are provided
    Object.fromEntries(Object.keys(t).map((r) => [r, i.attrs[r]])),
    t
  ));
}
function ph(n, e, t = {}) {
  return !!Fg(n, e, t);
}
function ml(n, e, t) {
  var i;
  if (!n || !e)
    return;
  let r = n.parent.childAfter(n.parentOffset);
  if ((!r.node || !r.node.marks.some((u) => u.type === e)) && (r = n.parent.childBefore(n.parentOffset)), !r.node || !r.node.marks.some((u) => u.type === e) || (t = t || ((i = r.node.marks[0]) == null ? void 0 : i.attrs), !Fg([...r.node.marks], e, t)))
    return;
  let o = r.index, a = n.start() + r.offset, l = o + 1, c = a + r.node.nodeSize;
  for (; o > 0 && ph([...n.parent.child(o - 1).marks], e, t); )
    o -= 1, a -= n.parent.child(o).nodeSize;
  for (; l < n.parent.childCount && ph([...n.parent.child(l).marks], e, t); )
    c += n.parent.child(l).nodeSize, l += 1;
  return {
    from: a,
    to: c
  };
}
function gl(n, e, t) {
  const i = [];
  return n === e ? t.resolve(n).marks().forEach((r) => {
    const s = t.resolve(n), o = ml(s, r.type);
    o && i.push({
      mark: r,
      ...o
    });
  }) : t.nodesBetween(n, e, (r, s) => {
    !r || (r == null ? void 0 : r.nodeSize) === void 0 || i.push(
      ...r.marks.map((o) => ({
        from: s,
        to: s + r.nodeSize,
        mark: o
      }))
    );
  }), i;
}
var Vg = (n, e, t, i = 20) => {
  const r = n.doc.resolve(t);
  let s = i, o = null;
  for (; s > 0 && o === null; ) {
    const a = r.node(s);
    (a == null ? void 0 : a.type.name) === e ? o = a : s -= 1;
  }
  return [o, s];
};
function Go(n, e) {
  return e.nodes[n] || e.marks[n] || null;
}
function Cs(n, e, t) {
  return Object.fromEntries(
    Object.entries(t).filter(([i]) => {
      const r = n.find((s) => s.type === e && s.name === i);
      return r ? r.attribute.keepOnSplit : !1;
    })
  );
}
var jg = (n, e = 500) => {
  let t = "";
  const i = n.parentOffset;
  return n.parent.nodesBetween(Math.max(0, i - e), i, (r, s, o, a) => {
    var l, c;
    const u = ((c = (l = r.type.spec).toText) == null ? void 0 : c.call(l, {
      node: r,
      pos: s,
      parent: o,
      index: a
    })) || r.textContent || "%leaf%";
    t += r.isAtom && !r.isText ? u : u.slice(0, Math.max(0, i - s));
  }), t;
};
function va(n, e, t = {}) {
  const { empty: i, ranges: r } = n.selection, s = e ? jn(e, n.schema) : null;
  if (i)
    return !!(n.storedMarks || n.selection.$from.marks()).filter((d) => s ? s.name === d.type.name : !0).find((d) => Ws(d.attrs, t, { strict: !1 }));
  let o = 0;
  const a = [];
  if (r.forEach(({ $from: d, $to: f }) => {
    const h = d.pos, p = f.pos;
    n.doc.nodesBetween(h, p, (b, m) => {
      if (!b.isText && !b.marks.length)
        return;
      const g = Math.max(h, m), v = Math.min(p, m + b.nodeSize), x = v - g;
      o += x, a.push(
        ...b.marks.map((w) => ({
          mark: w,
          from: g,
          to: v
        }))
      );
    });
  }), o === 0)
    return !1;
  const l = a.filter((d) => s ? s.name === d.mark.type.name : !0).filter((d) => Ws(d.mark.attrs, t, { strict: !1 })).reduce((d, f) => d + f.to - f.from, 0), c = a.filter((d) => s ? d.mark.type !== s && d.mark.type.excludes(s) : !0).reduce((d, f) => d + f.to - f.from, 0);
  return (l > 0 ? l + c : l) >= o;
}
function ni(n, e, t = {}) {
  const { from: i, to: r, empty: s } = n.selection, o = e ? it(e, n.schema) : null, a = [];
  n.doc.nodesBetween(i, r, (d, f) => {
    if (d.isText)
      return;
    const h = Math.max(i, f), p = Math.min(r, f + d.nodeSize);
    a.push({
      node: d,
      from: h,
      to: p
    });
  });
  const l = r - i, c = a.filter((d) => o ? o.name === d.node.type.name : !0).filter((d) => Ws(d.node.attrs, t, { strict: !1 }));
  return s ? !!c.length : c.reduce((d, f) => d + f.to - f.from, 0) >= l;
}
function Wg(n, e, t = {}) {
  if (!e)
    return ni(n, null, t) || va(n, null, t);
  const i = ao(e, n.schema);
  return i === "node" ? ni(n, e, t) : i === "mark" ? va(n, e, t) : !1;
}
var Ug = (n, e) => {
  const { $from: t, $to: i, $anchor: r } = n.selection;
  if (e) {
    const s = Qi((a) => a.type.name === e)(n.selection);
    if (!s)
      return !1;
    const o = n.doc.resolve(s.pos + 1);
    return r.pos + 1 === o.end();
  }
  return !(i.parentOffset < i.parent.nodeSize - 2 || t.pos !== i.pos);
}, Kg = (n) => {
  const { $from: e, $to: t } = n.selection;
  return !(e.parentOffset > 0 || e.pos !== t.pos);
};
function tu(n, e) {
  return Array.isArray(e) ? e.some((t) => (typeof t == "string" ? t : t.name) === n.name) : e;
}
function nu(n, e) {
  const { nodeExtensions: t } = Vr(e), i = t.find((o) => o.name === n);
  if (!i)
    return !1;
  const r = {
    name: i.name,
    options: i.options,
    storage: i.storage
  }, s = Me(ae(i, "group", r));
  return typeof s != "string" ? !1 : s.split(" ").includes("list");
}
function lo(n, {
  checkChildren: e = !0,
  ignoreWhitespace: t = !1
} = {}) {
  var i;
  if (t) {
    if (n.type.name === "hardBreak")
      return !0;
    if (n.isText)
      return /^\s*$/m.test((i = n.text) != null ? i : "");
  }
  if (n.isText)
    return !n.text;
  if (n.isAtom || n.isLeaf)
    return !1;
  if (n.content.childCount === 0)
    return !0;
  if (e) {
    let r = !0;
    return n.content.forEach((s) => {
      r !== !1 && (lo(s, { ignoreWhitespace: t, checkChildren: e }) || (r = !1));
    }), r;
  }
  return !1;
}
function ud(n) {
  return n instanceof le;
}
function dd(n) {
  return n instanceof fe;
}
function Bn(n = 0, e = 0, t = 0) {
  return Math.min(Math.max(n, e), t);
}
function Pw(n, e, t) {
  const r = n.state.doc.content.size, s = Bn(e, 0, r), o = Bn(t, 0, r), a = n.coordsAtPos(s), l = n.coordsAtPos(o, -1), c = Math.min(a.top, l.top), u = Math.max(a.bottom, l.bottom), d = Math.min(a.left, l.left), f = Math.max(a.right, l.right), h = f - d, p = u - c, g = {
    top: c,
    bottom: u,
    left: d,
    right: f,
    width: h,
    height: p,
    x: d,
    y: c
  };
  return {
    ...g,
    toJSON: () => g
  };
}
function fd(n, e = null) {
  if (!e)
    return null;
  const t = pe.atStart(n), i = pe.atEnd(n);
  if (e === "start" || e === !0)
    return t;
  if (e === "end")
    return i;
  const r = t.from, s = i.to;
  return e === "all" ? fe.create(n, Bn(0, r, s), Bn(n.content.size, r, s)) : fe.create(n, Bn(e, r, s), Bn(e, r, s));
}
function qg({
  json: n,
  validMarks: e,
  validNodes: t,
  options: i,
  rewrittenContent: r = []
}) {
  return n.marks && Array.isArray(n.marks) && (n.marks = n.marks.filter((s) => {
    const o = typeof s == "string" ? s : s.type;
    return e.has(o) ? !0 : (r.push({
      original: JSON.parse(JSON.stringify(s)),
      unsupported: o
    }), !1);
  })), n.content && Array.isArray(n.content) && (n.content = n.content.map(
    (s) => qg({
      json: s,
      validMarks: e,
      validNodes: t,
      options: i,
      rewrittenContent: r
    }).json
  ).filter((s) => s != null)), n.type && !t.has(n.type) ? (r.push({
    original: JSON.parse(JSON.stringify(n)),
    unsupported: n.type
  }), n.content && Array.isArray(n.content) && (i == null ? void 0 : i.fallbackToParagraph) !== !1 ? (n.type = "paragraph", {
    json: n,
    rewrittenContent: r
  }) : {
    json: null,
    rewrittenContent: r
  }) : { json: n, rewrittenContent: r };
}
function Dw(n, e, t) {
  return qg({
    json: n,
    validNodes: new Set(Object.keys(e.nodes)),
    validMarks: new Set(Object.keys(e.marks)),
    options: t
  });
}
function Gg(n, e, t) {
  const i = n.steps.length - 1;
  if (i < e)
    return;
  const r = n.steps[i];
  if (!(r instanceof _t || r instanceof vt))
    return;
  const s = n.mapping.maps[i];
  let o = 0;
  s.forEach((a, l, c, u) => {
    o === 0 && (o = u);
  }), n.setSelection(pe.near(n.doc.resolve(o), t));
}
var er = class {
  constructor(n) {
    this.find = n.find, this.handler = n.handler;
  }
}, $w = (n, e) => {
  if (pl(e))
    return e.exec(n);
  const t = e(n);
  if (!t)
    return null;
  const i = [t.text];
  return i.index = t.index, i.input = n, i.data = t.data, t.replaceWith && (t.text.includes(t.replaceWith) || console.warn('[tiptap warn]: "inputRuleMatch.replaceWith" must be part of "inputRuleMatch.text".'), i.push(t.replaceWith)), i;
};
function So(n) {
  var e;
  const { editor: t, from: i, to: r, text: s, rules: o, plugin: a } = n, { view: l } = t;
  if (l.composing)
    return !1;
  const c = l.state.doc.resolve(i);
  if (
    // check for code node
    c.parent.type.spec.code || (e = c.nodeBefore || c.nodeAfter) != null && e.marks.find((f) => f.type.spec.code)
  )
    return !1;
  let u = !1;
  const d = jg(c) + s;
  return o.forEach((f) => {
    if (u)
      return;
    const h = $w(d, f.find);
    if (!h)
      return;
    const p = l.state.tr, b = ro({
      state: l.state,
      transaction: p
    }), m = {
      from: i - (h[0].length - s.length),
      to: r
    }, { commands: g, chain: v, can: x } = new so({
      editor: t,
      state: b
    });
    f.handler({
      state: b,
      range: m,
      match: h,
      commands: g,
      chain: v,
      can: x
    }) === null || !p.steps.length || (p.setMeta(a, {
      transform: p,
      from: i,
      to: r,
      text: s
    }), l.dispatch(p), u = !0);
  }), u;
}
function Jg(n) {
  const { editor: e, rules: t } = n, i = new Je({
    state: {
      init() {
        return null;
      },
      apply(r, s, o) {
        const a = r.getMeta(i);
        if (a)
          return a;
        const l = r.getMeta("applyInputRules");
        return !!l && setTimeout(() => {
          let { text: u } = l;
          typeof u == "string" ? u = u : u = oo($.from(u), o.schema);
          const { from: d } = l, f = d + u.length;
          So({
            editor: e,
            from: d,
            to: f,
            text: u,
            rules: t,
            plugin: i
          });
        }), r.selectionSet || r.docChanged ? null : s;
      }
    },
    props: {
      handleTextInput(r, s, o, a) {
        return So({
          editor: e,
          from: s,
          to: o,
          text: a,
          rules: t,
          plugin: i
        });
      },
      handleDOMEvents: {
        compositionend: (r) => (setTimeout(() => {
          const { $cursor: s } = r.state.selection;
          s && So({
            editor: e,
            from: s.pos,
            to: s.pos,
            text: "",
            rules: t,
            plugin: i
          });
        }), !1)
      },
      // add support for input rules to trigger on enter
      // this is useful for example for code blocks
      handleKeyDown(r, s) {
        if (s.key !== "Enter")
          return !1;
        const { $cursor: o } = r.state.selection;
        return o ? So({
          editor: e,
          from: o.pos,
          to: o.pos,
          text: `
`,
          rules: t,
          plugin: i
        }) : !1;
      }
    },
    // @ts-ignore
    isInputRules: !0
  });
  return i;
}
function zw(n) {
  return Object.prototype.toString.call(n).slice(8, -1);
}
function bs(n) {
  return zw(n) !== "Object" ? !1 : n.constructor === Object && Object.getPrototypeOf(n) === Object.prototype;
}
function hd(n, e) {
  const t = { ...n };
  return bs(n) && bs(e) && Object.keys(e).forEach((i) => {
    bs(e[i]) && bs(n[i]) ? t[i] = hd(n[i], e[i]) : t[i] = e[i];
  }), t;
}
var pd = class {
  constructor(n = {}) {
    this.type = "extendable", this.parent = null, this.child = null, this.name = "", this.config = {
      name: this.name
    }, this.config = {
      ...this.config,
      ...n
    }, this.name = this.config.name;
  }
  get options() {
    return {
      ...Me(
        ae(this, "addOptions", {
          name: this.name
        })
      ) || {}
    };
  }
  get storage() {
    return {
      ...Me(
        ae(this, "addStorage", {
          name: this.name,
          options: this.options
        })
      ) || {}
    };
  }
  configure(n = {}) {
    const e = this.extend({
      ...this.config,
      addOptions: () => hd(this.options, n)
    });
    return e.name = this.name, e.parent = this.parent, e;
  }
  extend(n = {}) {
    const e = new this.constructor({ ...this.config, ...n });
    return e.parent = this, this.child = e, e.name = "name" in n ? n.name : e.parent.name, e;
  }
}, nn = class Xg extends pd {
  constructor() {
    super(...arguments), this.type = "mark";
  }
  /**
   * Create a new Mark instance
   * @param config - Mark configuration object or a function that returns a configuration object
   */
  static create(e = {}) {
    const t = typeof e == "function" ? e() : e;
    return new Xg(t);
  }
  static handleExit({ editor: e, mark: t }) {
    const { tr: i } = e.state, r = e.state.selection.$from;
    if (r.pos === r.end()) {
      const o = r.marks();
      if (!!!o.find((c) => (c == null ? void 0 : c.type.name) === t.name))
        return !1;
      const l = o.find((c) => (c == null ? void 0 : c.type.name) === t.name);
      return l && i.removeStoredMark(l), i.insertText(" ", r.pos), e.view.dispatch(i), !0;
    }
    return !1;
  }
  configure(e) {
    return super.configure(e);
  }
  extend(e) {
    const t = typeof e == "function" ? e() : e;
    return super.extend(t);
  }
};
function Yg(n) {
  return typeof n == "number";
}
var _l = class {
  constructor(n) {
    this.find = n.find, this.handler = n.handler;
  }
}, Bw = (n, e, t) => {
  if (pl(e))
    return [...n.matchAll(e)];
  const i = e(n, t);
  return i ? i.map((r) => {
    const s = [r.text];
    return s.index = r.index, s.input = n, s.data = r.data, r.replaceWith && (r.text.includes(r.replaceWith) || console.warn('[tiptap warn]: "pasteRuleMatch.replaceWith" must be part of "pasteRuleMatch.text".'), s.push(r.replaceWith)), s;
  }) : [];
};
function Hw(n) {
  const { editor: e, state: t, from: i, to: r, rule: s, pasteEvent: o, dropEvent: a } = n, { commands: l, chain: c, can: u } = new so({
    editor: e,
    state: t
  }), d = [];
  return t.doc.nodesBetween(i, r, (h, p) => {
    if (!h.isTextblock || h.type.spec.code)
      return;
    const b = Math.max(i, p), m = Math.min(r, p + h.content.size), g = h.textBetween(b - p, m - p, void 0, "￼");
    Bw(g, s.find, o).forEach((x) => {
      if (x.index === void 0)
        return;
      const w = b + x.index + 1, E = w + x[0].length, k = {
        from: t.tr.mapping.map(w),
        to: t.tr.mapping.map(E)
      }, S = s.handler({
        state: t,
        range: k,
        match: x,
        commands: l,
        chain: c,
        can: u,
        pasteEvent: o,
        dropEvent: a
      });
      d.push(S);
    });
  }), d.every((h) => h !== null);
}
var Eo = null, Fw = (n) => {
  var e;
  const t = new ClipboardEvent("paste", {
    clipboardData: new DataTransfer()
  });
  return (e = t.clipboardData) == null || e.setData("text/html", n), t;
};
function Zg(n) {
  const { editor: e, rules: t } = n;
  let i = null, r = !1, s = !1, o = typeof ClipboardEvent < "u" ? new ClipboardEvent("paste") : null, a;
  try {
    a = typeof DragEvent < "u" ? new DragEvent("drop") : null;
  } catch {
    a = null;
  }
  const l = ({
    state: u,
    from: d,
    to: f,
    rule: h,
    pasteEvt: p
  }) => {
    const b = u.tr, m = ro({
      state: u,
      transaction: b
    });
    if (!(!Hw({
      editor: e,
      state: m,
      from: Math.max(d - 1, 0),
      to: f.b - 1,
      rule: h,
      pasteEvent: p,
      dropEvent: a
    }) || !b.steps.length)) {
      try {
        a = typeof DragEvent < "u" ? new DragEvent("drop") : null;
      } catch {
        a = null;
      }
      return o = typeof ClipboardEvent < "u" ? new ClipboardEvent("paste") : null, b;
    }
  };
  return t.map((u) => new Je({
    // we register a global drag handler to track the current drag source element
    view(d) {
      const f = (p) => {
        var b;
        i = (b = d.dom.parentElement) != null && b.contains(p.target) ? d.dom.parentElement : null, i && (Eo = e);
      }, h = () => {
        Eo && (Eo = null);
      };
      return window.addEventListener("dragstart", f), window.addEventListener("dragend", h), {
        destroy() {
          window.removeEventListener("dragstart", f), window.removeEventListener("dragend", h);
        }
      };
    },
    props: {
      handleDOMEvents: {
        drop: (d, f) => {
          if (s = i === d.dom.parentElement, a = f, !s) {
            const h = Eo;
            h != null && h.isEditable && setTimeout(() => {
              const p = h.state.selection;
              p && h.commands.deleteRange({ from: p.from, to: p.to });
            }, 10);
          }
          return !1;
        },
        paste: (d, f) => {
          var h;
          const p = (h = f.clipboardData) == null ? void 0 : h.getData("text/html");
          return o = f, r = !!(p != null && p.includes("data-pm-slice")), !1;
        }
      }
    },
    appendTransaction: (d, f, h) => {
      const p = d[0], b = p.getMeta("uiEvent") === "paste" && !r, m = p.getMeta("uiEvent") === "drop" && !s, g = p.getMeta("applyPasteRules"), v = !!g;
      if (!b && !m && !v)
        return;
      if (v) {
        let { text: E } = g;
        typeof E == "string" ? E = E : E = oo($.from(E), h.schema);
        const { from: k } = g, S = k + E.length, y = Fw(E);
        return l({
          rule: u,
          state: h,
          from: k,
          to: { b: S },
          pasteEvt: y
        });
      }
      const x = f.doc.content.findDiffStart(h.doc.content), w = f.doc.content.findDiffEnd(h.doc.content);
      if (!(!Yg(x) || !w || x === w.b))
        return l({
          rule: u,
          state: h,
          from: x,
          to: w,
          pasteEvt: o
        });
    }
  }));
}
var bl = class {
  constructor(n, e) {
    this.splittableMarks = [], this.editor = e, this.extensions = dl(n), this.schema = rd(this.extensions, e), this.setupExtensions();
  }
  /**
   * Get all commands from the extensions.
   * @returns An object with all commands where the key is the command name and the value is the command function
   */
  get commands() {
    return this.extensions.reduce((n, e) => {
      const t = {
        name: e.name,
        options: e.options,
        storage: this.editor.extensionStorage[e.name],
        editor: this.editor,
        type: Go(e.name, this.schema)
      }, i = ae(e, "addCommands", t);
      return i ? {
        ...n,
        ...i()
      } : n;
    }, {});
  }
  /**
   * Get all registered Prosemirror plugins from the extensions.
   * @returns An array of Prosemirror plugins
   */
  get plugins() {
    const { editor: n } = this, e = ul([...this.extensions].reverse()), t = [], i = [], r = e.map((s) => {
      const o = {
        name: s.name,
        options: s.options,
        storage: this.editor.extensionStorage[s.name],
        editor: n,
        type: Go(s.name, this.schema)
      }, a = [], l = ae(
        s,
        "addKeyboardShortcuts",
        o
      );
      let c = {};
      if (s.type === "mark" && ae(s, "exitable", o) && (c.ArrowRight = () => nn.handleExit({ editor: n, mark: s })), l) {
        const p = Object.fromEntries(
          Object.entries(l()).map(([b, m]) => [b, () => m({ editor: n })])
        );
        c = { ...c, ...p };
      }
      const u = lw(c);
      a.push(u);
      const d = ae(s, "addInputRules", o);
      tu(s, n.options.enableInputRules) && d && t.push(...d());
      const f = ae(s, "addPasteRules", o);
      tu(s, n.options.enablePasteRules) && f && i.push(...f());
      const h = ae(
        s,
        "addProseMirrorPlugins",
        o
      );
      if (h) {
        const p = h();
        a.push(...p);
      }
      return a;
    }).flat();
    return [
      Jg({
        editor: n,
        rules: t
      }),
      ...Zg({
        editor: n,
        rules: i
      }),
      ...r
    ];
  }
  /**
   * Get all attributes from the extensions.
   * @returns An array of attributes
   */
  get attributes() {
    return id(this.extensions);
  }
  /**
   * Get all node views from the extensions.
   * @returns An object with all node views where the key is the node name and the value is the node view function
   */
  get nodeViews() {
    const { editor: n } = this, { nodeExtensions: e } = Vr(this.extensions);
    return Object.fromEntries(
      e.filter((t) => !!ae(t, "addNodeView")).map((t) => {
        const i = this.attributes.filter((a) => a.type === t.name), r = {
          name: t.name,
          options: t.options,
          storage: this.editor.extensionStorage[t.name],
          editor: n,
          type: it(t.name, this.schema)
        }, s = ae(t, "addNodeView", r);
        if (!s)
          return [];
        const o = (a, l, c, u, d) => {
          const f = js(a, i);
          return s()({
            // pass-through
            node: a,
            view: l,
            getPos: c,
            decorations: u,
            innerDecorations: d,
            // tiptap-specific
            editor: n,
            extension: t,
            HTMLAttributes: f
          });
        };
        return [t.name, o];
      })
    );
  }
  get markViews() {
    const { editor: n } = this, { markExtensions: e } = Vr(this.extensions);
    return Object.fromEntries(
      e.filter((t) => !!ae(t, "addMarkView")).map((t) => {
        const i = this.attributes.filter((a) => a.type === t.name), r = {
          name: t.name,
          options: t.options,
          storage: this.editor.extensionStorage[t.name],
          editor: n,
          type: jn(t.name, this.schema)
        }, s = ae(t, "addMarkView", r);
        if (!s)
          return [];
        const o = (a, l, c) => {
          const u = js(a, i);
          return s()({
            // pass-through
            mark: a,
            view: l,
            inline: c,
            // tiptap-specific
            editor: n,
            extension: t,
            HTMLAttributes: u,
            updateAttributes: (d) => {
              _d(a, n, d);
            }
          });
        };
        return [t.name, o];
      })
    );
  }
  /**
   * Go through all extensions, create extension storages & setup marks
   * & bind editor event listener.
   */
  setupExtensions() {
    const n = this.extensions;
    this.editor.extensionStorage = Object.fromEntries(
      n.map((e) => [e.name, e.storage])
    ), n.forEach((e) => {
      var t;
      const i = {
        name: e.name,
        options: e.options,
        storage: this.editor.extensionStorage[e.name],
        editor: this.editor,
        type: Go(e.name, this.schema)
      };
      e.type === "mark" && ((t = Me(ae(e, "keepOnSplit", i))) == null || t) && this.splittableMarks.push(e.name);
      const r = ae(e, "onBeforeCreate", i), s = ae(e, "onCreate", i), o = ae(e, "onUpdate", i), a = ae(
        e,
        "onSelectionUpdate",
        i
      ), l = ae(e, "onTransaction", i), c = ae(e, "onFocus", i), u = ae(e, "onBlur", i), d = ae(e, "onDestroy", i);
      r && this.editor.on("beforeCreate", r), s && this.editor.on("create", s), o && this.editor.on("update", o), a && this.editor.on("selectionUpdate", a), l && this.editor.on("transaction", l), c && this.editor.on("focus", c), u && this.editor.on("blur", u), d && this.editor.on("destroy", d);
    });
  }
};
bl.resolve = dl;
bl.sort = ul;
bl.flatten = cl;
var Qg = {};
Og(Qg, {
  ClipboardTextSerializer: () => t_,
  Commands: () => i_,
  Delete: () => r_,
  Drop: () => s_,
  Editable: () => o_,
  FocusEvents: () => l_,
  Keymap: () => c_,
  Paste: () => u_,
  Tabindex: () => d_,
  focusEventsPluginKey: () => a_
});
var ze = class e_ extends pd {
  constructor() {
    super(...arguments), this.type = "extension";
  }
  /**
   * Create a new Extension instance
   * @param config - Extension configuration object or a function that returns a configuration object
   */
  static create(e = {}) {
    const t = typeof e == "function" ? e() : e;
    return new e_(t);
  }
  configure(e) {
    return super.configure(e);
  }
  extend(e) {
    const t = typeof e == "function" ? e() : e;
    return super.extend(t);
  }
}, t_ = ze.create({
  name: "clipboardTextSerializer",
  addOptions() {
    return {
      blockSeparator: void 0
    };
  },
  addProseMirrorPlugins() {
    return [
      new Je({
        key: new dt("clipboardTextSerializer"),
        props: {
          clipboardTextSerializer: () => {
            const { editor: n } = this, { state: e, schema: t } = n, { doc: i, selection: r } = e, { ranges: s } = r, o = Math.min(...s.map((u) => u.$from.pos)), a = Math.max(...s.map((u) => u.$to.pos)), l = hl(t);
            return sd(i, { from: o, to: a }, {
              ...this.options.blockSeparator !== void 0 ? { blockSeparator: this.options.blockSeparator } : {},
              textSerializers: l
            });
          }
        }
      })
    ];
  }
}), n_ = {};
Og(n_, {
  blur: () => Vw,
  clearContent: () => jw,
  clearNodes: () => Ww,
  command: () => Uw,
  createParagraphNear: () => Kw,
  cut: () => qw,
  deleteCurrentNode: () => Gw,
  deleteNode: () => Jw,
  deleteRange: () => Xw,
  deleteSelection: () => Yw,
  enter: () => Zw,
  exitCode: () => Qw,
  extendMarkRange: () => e2,
  first: () => t2,
  focus: () => n2,
  forEach: () => i2,
  insertContent: () => r2,
  insertContentAt: () => o2,
  joinBackward: () => c2,
  joinDown: () => l2,
  joinForward: () => u2,
  joinItemBackward: () => d2,
  joinItemForward: () => f2,
  joinTextblockBackward: () => h2,
  joinTextblockForward: () => p2,
  joinUp: () => a2,
  keyboardShortcut: () => g2,
  lift: () => _2,
  liftEmptyBlock: () => b2,
  liftListItem: () => v2,
  newlineInCode: () => y2,
  resetAttributes: () => x2,
  scrollIntoView: () => w2,
  selectAll: () => k2,
  selectNodeBackward: () => S2,
  selectNodeForward: () => E2,
  selectParentNode: () => C2,
  selectTextblockEnd: () => T2,
  selectTextblockStart: () => A2,
  setContent: () => M2,
  setMark: () => N2,
  setMeta: () => L2,
  setNode: () => R2,
  setNodeSelection: () => I2,
  setTextSelection: () => P2,
  sinkListItem: () => D2,
  splitBlock: () => $2,
  splitListItem: () => z2,
  toggleList: () => B2,
  toggleMark: () => H2,
  toggleNode: () => F2,
  toggleWrap: () => V2,
  undoInputRule: () => j2,
  unsetAllMarks: () => W2,
  unsetMark: () => U2,
  updateAttributes: () => K2,
  wrapIn: () => q2,
  wrapInList: () => G2
});
var Vw = () => ({ editor: n, view: e }) => (requestAnimationFrame(() => {
  var t;
  n.isDestroyed || (e.dom.blur(), (t = window == null ? void 0 : window.getSelection()) == null || t.removeAllRanges());
}), !0), jw = (n = !0) => ({ commands: e }) => e.setContent("", { emitUpdate: n }), Ww = () => ({ state: n, tr: e, dispatch: t }) => {
  const { selection: i } = e, { ranges: r } = i;
  return t && r.forEach(({ $from: s, $to: o }) => {
    n.doc.nodesBetween(s.pos, o.pos, (a, l) => {
      if (a.type.isText)
        return;
      const { doc: c, mapping: u } = e, d = c.resolve(u.map(l)), f = c.resolve(u.map(l + a.nodeSize)), h = d.blockRange(f);
      if (!h)
        return;
      const p = Kr(h);
      if (a.type.isTextblock) {
        const { defaultType: b } = d.parent.contentMatchAt(d.index());
        e.setNodeMarkup(h.start, b);
      }
      (p || p === 0) && e.lift(h, p);
    });
  }), !0;
}, Uw = (n) => (e) => n(e), Kw = () => ({ state: n, dispatch: e }) => Cg(n, e), qw = (n, e) => ({ editor: t, tr: i }) => {
  const { state: r } = t, s = r.doc.slice(n.from, n.to);
  i.deleteRange(n.from, n.to);
  const o = i.mapping.map(e);
  return i.insert(o, s.content), i.setSelection(new fe(i.doc.resolve(Math.max(o - 1, 0)))), !0;
}, Gw = () => ({ tr: n, dispatch: e }) => {
  const { selection: t } = n, i = t.$anchor.node();
  if (i.content.size > 0)
    return !1;
  const r = n.selection.$anchor;
  for (let s = r.depth; s > 0; s -= 1)
    if (r.node(s).type === i.type) {
      if (e) {
        const a = r.before(s), l = r.after(s);
        n.delete(a, l).scrollIntoView();
      }
      return !0;
    }
  return !1;
}, Jw = (n) => ({ tr: e, state: t, dispatch: i }) => {
  const r = it(n, t.schema), s = e.selection.$anchor;
  for (let o = s.depth; o > 0; o -= 1)
    if (s.node(o).type === r) {
      if (i) {
        const l = s.before(o), c = s.after(o);
        e.delete(l, c).scrollIntoView();
      }
      return !0;
    }
  return !1;
}, Xw = (n) => ({ tr: e, dispatch: t }) => {
  const { from: i, to: r } = n;
  return t && e.delete(i, r), !0;
}, Yw = () => ({ state: n, dispatch: e }) => Ju(n, e), Zw = () => ({ commands: n }) => n.keyboardShortcut("Enter"), Qw = () => ({ state: n, dispatch: e }) => pw(n, e), e2 = (n, e = {}) => ({ tr: t, state: i, dispatch: r }) => {
  const s = jn(n, i.schema), { doc: o, selection: a } = t, { $from: l, from: c, to: u } = a;
  if (r) {
    const d = ml(l, s, e);
    if (d && d.from <= c && d.to >= u) {
      const f = fe.create(o, d.from, d.to);
      t.setSelection(f);
    }
  }
  return !0;
}, t2 = (n) => (e) => {
  const t = typeof n == "function" ? n(e) : n;
  for (let i = 0; i < t.length; i += 1)
    if (t[i](e))
      return !0;
  return !1;
};
function vl() {
  return navigator.platform === "Android" || /android/i.test(navigator.userAgent);
}
function qr() {
  return ["iPad Simulator", "iPhone Simulator", "iPod Simulator", "iPad", "iPhone", "iPod"].includes(navigator.platform) || // iPad on iOS 13 detection
  navigator.userAgent.includes("Mac") && "ontouchend" in document;
}
var n2 = (n = null, e = {}) => ({ editor: t, view: i, tr: r, dispatch: s }) => {
  e = {
    scrollIntoView: !0,
    ...e
  };
  const o = () => {
    (qr() || vl()) && i.dom.focus(), requestAnimationFrame(() => {
      t.isDestroyed || (i.focus(), e != null && e.scrollIntoView && t.commands.scrollIntoView());
    });
  };
  if (i.hasFocus() && n === null || n === !1)
    return !0;
  if (s && n === null && !dd(t.state.selection))
    return o(), !0;
  const a = fd(r.doc, n) || t.state.selection, l = t.state.selection.eq(a);
  return s && (l || r.setSelection(a), l && r.storedMarks && r.setStoredMarks(r.storedMarks), o()), !0;
}, i2 = (n, e) => (t) => n.every((i, r) => e(i, { ...t, index: r })), r2 = (n, e) => ({ tr: t, commands: i }) => i.insertContentAt({ from: t.selection.from, to: t.selection.to }, n, e), s2 = (n) => !("type" in n), o2 = (n, e, t) => ({ tr: i, dispatch: r, editor: s }) => {
  var o;
  if (r) {
    t = {
      parseOptions: s.options.parseOptions,
      updateSelection: !0,
      applyInputRules: !1,
      applyPasteRules: !1,
      ...t
    };
    let a;
    const { selection: l } = s.state, c = (g) => {
      s.emit("contentError", {
        editor: s,
        error: g,
        disableCollaboration: () => {
          "collaboration" in s.storage && typeof s.storage.collaboration == "object" && s.storage.collaboration && (s.storage.collaboration.isDisabled = !0);
        }
      });
    }, u = {
      preserveWhitespace: "full",
      ...t.parseOptions
    };
    if (!t.errorOnInvalidContent && !s.options.enableContentCheck && s.options.emitContentError)
      try {
        Fr(e, s.schema, {
          parseOptions: u,
          errorOnInvalidContent: !0
        });
      } catch (g) {
        c(g);
      }
    try {
      a = Fr(e, s.schema, {
        parseOptions: u,
        errorOnInvalidContent: (o = t.errorOnInvalidContent) != null ? o : s.options.enableContentCheck
      });
    } catch (g) {
      return c(g), !1;
    }
    let { from: d, to: f } = typeof n == "number" ? { from: n, to: n } : { from: n.from, to: n.to }, h = !0, p = !0;
    if ((s2(a) ? a : [a]).forEach((g) => {
      g.check(), h = h ? g.isText && g.marks.length === 0 : !1, p = p ? g.isBlock : !1;
    }), d === f && p) {
      const { parent: g } = i.doc.resolve(d);
      g.isTextblock && !g.type.spec.code && !g.childCount && (d -= 1, f += 1);
    }
    let m;
    if (h) {
      if (Array.isArray(e))
        m = e.map((g) => g.text || "").join("");
      else if (e instanceof $) {
        let g = "";
        e.forEach((v) => {
          v.text && (g += v.text);
        }), m = g;
      } else typeof e == "object" && e && e.text ? m = e.text : m = e;
      i.insertText(m, d, f);
    } else {
      m = a;
      const g = l.$from.parentOffset === 0, v = l.$from.node().isText || l.$from.node().isTextblock, x = l.$from.node().content.size > 0;
      g && v && x && (d = Math.max(0, d - 1)), i.replaceWith(d, f, m);
    }
    t.updateSelection && Gg(i, i.steps.length - 1, -1), t.applyInputRules && i.setMeta("applyInputRules", { from: d, text: m }), t.applyPasteRules && i.setMeta("applyPasteRules", { from: d, text: m });
  }
  return !0;
}, a2 = () => ({ state: n, dispatch: e }) => dw(n, e), l2 = () => ({ state: n, dispatch: e }) => fw(n, e), c2 = () => ({ state: n, dispatch: e }) => vg(n, e), u2 = () => ({ state: n, dispatch: e }) => kg(n, e), d2 = () => ({ state: n, dispatch: e, tr: t }) => {
  try {
    const i = il(n.doc, n.selection.$from.pos, -1);
    return i == null ? !1 : (t.join(i, 2), e && e(t), !0);
  } catch {
    return !1;
  }
}, f2 = () => ({ state: n, dispatch: e, tr: t }) => {
  try {
    const i = il(n.doc, n.selection.$from.pos, 1);
    return i == null ? !1 : (t.join(i, 2), e && e(t), !0);
  } catch {
    return !1;
  }
}, h2 = () => ({ state: n, dispatch: e }) => cw(n, e), p2 = () => ({ state: n, dispatch: e }) => uw(n, e);
function md() {
  return typeof navigator < "u" ? /Mac/.test(navigator.platform) : !1;
}
function m2(n) {
  const e = n.split(/-(?!$)/);
  let t = e[e.length - 1];
  t === "Space" && (t = " ");
  let i, r, s, o;
  for (let a = 0; a < e.length - 1; a += 1) {
    const l = e[a];
    if (/^(cmd|meta|m)$/i.test(l))
      o = !0;
    else if (/^a(lt)?$/i.test(l))
      i = !0;
    else if (/^(c|ctrl|control)$/i.test(l))
      r = !0;
    else if (/^s(hift)?$/i.test(l))
      s = !0;
    else if (/^mod$/i.test(l))
      qr() || md() ? o = !0 : r = !0;
    else
      throw new Error(`Unrecognized modifier name: ${l}`);
  }
  return i && (t = `Alt-${t}`), r && (t = `Ctrl-${t}`), o && (t = `Meta-${t}`), s && (t = `Shift-${t}`), t;
}
var g2 = (n) => ({ editor: e, view: t, tr: i, dispatch: r }) => {
  const s = m2(n).split(/-(?!$)/), o = s.find((c) => !["Alt", "Ctrl", "Meta", "Shift"].includes(c)), a = new KeyboardEvent("keydown", {
    key: o === "Space" ? " " : o,
    altKey: s.includes("Alt"),
    ctrlKey: s.includes("Ctrl"),
    metaKey: s.includes("Meta"),
    shiftKey: s.includes("Shift"),
    bubbles: !0,
    cancelable: !0
  }), l = e.captureTransaction(() => {
    t.someProp("handleKeyDown", (c) => c(t, a));
  });
  return l == null || l.steps.forEach((c) => {
    const u = c.map(i.mapping);
    u && r && i.maybeStep(u);
  }), !0;
}, _2 = (n, e = {}) => ({ state: t, dispatch: i }) => {
  const r = it(n, t.schema);
  return ni(t, r, e) ? hw(t, i) : !1;
}, b2 = () => ({ state: n, dispatch: e }) => Tg(n, e), v2 = (n) => ({ state: e, dispatch: t }) => {
  const i = it(n, e.schema);
  return Ew(i)(e, t);
}, y2 = () => ({ state: n, dispatch: e }) => Eg(n, e);
function iu(n, e) {
  const t = typeof e == "string" ? [e] : e;
  return Object.keys(n).reduce((i, r) => (t.includes(r) || (i[r] = n[r]), i), {});
}
var x2 = (n, e) => ({ tr: t, state: i, dispatch: r }) => {
  let s = null, o = null;
  const a = ao(
    typeof n == "string" ? n : n.name,
    i.schema
  );
  return a ? (a === "node" && (s = it(n, i.schema)), a === "mark" && (o = jn(n, i.schema)), r && t.selection.ranges.forEach((l) => {
    i.doc.nodesBetween(l.$from.pos, l.$to.pos, (c, u) => {
      s && s === c.type && t.setNodeMarkup(u, void 0, iu(c.attrs, e)), o && c.marks.length && c.marks.forEach((d) => {
        o === d.type && t.addMark(u, u + c.nodeSize, o.create(iu(d.attrs, e)));
      });
    });
  }), !0) : !1;
}, w2 = () => ({ tr: n, dispatch: e }) => (e && n.scrollIntoView(), !0), k2 = () => ({ tr: n, dispatch: e }) => {
  if (e) {
    const t = new Gt(n.doc);
    n.setSelection(t);
  }
  return !0;
}, S2 = () => ({ state: n, dispatch: e }) => xg(n, e), E2 = () => ({ state: n, dispatch: e }) => Sg(n, e), C2 = () => ({ state: n, dispatch: e }) => _w(n, e), T2 = () => ({ state: n, dispatch: e }) => yw(n, e), A2 = () => ({ state: n, dispatch: e }) => vw(n, e), M2 = (n, { errorOnInvalidContent: e, emitUpdate: t = !0, parseOptions: i = {} } = {}) => ({ editor: r, tr: s, dispatch: o, commands: a }) => {
  const { doc: l } = s;
  if (i.preserveWhitespace !== "full") {
    const c = ba(n, r.schema, i, {
      errorOnInvalidContent: e ?? r.options.enableContentCheck
    });
    return o && s.replaceWith(0, l.content.size, c).setMeta("preventUpdate", !t), !0;
  }
  return o && s.setMeta("preventUpdate", !t), a.insertContentAt({ from: 0, to: l.content.size }, n, {
    parseOptions: i,
    errorOnInvalidContent: e ?? r.options.enableContentCheck
  });
};
function O2(n, e, t) {
  var i;
  const { selection: r } = e;
  let s = null;
  if (dd(r) && (s = r.$cursor), s) {
    const a = (i = n.storedMarks) != null ? i : s.marks();
    return !!t.isInSet(a) || !a.some((l) => l.type.excludes(t));
  }
  const { ranges: o } = r;
  return o.some(({ $from: a, $to: l }) => {
    let c = a.depth === 0 ? n.doc.inlineContent && n.doc.type.allowsMarkType(t) : !1;
    return n.doc.nodesBetween(a.pos, l.pos, (u, d, f) => {
      if (c)
        return !1;
      if (u.isInline) {
        const h = !f || f.type.allowsMarkType(t), p = !!t.isInSet(u.marks) || !u.marks.some((b) => b.type.excludes(t));
        c = h && p;
      }
      return !c;
    }), c;
  });
}
var N2 = (n, e = {}) => ({ tr: t, state: i, dispatch: r }) => {
  const { selection: s } = t, { empty: o, ranges: a } = s, l = jn(n, i.schema);
  if (r)
    if (o) {
      const c = ad(i, l);
      t.addStoredMark(
        l.create({
          ...c,
          ...e
        })
      );
    } else
      a.forEach((c) => {
        const u = c.$from.pos, d = c.$to.pos;
        i.doc.nodesBetween(u, d, (f, h) => {
          const p = Math.max(h, u), b = Math.min(h + f.nodeSize, d);
          f.marks.find((g) => g.type === l) ? f.marks.forEach((g) => {
            l === g.type && t.addMark(
              p,
              b,
              l.create({
                ...g.attrs,
                ...e
              })
            );
          }) : t.addMark(p, b, l.create(e));
        });
      });
  return O2(i, t, l);
}, L2 = (n, e) => ({ tr: t }) => (t.setMeta(n, e), !0), R2 = (n, e = {}) => ({ state: t, dispatch: i, chain: r }) => {
  const s = it(n, t.schema);
  let o;
  return t.selection.$anchor.sameParent(t.selection.$head) && (o = t.selection.$anchor.parent.attrs), s.isTextblock ? r().command(({ commands: a }) => fh(s, { ...o, ...e })(t) ? !0 : a.clearNodes()).command(({ state: a }) => fh(s, { ...o, ...e })(a, i)).run() : (console.warn('[tiptap warn]: Currently "setNode()" only supports text block nodes.'), !1);
}, I2 = (n) => ({ tr: e, dispatch: t }) => {
  if (t) {
    const { doc: i } = e, r = Bn(n, 0, i.content.size), s = le.create(i, r);
    e.setSelection(s);
  }
  return !0;
}, P2 = (n) => ({ tr: e, dispatch: t }) => {
  if (t) {
    const { doc: i } = e, { from: r, to: s } = typeof n == "number" ? { from: n, to: n } : n, o = fe.atStart(i).from, a = fe.atEnd(i).to, l = Bn(r, o, a), c = Bn(s, o, a), u = fe.create(i, l, c);
    e.setSelection(u);
  }
  return !0;
}, D2 = (n) => ({ state: e, dispatch: t }) => {
  const i = it(n, e.schema);
  return Aw(i)(e, t);
};
function mh(n, e) {
  const t = n.storedMarks || n.selection.$to.parentOffset && n.selection.$from.marks();
  if (t) {
    const i = t.filter((r) => e == null ? void 0 : e.includes(r.type.name));
    n.tr.ensureMarks(i);
  }
}
var $2 = ({ keepMarks: n = !0 } = {}) => ({ tr: e, state: t, dispatch: i, editor: r }) => {
  const { selection: s, doc: o } = e, { $from: a, $to: l } = s, c = r.extensionManager.attributes, u = Cs(c, a.node().type.name, a.node().attrs);
  if (s instanceof le && s.node.isBlock)
    return !a.parentOffset || !Qn(o, a.pos) ? !1 : (i && (n && mh(t, r.extensionManager.splittableMarks), e.split(a.pos).scrollIntoView()), !0);
  if (!a.parent.isBlock)
    return !1;
  const d = l.parentOffset === l.parent.content.size, f = a.depth === 0 ? void 0 : Lg(a.node(-1).contentMatchAt(a.indexAfter(-1)));
  let h = d && f ? [
    {
      type: f,
      attrs: u
    }
  ] : void 0, p = Qn(e.doc, e.mapping.map(a.pos), 1, h);
  if (!h && !p && Qn(e.doc, e.mapping.map(a.pos), 1, f ? [{ type: f }] : void 0) && (p = !0, h = f ? [
    {
      type: f,
      attrs: u
    }
  ] : void 0), i) {
    if (p && (s instanceof fe && e.deleteSelection(), e.split(e.mapping.map(a.pos), 1, h), f && !d && !a.parentOffset && a.parent.type !== f)) {
      const b = e.mapping.map(a.before()), m = e.doc.resolve(b);
      a.node(-1).canReplaceWith(m.index(), m.index() + 1, f) && e.setNodeMarkup(e.mapping.map(a.before()), f);
    }
    n && mh(t, r.extensionManager.splittableMarks), e.scrollIntoView();
  }
  return p;
}, z2 = (n, e = {}) => ({ tr: t, state: i, dispatch: r, editor: s }) => {
  var o;
  const a = it(n, i.schema), { $from: l, $to: c } = i.selection, u = i.selection.node;
  if (u && u.isBlock || l.depth < 2 || !l.sameParent(c))
    return !1;
  const d = l.node(-1);
  if (d.type !== a)
    return !1;
  const f = s.extensionManager.attributes;
  if (l.parent.content.size === 0 && l.node(-1).childCount === l.indexAfter(-1)) {
    if (l.depth === 2 || l.node(-3).type !== a || l.index(-2) !== l.node(-2).childCount - 1)
      return !1;
    if (r) {
      let g = $.empty;
      const v = l.index(-1) ? 1 : l.index(-2) ? 2 : 3;
      for (let y = l.depth - v; y >= l.depth - 3; y -= 1)
        g = $.from(l.node(y).copy(g));
      const x = (
        // eslint-disable-next-line no-nested-ternary
        l.indexAfter(-1) < l.node(-2).childCount ? 1 : l.indexAfter(-2) < l.node(-3).childCount ? 2 : 3
      ), w = {
        ...Cs(f, l.node().type.name, l.node().attrs),
        ...e
      }, E = ((o = a.contentMatch.defaultType) == null ? void 0 : o.createAndFill(w)) || void 0;
      g = g.append($.from(a.createAndFill(null, E) || void 0));
      const k = l.before(l.depth - (v - 1));
      t.replace(k, l.after(-x), new X(g, 4 - v, 0));
      let S = -1;
      t.doc.nodesBetween(k, t.doc.content.size, (y, T) => {
        if (S > -1)
          return !1;
        y.isTextblock && y.content.size === 0 && (S = T + 1);
      }), S > -1 && t.setSelection(fe.near(t.doc.resolve(S))), t.scrollIntoView();
    }
    return !0;
  }
  const h = c.pos === l.end() ? d.contentMatchAt(0).defaultType : null, p = {
    ...Cs(f, d.type.name, d.attrs),
    ...e
  }, b = {
    ...Cs(f, l.node().type.name, l.node().attrs),
    ...e
  };
  t.delete(l.pos, c.pos);
  const m = h ? [
    { type: a, attrs: p },
    { type: h, attrs: b }
  ] : [{ type: a, attrs: p }];
  if (!Qn(t.doc, l.pos, 2))
    return !1;
  if (r) {
    const { selection: g, storedMarks: v } = i, { splittableMarks: x } = s.extensionManager, w = v || g.$to.parentOffset && g.$from.marks();
    if (t.split(l.pos, 2, m).scrollIntoView(), !w || !r)
      return !0;
    const E = w.filter((k) => x.includes(k.type.name));
    t.ensureMarks(E);
  }
  return !0;
}, Jl = (n, e) => {
  const t = Qi((o) => o.type === e)(n.selection);
  if (!t)
    return !0;
  const i = n.doc.resolve(Math.max(0, t.pos - 1)).before(t.depth);
  if (i === void 0)
    return !0;
  const r = n.doc.nodeAt(i);
  return t.node.type === (r == null ? void 0 : r.type) && Ei(n.doc, t.pos) && n.join(t.pos), !0;
}, Xl = (n, e) => {
  const t = Qi((o) => o.type === e)(n.selection);
  if (!t)
    return !0;
  const i = n.doc.resolve(t.start).after(t.depth);
  if (i === void 0)
    return !0;
  const r = n.doc.nodeAt(i);
  return t.node.type === (r == null ? void 0 : r.type) && Ei(n.doc, i) && n.join(i), !0;
}, B2 = (n, e, t, i = {}) => ({ editor: r, tr: s, state: o, dispatch: a, chain: l, commands: c, can: u }) => {
  const { extensions: d, splittableMarks: f } = r.extensionManager, h = it(n, o.schema), p = it(e, o.schema), { selection: b, storedMarks: m } = o, { $from: g, $to: v } = b, x = g.blockRange(v), w = m || b.$to.parentOffset && b.$from.marks();
  if (!x)
    return !1;
  const E = Qi((k) => nu(k.type.name, d))(b);
  if (x.depth >= 1 && E && x.depth - E.depth <= 1) {
    if (E.node.type === h)
      return c.liftListItem(p);
    if (nu(E.node.type.name, d) && h.validContent(E.node.content) && a)
      return l().command(() => (s.setNodeMarkup(E.pos, h), !0)).command(() => Jl(s, h)).command(() => Xl(s, h)).run();
  }
  return !t || !w || !a ? l().command(() => u().wrapInList(h, i) ? !0 : c.clearNodes()).wrapInList(h, i).command(() => Jl(s, h)).command(() => Xl(s, h)).run() : l().command(() => {
    const k = u().wrapInList(h, i), S = w.filter((y) => f.includes(y.type.name));
    return s.ensureMarks(S), k ? !0 : c.clearNodes();
  }).wrapInList(h, i).command(() => Jl(s, h)).command(() => Xl(s, h)).run();
}, H2 = (n, e = {}, t = {}) => ({ state: i, commands: r }) => {
  const { extendEmptyMarkRange: s = !1 } = t, o = jn(n, i.schema);
  return va(i, o, e) ? r.unsetMark(o, { extendEmptyMarkRange: s }) : r.setMark(o, e);
}, F2 = (n, e, t = {}) => ({ state: i, commands: r }) => {
  const s = it(n, i.schema), o = it(e, i.schema), a = ni(i, s, t);
  let l;
  return i.selection.$anchor.sameParent(i.selection.$head) && (l = i.selection.$anchor.parent.attrs), a ? r.setNode(o, l) : r.setNode(s, { ...l, ...t });
}, V2 = (n, e = {}) => ({ state: t, commands: i }) => {
  const r = it(n, t.schema);
  return ni(t, r, e) ? i.lift(r) : i.wrapIn(r, e);
}, j2 = () => ({ state: n, dispatch: e }) => {
  const t = n.plugins;
  for (let i = 0; i < t.length; i += 1) {
    const r = t[i];
    let s;
    if (r.spec.isInputRules && (s = r.getState(n))) {
      if (e) {
        const o = n.tr, a = s.transform;
        for (let l = a.steps.length - 1; l >= 0; l -= 1)
          o.step(a.steps[l].invert(a.docs[l]));
        if (s.text) {
          const l = o.doc.resolve(s.from).marks();
          o.replaceWith(s.from, s.to, n.schema.text(s.text, l));
        } else
          o.delete(s.from, s.to);
      }
      return !0;
    }
  }
  return !1;
}, W2 = () => ({ tr: n, dispatch: e }) => {
  const { selection: t } = n, { empty: i, ranges: r } = t;
  return i || e && r.forEach((s) => {
    n.removeMark(s.$from.pos, s.$to.pos);
  }), !0;
}, U2 = (n, e = {}) => ({ tr: t, state: i, dispatch: r }) => {
  var s;
  const { extendEmptyMarkRange: o = !1 } = e, { selection: a } = t, l = jn(n, i.schema), { $from: c, empty: u, ranges: d } = a;
  if (!r)
    return !0;
  if (u && o) {
    let { from: f, to: h } = a;
    const p = (s = c.marks().find((m) => m.type === l)) == null ? void 0 : s.attrs, b = ml(c, l, p);
    b && (f = b.from, h = b.to), t.removeMark(f, h, l);
  } else
    d.forEach((f) => {
      t.removeMark(f.$from.pos, f.$to.pos, l);
    });
  return t.removeStoredMark(l), !0;
}, K2 = (n, e = {}) => ({ tr: t, state: i, dispatch: r }) => {
  let s = null, o = null;
  const a = ao(
    typeof n == "string" ? n : n.name,
    i.schema
  );
  return a ? (a === "node" && (s = it(n, i.schema)), a === "mark" && (o = jn(n, i.schema)), r && t.selection.ranges.forEach((l) => {
    const c = l.$from.pos, u = l.$to.pos;
    let d, f, h, p;
    t.selection.empty ? i.doc.nodesBetween(c, u, (b, m) => {
      s && s === b.type && (h = Math.max(m, c), p = Math.min(m + b.nodeSize, u), d = m, f = b);
    }) : i.doc.nodesBetween(c, u, (b, m) => {
      m < c && s && s === b.type && (h = Math.max(m, c), p = Math.min(m + b.nodeSize, u), d = m, f = b), m >= c && m <= u && (s && s === b.type && t.setNodeMarkup(m, void 0, {
        ...b.attrs,
        ...e
      }), o && b.marks.length && b.marks.forEach((g) => {
        if (o === g.type) {
          const v = Math.max(m, c), x = Math.min(m + b.nodeSize, u);
          t.addMark(
            v,
            x,
            o.create({
              ...g.attrs,
              ...e
            })
          );
        }
      }));
    }), f && (d !== void 0 && t.setNodeMarkup(d, void 0, {
      ...f.attrs,
      ...e
    }), o && f.marks.length && f.marks.forEach((b) => {
      o === b.type && t.addMark(
        h,
        p,
        o.create({
          ...b.attrs,
          ...e
        })
      );
    }));
  }), !0) : !1;
}, q2 = (n, e = {}) => ({ state: t, dispatch: i }) => {
  const r = it(n, t.schema);
  return xw(r, e)(t, i);
}, G2 = (n, e = {}) => ({ state: t, dispatch: i }) => {
  const r = it(n, t.schema);
  return ww(r, e)(t, i);
}, i_ = ze.create({
  name: "commands",
  addCommands() {
    return {
      ...n_
    };
  }
}), r_ = ze.create({
  name: "delete",
  onUpdate({ transaction: n, appendedTransactions: e }) {
    var t, i, r;
    const s = () => {
      var o, a, l, c;
      if ((c = (l = (a = (o = this.editor.options.coreExtensionOptions) == null ? void 0 : o.delete) == null ? void 0 : a.filterTransaction) == null ? void 0 : l.call(a, n)) != null ? c : n.getMeta("y-sync$"))
        return;
      const u = ed(n.before, [n, ...e]);
      cd(u).forEach((h) => {
        u.mapping.mapResult(h.oldRange.from).deletedAfter && u.mapping.mapResult(h.oldRange.to).deletedBefore && u.before.nodesBetween(h.oldRange.from, h.oldRange.to, (p, b) => {
          const m = b + p.nodeSize - 2, g = h.oldRange.from <= b && m <= h.oldRange.to;
          this.editor.emit("delete", {
            type: "node",
            node: p,
            from: b,
            to: m,
            newFrom: u.mapping.map(b),
            newTo: u.mapping.map(m),
            deletedRange: h.oldRange,
            newRange: h.newRange,
            partial: !g,
            editor: this.editor,
            transaction: n,
            combinedTransform: u
          });
        });
      });
      const f = u.mapping;
      u.steps.forEach((h, p) => {
        var b, m;
        if (h instanceof Sn) {
          const g = f.slice(p).map(h.from, -1), v = f.slice(p).map(h.to), x = f.invert().map(g, -1), w = f.invert().map(v), E = (b = u.doc.nodeAt(g - 1)) == null ? void 0 : b.marks.some((S) => S.eq(h.mark)), k = (m = u.doc.nodeAt(v)) == null ? void 0 : m.marks.some((S) => S.eq(h.mark));
          this.editor.emit("delete", {
            type: "mark",
            mark: h.mark,
            from: h.from,
            to: h.to,
            deletedRange: {
              from: x,
              to: w
            },
            newRange: {
              from: g,
              to: v
            },
            partial: !!(k || E),
            editor: this.editor,
            transaction: n,
            combinedTransform: u
          });
        }
      });
    };
    (r = (i = (t = this.editor.options.coreExtensionOptions) == null ? void 0 : t.delete) == null ? void 0 : i.async) == null || r ? setTimeout(s, 0) : s();
  }
}), s_ = ze.create({
  name: "drop",
  addProseMirrorPlugins() {
    return [
      new Je({
        key: new dt("tiptapDrop"),
        props: {
          handleDrop: (n, e, t, i) => {
            this.editor.emit("drop", {
              editor: this.editor,
              event: e,
              slice: t,
              moved: i
            });
          }
        }
      })
    ];
  }
}), o_ = ze.create({
  name: "editable",
  addProseMirrorPlugins() {
    return [
      new Je({
        key: new dt("editable"),
        props: {
          editable: () => this.editor.options.editable
        }
      })
    ];
  }
}), a_ = new dt("focusEvents"), l_ = ze.create({
  name: "focusEvents",
  addProseMirrorPlugins() {
    const { editor: n } = this;
    return [
      new Je({
        key: a_,
        props: {
          handleDOMEvents: {
            focus: (e, t) => {
              n.isFocused = !0;
              const i = n.state.tr.setMeta("focus", { event: t }).setMeta("addToHistory", !1);
              return e.dispatch(i), !1;
            },
            blur: (e, t) => {
              n.isFocused = !1;
              const i = n.state.tr.setMeta("blur", { event: t }).setMeta("addToHistory", !1);
              return e.dispatch(i), !1;
            }
          }
        }
      })
    ];
  }
}), c_ = ze.create({
  name: "keymap",
  addKeyboardShortcuts() {
    const n = () => this.editor.commands.first(({ commands: o }) => [
      () => o.undoInputRule(),
      // maybe convert first text block node to default node
      () => o.command(({ tr: a }) => {
        const { selection: l, doc: c } = a, { empty: u, $anchor: d } = l, { pos: f, parent: h } = d, p = d.parent.isTextblock && f > 0 ? a.doc.resolve(f - 1) : d, b = p.parent.type.spec.isolating, m = d.pos - d.parentOffset, g = b && p.parent.childCount === 1 ? m === d.pos : pe.atStart(c).from === f;
        return !u || !h.type.isTextblock || h.textContent.length || !g || g && d.parent.type.name === "paragraph" ? !1 : o.clearNodes();
      }),
      () => o.deleteSelection(),
      () => o.joinBackward(),
      () => o.selectNodeBackward()
    ]), e = () => this.editor.commands.first(({ commands: o }) => [
      () => o.deleteSelection(),
      () => o.deleteCurrentNode(),
      () => o.joinForward(),
      () => o.selectNodeForward()
    ]), i = {
      Enter: () => this.editor.commands.first(({ commands: o }) => [
        () => o.newlineInCode(),
        () => o.createParagraphNear(),
        () => o.liftEmptyBlock(),
        () => o.splitBlock()
      ]),
      "Mod-Enter": () => this.editor.commands.exitCode(),
      Backspace: n,
      "Mod-Backspace": n,
      "Shift-Backspace": n,
      Delete: e,
      "Mod-Delete": e,
      "Mod-a": () => this.editor.commands.selectAll()
    }, r = {
      ...i
    }, s = {
      ...i,
      "Ctrl-h": n,
      "Alt-Backspace": n,
      "Ctrl-d": e,
      "Ctrl-Alt-Backspace": e,
      "Alt-Delete": e,
      "Alt-d": e,
      "Ctrl-a": () => this.editor.commands.selectTextblockStart(),
      "Ctrl-e": () => this.editor.commands.selectTextblockEnd()
    };
    return qr() || md() ? s : r;
  },
  addProseMirrorPlugins() {
    return [
      // With this plugin we check if the whole document was selected and deleted.
      // In this case we will additionally call `clearNodes()` to convert e.g. a heading
      // to a paragraph if necessary.
      // This is an alternative to ProseMirror's `AllSelection`, which doesn’t work well
      // with many other commands.
      new Je({
        key: new dt("clearDocument"),
        appendTransaction: (n, e, t) => {
          if (n.some((b) => b.getMeta("composition")))
            return;
          const i = n.some((b) => b.docChanged) && !e.doc.eq(t.doc), r = n.some((b) => b.getMeta("preventClearDocument"));
          if (!i || r)
            return;
          const { empty: s, from: o, to: a } = e.selection, l = pe.atStart(e.doc).from, c = pe.atEnd(e.doc).to;
          if (s || !(o === l && a === c) || !lo(t.doc))
            return;
          const f = t.tr, h = ro({
            state: t,
            transaction: f
          }), { commands: p } = new so({
            editor: this.editor,
            state: h
          });
          if (p.clearNodes(), !!f.steps.length)
            return f;
        }
      })
    ];
  }
}), u_ = ze.create({
  name: "paste",
  addProseMirrorPlugins() {
    return [
      new Je({
        key: new dt("tiptapPaste"),
        props: {
          handlePaste: (n, e, t) => {
            this.editor.emit("paste", {
              editor: this.editor,
              event: e,
              slice: t
            });
          }
        }
      })
    ];
  }
}), d_ = ze.create({
  name: "tabindex",
  addProseMirrorPlugins() {
    return [
      new Je({
        key: new dt("tabindex"),
        props: {
          attributes: () => this.editor.isEditable ? { tabindex: "0" } : {}
        }
      })
    ];
  }
}), f_ = class dr {
  constructor(e, t, i = !1, r = null) {
    this.currentNode = null, this.actualDepth = null, this.isBlock = i, this.resolvedPos = e, this.editor = t, this.currentNode = r;
  }
  get name() {
    return this.node.type.name;
  }
  get node() {
    return this.currentNode || this.resolvedPos.node();
  }
  get element() {
    return this.editor.view.domAtPos(this.pos).node;
  }
  get depth() {
    var e;
    return (e = this.actualDepth) != null ? e : this.resolvedPos.depth;
  }
  get pos() {
    return this.resolvedPos.pos;
  }
  get content() {
    return this.node.content;
  }
  set content(e) {
    let t = this.from, i = this.to;
    if (this.isBlock) {
      if (this.content.size === 0) {
        console.error(`You can’t set content on a block node. Tried to set content on ${this.name} at ${this.pos}`);
        return;
      }
      t = this.from + 1, i = this.to - 1;
    }
    this.editor.commands.insertContentAt({ from: t, to: i }, e);
  }
  get attributes() {
    return this.node.attrs;
  }
  get textContent() {
    return this.node.textContent;
  }
  get size() {
    return this.node.nodeSize;
  }
  get from() {
    return this.isBlock ? this.pos : this.resolvedPos.start(this.resolvedPos.depth);
  }
  get range() {
    return {
      from: this.from,
      to: this.to
    };
  }
  get to() {
    return this.isBlock ? this.pos + this.size : this.resolvedPos.end(this.resolvedPos.depth) + (this.node.isText ? 0 : 1);
  }
  get parent() {
    if (this.depth === 0)
      return null;
    const e = this.resolvedPos.start(this.resolvedPos.depth - 1), t = this.resolvedPos.doc.resolve(e);
    return new dr(t, this.editor);
  }
  get before() {
    let e = this.resolvedPos.doc.resolve(this.from - (this.isBlock ? 1 : 2));
    return e.depth !== this.depth && (e = this.resolvedPos.doc.resolve(this.from - 3)), new dr(e, this.editor);
  }
  get after() {
    let e = this.resolvedPos.doc.resolve(this.to + (this.isBlock ? 2 : 1));
    return e.depth !== this.depth && (e = this.resolvedPos.doc.resolve(this.to + 3)), new dr(e, this.editor);
  }
  get children() {
    const e = [];
    return this.node.content.forEach((t, i) => {
      const r = t.isBlock && !t.isTextblock, s = t.isAtom && !t.isText, o = this.pos + i + (s ? 0 : 1);
      if (o < 0 || o > this.resolvedPos.doc.nodeSize - 2)
        return;
      const a = this.resolvedPos.doc.resolve(o);
      if (!r && a.depth <= this.depth)
        return;
      const l = new dr(a, this.editor, r, r ? t : null);
      r && (l.actualDepth = this.depth + 1), e.push(new dr(a, this.editor, r, r ? t : null));
    }), e;
  }
  get firstChild() {
    return this.children[0] || null;
  }
  get lastChild() {
    const e = this.children;
    return e[e.length - 1] || null;
  }
  closest(e, t = {}) {
    let i = null, r = this.parent;
    for (; r && !i; ) {
      if (r.node.type.name === e)
        if (Object.keys(t).length > 0) {
          const s = r.node.attrs, o = Object.keys(t);
          for (let a = 0; a < o.length; a += 1) {
            const l = o[a];
            if (s[l] !== t[l])
              break;
          }
        } else
          i = r;
      r = r.parent;
    }
    return i;
  }
  querySelector(e, t = {}) {
    return this.querySelectorAll(e, t, !0)[0] || null;
  }
  querySelectorAll(e, t = {}, i = !1) {
    let r = [];
    if (!this.children || this.children.length === 0)
      return r;
    const s = Object.keys(t);
    return this.children.forEach((o) => {
      i && r.length > 0 || (o.node.type.name === e && s.every((l) => t[l] === o.node.attrs[l]) && r.push(o), !(i && r.length > 0) && (r = r.concat(o.querySelectorAll(e, t, i))));
    }), r;
  }
  setAttribute(e) {
    const { tr: t } = this.editor.state;
    t.setNodeMarkup(this.from, void 0, {
      ...this.node.attrs,
      ...e
    }), this.editor.view.dispatch(t);
  }
}, J2 = `.ProseMirror {
  position: relative;
}

.ProseMirror {
  word-wrap: break-word;
  white-space: pre-wrap;
  white-space: break-spaces;
  -webkit-font-variant-ligatures: none;
  font-variant-ligatures: none;
  font-feature-settings: "liga" 0; /* the above doesn't seem to work in Edge */
}

.ProseMirror [contenteditable="false"] {
  white-space: normal;
}

.ProseMirror [contenteditable="false"] [contenteditable="true"] {
  white-space: pre-wrap;
}

.ProseMirror pre {
  white-space: pre-wrap;
}

img.ProseMirror-separator {
  display: inline !important;
  border: none !important;
  margin: 0 !important;
  width: 0 !important;
  height: 0 !important;
}

.ProseMirror-gapcursor {
  display: none;
  pointer-events: none;
  position: absolute;
  margin: 0;
}

.ProseMirror-gapcursor:after {
  content: "";
  display: block;
  position: absolute;
  top: -2px;
  width: 20px;
  border-top: 1px solid black;
  animation: ProseMirror-cursor-blink 1.1s steps(2, start) infinite;
}

@keyframes ProseMirror-cursor-blink {
  to {
    visibility: hidden;
  }
}

.ProseMirror-hideselection *::selection {
  background: transparent;
}

.ProseMirror-hideselection *::-moz-selection {
  background: transparent;
}

.ProseMirror-hideselection * {
  caret-color: transparent;
}

.ProseMirror-focused .ProseMirror-gapcursor {
  display: block;
}`;
function h_(n, e, t) {
  const i = document.querySelector(`style[data-tiptap-style${t ? `-${t}` : ""}]`);
  if (i !== null)
    return i;
  const r = document.createElement("style");
  return e && r.setAttribute("nonce", e), r.setAttribute(`data-tiptap-style${t ? `-${t}` : ""}`, ""), r.innerHTML = n, document.getElementsByTagName("head")[0].appendChild(r), r;
}
var p_ = class extends Ow {
  constructor(e = {}) {
    super(), this.css = null, this.editorView = null, this.isFocused = !1, this.isInitialized = !1, this.extensionStorage = {}, this.instanceId = Math.random().toString(36).slice(2, 9), this.options = {
      element: typeof document < "u" ? document.createElement("div") : null,
      content: "",
      injectCSS: !0,
      injectNonce: void 0,
      extensions: [],
      autofocus: !1,
      editable: !0,
      editorProps: {},
      parseOptions: {},
      coreExtensionOptions: {},
      enableInputRules: !0,
      enablePasteRules: !0,
      enableCoreExtensions: !0,
      enableContentCheck: !1,
      emitContentError: !1,
      onBeforeCreate: () => null,
      onCreate: () => null,
      onUpdate: () => null,
      onSelectionUpdate: () => null,
      onTransaction: () => null,
      onFocus: () => null,
      onBlur: () => null,
      onDestroy: () => null,
      onContentError: ({ error: r }) => {
        throw r;
      },
      onPaste: () => null,
      onDrop: () => null,
      onDelete: () => null
    }, this.isCapturingTransaction = !1, this.capturedTransaction = null, this.setOptions(e), this.createExtensionManager(), this.createCommandManager(), this.createSchema(), this.on("beforeCreate", this.options.onBeforeCreate), this.emit("beforeCreate", { editor: this }), this.on("contentError", this.options.onContentError), this.on("create", this.options.onCreate), this.on("update", this.options.onUpdate), this.on("selectionUpdate", this.options.onSelectionUpdate), this.on("transaction", this.options.onTransaction), this.on("focus", this.options.onFocus), this.on("blur", this.options.onBlur), this.on("destroy", this.options.onDestroy), this.on("drop", ({ event: r, slice: s, moved: o }) => this.options.onDrop(r, s, o)), this.on("paste", ({ event: r, slice: s }) => this.options.onPaste(r, s)), this.on("delete", this.options.onDelete);
    const t = this.createDoc(), i = fd(t, this.options.autofocus);
    this.editorState = pr.create({
      doc: t,
      schema: this.schema,
      selection: i || void 0
    }), this.options.element && this.mount(this.options.element);
  }
  /**
   * Attach the editor to the DOM, creating a new editor view.
   */
  mount(e) {
    if (typeof document > "u")
      throw new Error(
        "[tiptap error]: The editor cannot be mounted because there is no 'document' defined in this environment."
      );
    this.createView(e), window.setTimeout(() => {
      this.isDestroyed || (this.commands.focus(this.options.autofocus), this.emit("create", { editor: this }), this.isInitialized = !0);
    }, 0);
  }
  /**
   * Remove the editor from the DOM, but still allow remounting at a different point in time
   */
  unmount() {
    var e;
    if (this.editorView) {
      const t = this.editorView.dom;
      t != null && t.editor && delete t.editor, this.editorView.destroy();
    }
    this.editorView = null, this.isInitialized = !1, (e = this.css) == null || e.remove(), this.css = null;
  }
  /**
   * Returns the editor storage.
   */
  get storage() {
    return this.extensionStorage;
  }
  /**
   * An object of all registered commands.
   */
  get commands() {
    return this.commandManager.commands;
  }
  /**
   * Create a command chain to call multiple commands at once.
   */
  chain() {
    return this.commandManager.chain();
  }
  /**
   * Check if a command or a command chain can be executed. Without executing it.
   */
  can() {
    return this.commandManager.can();
  }
  /**
   * Inject CSS styles.
   */
  injectCSS() {
    this.options.injectCSS && typeof document < "u" && (this.css = h_(J2, this.options.injectNonce));
  }
  /**
   * Update editor options.
   *
   * @param options A list of options
   */
  setOptions(e = {}) {
    this.options = {
      ...this.options,
      ...e
    }, !(!this.editorView || !this.state || this.isDestroyed) && (this.options.editorProps && this.view.setProps(this.options.editorProps), this.view.updateState(this.state));
  }
  /**
   * Update editable state of the editor.
   */
  setEditable(e, t = !0) {
    this.setOptions({ editable: e }), t && this.emit("update", { editor: this, transaction: this.state.tr, appendedTransactions: [] });
  }
  /**
   * Returns whether the editor is editable.
   */
  get isEditable() {
    return this.options.editable && this.view && this.view.editable;
  }
  /**
   * Returns the editor state.
   */
  get view() {
    return this.editorView ? this.editorView : new Proxy(
      {
        state: this.editorState,
        updateState: (e) => {
          this.editorState = e;
        },
        dispatch: (e) => {
          this.editorState = this.state.apply(e);
        },
        // Stub some commonly accessed properties to prevent errors
        composing: !1,
        dragging: null,
        editable: !0,
        isDestroyed: !1
      },
      {
        get: (e, t) => {
          if (t === "state")
            return this.editorState;
          if (t in e)
            return Reflect.get(e, t);
          throw new Error(
            `[tiptap error]: The editor view is not available. Cannot access view['${t}']. The editor may not be mounted yet.`
          );
        }
      }
    );
  }
  /**
   * Returns the editor state.
   */
  get state() {
    return this.editorView && (this.editorState = this.view.state), this.editorState;
  }
  /**
   * Register a ProseMirror plugin.
   *
   * @param plugin A ProseMirror plugin
   * @param handlePlugins Control how to merge the plugin into the existing plugins.
   * @returns The new editor state
   */
  registerPlugin(e, t) {
    const i = nd(t) ? t(e, [...this.state.plugins]) : [...this.state.plugins, e], r = this.state.reconfigure({ plugins: i });
    return this.view.updateState(r), r;
  }
  /**
   * Unregister a ProseMirror plugin.
   *
   * @param nameOrPluginKeyToRemove The plugins name
   * @returns The new editor state or undefined if the editor is destroyed
   */
  unregisterPlugin(e) {
    if (this.isDestroyed)
      return;
    const t = this.state.plugins;
    let i = t;
    if ([].concat(e).forEach((s) => {
      const o = typeof s == "string" ? `${s}$` : s.key;
      i = i.filter((a) => !a.key.startsWith(o));
    }), t.length === i.length)
      return;
    const r = this.state.reconfigure({
      plugins: i
    });
    return this.view.updateState(r), r;
  }
  /**
   * Creates an extension manager.
   */
  createExtensionManager() {
    var e, t;
    const r = [...this.options.enableCoreExtensions ? [
      o_,
      t_.configure({
        blockSeparator: (t = (e = this.options.coreExtensionOptions) == null ? void 0 : e.clipboardTextSerializer) == null ? void 0 : t.blockSeparator
      }),
      i_,
      l_,
      c_,
      d_,
      s_,
      u_,
      r_
    ].filter((s) => typeof this.options.enableCoreExtensions == "object" ? this.options.enableCoreExtensions[s.name] !== !1 : !0) : [], ...this.options.extensions].filter((s) => ["extension", "node", "mark"].includes(s == null ? void 0 : s.type));
    this.extensionManager = new bl(r, this);
  }
  /**
   * Creates an command manager.
   */
  createCommandManager() {
    this.commandManager = new so({
      editor: this
    });
  }
  /**
   * Creates a ProseMirror schema.
   */
  createSchema() {
    this.schema = this.extensionManager.schema;
  }
  /**
   * Creates the initial document.
   */
  createDoc() {
    let e;
    try {
      e = ba(this.options.content, this.schema, this.options.parseOptions, {
        errorOnInvalidContent: this.options.enableContentCheck
      });
    } catch (t) {
      if (!(t instanceof Error) || !["[tiptap error]: Invalid JSON content", "[tiptap error]: Invalid HTML content"].includes(t.message))
        throw t;
      this.emit("contentError", {
        editor: this,
        error: t,
        disableCollaboration: () => {
          "collaboration" in this.storage && typeof this.storage.collaboration == "object" && this.storage.collaboration && (this.storage.collaboration.isDisabled = !0), this.options.extensions = this.options.extensions.filter((i) => i.name !== "collaboration"), this.createExtensionManager();
        }
      }), e = ba(this.options.content, this.schema, this.options.parseOptions, {
        errorOnInvalidContent: !1
      });
    }
    return e;
  }
  /**
   * Creates a ProseMirror view.
   */
  createView(e) {
    var t;
    this.editorView = new Qx(e, {
      ...this.options.editorProps,
      attributes: {
        // add `role="textbox"` to the editor element
        role: "textbox",
        ...(t = this.options.editorProps) == null ? void 0 : t.attributes
      },
      dispatchTransaction: this.dispatchTransaction.bind(this),
      state: this.editorState
    });
    const i = this.state.reconfigure({
      plugins: this.extensionManager.plugins
    });
    this.view.updateState(i), this.createNodeViews(), this.prependClass(), this.injectCSS();
    const r = this.view.dom;
    r.editor = this;
  }
  /**
   * Creates all node and mark views.
   */
  createNodeViews() {
    this.view.isDestroyed || this.view.setProps({
      markViews: this.extensionManager.markViews,
      nodeViews: this.extensionManager.nodeViews
    });
  }
  /**
   * Prepend class name to element.
   */
  prependClass() {
    this.view.dom.className = `tiptap ${this.view.dom.className}`;
  }
  captureTransaction(e) {
    this.isCapturingTransaction = !0, e(), this.isCapturingTransaction = !1;
    const t = this.capturedTransaction;
    return this.capturedTransaction = null, t;
  }
  /**
   * The callback over which to send transactions (state updates) produced by the view.
   *
   * @param transaction An editor state transaction
   */
  dispatchTransaction(e) {
    if (this.view.isDestroyed)
      return;
    if (this.isCapturingTransaction) {
      if (!this.capturedTransaction) {
        this.capturedTransaction = e;
        return;
      }
      e.steps.forEach((u) => {
        var d;
        return (d = this.capturedTransaction) == null ? void 0 : d.step(u);
      });
      return;
    }
    const { state: t, transactions: i } = this.state.applyTransaction(e), r = !this.state.selection.eq(t.selection), s = i.includes(e), o = this.state;
    if (this.emit("beforeTransaction", {
      editor: this,
      transaction: e,
      nextState: t
    }), !s)
      return;
    this.view.updateState(t), this.emit("transaction", {
      editor: this,
      transaction: e,
      appendedTransactions: i.slice(1)
    }), r && this.emit("selectionUpdate", {
      editor: this,
      transaction: e
    });
    const a = i.findLast((u) => u.getMeta("focus") || u.getMeta("blur")), l = a == null ? void 0 : a.getMeta("focus"), c = a == null ? void 0 : a.getMeta("blur");
    l && this.emit("focus", {
      editor: this,
      event: l.event,
      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
      transaction: a
    }), c && this.emit("blur", {
      editor: this,
      event: c.event,
      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
      transaction: a
    }), !(e.getMeta("preventUpdate") || !i.some((u) => u.docChanged) || o.doc.eq(t.doc)) && this.emit("update", {
      editor: this,
      transaction: e,
      appendedTransactions: i.slice(1)
    });
  }
  /**
   * Get attributes of the currently selected node or mark.
   */
  getAttributes(e) {
    return ld(this.state, e);
  }
  isActive(e, t) {
    const i = typeof e == "string" ? e : null, r = typeof e == "string" ? t : e;
    return Wg(this.state, i, r);
  }
  /**
   * Get the document as JSON.
   */
  getJSON() {
    return this.state.doc.toJSON();
  }
  /**
   * Get the document as HTML.
   */
  getHTML() {
    return oo(this.state.doc.content, this.schema);
  }
  /**
   * Get the document as text.
   */
  getText(e) {
    const { blockSeparator: t = `

`, textSerializers: i = {} } = e || {};
    return od(this.state.doc, {
      blockSeparator: t,
      textSerializers: {
        ...hl(this.schema),
        ...i
      }
    });
  }
  /**
   * Check if there is no content.
   */
  get isEmpty() {
    return lo(this.state.doc);
  }
  /**
   * Destroy the editor.
   */
  destroy() {
    this.emit("destroy"), this.unmount(), this.removeAllListeners();
  }
  /**
   * Check if the editor is already destroyed.
   */
  get isDestroyed() {
    var e, t;
    return (t = (e = this.editorView) == null ? void 0 : e.isDestroyed) != null ? t : !0;
  }
  $node(e, t) {
    var i;
    return ((i = this.$doc) == null ? void 0 : i.querySelector(e, t)) || null;
  }
  $nodes(e, t) {
    var i;
    return ((i = this.$doc) == null ? void 0 : i.querySelectorAll(e, t)) || null;
  }
  $pos(e) {
    const t = this.state.doc.resolve(e);
    return new f_(t, this);
  }
  get $doc() {
    return this.$pos(0);
  }
};
function jr(n) {
  return new er({
    find: n.find,
    handler: ({ state: e, range: t, match: i }) => {
      const r = Me(n.getAttributes, void 0, i);
      if (r === !1 || r === null)
        return null;
      const { tr: s } = e, o = i[i.length - 1], a = i[0];
      if (o) {
        const l = a.search(/\S/), c = t.from + a.indexOf(o), u = c + o.length;
        if (gl(t.from, t.to, e.doc).filter((h) => h.mark.type.excluded.find((b) => b === n.type && b !== h.mark.type)).filter((h) => h.to > c).length)
          return null;
        u < t.to && s.delete(u, t.to), c > t.from && s.delete(t.from + l, c);
        const f = t.from + l + o.length;
        s.addMark(t.from + l, f, n.type.create(r || {})), s.removeStoredMark(n.type);
      }
    }
  });
}
function gd(n) {
  return new er({
    find: n.find,
    handler: ({ state: e, range: t, match: i }) => {
      const r = Me(n.getAttributes, void 0, i) || {}, { tr: s } = e, o = t.from;
      let a = t.to;
      const l = n.type.create(r);
      if (i[1]) {
        const c = i[0].lastIndexOf(i[1]);
        let u = o + c;
        u > a ? u = a : a = u + i[1].length;
        const d = i[0][i[0].length - 1];
        s.insertText(d, o + i[0].length - 1), s.replaceWith(u, a, l);
      } else if (i[0]) {
        const c = n.type.isInline ? o : o - 1;
        s.insert(c, n.type.create(r)).delete(s.mapping.map(o), s.mapping.map(a));
      }
      s.scrollIntoView();
    }
  });
}
function m_(n) {
  return new er({
    find: n.find,
    handler: ({ state: e, range: t, match: i }) => {
      const r = e.doc.resolve(t.from), s = Me(n.getAttributes, void 0, i) || {};
      if (!r.node(-1).canReplaceWith(r.index(-1), r.indexAfter(-1), n.type))
        return null;
      e.tr.delete(t.from, t.to).setBlockType(t.from, t.from, n.type, s);
    }
  });
}
function X2(n) {
  return new er({
    find: n.find,
    handler: ({ state: e, range: t, match: i }) => {
      let r = n.replace, s = t.from;
      const o = t.to;
      if (i[1]) {
        const a = i[0].lastIndexOf(i[1]);
        r += i[0].slice(a + i[1].length), s += a;
        const l = s - o;
        l > 0 && (r = i[0].slice(a - l, a) + r, s = o);
      }
      e.tr.insertText(r, s, o);
    }
  });
}
function Ji(n) {
  return new er({
    find: n.find,
    handler: ({ state: e, range: t, match: i, chain: r }) => {
      const s = Me(n.getAttributes, void 0, i) || {}, o = e.tr.delete(t.from, t.to), l = o.doc.resolve(t.from).blockRange(), c = l && Du(l, n.type, s);
      if (!c)
        return null;
      if (o.wrap(l, c), n.keepMarks && n.editor) {
        const { selection: d, storedMarks: f } = e, { splittableMarks: h } = n.editor.extensionManager, p = f || d.$to.parentOffset && d.$from.marks();
        if (p) {
          const b = p.filter((m) => h.includes(m.type.name));
          o.ensureMarks(b);
        }
      }
      if (n.keepAttributes) {
        const d = n.type.name === "bulletList" || n.type.name === "orderedList" ? "listItem" : "taskList";
        r().updateAttributes(d, s).run();
      }
      const u = o.doc.resolve(t.from - 1).nodeBefore;
      u && u.type === n.type && Ei(o.doc, t.from - 1) && (!n.joinPredicate || n.joinPredicate(i, u)) && o.join(t.from - 1);
    }
  });
}
function Y2(n) {
  return n.children;
}
var gh = (n, e) => {
  if (n === "slot")
    return 0;
  if (n instanceof Function)
    return n(e);
  const { children: t, ...i } = e ?? {};
  if (n === "svg")
    throw new Error("SVG elements are not supported in the JSX syntax, use the array syntax instead");
  return [n, i, t];
};
function g_(n, e) {
  const { selection: t } = n, { $from: i } = t;
  if (t instanceof le) {
    const s = i.index();
    return i.parent.canReplaceWith(s, s + 1, e);
  }
  let r = i.depth;
  for (; r >= 0; ) {
    const s = i.index(r);
    if (i.node(r).contentMatchAt(s).matchType(e))
      return !0;
    r -= 1;
  }
  return !1;
}
function Z2(n) {
  return n.replace(/[-/\\^$*+?.()|[\]{}]/g, "\\$&");
}
function Q2(n) {
  return typeof n == "string";
}
function _d(n, e, t = {}) {
  const { state: i } = e, { doc: r, tr: s } = i, o = n;
  r.descendants((a, l) => {
    const c = s.mapping.map(l), u = s.mapping.map(l) + a.nodeSize;
    let d = null;
    if (a.marks.forEach((h) => {
      if (h !== o)
        return !1;
      d = h;
    }), !d)
      return;
    let f = !1;
    if (Object.keys(t).forEach((h) => {
      t[h] !== d.attrs[h] && (f = !0);
    }), f) {
      const h = n.type.create({
        ...n.attrs,
        ...t
      });
      s.removeMark(c, u, n.type), s.addMark(c, u, h);
    }
  }), s.docChanged && e.view.dispatch(s);
}
var ek = class {
  constructor(n, e, t) {
    this.component = n, this.editor = e.editor, this.options = { ...t }, this.mark = e.mark, this.HTMLAttributes = e.HTMLAttributes;
  }
  get dom() {
    return this.editor.view.dom;
  }
  get contentDOM() {
    return null;
  }
  /**
   * Update the attributes of the mark in the document.
   * @param attrs The attributes to update.
   */
  updateAttributes(n, e) {
    _d(e || this.mark, this.editor, n);
  }
  ignoreMutation(n) {
    return !this.dom || !this.contentDOM ? !0 : typeof this.options.ignoreMutation == "function" ? this.options.ignoreMutation({ mutation: n }) : n.type === "selection" || this.dom.contains(n.target) && n.type === "childList" && (qr() || vl()) && this.editor.isFocused && [...Array.from(n.addedNodes), ...Array.from(n.removedNodes)].every((t) => t.isContentEditable) ? !1 : this.contentDOM === n.target && n.type === "attributes" ? !0 : !this.contentDOM.contains(n.target);
  }
}, Ie = class __ extends pd {
  constructor() {
    super(...arguments), this.type = "node";
  }
  /**
   * Create a new Node instance
   * @param config - Node configuration object or a function that returns a configuration object
   */
  static create(e = {}) {
    const t = typeof e == "function" ? e() : e;
    return new __(t);
  }
  configure(e) {
    return super.configure(e);
  }
  extend(e) {
    const t = typeof e == "function" ? e() : e;
    return super.extend(t);
  }
}, tk = class {
  constructor(n, e, t) {
    this.isDragging = !1, this.component = n, this.editor = e.editor, this.options = {
      stopEvent: null,
      ignoreMutation: null,
      ...t
    }, this.extension = e.extension, this.node = e.node, this.decorations = e.decorations, this.innerDecorations = e.innerDecorations, this.view = e.view, this.HTMLAttributes = e.HTMLAttributes, this.getPos = e.getPos, this.mount();
  }
  mount() {
  }
  get dom() {
    return this.editor.view.dom;
  }
  get contentDOM() {
    return null;
  }
  onDragStart(n) {
    var e, t, i, r, s, o, a;
    const { view: l } = this.editor, c = n.target, u = c.nodeType === 3 ? (e = c.parentElement) == null ? void 0 : e.closest("[data-drag-handle]") : c.closest("[data-drag-handle]");
    if (!this.dom || (t = this.contentDOM) != null && t.contains(c) || !u)
      return;
    let d = 0, f = 0;
    if (this.dom !== u) {
      const g = this.dom.getBoundingClientRect(), v = u.getBoundingClientRect(), x = (r = n.offsetX) != null ? r : (i = n.nativeEvent) == null ? void 0 : i.offsetX, w = (o = n.offsetY) != null ? o : (s = n.nativeEvent) == null ? void 0 : s.offsetY;
      d = v.x - g.x + x, f = v.y - g.y + w;
    }
    const h = this.dom.cloneNode(!0);
    (a = n.dataTransfer) == null || a.setDragImage(h, d, f);
    const p = this.getPos();
    if (typeof p != "number")
      return;
    const b = le.create(l.state.doc, p), m = l.state.tr.setSelection(b);
    l.dispatch(m);
  }
  stopEvent(n) {
    var e;
    if (!this.dom)
      return !1;
    if (typeof this.options.stopEvent == "function")
      return this.options.stopEvent({ event: n });
    const t = n.target;
    if (!(this.dom.contains(t) && !((e = this.contentDOM) != null && e.contains(t))))
      return !1;
    const r = n.type.startsWith("drag"), s = n.type === "drop";
    if ((["INPUT", "BUTTON", "SELECT", "TEXTAREA"].includes(t.tagName) || t.isContentEditable) && !s && !r)
      return !0;
    const { isEditable: a } = this.editor, { isDragging: l } = this, c = !!this.node.type.spec.draggable, u = le.isSelectable(this.node), d = n.type === "copy", f = n.type === "paste", h = n.type === "cut", p = n.type === "mousedown";
    if (!c && u && r && n.target === this.dom && n.preventDefault(), c && r && !l && n.target === this.dom)
      return n.preventDefault(), !1;
    if (c && a && !l && p) {
      const b = t.closest("[data-drag-handle]");
      b && (this.dom === b || this.dom.contains(b)) && (this.isDragging = !0, document.addEventListener(
        "dragend",
        () => {
          this.isDragging = !1;
        },
        { once: !0 }
      ), document.addEventListener(
        "drop",
        () => {
          this.isDragging = !1;
        },
        { once: !0 }
      ), document.addEventListener(
        "mouseup",
        () => {
          this.isDragging = !1;
        },
        { once: !0 }
      ));
    }
    return !(l || s || d || f || h || p && u);
  }
  /**
   * Called when a DOM [mutation](https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver) or a selection change happens within the view.
   * @return `false` if the editor should re-read the selection or re-parse the range around the mutation
   * @return `true` if it can safely be ignored.
   */
  ignoreMutation(n) {
    return !this.dom || !this.contentDOM ? !0 : typeof this.options.ignoreMutation == "function" ? this.options.ignoreMutation({ mutation: n }) : this.node.isLeaf || this.node.isAtom ? !0 : n.type === "selection" || this.dom.contains(n.target) && n.type === "childList" && (qr() || vl()) && this.editor.isFocused && [...Array.from(n.addedNodes), ...Array.from(n.removedNodes)].every((t) => t.isContentEditable) ? !1 : this.contentDOM === n.target && n.type === "attributes" ? !0 : !this.contentDOM.contains(n.target);
  }
  /**
   * Update the attributes of the prosemirror node.
   */
  updateAttributes(n) {
    this.editor.commands.command(({ tr: e }) => {
      const t = this.getPos();
      return typeof t != "number" ? !1 : (e.setNodeMarkup(t, void 0, {
        ...this.node.attrs,
        ...n
      }), !0);
    });
  }
  /**
   * Delete the node.
   */
  deleteNode() {
    const n = this.getPos();
    if (typeof n != "number")
      return;
    const e = n + this.node.nodeSize;
    this.editor.commands.deleteRange({ from: n, to: e });
  }
};
function Xi(n) {
  return new _l({
    find: n.find,
    handler: ({ state: e, range: t, match: i, pasteEvent: r }) => {
      const s = Me(n.getAttributes, void 0, i, r);
      if (s === !1 || s === null)
        return null;
      const { tr: o } = e, a = i[i.length - 1], l = i[0];
      let c = t.to;
      if (a) {
        const u = l.search(/\S/), d = t.from + l.indexOf(a), f = d + a.length;
        if (gl(t.from, t.to, e.doc).filter((p) => p.mark.type.excluded.find((m) => m === n.type && m !== p.mark.type)).filter((p) => p.to > d).length)
          return null;
        f < t.to && o.delete(f, t.to), d > t.from && o.delete(t.from + u, d), c = t.from + u + a.length, o.addMark(t.from + u, c, n.type.create(s || {})), o.removeStoredMark(n.type);
      }
    }
  });
}
function nk(n) {
  return new _l({
    find: n.find,
    handler({ match: e, chain: t, range: i, pasteEvent: r }) {
      const s = Me(n.getAttributes, void 0, e, r), o = Me(n.getContent, void 0, s);
      if (s === !1 || s === null)
        return null;
      const a = { type: n.type.name, attrs: s };
      o && (a.content = o), e.input && t().deleteRange(i).insertContentAt(i.from, a);
    }
  });
}
function ik(n) {
  return new _l({
    find: n.find,
    handler: ({ state: e, range: t, match: i }) => {
      let r = n.replace, s = t.from;
      const o = t.to;
      if (i[1]) {
        const a = i[0].lastIndexOf(i[1]);
        r += i[0].slice(a + i[1].length), s += a;
        const l = s - o;
        l > 0 && (r = i[0].slice(a - l, a) + r, s = o);
      }
      e.tr.insertText(r, s, o);
    }
  });
}
var rk = class {
  constructor(n) {
    this.transaction = n, this.currentStep = this.transaction.steps.length;
  }
  map(n) {
    let e = !1;
    return {
      position: this.transaction.steps.slice(this.currentStep).reduce((i, r) => {
        const s = r.getMap().mapResult(i);
        return s.deleted && (e = !0), s.pos;
      }, n),
      deleted: e
    };
  }
};
const sk = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  CommandManager: so,
  Editor: p_,
  Extension: ze,
  Fragment: Y2,
  InputRule: er,
  Mark: nn,
  MarkView: ek,
  Node: Ie,
  NodePos: f_,
  NodeView: tk,
  PasteRule: _l,
  Tracker: rk,
  callOrReturn: Me,
  canInsertNode: g_,
  combineTransactionSteps: ed,
  createChainableState: ro,
  createDocument: ba,
  createElement: gh,
  createNodeFromContent: Fr,
  createStyleTag: h_,
  defaultBlockAt: Lg,
  deleteProps: iu,
  elementFromString: mr,
  escapeForRegEx: Z2,
  extensions: Qg,
  findChildren: Nw,
  findChildrenInRange: Rg,
  findDuplicates: Dg,
  findParentNode: Qi,
  findParentNodeClosestToPos: td,
  flattenExtensions: cl,
  fromString: Pg,
  generateHTML: Lw,
  generateJSON: $g,
  generateText: Rw,
  getAttributes: ld,
  getAttributesFromExtensions: id,
  getChangedRanges: cd,
  getDebugJSON: Hg,
  getExtensionField: ae,
  getHTMLFromFragment: oo,
  getMarkAttributes: ad,
  getMarkRange: ml,
  getMarkType: jn,
  getMarksBetween: gl,
  getNodeAtPosition: Vg,
  getNodeAttributes: zg,
  getNodeType: it,
  getRenderedAttributes: js,
  getSchema: fl,
  getSchemaByResolvedExtensions: rd,
  getSchemaTypeByName: Go,
  getSchemaTypeNameByName: ao,
  getSplittedAttributes: Cs,
  getText: od,
  getTextBetween: sd,
  getTextContentFromNodes: jg,
  getTextSerializersFromSchema: hl,
  h: gh,
  injectExtensionAttributesToParseRule: eu,
  inputRulesPlugin: Jg,
  isActive: Wg,
  isAndroid: vl,
  isAtEndOfNode: Ug,
  isAtStartOfNode: Kg,
  isEmptyObject: Ig,
  isExtensionRulesEnabled: tu,
  isFunction: nd,
  isList: nu,
  isMacOS: md,
  isMarkActive: va,
  isNodeActive: ni,
  isNodeEmpty: lo,
  isNodeSelection: ud,
  isNumber: Yg,
  isPlainObject: bs,
  isRegExp: pl,
  isString: Q2,
  isTextSelection: dd,
  isiOS: qr,
  markInputRule: jr,
  markPasteRule: Xi,
  mergeAttributes: Ce,
  mergeDeep: hd,
  minMax: Bn,
  nodeInputRule: gd,
  nodePasteRule: nk,
  objectIncludes: Ws,
  pasteRulesPlugin: Zg,
  posToDOMRect: Pw,
  removeDuplicates: Bg,
  resolveExtensions: dl,
  resolveFocusPosition: fd,
  rewriteUnknownContent: Dw,
  selectionToInsertionEnd: Gg,
  sortExtensions: ul,
  splitExtensions: Vr,
  textInputRule: X2,
  textPasteRule: ik,
  textblockTypeInputRule: m_,
  updateMarkViewAttributes: _d,
  wrappingInputRule: Ji
}, Symbol.toStringTag, { value: "Module" }));
var _h = typeof globalThis < "u" ? globalThis : typeof window < "u" ? window : typeof global < "u" ? global : typeof self < "u" ? self : {};
function ok(n) {
  return n && n.__esModule && Object.prototype.hasOwnProperty.call(n, "default") ? n.default : n;
}
var Yl = { exports: {} }, rs = {}, Co = { exports: {} }, Zl = {}, Ql = {}, bh;
function bd() {
  if (bh) return Ql;
  bh = 1;
  function n(i) {
    this.__parent = i, this.__character_count = 0, this.__indent_count = -1, this.__alignment_count = 0, this.__wrap_point_index = 0, this.__wrap_point_character_count = 0, this.__wrap_point_indent_count = -1, this.__wrap_point_alignment_count = 0, this.__items = [];
  }
  n.prototype.clone_empty = function() {
    var i = new n(this.__parent);
    return i.set_indent(this.__indent_count, this.__alignment_count), i;
  }, n.prototype.item = function(i) {
    return i < 0 ? this.__items[this.__items.length + i] : this.__items[i];
  }, n.prototype.has_match = function(i) {
    for (var r = this.__items.length - 1; r >= 0; r--)
      if (this.__items[r].match(i))
        return !0;
    return !1;
  }, n.prototype.set_indent = function(i, r) {
    this.is_empty() && (this.__indent_count = i || 0, this.__alignment_count = r || 0, this.__character_count = this.__parent.get_indent_size(this.__indent_count, this.__alignment_count));
  }, n.prototype._set_wrap_point = function() {
    this.__parent.wrap_line_length && (this.__wrap_point_index = this.__items.length, this.__wrap_point_character_count = this.__character_count, this.__wrap_point_indent_count = this.__parent.next_line.__indent_count, this.__wrap_point_alignment_count = this.__parent.next_line.__alignment_count);
  }, n.prototype._should_wrap = function() {
    return this.__wrap_point_index && this.__character_count > this.__parent.wrap_line_length && this.__wrap_point_character_count > this.__parent.next_line.__character_count;
  }, n.prototype._allow_wrap = function() {
    if (this._should_wrap()) {
      this.__parent.add_new_line();
      var i = this.__parent.current_line;
      return i.set_indent(this.__wrap_point_indent_count, this.__wrap_point_alignment_count), i.__items = this.__items.slice(this.__wrap_point_index), this.__items = this.__items.slice(0, this.__wrap_point_index), i.__character_count += this.__character_count - this.__wrap_point_character_count, this.__character_count = this.__wrap_point_character_count, i.__items[0] === " " && (i.__items.splice(0, 1), i.__character_count -= 1), !0;
    }
    return !1;
  }, n.prototype.is_empty = function() {
    return this.__items.length === 0;
  }, n.prototype.last = function() {
    return this.is_empty() ? null : this.__items[this.__items.length - 1];
  }, n.prototype.push = function(i) {
    this.__items.push(i);
    var r = i.lastIndexOf(`
`);
    r !== -1 ? this.__character_count = i.length - r : this.__character_count += i.length;
  }, n.prototype.pop = function() {
    var i = null;
    return this.is_empty() || (i = this.__items.pop(), this.__character_count -= i.length), i;
  }, n.prototype._remove_indent = function() {
    this.__indent_count > 0 && (this.__indent_count -= 1, this.__character_count -= this.__parent.indent_size);
  }, n.prototype._remove_wrap_indent = function() {
    this.__wrap_point_indent_count > 0 && (this.__wrap_point_indent_count -= 1);
  }, n.prototype.trim = function() {
    for (; this.last() === " "; )
      this.__items.pop(), this.__character_count -= 1;
  }, n.prototype.toString = function() {
    var i = "";
    return this.is_empty() ? this.__parent.indent_empty_lines && (i = this.__parent.get_indent_string(this.__indent_count)) : (i = this.__parent.get_indent_string(this.__indent_count, this.__alignment_count), i += this.__items.join("")), i;
  };
  function e(i, r) {
    this.__cache = [""], this.__indent_size = i.indent_size, this.__indent_string = i.indent_char, i.indent_with_tabs || (this.__indent_string = new Array(i.indent_size + 1).join(i.indent_char)), r = r || "", i.indent_level > 0 && (r = new Array(i.indent_level + 1).join(this.__indent_string)), this.__base_string = r, this.__base_string_length = r.length;
  }
  e.prototype.get_indent_size = function(i, r) {
    var s = this.__base_string_length;
    return r = r || 0, i < 0 && (s = 0), s += i * this.__indent_size, s += r, s;
  }, e.prototype.get_indent_string = function(i, r) {
    var s = this.__base_string;
    return r = r || 0, i < 0 && (i = 0, s = ""), r += i * this.__indent_size, this.__ensure_cache(r), s += this.__cache[r], s;
  }, e.prototype.__ensure_cache = function(i) {
    for (; i >= this.__cache.length; )
      this.__add_column();
  }, e.prototype.__add_column = function() {
    var i = this.__cache.length, r = 0, s = "";
    this.__indent_size && i >= this.__indent_size && (r = Math.floor(i / this.__indent_size), i -= r * this.__indent_size, s = new Array(r + 1).join(this.__indent_string)), i && (s += new Array(i + 1).join(" ")), this.__cache.push(s);
  };
  function t(i, r) {
    this.__indent_cache = new e(i, r), this.raw = !1, this._end_with_newline = i.end_with_newline, this.indent_size = i.indent_size, this.wrap_line_length = i.wrap_line_length, this.indent_empty_lines = i.indent_empty_lines, this.__lines = [], this.previous_line = null, this.current_line = null, this.next_line = new n(this), this.space_before_token = !1, this.non_breaking_space = !1, this.previous_token_wrapped = !1, this.__add_outputline();
  }
  return t.prototype.__add_outputline = function() {
    this.previous_line = this.current_line, this.current_line = this.next_line.clone_empty(), this.__lines.push(this.current_line);
  }, t.prototype.get_line_number = function() {
    return this.__lines.length;
  }, t.prototype.get_indent_string = function(i, r) {
    return this.__indent_cache.get_indent_string(i, r);
  }, t.prototype.get_indent_size = function(i, r) {
    return this.__indent_cache.get_indent_size(i, r);
  }, t.prototype.is_empty = function() {
    return !this.previous_line && this.current_line.is_empty();
  }, t.prototype.add_new_line = function(i) {
    return this.is_empty() || !i && this.just_added_newline() ? !1 : (this.raw || this.__add_outputline(), !0);
  }, t.prototype.get_code = function(i) {
    this.trim(!0);
    var r = this.current_line.pop();
    r && (r[r.length - 1] === `
` && (r = r.replace(/\n+$/g, "")), this.current_line.push(r)), this._end_with_newline && this.__add_outputline();
    var s = this.__lines.join(`
`);
    return i !== `
` && (s = s.replace(/[\n]/g, i)), s;
  }, t.prototype.set_wrap_point = function() {
    this.current_line._set_wrap_point();
  }, t.prototype.set_indent = function(i, r) {
    return i = i || 0, r = r || 0, this.next_line.set_indent(i, r), this.__lines.length > 1 ? (this.current_line.set_indent(i, r), !0) : (this.current_line.set_indent(), !1);
  }, t.prototype.add_raw_token = function(i) {
    for (var r = 0; r < i.newlines; r++)
      this.__add_outputline();
    this.current_line.set_indent(-1), this.current_line.push(i.whitespace_before), this.current_line.push(i.text), this.space_before_token = !1, this.non_breaking_space = !1, this.previous_token_wrapped = !1;
  }, t.prototype.add_token = function(i) {
    this.__add_space_before_token(), this.current_line.push(i), this.space_before_token = !1, this.non_breaking_space = !1, this.previous_token_wrapped = this.current_line._allow_wrap();
  }, t.prototype.__add_space_before_token = function() {
    this.space_before_token && !this.just_added_newline() && (this.non_breaking_space || this.set_wrap_point(), this.current_line.push(" "));
  }, t.prototype.remove_indent = function(i) {
    for (var r = this.__lines.length; i < r; )
      this.__lines[i]._remove_indent(), i++;
    this.current_line._remove_wrap_indent();
  }, t.prototype.trim = function(i) {
    for (i = i === void 0 ? !1 : i, this.current_line.trim(); i && this.__lines.length > 1 && this.current_line.is_empty(); )
      this.__lines.pop(), this.current_line = this.__lines[this.__lines.length - 1], this.current_line.trim();
    this.previous_line = this.__lines.length > 1 ? this.__lines[this.__lines.length - 2] : null;
  }, t.prototype.just_added_newline = function() {
    return this.current_line.is_empty();
  }, t.prototype.just_added_blankline = function() {
    return this.is_empty() || this.current_line.is_empty() && this.previous_line.is_empty();
  }, t.prototype.ensure_empty_line_above = function(i, r) {
    for (var s = this.__lines.length - 2; s >= 0; ) {
      var o = this.__lines[s];
      if (o.is_empty())
        break;
      if (o.item(0).indexOf(i) !== 0 && o.item(-1) !== r) {
        this.__lines.splice(s + 1, 0, new n(this)), this.previous_line = this.__lines[this.__lines.length - 2];
        break;
      }
      s--;
    }
  }, Ql.Output = t, Ql;
}
var ec = {}, vh;
function b_() {
  if (vh) return ec;
  vh = 1;
  function n(e, t, i, r) {
    this.type = e, this.text = t, this.comments_before = null, this.newlines = i || 0, this.whitespace_before = r || "", this.parent = null, this.next = null, this.previous = null, this.opened = null, this.closed = null, this.directives = null;
  }
  return ec.Token = n, ec;
}
var tc = {}, yh;
function v_() {
  return yh || (yh = 1, function(n) {
    var e = "\\x23\\x24\\x40\\x41-\\x5a\\x5f\\x61-\\x7a", t = "\\x24\\x30-\\x39\\x41-\\x5a\\x5f\\x61-\\x7a", i = "\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u0527\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05d0-\\u05ea\\u05f0-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u08a0\\u08a2-\\u08ac\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0977\\u0979-\\u097f\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c33\\u0c35-\\u0c39\\u0c3d\\u0c58\\u0c59\\u0c60\\u0c61\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d05-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d60\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e87\\u0e88\\u0e8a\\u0e8d\\u0e94-\\u0e97\\u0e99-\\u0e9f\\u0ea1-\\u0ea3\\u0ea5\\u0ea7\\u0eaa\\u0eab\\u0ead-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f4\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f0\\u1700-\\u170c\\u170e-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1877\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191c\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19c1-\\u19c7\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4b\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1ce9-\\u1cec\\u1cee-\\u1cf1\\u1cf5\\u1cf6\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2119-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u212d\\u212f-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u2e2f\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309d-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312d\\u3131-\\u318e\\u31a0-\\u31ba\\u31f0-\\u31ff\\u3400-\\u4db5\\u4e00-\\u9fcc\\ua000-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua697\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua78e\\ua790-\\ua793\\ua7a0-\\ua7aa\\ua7f8-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa80-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uabc0-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc", r = "\\u0300-\\u036f\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u0620-\\u0649\\u0672-\\u06d3\\u06e7-\\u06e8\\u06fb-\\u06fc\\u0730-\\u074a\\u0800-\\u0814\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0840-\\u0857\\u08e4-\\u08fe\\u0900-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962-\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09d7\\u09df-\\u09e0\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2-\\u0ae3\\u0ae6-\\u0aef\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b56\\u0b57\\u0b5f-\\u0b60\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c01-\\u0c03\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62-\\u0c63\\u0c66-\\u0c6f\\u0c82\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2-\\u0ce3\\u0ce6-\\u0cef\\u0d02\\u0d03\\u0d46-\\u0d48\\u0d57\\u0d62-\\u0d63\\u0d66-\\u0d6f\\u0d82\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0df2\\u0df3\\u0e34-\\u0e3a\\u0e40-\\u0e45\\u0e50-\\u0e59\\u0eb4-\\u0eb9\\u0ec8-\\u0ecd\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f41-\\u0f47\\u0f71-\\u0f84\\u0f86-\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u1000-\\u1029\\u1040-\\u1049\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u170e-\\u1710\\u1720-\\u1730\\u1740-\\u1750\\u1772\\u1773\\u1780-\\u17b2\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u1810-\\u1819\\u1920-\\u192b\\u1930-\\u193b\\u1951-\\u196d\\u19b0-\\u19c0\\u19c8-\\u19c9\\u19d0-\\u19d9\\u1a00-\\u1a15\\u1a20-\\u1a53\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1b46-\\u1b4b\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c00-\\u1c22\\u1c40-\\u1c49\\u1c5b-\\u1c7d\\u1cd0-\\u1cd2\\u1d00-\\u1dbe\\u1e01-\\u1f15\\u200c\\u200d\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2d81-\\u2d96\\u2de0-\\u2dff\\u3021-\\u3028\\u3099\\u309a\\ua640-\\ua66d\\ua674-\\ua67d\\ua69f\\ua6f0-\\ua6f1\\ua7f8-\\ua800\\ua806\\ua80b\\ua823-\\ua827\\ua880-\\ua881\\ua8b4-\\ua8c4\\ua8d0-\\ua8d9\\ua8f3-\\ua8f7\\ua900-\\ua909\\ua926-\\ua92d\\ua930-\\ua945\\ua980-\\ua983\\ua9b3-\\ua9c0\\uaa00-\\uaa27\\uaa40-\\uaa41\\uaa4c-\\uaa4d\\uaa50-\\uaa59\\uaa7b\\uaae0-\\uaae9\\uaaf2-\\uaaf3\\uabc0-\\uabe1\\uabec\\uabed\\uabf0-\\uabf9\\ufb20-\\ufb28\\ufe00-\\ufe0f\\ufe20-\\ufe26\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f", s = "\\\\u[0-9a-fA-F]{4}|\\\\u\\{[0-9a-fA-F]+\\}", o = "(?:" + s + "|[" + e + i + "])", a = "(?:" + s + "|[" + t + i + r + "])*";
    n.identifier = new RegExp(o + a, "g"), n.identifierStart = new RegExp(o), n.identifierMatch = new RegExp("(?:" + s + "|[" + t + i + r + "])+"), n.newline = /[\n\r\u2028\u2029]/, n.lineBreak = new RegExp(`\r
|` + n.newline.source), n.allLineBreaks = new RegExp(n.lineBreak.source, "g");
  }(tc)), tc;
}
var nc = {}, ss = {}, xh;
function vd() {
  if (xh) return ss;
  xh = 1;
  function n(i, r) {
    this.raw_options = e(i, r), this.disabled = this._get_boolean("disabled"), this.eol = this._get_characters("eol", "auto"), this.end_with_newline = this._get_boolean("end_with_newline"), this.indent_size = this._get_number("indent_size", 4), this.indent_char = this._get_characters("indent_char", " "), this.indent_level = this._get_number("indent_level"), this.preserve_newlines = this._get_boolean("preserve_newlines", !0), this.max_preserve_newlines = this._get_number("max_preserve_newlines", 32786), this.preserve_newlines || (this.max_preserve_newlines = 0), this.indent_with_tabs = this._get_boolean("indent_with_tabs", this.indent_char === "	"), this.indent_with_tabs && (this.indent_char = "	", this.indent_size === 1 && (this.indent_size = 4)), this.wrap_line_length = this._get_number("wrap_line_length", this._get_number("max_char")), this.indent_empty_lines = this._get_boolean("indent_empty_lines"), this.templating = this._get_selection_list("templating", ["auto", "none", "angular", "django", "erb", "handlebars", "php", "smarty"], ["auto"]);
  }
  n.prototype._get_array = function(i, r) {
    var s = this.raw_options[i], o = r || [];
    return typeof s == "object" ? s !== null && typeof s.concat == "function" && (o = s.concat()) : typeof s == "string" && (o = s.split(/[^a-zA-Z0-9_\/\-]+/)), o;
  }, n.prototype._get_boolean = function(i, r) {
    var s = this.raw_options[i], o = s === void 0 ? !!r : !!s;
    return o;
  }, n.prototype._get_characters = function(i, r) {
    var s = this.raw_options[i], o = r || "";
    return typeof s == "string" && (o = s.replace(/\\r/, "\r").replace(/\\n/, `
`).replace(/\\t/, "	")), o;
  }, n.prototype._get_number = function(i, r) {
    var s = this.raw_options[i];
    r = parseInt(r, 10), isNaN(r) && (r = 0);
    var o = parseInt(s, 10);
    return isNaN(o) && (o = r), o;
  }, n.prototype._get_selection = function(i, r, s) {
    var o = this._get_selection_list(i, r, s);
    if (o.length !== 1)
      throw new Error(
        "Invalid Option Value: The option '" + i + `' can only be one of the following values:
` + r + `
You passed in: '` + this.raw_options[i] + "'"
      );
    return o[0];
  }, n.prototype._get_selection_list = function(i, r, s) {
    if (!r || r.length === 0)
      throw new Error("Selection list cannot be empty.");
    if (s = s || [r[0]], !this._is_valid_selection(s, r))
      throw new Error("Invalid Default Value!");
    var o = this._get_array(i, s);
    if (!this._is_valid_selection(o, r))
      throw new Error(
        "Invalid Option Value: The option '" + i + `' can contain only the following values:
` + r + `
You passed in: '` + this.raw_options[i] + "'"
      );
    return o;
  }, n.prototype._is_valid_selection = function(i, r) {
    return i.length && r.length && !i.some(function(s) {
      return r.indexOf(s) === -1;
    });
  };
  function e(i, r) {
    var s = {};
    i = t(i);
    var o;
    for (o in i)
      o !== r && (s[o] = i[o]);
    if (r && i[r])
      for (o in i[r])
        s[o] = i[r][o];
    return s;
  }
  function t(i) {
    var r = {}, s;
    for (s in i) {
      var o = s.replace(/-/g, "_");
      r[o] = i[s];
    }
    return r;
  }
  return ss.Options = n, ss.normalizeOpts = t, ss.mergeOpts = e, ss;
}
var wh;
function y_() {
  if (wh) return nc;
  wh = 1;
  var n = vd().Options, e = ["before-newline", "after-newline", "preserve-newline"];
  function t(i) {
    n.call(this, i, "js");
    var r = this.raw_options.brace_style || null;
    r === "expand-strict" ? this.raw_options.brace_style = "expand" : r === "collapse-preserve-inline" ? this.raw_options.brace_style = "collapse,preserve-inline" : this.raw_options.braces_on_own_line !== void 0 && (this.raw_options.brace_style = this.raw_options.braces_on_own_line ? "expand" : "collapse");
    var s = this._get_selection_list("brace_style", ["collapse", "expand", "end-expand", "none", "preserve-inline"]);
    this.brace_preserve_inline = !1, this.brace_style = "collapse";
    for (var o = 0; o < s.length; o++)
      s[o] === "preserve-inline" ? this.brace_preserve_inline = !0 : this.brace_style = s[o];
    this.unindent_chained_methods = this._get_boolean("unindent_chained_methods"), this.break_chained_methods = this._get_boolean("break_chained_methods"), this.space_in_paren = this._get_boolean("space_in_paren"), this.space_in_empty_paren = this._get_boolean("space_in_empty_paren"), this.jslint_happy = this._get_boolean("jslint_happy"), this.space_after_anon_function = this._get_boolean("space_after_anon_function"), this.space_after_named_function = this._get_boolean("space_after_named_function"), this.keep_array_indentation = this._get_boolean("keep_array_indentation"), this.space_before_conditional = this._get_boolean("space_before_conditional", !0), this.unescape_strings = this._get_boolean("unescape_strings"), this.e4x = this._get_boolean("e4x"), this.comma_first = this._get_boolean("comma_first"), this.operator_position = this._get_selection("operator_position", e), this.test_output_raw = this._get_boolean("test_output_raw"), this.jslint_happy && (this.space_after_anon_function = !0);
  }
  return t.prototype = new n(), nc.Options = t, nc;
}
var lr = {}, ic = {}, kh;
function yd() {
  if (kh) return ic;
  kh = 1;
  var n = RegExp.prototype.hasOwnProperty("sticky");
  function e(t) {
    this.__input = t || "", this.__input_length = this.__input.length, this.__position = 0;
  }
  return e.prototype.restart = function() {
    this.__position = 0;
  }, e.prototype.back = function() {
    this.__position > 0 && (this.__position -= 1);
  }, e.prototype.hasNext = function() {
    return this.__position < this.__input_length;
  }, e.prototype.next = function() {
    var t = null;
    return this.hasNext() && (t = this.__input.charAt(this.__position), this.__position += 1), t;
  }, e.prototype.peek = function(t) {
    var i = null;
    return t = t || 0, t += this.__position, t >= 0 && t < this.__input_length && (i = this.__input.charAt(t)), i;
  }, e.prototype.__match = function(t, i) {
    t.lastIndex = i;
    var r = t.exec(this.__input);
    return r && !(n && t.sticky) && r.index !== i && (r = null), r;
  }, e.prototype.test = function(t, i) {
    return i = i || 0, i += this.__position, i >= 0 && i < this.__input_length ? !!this.__match(t, i) : !1;
  }, e.prototype.testChar = function(t, i) {
    var r = this.peek(i);
    return t.lastIndex = 0, r !== null && t.test(r);
  }, e.prototype.match = function(t) {
    var i = this.__match(t, this.__position);
    return i ? this.__position += i[0].length : i = null, i;
  }, e.prototype.read = function(t, i, r) {
    var s = "", o;
    return t && (o = this.match(t), o && (s += o[0])), i && (o || !t) && (s += this.readUntil(i, r)), s;
  }, e.prototype.readUntil = function(t, i) {
    var r = "", s = this.__position;
    t.lastIndex = this.__position;
    var o = t.exec(this.__input);
    return o ? (s = o.index, i && (s += o[0].length)) : s = this.__input_length, r = this.__input.substring(this.__position, s), this.__position = s, r;
  }, e.prototype.readUntilAfter = function(t) {
    return this.readUntil(t, !0);
  }, e.prototype.get_regexp = function(t, i) {
    var r = null, s = "g";
    return i && n && (s = "y"), typeof t == "string" && t !== "" ? r = new RegExp(t, s) : t && (r = new RegExp(t.source, s)), r;
  }, e.prototype.get_literal_regexp = function(t) {
    return RegExp(t.replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&"));
  }, e.prototype.peekUntilAfter = function(t) {
    var i = this.__position, r = this.readUntilAfter(t);
    return this.__position = i, r;
  }, e.prototype.lookBack = function(t) {
    var i = this.__position - 1;
    return i >= t.length && this.__input.substring(i - t.length, i).toLowerCase() === t;
  }, ic.InputScanner = e, ic;
}
var To = {}, rc = {}, Sh;
function ak() {
  if (Sh) return rc;
  Sh = 1;
  function n(e) {
    this.__tokens = [], this.__tokens_length = this.__tokens.length, this.__position = 0, this.__parent_token = e;
  }
  return n.prototype.restart = function() {
    this.__position = 0;
  }, n.prototype.isEmpty = function() {
    return this.__tokens_length === 0;
  }, n.prototype.hasNext = function() {
    return this.__position < this.__tokens_length;
  }, n.prototype.next = function() {
    var e = null;
    return this.hasNext() && (e = this.__tokens[this.__position], this.__position += 1), e;
  }, n.prototype.peek = function(e) {
    var t = null;
    return e = e || 0, e += this.__position, e >= 0 && e < this.__tokens_length && (t = this.__tokens[e]), t;
  }, n.prototype.add = function(e) {
    this.__parent_token && (e.parent = this.__parent_token), this.__tokens.push(e), this.__tokens_length += 1;
  }, rc.TokenStream = n, rc;
}
var sc = {}, oc = {}, Eh;
function yl() {
  if (Eh) return oc;
  Eh = 1;
  function n(e, t) {
    this._input = e, this._starting_pattern = null, this._match_pattern = null, this._until_pattern = null, this._until_after = !1, t && (this._starting_pattern = this._input.get_regexp(t._starting_pattern, !0), this._match_pattern = this._input.get_regexp(t._match_pattern, !0), this._until_pattern = this._input.get_regexp(t._until_pattern), this._until_after = t._until_after);
  }
  return n.prototype.read = function() {
    var e = this._input.read(this._starting_pattern);
    return (!this._starting_pattern || e) && (e += this._input.read(this._match_pattern, this._until_pattern, this._until_after)), e;
  }, n.prototype.read_match = function() {
    return this._input.match(this._match_pattern);
  }, n.prototype.until_after = function(e) {
    var t = this._create();
    return t._until_after = !0, t._until_pattern = this._input.get_regexp(e), t._update(), t;
  }, n.prototype.until = function(e) {
    var t = this._create();
    return t._until_after = !1, t._until_pattern = this._input.get_regexp(e), t._update(), t;
  }, n.prototype.starting_with = function(e) {
    var t = this._create();
    return t._starting_pattern = this._input.get_regexp(e, !0), t._update(), t;
  }, n.prototype.matching = function(e) {
    var t = this._create();
    return t._match_pattern = this._input.get_regexp(e, !0), t._update(), t;
  }, n.prototype._create = function() {
    return new n(this._input, this);
  }, n.prototype._update = function() {
  }, oc.Pattern = n, oc;
}
var Ch;
function lk() {
  if (Ch) return sc;
  Ch = 1;
  var n = yl().Pattern;
  function e(t, i) {
    n.call(this, t, i), i ? this._line_regexp = this._input.get_regexp(i._line_regexp) : this.__set_whitespace_patterns("", ""), this.newline_count = 0, this.whitespace_before_token = "";
  }
  return e.prototype = new n(), e.prototype.__set_whitespace_patterns = function(t, i) {
    t += "\\t ", i += "\\n\\r", this._match_pattern = this._input.get_regexp(
      "[" + t + i + "]+",
      !0
    ), this._newline_regexp = this._input.get_regexp(
      "\\r\\n|[" + i + "]"
    );
  }, e.prototype.read = function() {
    this.newline_count = 0, this.whitespace_before_token = "";
    var t = this._input.read(this._match_pattern);
    if (t === " ")
      this.whitespace_before_token = " ";
    else if (t) {
      var i = this.__split(this._newline_regexp, t);
      this.newline_count = i.length - 1, this.whitespace_before_token = i[this.newline_count];
    }
    return t;
  }, e.prototype.matching = function(t, i) {
    var r = this._create();
    return r.__set_whitespace_patterns(t, i), r._update(), r;
  }, e.prototype._create = function() {
    return new e(this._input, this);
  }, e.prototype.__split = function(t, i) {
    t.lastIndex = 0;
    for (var r = 0, s = [], o = t.exec(i); o; )
      s.push(i.substring(r, o.index)), r = o.index + o[0].length, o = t.exec(i);
    return r < i.length ? s.push(i.substring(r, i.length)) : s.push(""), s;
  }, sc.WhitespacePattern = e, sc;
}
var Th;
function ya() {
  if (Th) return To;
  Th = 1;
  var n = yd().InputScanner, e = b_().Token, t = ak().TokenStream, i = lk().WhitespacePattern, r = {
    START: "TK_START",
    RAW: "TK_RAW",
    EOF: "TK_EOF"
  }, s = function(o, a) {
    this._input = new n(o), this._options = a || {}, this.__tokens = null, this._patterns = {}, this._patterns.whitespace = new i(this._input);
  };
  return s.prototype.tokenize = function() {
    this._input.restart(), this.__tokens = new t(), this._reset();
    for (var o, a = new e(r.START, ""), l = null, c = [], u = new t(); a.type !== r.EOF; ) {
      for (o = this._get_next_token(a, l); this._is_comment(o); )
        u.add(o), o = this._get_next_token(a, l);
      u.isEmpty() || (o.comments_before = u, u = new t()), o.parent = l, this._is_opening(o) ? (c.push(l), l = o) : l && this._is_closing(o, l) && (o.opened = l, l.closed = o, l = c.pop(), o.parent = l), o.previous = a, a.next = o, this.__tokens.add(o), a = o;
    }
    return this.__tokens;
  }, s.prototype._is_first_token = function() {
    return this.__tokens.isEmpty();
  }, s.prototype._reset = function() {
  }, s.prototype._get_next_token = function(o, a) {
    this._readWhitespace();
    var l = this._input.read(/.+/g);
    return l ? this._create_token(r.RAW, l) : this._create_token(r.EOF, "");
  }, s.prototype._is_comment = function(o) {
    return !1;
  }, s.prototype._is_opening = function(o) {
    return !1;
  }, s.prototype._is_closing = function(o, a) {
    return !1;
  }, s.prototype._create_token = function(o, a) {
    var l = new e(
      o,
      a,
      this._patterns.whitespace.newline_count,
      this._patterns.whitespace.whitespace_before_token
    );
    return l;
  }, s.prototype._readWhitespace = function() {
    return this._patterns.whitespace.read();
  }, To.Tokenizer = s, To.TOKEN = r, To;
}
var ac = {}, Ah;
function xd() {
  if (Ah) return ac;
  Ah = 1;
  function n(e, t) {
    e = typeof e == "string" ? e : e.source, t = typeof t == "string" ? t : t.source, this.__directives_block_pattern = new RegExp(e + / beautify( \w+[:]\w+)+ /.source + t, "g"), this.__directive_pattern = / (\w+)[:](\w+)/g, this.__directives_end_ignore_pattern = new RegExp(e + /\sbeautify\signore:end\s/.source + t, "g");
  }
  return n.prototype.get_directives = function(e) {
    if (!e.match(this.__directives_block_pattern))
      return null;
    var t = {};
    this.__directive_pattern.lastIndex = 0;
    for (var i = this.__directive_pattern.exec(e); i; )
      t[i[1]] = i[2], i = this.__directive_pattern.exec(e);
    return t;
  }, n.prototype.readIgnored = function(e) {
    return e.readUntilAfter(this.__directives_end_ignore_pattern);
  }, ac.Directives = n, ac;
}
var lc = {}, Mh;
function x_() {
  if (Mh) return lc;
  Mh = 1;
  var n = yl().Pattern, e = {
    django: !1,
    erb: !1,
    handlebars: !1,
    php: !1,
    smarty: !1,
    angular: !1
  };
  function t(i, r) {
    n.call(this, i, r), this.__template_pattern = null, this._disabled = Object.assign({}, e), this._excluded = Object.assign({}, e), r && (this.__template_pattern = this._input.get_regexp(r.__template_pattern), this._excluded = Object.assign(this._excluded, r._excluded), this._disabled = Object.assign(this._disabled, r._disabled));
    var s = new n(i);
    this.__patterns = {
      handlebars_comment: s.starting_with(/{{!--/).until_after(/--}}/),
      handlebars_unescaped: s.starting_with(/{{{/).until_after(/}}}/),
      handlebars: s.starting_with(/{{/).until_after(/}}/),
      php: s.starting_with(/<\?(?:[= ]|php)/).until_after(/\?>/),
      erb: s.starting_with(/<%[^%]/).until_after(/[^%]%>/),
      // django coflicts with handlebars a bit.
      django: s.starting_with(/{%/).until_after(/%}/),
      django_value: s.starting_with(/{{/).until_after(/}}/),
      django_comment: s.starting_with(/{#/).until_after(/#}/),
      smarty: s.starting_with(/{(?=[^}{\s\n])/).until_after(/[^\s\n]}/),
      smarty_comment: s.starting_with(/{\*/).until_after(/\*}/),
      smarty_literal: s.starting_with(/{literal}/).until_after(/{\/literal}/)
    };
  }
  return t.prototype = new n(), t.prototype._create = function() {
    return new t(this._input, this);
  }, t.prototype._update = function() {
    this.__set_templated_pattern();
  }, t.prototype.disable = function(i) {
    var r = this._create();
    return r._disabled[i] = !0, r._update(), r;
  }, t.prototype.read_options = function(i) {
    var r = this._create();
    for (var s in e)
      r._disabled[s] = i.templating.indexOf(s) === -1;
    return r._update(), r;
  }, t.prototype.exclude = function(i) {
    var r = this._create();
    return r._excluded[i] = !0, r._update(), r;
  }, t.prototype.read = function() {
    var i = "";
    this._match_pattern ? i = this._input.read(this._starting_pattern) : i = this._input.read(this._starting_pattern, this.__template_pattern);
    for (var r = this._read_template(); r; )
      this._match_pattern ? r += this._input.read(this._match_pattern) : r += this._input.readUntil(this.__template_pattern), i += r, r = this._read_template();
    return this._until_after && (i += this._input.readUntilAfter(this._until_pattern)), i;
  }, t.prototype.__set_templated_pattern = function() {
    var i = [];
    this._disabled.php || i.push(this.__patterns.php._starting_pattern.source), this._disabled.handlebars || i.push(this.__patterns.handlebars._starting_pattern.source), this._disabled.angular || i.push(this.__patterns.handlebars._starting_pattern.source), this._disabled.erb || i.push(this.__patterns.erb._starting_pattern.source), this._disabled.django || (i.push(this.__patterns.django._starting_pattern.source), i.push(this.__patterns.django_value._starting_pattern.source), i.push(this.__patterns.django_comment._starting_pattern.source)), this._disabled.smarty || i.push(this.__patterns.smarty._starting_pattern.source), this._until_pattern && i.push(this._until_pattern.source), this.__template_pattern = this._input.get_regexp("(?:" + i.join("|") + ")");
  }, t.prototype._read_template = function() {
    var i = "", r = this._input.peek();
    if (r === "<") {
      var s = this._input.peek(1);
      !this._disabled.php && !this._excluded.php && s === "?" && (i = i || this.__patterns.php.read()), !this._disabled.erb && !this._excluded.erb && s === "%" && (i = i || this.__patterns.erb.read());
    } else r === "{" && (!this._disabled.handlebars && !this._excluded.handlebars && (i = i || this.__patterns.handlebars_comment.read(), i = i || this.__patterns.handlebars_unescaped.read(), i = i || this.__patterns.handlebars.read()), this._disabled.django || (!this._excluded.django && !this._excluded.handlebars && (i = i || this.__patterns.django_value.read()), this._excluded.django || (i = i || this.__patterns.django_comment.read(), i = i || this.__patterns.django.read())), this._disabled.smarty || this._disabled.django && this._disabled.handlebars && (i = i || this.__patterns.smarty_comment.read(), i = i || this.__patterns.smarty_literal.read(), i = i || this.__patterns.smarty.read()));
    return i;
  }, lc.TemplatablePattern = t, lc;
}
var Oh;
function Ao() {
  if (Oh) return lr;
  Oh = 1;
  var n = yd().InputScanner, e = ya().Tokenizer, t = ya().TOKEN, i = xd().Directives, r = v_(), s = yl().Pattern, o = x_().TemplatablePattern;
  function a(k, S) {
    return S.indexOf(k) !== -1;
  }
  var l = {
    START_EXPR: "TK_START_EXPR",
    END_EXPR: "TK_END_EXPR",
    START_BLOCK: "TK_START_BLOCK",
    END_BLOCK: "TK_END_BLOCK",
    WORD: "TK_WORD",
    RESERVED: "TK_RESERVED",
    SEMICOLON: "TK_SEMICOLON",
    STRING: "TK_STRING",
    EQUALS: "TK_EQUALS",
    OPERATOR: "TK_OPERATOR",
    COMMA: "TK_COMMA",
    BLOCK_COMMENT: "TK_BLOCK_COMMENT",
    COMMENT: "TK_COMMENT",
    DOT: "TK_DOT",
    UNKNOWN: "TK_UNKNOWN",
    START: t.START,
    RAW: t.RAW,
    EOF: t.EOF
  }, c = new i(/\/\*/, /\*\//), u = /0[xX][0123456789abcdefABCDEF_]*n?|0[oO][01234567_]*n?|0[bB][01_]*n?|\d[\d_]*n|(?:\.\d[\d_]*|\d[\d_]*\.?[\d_]*)(?:[eE][+-]?[\d_]+)?/, d = /[0-9]/, f = /[^\d\.]/, h = ">>> === !== &&= ??= ||= << && >= ** != == <= >> || ?? |> < / - + > : & % ? ^ | *".split(" "), p = ">>>= ... >>= <<= === >>> !== **= &&= ??= ||= => ^= :: /= << <= == && -= >= >> != -- += ** || ?? ++ %= &= *= |= |> = ! ? > < : / ^ - + * & % ~ |";
  p = p.replace(/[-[\]{}()*+?.,\\^$|#]/g, "\\$&"), p = "\\?\\.(?!\\d) " + p, p = p.replace(/ /g, "|");
  var b = new RegExp(p), m = "continue,try,throw,return,var,let,const,if,switch,case,default,for,while,break,function,import,export".split(","), g = m.concat(["do", "in", "of", "else", "get", "set", "new", "catch", "finally", "typeof", "yield", "async", "await", "from", "as", "class", "extends"]), v = new RegExp("^(?:" + g.join("|") + ")$"), x, w = function(k, S) {
    e.call(this, k, S), this._patterns.whitespace = this._patterns.whitespace.matching(
      /\u00A0\u1680\u180e\u2000-\u200a\u202f\u205f\u3000\ufeff/.source,
      /\u2028\u2029/.source
    );
    var y = new s(this._input), T = new o(this._input).read_options(this._options);
    this.__patterns = {
      template: T,
      identifier: T.starting_with(r.identifier).matching(r.identifierMatch),
      number: y.matching(u),
      punct: y.matching(b),
      // comment ends just before nearest linefeed or end of file
      comment: y.starting_with(/\/\//).until(/[\n\r\u2028\u2029]/),
      //  /* ... */ comment ends with nearest */ or end of file
      block_comment: y.starting_with(/\/\*/).until_after(/\*\//),
      html_comment_start: y.matching(/<!--/),
      html_comment_end: y.matching(/-->/),
      include: y.starting_with(/#include/).until_after(r.lineBreak),
      shebang: y.starting_with(/#!/).until_after(r.lineBreak),
      xml: y.matching(/[\s\S]*?<(\/?)([-a-zA-Z:0-9_.]+|{[^}]+?}|!\[CDATA\[[^\]]*?\]\]|)(\s*{[^}]+?}|\s+[-a-zA-Z:0-9_.]+|\s+[-a-zA-Z:0-9_.]+\s*=\s*('[^']*'|"[^"]*"|{([^{}]|{[^}]+?})+?}))*\s*(\/?)\s*>/),
      single_quote: T.until(/['\\\n\r\u2028\u2029]/),
      double_quote: T.until(/["\\\n\r\u2028\u2029]/),
      template_text: T.until(/[`\\$]/),
      template_expression: T.until(/[`}\\]/)
    };
  };
  w.prototype = new e(), w.prototype._is_comment = function(k) {
    return k.type === l.COMMENT || k.type === l.BLOCK_COMMENT || k.type === l.UNKNOWN;
  }, w.prototype._is_opening = function(k) {
    return k.type === l.START_BLOCK || k.type === l.START_EXPR;
  }, w.prototype._is_closing = function(k, S) {
    return (k.type === l.END_BLOCK || k.type === l.END_EXPR) && S && (k.text === "]" && S.text === "[" || k.text === ")" && S.text === "(" || k.text === "}" && S.text === "{");
  }, w.prototype._reset = function() {
    x = !1;
  }, w.prototype._get_next_token = function(k, S) {
    var y = null;
    this._readWhitespace();
    var T = this._input.peek();
    return T === null ? this._create_token(l.EOF, "") : (y = y || this._read_non_javascript(T), y = y || this._read_string(T), y = y || this._read_pair(T, this._input.peek(1)), y = y || this._read_word(k), y = y || this._read_singles(T), y = y || this._read_comment(T), y = y || this._read_regexp(T, k), y = y || this._read_xml(T, k), y = y || this._read_punctuation(), y = y || this._create_token(l.UNKNOWN, this._input.next()), y);
  }, w.prototype._read_word = function(k) {
    var S;
    if (S = this.__patterns.identifier.read(), S !== "")
      return S = S.replace(r.allLineBreaks, `
`), !(k.type === l.DOT || k.type === l.RESERVED && (k.text === "set" || k.text === "get")) && v.test(S) ? (S === "in" || S === "of") && (k.type === l.WORD || k.type === l.STRING) ? this._create_token(l.OPERATOR, S) : this._create_token(l.RESERVED, S) : this._create_token(l.WORD, S);
    if (S = this.__patterns.number.read(), S !== "")
      return this._create_token(l.WORD, S);
  }, w.prototype._read_singles = function(k) {
    var S = null;
    return k === "(" || k === "[" ? S = this._create_token(l.START_EXPR, k) : k === ")" || k === "]" ? S = this._create_token(l.END_EXPR, k) : k === "{" ? S = this._create_token(l.START_BLOCK, k) : k === "}" ? S = this._create_token(l.END_BLOCK, k) : k === ";" ? S = this._create_token(l.SEMICOLON, k) : k === "." && f.test(this._input.peek(1)) ? S = this._create_token(l.DOT, k) : k === "," && (S = this._create_token(l.COMMA, k)), S && this._input.next(), S;
  }, w.prototype._read_pair = function(k, S) {
    var y = null;
    return k === "#" && S === "{" && (y = this._create_token(l.START_BLOCK, k + S)), y && (this._input.next(), this._input.next()), y;
  }, w.prototype._read_punctuation = function() {
    var k = this.__patterns.punct.read();
    if (k !== "")
      return k === "=" ? this._create_token(l.EQUALS, k) : k === "?." ? this._create_token(l.DOT, k) : this._create_token(l.OPERATOR, k);
  }, w.prototype._read_non_javascript = function(k) {
    var S = "";
    if (k === "#") {
      if (this._is_first_token() && (S = this.__patterns.shebang.read(), S))
        return this._create_token(l.UNKNOWN, S.trim() + `
`);
      if (S = this.__patterns.include.read(), S)
        return this._create_token(l.UNKNOWN, S.trim() + `
`);
      k = this._input.next();
      var y = "#";
      if (this._input.hasNext() && this._input.testChar(d)) {
        do
          k = this._input.next(), y += k;
        while (this._input.hasNext() && k !== "#" && k !== "=");
        return k === "#" || (this._input.peek() === "[" && this._input.peek(1) === "]" ? (y += "[]", this._input.next(), this._input.next()) : this._input.peek() === "{" && this._input.peek(1) === "}" && (y += "{}", this._input.next(), this._input.next())), this._create_token(l.WORD, y);
      }
      this._input.back();
    } else if (k === "<" && this._is_first_token()) {
      if (S = this.__patterns.html_comment_start.read(), S) {
        for (; this._input.hasNext() && !this._input.testChar(r.newline); )
          S += this._input.next();
        return x = !0, this._create_token(l.COMMENT, S);
      }
    } else if (x && k === "-" && (S = this.__patterns.html_comment_end.read(), S))
      return x = !1, this._create_token(l.COMMENT, S);
    return null;
  }, w.prototype._read_comment = function(k) {
    var S = null;
    if (k === "/") {
      var y = "";
      if (this._input.peek(1) === "*") {
        y = this.__patterns.block_comment.read();
        var T = c.get_directives(y);
        T && T.ignore === "start" && (y += c.readIgnored(this._input)), y = y.replace(r.allLineBreaks, `
`), S = this._create_token(l.BLOCK_COMMENT, y), S.directives = T;
      } else this._input.peek(1) === "/" && (y = this.__patterns.comment.read(), S = this._create_token(l.COMMENT, y));
    }
    return S;
  }, w.prototype._read_string = function(k) {
    if (k === "`" || k === "'" || k === '"') {
      var S = this._input.next();
      return this.has_char_escapes = !1, k === "`" ? S += this._read_string_recursive("`", !0, "${") : S += this._read_string_recursive(k), this.has_char_escapes && this._options.unescape_strings && (S = E(S)), this._input.peek() === k && (S += this._input.next()), S = S.replace(r.allLineBreaks, `
`), this._create_token(l.STRING, S);
    }
    return null;
  }, w.prototype._allow_regexp_or_xml = function(k) {
    return k.type === l.RESERVED && a(k.text, ["return", "case", "throw", "else", "do", "typeof", "yield"]) || k.type === l.END_EXPR && k.text === ")" && k.opened.previous.type === l.RESERVED && a(k.opened.previous.text, ["if", "while", "for"]) || a(k.type, [
      l.COMMENT,
      l.START_EXPR,
      l.START_BLOCK,
      l.START,
      l.END_BLOCK,
      l.OPERATOR,
      l.EQUALS,
      l.EOF,
      l.SEMICOLON,
      l.COMMA
    ]);
  }, w.prototype._read_regexp = function(k, S) {
    if (k === "/" && this._allow_regexp_or_xml(S)) {
      for (var y = this._input.next(), T = !1, _ = !1; this._input.hasNext() && (T || _ || this._input.peek() !== k) && !this._input.testChar(r.newline); )
        y += this._input.peek(), T ? T = !1 : (T = this._input.peek() === "\\", this._input.peek() === "[" ? _ = !0 : this._input.peek() === "]" && (_ = !1)), this._input.next();
      return this._input.peek() === k && (y += this._input.next(), y += this._input.read(r.identifier)), this._create_token(l.STRING, y);
    }
    return null;
  }, w.prototype._read_xml = function(k, S) {
    if (this._options.e4x && k === "<" && this._allow_regexp_or_xml(S)) {
      var y = "", T = this.__patterns.xml.read_match();
      if (T) {
        for (var _ = T[2].replace(/^{\s+/, "{").replace(/\s+}$/, "}"), C = _.indexOf("{") === 0, M = 0; T; ) {
          var H = !!T[1], D = T[2], F = !!T[T.length - 1] || D.slice(0, 8) === "![CDATA[";
          if (!F && (D === _ || C && D.replace(/^{\s+/, "{").replace(/\s+}$/, "}")) && (H ? --M : ++M), y += T[0], M <= 0)
            break;
          T = this.__patterns.xml.read_match();
        }
        return T || (y += this._input.match(/[\s\S]*/g)[0]), y = y.replace(r.allLineBreaks, `
`), this._create_token(l.STRING, y);
      }
    }
    return null;
  };
  function E(k) {
    for (var S = "", y = 0, T = new n(k), _ = null; T.hasNext(); )
      if (_ = T.match(/([\s]|[^\\]|\\\\)+/g), _ && (S += _[0]), T.peek() === "\\") {
        if (T.next(), T.peek() === "x")
          _ = T.match(/x([0-9A-Fa-f]{2})/g);
        else if (T.peek() === "u")
          _ = T.match(/u([0-9A-Fa-f]{4})/g), _ || (_ = T.match(/u\{([0-9A-Fa-f]+)\}/g));
        else {
          S += "\\", T.hasNext() && (S += T.next());
          continue;
        }
        if (!_ || (y = parseInt(_[1], 16), y > 126 && y <= 255 && _[0].indexOf("x") === 0))
          return k;
        y >= 0 && y < 32 || y > 1114111 ? S += "\\" + _[0] : y === 34 || y === 39 || y === 92 ? S += "\\" + String.fromCharCode(y) : S += String.fromCharCode(y);
      }
    return S;
  }
  return w.prototype._read_string_recursive = function(k, S, y) {
    var T, _;
    k === "'" ? _ = this.__patterns.single_quote : k === '"' ? _ = this.__patterns.double_quote : k === "`" ? _ = this.__patterns.template_text : k === "}" && (_ = this.__patterns.template_expression);
    for (var C = _.read(), M = ""; this._input.hasNext(); ) {
      if (M = this._input.next(), M === k || !S && r.newline.test(M)) {
        this._input.back();
        break;
      } else M === "\\" && this._input.hasNext() ? (T = this._input.peek(), T === "x" || T === "u" ? this.has_char_escapes = !0 : T === "\r" && this._input.peek(1) === `
` && this._input.next(), M += this._input.next()) : y && (y === "${" && M === "$" && this._input.peek() === "{" && (M += this._input.next()), y === M && (k === "`" ? M += this._read_string_recursive("}", S, "`") : M += this._read_string_recursive("`", S, "${"), this._input.hasNext() && (M += this._input.next())));
      M += _.read(), C += M;
    }
    return C;
  }, lr.Tokenizer = w, lr.TOKEN = l, lr.positionable_operators = h.slice(), lr.line_starters = m.slice(), lr;
}
var Nh;
function ck() {
  if (Nh) return Zl;
  Nh = 1;
  var n = bd().Output, e = b_().Token, t = v_(), i = y_().Options, r = Ao().Tokenizer, s = Ao().line_starters, o = Ao().positionable_operators, a = Ao().TOKEN;
  function l(_, C) {
    return C.indexOf(_) !== -1;
  }
  function c(_) {
    return _.replace(/^\s+/g, "");
  }
  function u(_) {
    for (var C = {}, M = 0; M < _.length; M++)
      C[_[M].replace(/-/g, "_")] = _[M];
    return C;
  }
  function d(_, C) {
    return _ && _.type === a.RESERVED && _.text === C;
  }
  function f(_, C) {
    return _ && _.type === a.RESERVED && l(_.text, C);
  }
  var h = ["case", "return", "do", "if", "throw", "else", "await", "break", "continue", "async"], p = ["before-newline", "after-newline", "preserve-newline"], b = u(p), m = [b.before_newline, b.preserve_newline], g = {
    BlockStatement: "BlockStatement",
    // 'BLOCK'
    Statement: "Statement",
    // 'STATEMENT'
    ObjectLiteral: "ObjectLiteral",
    // 'OBJECT',
    ArrayLiteral: "ArrayLiteral",
    //'[EXPRESSION]',
    ForInitializer: "ForInitializer",
    //'(FOR-EXPRESSION)',
    Conditional: "Conditional",
    //'(COND-EXPRESSION)',
    Expression: "Expression"
    //'(EXPRESSION)'
  };
  function v(_, C) {
    C.multiline_frame || C.mode === g.ForInitializer || C.mode === g.Conditional || _.remove_indent(C.start_line_index);
  }
  function x(_) {
    _ = _.replace(t.allLineBreaks, `
`);
    for (var C = [], M = _.indexOf(`
`); M !== -1; )
      C.push(_.substring(0, M)), _ = _.substring(M + 1), M = _.indexOf(`
`);
    return _.length && C.push(_), C;
  }
  function w(_) {
    return _ === g.ArrayLiteral;
  }
  function E(_) {
    return l(_, [g.Expression, g.ForInitializer, g.Conditional]);
  }
  function k(_, C) {
    for (var M = 0; M < _.length; M++) {
      var H = _[M].trim();
      if (H.charAt(0) !== C)
        return !1;
    }
    return !0;
  }
  function S(_, C) {
    for (var M = 0, H = _.length, D; M < H; M++)
      if (D = _[M], D && D.indexOf(C) !== 0)
        return !1;
    return !0;
  }
  function y(_, C) {
    C = C || {}, this._source_text = _ || "", this._output = null, this._tokens = null, this._last_last_text = null, this._flags = null, this._previous_flags = null, this._flag_store = null, this._options = new i(C);
  }
  y.prototype.create_flags = function(_, C) {
    var M = 0;
    _ && (M = _.indentation_level, !this._output.just_added_newline() && _.line_indent_level > M && (M = _.line_indent_level));
    var H = {
      mode: C,
      parent: _,
      last_token: _ ? _.last_token : new e(a.START_BLOCK, ""),
      // last token text
      last_word: _ ? _.last_word : "",
      // last TOKEN.WORD passed
      declaration_statement: !1,
      declaration_assignment: !1,
      multiline_frame: !1,
      inline_frame: !1,
      if_block: !1,
      else_block: !1,
      class_start_block: !1,
      // class A { INSIDE HERE } or class B extends C { INSIDE HERE }
      do_block: !1,
      do_while: !1,
      import_block: !1,
      in_case_statement: !1,
      // switch(..){ INSIDE HERE }
      in_case: !1,
      // we're on the exact line with "case 0:"
      case_body: !1,
      // the indented case-action block
      case_block: !1,
      // the indented case-action block is wrapped with {}
      indentation_level: M,
      alignment: 0,
      line_indent_level: _ ? _.line_indent_level : M,
      start_line_index: this._output.get_line_number(),
      ternary_depth: 0
    };
    return H;
  }, y.prototype._reset = function(_) {
    var C = _.match(/^[\t ]*/)[0];
    this._last_last_text = "", this._output = new n(this._options, C), this._output.raw = this._options.test_output_raw, this._flag_store = [], this.set_mode(g.BlockStatement);
    var M = new r(_, this._options);
    return this._tokens = M.tokenize(), _;
  }, y.prototype.beautify = function() {
    if (this._options.disabled)
      return this._source_text;
    var _, C = this._reset(this._source_text), M = this._options.eol;
    this._options.eol === "auto" && (M = `
`, C && t.lineBreak.test(C || "") && (M = C.match(t.lineBreak)[0]));
    for (var H = this._tokens.next(); H; )
      this.handle_token(H), this._last_last_text = this._flags.last_token.text, this._flags.last_token = H, H = this._tokens.next();
    return _ = this._output.get_code(M), _;
  }, y.prototype.handle_token = function(_, C) {
    _.type === a.START_EXPR ? this.handle_start_expr(_) : _.type === a.END_EXPR ? this.handle_end_expr(_) : _.type === a.START_BLOCK ? this.handle_start_block(_) : _.type === a.END_BLOCK ? this.handle_end_block(_) : _.type === a.WORD ? this.handle_word(_) : _.type === a.RESERVED ? this.handle_word(_) : _.type === a.SEMICOLON ? this.handle_semicolon(_) : _.type === a.STRING ? this.handle_string(_) : _.type === a.EQUALS ? this.handle_equals(_) : _.type === a.OPERATOR ? this.handle_operator(_) : _.type === a.COMMA ? this.handle_comma(_) : _.type === a.BLOCK_COMMENT ? this.handle_block_comment(_, C) : _.type === a.COMMENT ? this.handle_comment(_, C) : _.type === a.DOT ? this.handle_dot(_) : _.type === a.EOF ? this.handle_eof(_) : _.type === a.UNKNOWN ? this.handle_unknown(_, C) : this.handle_unknown(_, C);
  }, y.prototype.handle_whitespace_and_comments = function(_, C) {
    var M = _.newlines, H = this._options.keep_array_indentation && w(this._flags.mode);
    if (_.comments_before)
      for (var D = _.comments_before.next(); D; )
        this.handle_whitespace_and_comments(D, C), this.handle_token(D, C), D = _.comments_before.next();
    if (H)
      for (var F = 0; F < M; F += 1)
        this.print_newline(F > 0, C);
    else if (this._options.max_preserve_newlines && M > this._options.max_preserve_newlines && (M = this._options.max_preserve_newlines), this._options.preserve_newlines && M > 1) {
      this.print_newline(!1, C);
      for (var W = 1; W < M; W += 1)
        this.print_newline(!0, C);
    }
  };
  var T = ["async", "break", "continue", "return", "throw", "yield"];
  return y.prototype.allow_wrap_or_preserved_newline = function(_, C) {
    if (C = C === void 0 ? !1 : C, !this._output.just_added_newline()) {
      var M = this._options.preserve_newlines && _.newlines || C, H = l(this._flags.last_token.text, o) || l(_.text, o);
      if (H) {
        var D = l(this._flags.last_token.text, o) && l(this._options.operator_position, m) || l(_.text, o);
        M = M && D;
      }
      if (M)
        this.print_newline(!1, !0);
      else if (this._options.wrap_line_length) {
        if (f(this._flags.last_token, T))
          return;
        this._output.set_wrap_point();
      }
    }
  }, y.prototype.print_newline = function(_, C) {
    if (!C && this._flags.last_token.text !== ";" && this._flags.last_token.text !== "," && this._flags.last_token.text !== "=" && (this._flags.last_token.type !== a.OPERATOR || this._flags.last_token.text === "--" || this._flags.last_token.text === "++"))
      for (var M = this._tokens.peek(); this._flags.mode === g.Statement && !(this._flags.if_block && d(M, "else")) && !this._flags.do_block; )
        this.restore_mode();
    this._output.add_new_line(_) && (this._flags.multiline_frame = !0);
  }, y.prototype.print_token_line_indentation = function(_) {
    this._output.just_added_newline() && (this._options.keep_array_indentation && _.newlines && (_.text === "[" || w(this._flags.mode)) ? (this._output.current_line.set_indent(-1), this._output.current_line.push(_.whitespace_before), this._output.space_before_token = !1) : this._output.set_indent(this._flags.indentation_level, this._flags.alignment) && (this._flags.line_indent_level = this._flags.indentation_level));
  }, y.prototype.print_token = function(_) {
    if (this._output.raw) {
      this._output.add_raw_token(_);
      return;
    }
    if (this._options.comma_first && _.previous && _.previous.type === a.COMMA && this._output.just_added_newline() && this._output.previous_line.last() === ",") {
      var C = this._output.previous_line.pop();
      this._output.previous_line.is_empty() && (this._output.previous_line.push(C), this._output.trim(!0), this._output.current_line.pop(), this._output.trim()), this.print_token_line_indentation(_), this._output.add_token(","), this._output.space_before_token = !0;
    }
    this.print_token_line_indentation(_), this._output.non_breaking_space = !0, this._output.add_token(_.text), this._output.previous_token_wrapped && (this._flags.multiline_frame = !0);
  }, y.prototype.indent = function() {
    this._flags.indentation_level += 1, this._output.set_indent(this._flags.indentation_level, this._flags.alignment);
  }, y.prototype.deindent = function() {
    this._flags.indentation_level > 0 && (!this._flags.parent || this._flags.indentation_level > this._flags.parent.indentation_level) && (this._flags.indentation_level -= 1, this._output.set_indent(this._flags.indentation_level, this._flags.alignment));
  }, y.prototype.set_mode = function(_) {
    this._flags ? (this._flag_store.push(this._flags), this._previous_flags = this._flags) : this._previous_flags = this.create_flags(null, _), this._flags = this.create_flags(this._previous_flags, _), this._output.set_indent(this._flags.indentation_level, this._flags.alignment);
  }, y.prototype.restore_mode = function() {
    this._flag_store.length > 0 && (this._previous_flags = this._flags, this._flags = this._flag_store.pop(), this._previous_flags.mode === g.Statement && v(this._output, this._previous_flags), this._output.set_indent(this._flags.indentation_level, this._flags.alignment));
  }, y.prototype.start_of_object_property = function() {
    return this._flags.parent.mode === g.ObjectLiteral && this._flags.mode === g.Statement && (this._flags.last_token.text === ":" && this._flags.ternary_depth === 0 || f(this._flags.last_token, ["get", "set"]));
  }, y.prototype.start_of_statement = function(_) {
    var C = !1;
    return C = C || f(this._flags.last_token, ["var", "let", "const"]) && _.type === a.WORD, C = C || d(this._flags.last_token, "do"), C = C || !(this._flags.parent.mode === g.ObjectLiteral && this._flags.mode === g.Statement) && f(this._flags.last_token, T) && !_.newlines, C = C || d(this._flags.last_token, "else") && !(d(_, "if") && !_.comments_before), C = C || this._flags.last_token.type === a.END_EXPR && (this._previous_flags.mode === g.ForInitializer || this._previous_flags.mode === g.Conditional), C = C || this._flags.last_token.type === a.WORD && this._flags.mode === g.BlockStatement && !this._flags.in_case && !(_.text === "--" || _.text === "++") && this._last_last_text !== "function" && _.type !== a.WORD && _.type !== a.RESERVED, C = C || this._flags.mode === g.ObjectLiteral && (this._flags.last_token.text === ":" && this._flags.ternary_depth === 0 || f(this._flags.last_token, ["get", "set"])), C ? (this.set_mode(g.Statement), this.indent(), this.handle_whitespace_and_comments(_, !0), this.start_of_object_property() || this.allow_wrap_or_preserved_newline(
      _,
      f(_, ["do", "for", "if", "while"])
    ), !0) : !1;
  }, y.prototype.handle_start_expr = function(_) {
    this.start_of_statement(_) || this.handle_whitespace_and_comments(_);
    var C = g.Expression;
    if (_.text === "[") {
      if (this._flags.last_token.type === a.WORD || this._flags.last_token.text === ")") {
        f(this._flags.last_token, s) && (this._output.space_before_token = !0), this.print_token(_), this.set_mode(C), this.indent(), this._options.space_in_paren && (this._output.space_before_token = !0);
        return;
      }
      C = g.ArrayLiteral, w(this._flags.mode) && (this._flags.last_token.text === "[" || this._flags.last_token.text === "," && (this._last_last_text === "]" || this._last_last_text === "}")) && (this._options.keep_array_indentation || this.print_newline()), l(this._flags.last_token.type, [a.START_EXPR, a.END_EXPR, a.WORD, a.OPERATOR, a.DOT]) || (this._output.space_before_token = !0);
    } else {
      if (this._flags.last_token.type === a.RESERVED)
        this._flags.last_token.text === "for" ? (this._output.space_before_token = this._options.space_before_conditional, C = g.ForInitializer) : l(this._flags.last_token.text, ["if", "while", "switch"]) ? (this._output.space_before_token = this._options.space_before_conditional, C = g.Conditional) : l(this._flags.last_word, ["await", "async"]) ? this._output.space_before_token = !0 : this._flags.last_token.text === "import" && _.whitespace_before === "" ? this._output.space_before_token = !1 : (l(this._flags.last_token.text, s) || this._flags.last_token.text === "catch") && (this._output.space_before_token = !0);
      else if (this._flags.last_token.type === a.EQUALS || this._flags.last_token.type === a.OPERATOR)
        this.start_of_object_property() || this.allow_wrap_or_preserved_newline(_);
      else if (this._flags.last_token.type === a.WORD) {
        this._output.space_before_token = !1;
        var M = this._tokens.peek(-3);
        if (this._options.space_after_named_function && M) {
          var H = this._tokens.peek(-4);
          f(M, ["async", "function"]) || M.text === "*" && f(H, ["async", "function"]) ? this._output.space_before_token = !0 : this._flags.mode === g.ObjectLiteral ? (M.text === "{" || M.text === "," || M.text === "*" && (H.text === "{" || H.text === ",")) && (this._output.space_before_token = !0) : this._flags.parent && this._flags.parent.class_start_block && (this._output.space_before_token = !0);
        }
      } else
        this.allow_wrap_or_preserved_newline(_);
      (this._flags.last_token.type === a.RESERVED && (this._flags.last_word === "function" || this._flags.last_word === "typeof") || this._flags.last_token.text === "*" && (l(this._last_last_text, ["function", "yield"]) || this._flags.mode === g.ObjectLiteral && l(this._last_last_text, ["{", ","]))) && (this._output.space_before_token = this._options.space_after_anon_function);
    }
    this._flags.last_token.text === ";" || this._flags.last_token.type === a.START_BLOCK ? this.print_newline() : (this._flags.last_token.type === a.END_EXPR || this._flags.last_token.type === a.START_EXPR || this._flags.last_token.type === a.END_BLOCK || this._flags.last_token.text === "." || this._flags.last_token.type === a.COMMA) && this.allow_wrap_or_preserved_newline(_, _.newlines), this.print_token(_), this.set_mode(C), this._options.space_in_paren && (this._output.space_before_token = !0), this.indent();
  }, y.prototype.handle_end_expr = function(_) {
    for (; this._flags.mode === g.Statement; )
      this.restore_mode();
    this.handle_whitespace_and_comments(_), this._flags.multiline_frame && this.allow_wrap_or_preserved_newline(
      _,
      _.text === "]" && w(this._flags.mode) && !this._options.keep_array_indentation
    ), this._options.space_in_paren && (this._flags.last_token.type === a.START_EXPR && !this._options.space_in_empty_paren ? (this._output.trim(), this._output.space_before_token = !1) : this._output.space_before_token = !0), this.deindent(), this.print_token(_), this.restore_mode(), v(this._output, this._previous_flags), this._flags.do_while && this._previous_flags.mode === g.Conditional && (this._previous_flags.mode = g.Expression, this._flags.do_block = !1, this._flags.do_while = !1);
  }, y.prototype.handle_start_block = function(_) {
    this.handle_whitespace_and_comments(_);
    var C = this._tokens.peek(), M = this._tokens.peek(1);
    this._flags.last_word === "switch" && this._flags.last_token.type === a.END_EXPR ? (this.set_mode(g.BlockStatement), this._flags.in_case_statement = !0) : this._flags.case_body ? this.set_mode(g.BlockStatement) : M && (l(M.text, [":", ","]) && l(C.type, [a.STRING, a.WORD, a.RESERVED]) || l(C.text, ["get", "set", "..."]) && l(M.type, [a.WORD, a.RESERVED])) ? l(this._last_last_text, ["class", "interface"]) && !l(M.text, [":", ","]) ? this.set_mode(g.BlockStatement) : this.set_mode(g.ObjectLiteral) : this._flags.last_token.type === a.OPERATOR && this._flags.last_token.text === "=>" ? this.set_mode(g.BlockStatement) : l(this._flags.last_token.type, [a.EQUALS, a.START_EXPR, a.COMMA, a.OPERATOR]) || f(this._flags.last_token, ["return", "throw", "import", "default"]) ? this.set_mode(g.ObjectLiteral) : this.set_mode(g.BlockStatement), this._flags.last_token && f(this._flags.last_token.previous, ["class", "extends"]) && (this._flags.class_start_block = !0);
    var H = !C.comments_before && C.text === "}", D = H && this._flags.last_word === "function" && this._flags.last_token.type === a.END_EXPR;
    if (this._options.brace_preserve_inline) {
      var F = 0, W = null;
      this._flags.inline_frame = !0;
      do
        if (F += 1, W = this._tokens.peek(F - 1), W.newlines) {
          this._flags.inline_frame = !1;
          break;
        }
      while (W.type !== a.EOF && !(W.type === a.END_BLOCK && W.opened === _));
    }
    (this._options.brace_style === "expand" || this._options.brace_style === "none" && _.newlines) && !this._flags.inline_frame ? this._flags.last_token.type !== a.OPERATOR && (D || this._flags.last_token.type === a.EQUALS || f(this._flags.last_token, h) && this._flags.last_token.text !== "else") ? this._output.space_before_token = !0 : this.print_newline(!1, !0) : (w(this._previous_flags.mode) && (this._flags.last_token.type === a.START_EXPR || this._flags.last_token.type === a.COMMA) && ((this._flags.last_token.type === a.COMMA || this._options.space_in_paren) && (this._output.space_before_token = !0), (this._flags.last_token.type === a.COMMA || this._flags.last_token.type === a.START_EXPR && this._flags.inline_frame) && (this.allow_wrap_or_preserved_newline(_), this._previous_flags.multiline_frame = this._previous_flags.multiline_frame || this._flags.multiline_frame, this._flags.multiline_frame = !1)), this._flags.last_token.type !== a.OPERATOR && this._flags.last_token.type !== a.START_EXPR && (l(this._flags.last_token.type, [a.START_BLOCK, a.SEMICOLON]) && !this._flags.inline_frame ? this.print_newline() : this._output.space_before_token = !0)), this.print_token(_), this.indent(), !H && !(this._options.brace_preserve_inline && this._flags.inline_frame) && this.print_newline();
  }, y.prototype.handle_end_block = function(_) {
    for (this.handle_whitespace_and_comments(_); this._flags.mode === g.Statement; )
      this.restore_mode();
    var C = this._flags.last_token.type === a.START_BLOCK;
    this._flags.inline_frame && !C ? this._output.space_before_token = !0 : this._options.brace_style === "expand" ? C || this.print_newline() : C || (w(this._flags.mode) && this._options.keep_array_indentation ? (this._options.keep_array_indentation = !1, this.print_newline(), this._options.keep_array_indentation = !0) : this.print_newline()), this.restore_mode(), this.print_token(_);
  }, y.prototype.handle_word = function(_) {
    if (_.type === a.RESERVED) {
      if (l(_.text, ["set", "get"]) && this._flags.mode !== g.ObjectLiteral)
        _.type = a.WORD;
      else if (_.text === "import" && l(this._tokens.peek().text, ["(", "."]))
        _.type = a.WORD;
      else if (l(_.text, ["as", "from"]) && !this._flags.import_block)
        _.type = a.WORD;
      else if (this._flags.mode === g.ObjectLiteral) {
        var C = this._tokens.peek();
        C.text === ":" && (_.type = a.WORD);
      }
    }
    if (this.start_of_statement(_) ? f(this._flags.last_token, ["var", "let", "const"]) && _.type === a.WORD && (this._flags.declaration_statement = !0) : _.newlines && !E(this._flags.mode) && (this._flags.last_token.type !== a.OPERATOR || this._flags.last_token.text === "--" || this._flags.last_token.text === "++") && this._flags.last_token.type !== a.EQUALS && (this._options.preserve_newlines || !f(this._flags.last_token, ["var", "let", "const", "set", "get"])) ? (this.handle_whitespace_and_comments(_), this.print_newline()) : this.handle_whitespace_and_comments(_), this._flags.do_block && !this._flags.do_while)
      if (d(_, "while")) {
        this._output.space_before_token = !0, this.print_token(_), this._output.space_before_token = !0, this._flags.do_while = !0;
        return;
      } else
        this.print_newline(), this._flags.do_block = !1;
    if (this._flags.if_block)
      if (!this._flags.else_block && d(_, "else"))
        this._flags.else_block = !0;
      else {
        for (; this._flags.mode === g.Statement; )
          this.restore_mode();
        this._flags.if_block = !1, this._flags.else_block = !1;
      }
    if (this._flags.in_case_statement && f(_, ["case", "default"])) {
      this.print_newline(), !this._flags.case_block && (this._flags.case_body || this._options.jslint_happy) && this.deindent(), this._flags.case_body = !1, this.print_token(_), this._flags.in_case = !0;
      return;
    }
    if ((this._flags.last_token.type === a.COMMA || this._flags.last_token.type === a.START_EXPR || this._flags.last_token.type === a.EQUALS || this._flags.last_token.type === a.OPERATOR) && !this.start_of_object_property() && !// start of object property is different for numeric values with +/- prefix operators
    (l(this._flags.last_token.text, ["+", "-"]) && this._last_last_text === ":" && this._flags.parent.mode === g.ObjectLiteral) && this.allow_wrap_or_preserved_newline(_), d(_, "function")) {
      (l(this._flags.last_token.text, ["}", ";"]) || this._output.just_added_newline() && !(l(this._flags.last_token.text, ["(", "[", "{", ":", "=", ","]) || this._flags.last_token.type === a.OPERATOR)) && !this._output.just_added_blankline() && !_.comments_before && (this.print_newline(), this.print_newline(!0)), this._flags.last_token.type === a.RESERVED || this._flags.last_token.type === a.WORD ? f(this._flags.last_token, ["get", "set", "new", "export"]) || f(this._flags.last_token, T) ? this._output.space_before_token = !0 : d(this._flags.last_token, "default") && this._last_last_text === "export" ? this._output.space_before_token = !0 : this._flags.last_token.text === "declare" ? this._output.space_before_token = !0 : this.print_newline() : this._flags.last_token.type === a.OPERATOR || this._flags.last_token.text === "=" ? this._output.space_before_token = !0 : !this._flags.multiline_frame && (E(this._flags.mode) || w(this._flags.mode)) || this.print_newline(), this.print_token(_), this._flags.last_word = _.text;
      return;
    }
    var M = "NONE";
    if (this._flags.last_token.type === a.END_BLOCK ? this._previous_flags.inline_frame ? M = "SPACE" : f(_, ["else", "catch", "finally", "from"]) ? this._options.brace_style === "expand" || this._options.brace_style === "end-expand" || this._options.brace_style === "none" && _.newlines ? M = "NEWLINE" : (M = "SPACE", this._output.space_before_token = !0) : M = "NEWLINE" : this._flags.last_token.type === a.SEMICOLON && this._flags.mode === g.BlockStatement ? M = "NEWLINE" : this._flags.last_token.type === a.SEMICOLON && E(this._flags.mode) ? M = "SPACE" : this._flags.last_token.type === a.STRING ? M = "NEWLINE" : this._flags.last_token.type === a.RESERVED || this._flags.last_token.type === a.WORD || this._flags.last_token.text === "*" && (l(this._last_last_text, ["function", "yield"]) || this._flags.mode === g.ObjectLiteral && l(this._last_last_text, ["{", ","])) ? M = "SPACE" : this._flags.last_token.type === a.START_BLOCK ? this._flags.inline_frame ? M = "SPACE" : M = "NEWLINE" : this._flags.last_token.type === a.END_EXPR && (this._output.space_before_token = !0, M = "NEWLINE"), f(_, s) && this._flags.last_token.text !== ")" && (this._flags.inline_frame || this._flags.last_token.text === "else" || this._flags.last_token.text === "export" ? M = "SPACE" : M = "NEWLINE"), f(_, ["else", "catch", "finally"]))
      if ((!(this._flags.last_token.type === a.END_BLOCK && this._previous_flags.mode === g.BlockStatement) || this._options.brace_style === "expand" || this._options.brace_style === "end-expand" || this._options.brace_style === "none" && _.newlines) && !this._flags.inline_frame)
        this.print_newline();
      else {
        this._output.trim(!0);
        var H = this._output.current_line;
        H.last() !== "}" && this.print_newline(), this._output.space_before_token = !0;
      }
    else M === "NEWLINE" ? f(this._flags.last_token, h) ? this._output.space_before_token = !0 : this._flags.last_token.text === "declare" && f(_, ["var", "let", "const"]) ? this._output.space_before_token = !0 : this._flags.last_token.type !== a.END_EXPR ? (this._flags.last_token.type !== a.START_EXPR || !f(_, ["var", "let", "const"])) && this._flags.last_token.text !== ":" && (d(_, "if") && d(_.previous, "else") ? this._output.space_before_token = !0 : this.print_newline()) : f(_, s) && this._flags.last_token.text !== ")" && this.print_newline() : this._flags.multiline_frame && w(this._flags.mode) && this._flags.last_token.text === "," && this._last_last_text === "}" ? this.print_newline() : M === "SPACE" && (this._output.space_before_token = !0);
    _.previous && (_.previous.type === a.WORD || _.previous.type === a.RESERVED) && (this._output.space_before_token = !0), this.print_token(_), this._flags.last_word = _.text, _.type === a.RESERVED && (_.text === "do" ? this._flags.do_block = !0 : _.text === "if" ? this._flags.if_block = !0 : _.text === "import" ? this._flags.import_block = !0 : this._flags.import_block && d(_, "from") && (this._flags.import_block = !1));
  }, y.prototype.handle_semicolon = function(_) {
    this.start_of_statement(_) ? this._output.space_before_token = !1 : this.handle_whitespace_and_comments(_);
    for (var C = this._tokens.peek(); this._flags.mode === g.Statement && !(this._flags.if_block && d(C, "else")) && !this._flags.do_block; )
      this.restore_mode();
    this._flags.import_block && (this._flags.import_block = !1), this.print_token(_);
  }, y.prototype.handle_string = function(_) {
    _.text.startsWith("`") && _.newlines === 0 && _.whitespace_before === "" && (_.previous.text === ")" || this._flags.last_token.type === a.WORD) || (this.start_of_statement(_) ? this._output.space_before_token = !0 : (this.handle_whitespace_and_comments(_), this._flags.last_token.type === a.RESERVED || this._flags.last_token.type === a.WORD || this._flags.inline_frame ? this._output.space_before_token = !0 : this._flags.last_token.type === a.COMMA || this._flags.last_token.type === a.START_EXPR || this._flags.last_token.type === a.EQUALS || this._flags.last_token.type === a.OPERATOR ? this.start_of_object_property() || this.allow_wrap_or_preserved_newline(_) : _.text.startsWith("`") && this._flags.last_token.type === a.END_EXPR && (_.previous.text === "]" || _.previous.text === ")") && _.newlines === 0 ? this._output.space_before_token = !0 : this.print_newline())), this.print_token(_);
  }, y.prototype.handle_equals = function(_) {
    this.start_of_statement(_) || this.handle_whitespace_and_comments(_), this._flags.declaration_statement && (this._flags.declaration_assignment = !0), this._output.space_before_token = !0, this.print_token(_), this._output.space_before_token = !0;
  }, y.prototype.handle_comma = function(_) {
    this.handle_whitespace_and_comments(_, !0), this.print_token(_), this._output.space_before_token = !0, this._flags.declaration_statement ? (E(this._flags.parent.mode) && (this._flags.declaration_assignment = !1), this._flags.declaration_assignment ? (this._flags.declaration_assignment = !1, this.print_newline(!1, !0)) : this._options.comma_first && this.allow_wrap_or_preserved_newline(_)) : this._flags.mode === g.ObjectLiteral || this._flags.mode === g.Statement && this._flags.parent.mode === g.ObjectLiteral ? (this._flags.mode === g.Statement && this.restore_mode(), this._flags.inline_frame || this.print_newline()) : this._options.comma_first && this.allow_wrap_or_preserved_newline(_);
  }, y.prototype.handle_operator = function(_) {
    var C = _.text === "*" && (f(this._flags.last_token, ["function", "yield"]) || l(this._flags.last_token.type, [a.START_BLOCK, a.COMMA, a.END_BLOCK, a.SEMICOLON])), M = l(_.text, ["-", "+"]) && (l(this._flags.last_token.type, [a.START_BLOCK, a.START_EXPR, a.EQUALS, a.OPERATOR]) || l(this._flags.last_token.text, s) || this._flags.last_token.text === ",");
    if (!this.start_of_statement(_)) {
      var H = !C;
      this.handle_whitespace_and_comments(_, H);
    }
    if (_.text === "*" && this._flags.last_token.type === a.DOT) {
      this.print_token(_);
      return;
    }
    if (_.text === "::") {
      this.print_token(_);
      return;
    }
    if (l(_.text, ["-", "+"]) && this.start_of_object_property()) {
      this.print_token(_);
      return;
    }
    if (this._flags.last_token.type === a.OPERATOR && l(this._options.operator_position, m) && this.allow_wrap_or_preserved_newline(_), _.text === ":" && this._flags.in_case) {
      this.print_token(_), this._flags.in_case = !1, this._flags.case_body = !0, this._tokens.peek().type !== a.START_BLOCK ? (this.indent(), this.print_newline(), this._flags.case_block = !1) : (this._flags.case_block = !0, this._output.space_before_token = !0);
      return;
    }
    var D = !0, F = !0, W = !1;
    if (_.text === ":" ? this._flags.ternary_depth === 0 ? D = !1 : (this._flags.ternary_depth -= 1, W = !0) : _.text === "?" && (this._flags.ternary_depth += 1), !M && !C && this._options.preserve_newlines && l(_.text, o)) {
      var G = _.text === ":", re = G && W, Z = G && !W;
      switch (this._options.operator_position) {
        case b.before_newline:
          this._output.space_before_token = !Z, this.print_token(_), (!G || re) && this.allow_wrap_or_preserved_newline(_), this._output.space_before_token = !0;
          return;
        case b.after_newline:
          this._output.space_before_token = !0, !G || re ? this._tokens.peek().newlines ? this.print_newline(!1, !0) : this.allow_wrap_or_preserved_newline(_) : this._output.space_before_token = !1, this.print_token(_), this._output.space_before_token = !0;
          return;
        case b.preserve_newline:
          Z || this.allow_wrap_or_preserved_newline(_), D = !(this._output.just_added_newline() || Z), this._output.space_before_token = D, this.print_token(_), this._output.space_before_token = !0;
          return;
      }
    }
    if (C) {
      this.allow_wrap_or_preserved_newline(_), D = !1;
      var ue = this._tokens.peek();
      F = ue && l(ue.type, [a.WORD, a.RESERVED]);
    } else if (_.text === "...")
      this.allow_wrap_or_preserved_newline(_), D = this._flags.last_token.type === a.START_BLOCK, F = !1;
    else if (l(_.text, ["--", "++", "!", "~"]) || M) {
      if ((this._flags.last_token.type === a.COMMA || this._flags.last_token.type === a.START_EXPR) && this.allow_wrap_or_preserved_newline(_), D = !1, F = !1, _.newlines && (_.text === "--" || _.text === "++" || _.text === "~")) {
        var he = f(this._flags.last_token, h) && _.newlines;
        he && (this._previous_flags.if_block || this._previous_flags.else_block) && this.restore_mode(), this.print_newline(he, !0);
      }
      this._flags.last_token.text === ";" && E(this._flags.mode) && (D = !0), this._flags.last_token.type === a.RESERVED ? D = !0 : this._flags.last_token.type === a.END_EXPR ? D = !(this._flags.last_token.text === "]" && (_.text === "--" || _.text === "++")) : this._flags.last_token.type === a.OPERATOR && (D = l(_.text, ["--", "-", "++", "+"]) && l(this._flags.last_token.text, ["--", "-", "++", "+"]), l(_.text, ["+", "-"]) && l(this._flags.last_token.text, ["--", "++"]) && (F = !0)), (this._flags.mode === g.BlockStatement && !this._flags.inline_frame || this._flags.mode === g.Statement) && (this._flags.last_token.text === "{" || this._flags.last_token.text === ";") && this.print_newline();
    }
    this._output.space_before_token = this._output.space_before_token || D, this.print_token(_), this._output.space_before_token = F;
  }, y.prototype.handle_block_comment = function(_, C) {
    if (this._output.raw) {
      this._output.add_raw_token(_), _.directives && _.directives.preserve === "end" && (this._output.raw = this._options.test_output_raw);
      return;
    }
    if (_.directives) {
      this.print_newline(!1, C), this.print_token(_), _.directives.preserve === "start" && (this._output.raw = !0), this.print_newline(!1, !0);
      return;
    }
    if (!t.newline.test(_.text) && !_.newlines) {
      this._output.space_before_token = !0, this.print_token(_), this._output.space_before_token = !0;
      return;
    } else
      this.print_block_commment(_, C);
  }, y.prototype.print_block_commment = function(_, C) {
    var M = x(_.text), H, D = !1, F = !1, W = _.whitespace_before, G = W.length;
    if (this.print_newline(!1, C), this.print_token_line_indentation(_), this._output.add_token(M[0]), this.print_newline(!1, C), M.length > 1) {
      for (M = M.slice(1), D = k(M, "*"), F = S(M, W), D && (this._flags.alignment = 1), H = 0; H < M.length; H++)
        D ? (this.print_token_line_indentation(_), this._output.add_token(c(M[H]))) : F && M[H] ? (this.print_token_line_indentation(_), this._output.add_token(M[H].substring(G))) : (this._output.current_line.set_indent(-1), this._output.add_token(M[H])), this.print_newline(!1, C);
      this._flags.alignment = 0;
    }
  }, y.prototype.handle_comment = function(_, C) {
    _.newlines ? this.print_newline(!1, C) : this._output.trim(!0), this._output.space_before_token = !0, this.print_token(_), this.print_newline(!1, C);
  }, y.prototype.handle_dot = function(_) {
    this.start_of_statement(_) || this.handle_whitespace_and_comments(_, !0), this._flags.last_token.text.match("^[0-9]+$") && (this._output.space_before_token = !0), f(this._flags.last_token, h) ? this._output.space_before_token = !1 : this.allow_wrap_or_preserved_newline(
      _,
      this._flags.last_token.text === ")" && this._options.break_chained_methods
    ), this._options.unindent_chained_methods && this._output.just_added_newline() && this.deindent(), this.print_token(_);
  }, y.prototype.handle_unknown = function(_, C) {
    this.print_token(_), _.text[_.text.length - 1] === `
` && this.print_newline(!1, C);
  }, y.prototype.handle_eof = function(_) {
    for (; this._flags.mode === g.Statement; )
      this.restore_mode();
    this.handle_whitespace_and_comments(_);
  }, Zl.Beautifier = y, Zl;
}
var Lh;
function uk() {
  if (Lh) return Co.exports;
  Lh = 1;
  var n = ck().Beautifier, e = y_().Options;
  function t(i, r) {
    var s = new n(i, r);
    return s.beautify();
  }
  return Co.exports = t, Co.exports.defaultOptions = function() {
    return new e();
  }, Co.exports;
}
var Mo = { exports: {} }, cc = {}, uc = {}, Rh;
function w_() {
  if (Rh) return uc;
  Rh = 1;
  var n = vd().Options;
  function e(t) {
    n.call(this, t, "css"), this.selector_separator_newline = this._get_boolean("selector_separator_newline", !0), this.newline_between_rules = this._get_boolean("newline_between_rules", !0);
    var i = this._get_boolean("space_around_selector_separator");
    this.space_around_combinator = this._get_boolean("space_around_combinator") || i;
    var r = this._get_selection_list("brace_style", ["collapse", "expand", "end-expand", "none", "preserve-inline"]);
    this.brace_style = "collapse";
    for (var s = 0; s < r.length; s++)
      r[s] !== "expand" ? this.brace_style = "collapse" : this.brace_style = r[s];
  }
  return e.prototype = new n(), uc.Options = e, uc;
}
var Ih;
function dk() {
  if (Ih) return cc;
  Ih = 1;
  var n = w_().Options, e = bd().Output, t = yd().InputScanner, i = xd().Directives, r = new i(/\/\*/, /\*\//), s = /\r\n|[\r\n]/, o = /\r\n|[\r\n]/g, a = /\s/, l = /(?:\s|\n)+/g, c = /\/\*(?:[\s\S]*?)((?:\*\/)|$)/g, u = /\/\/(?:[^\n\r\u2028\u2029]*)/g;
  function d(f, h) {
    this._source_text = f || "", this._options = new n(h), this._ch = null, this._input = null, this.NESTED_AT_RULE = {
      page: !0,
      "font-face": !0,
      keyframes: !0,
      // also in CONDITIONAL_GROUP_RULE below
      media: !0,
      supports: !0,
      document: !0
    }, this.CONDITIONAL_GROUP_RULE = {
      media: !0,
      supports: !0,
      document: !0
    }, this.NON_SEMICOLON_NEWLINE_PROPERTY = [
      "grid-template-areas",
      "grid-template"
    ];
  }
  return d.prototype.eatString = function(f) {
    var h = "";
    for (this._ch = this._input.next(); this._ch; ) {
      if (h += this._ch, this._ch === "\\")
        h += this._input.next();
      else if (f.indexOf(this._ch) !== -1 || this._ch === `
`)
        break;
      this._ch = this._input.next();
    }
    return h;
  }, d.prototype.eatWhitespace = function(f) {
    for (var h = a.test(this._input.peek()), p = 0; a.test(this._input.peek()); )
      this._ch = this._input.next(), f && this._ch === `
` && (p === 0 || p < this._options.max_preserve_newlines) && (p++, this._output.add_new_line(!0));
    return h;
  }, d.prototype.foundNestedPseudoClass = function() {
    for (var f = 0, h = 1, p = this._input.peek(h); p; ) {
      if (p === "{")
        return !0;
      if (p === "(")
        f += 1;
      else if (p === ")") {
        if (f === 0)
          return !1;
        f -= 1;
      } else if (p === ";" || p === "}")
        return !1;
      h++, p = this._input.peek(h);
    }
    return !1;
  }, d.prototype.print_string = function(f) {
    this._output.set_indent(this._indentLevel), this._output.non_breaking_space = !0, this._output.add_token(f);
  }, d.prototype.preserveSingleSpace = function(f) {
    f && (this._output.space_before_token = !0);
  }, d.prototype.indent = function() {
    this._indentLevel++;
  }, d.prototype.outdent = function() {
    this._indentLevel > 0 && this._indentLevel--;
  }, d.prototype.beautify = function() {
    if (this._options.disabled)
      return this._source_text;
    var f = this._source_text, h = this._options.eol;
    h === "auto" && (h = `
`, f && s.test(f || "") && (h = f.match(s)[0])), f = f.replace(o, `
`);
    var p = f.match(/^[\t ]*/)[0];
    this._output = new e(this._options, p), this._input = new t(f), this._indentLevel = 0, this._nestedLevel = 0, this._ch = null;
    for (var b = 0, m = !1, g = !1, v = !1, x = !1, w = !1, E = this._ch, k = !1, S, y, T; S = this._input.read(l), y = S !== "", T = E, this._ch = this._input.next(), this._ch === "\\" && this._input.hasNext() && (this._ch += this._input.next()), E = this._ch, this._ch; )
      if (this._ch === "/" && this._input.peek() === "*") {
        this._output.add_new_line(), this._input.back();
        var _ = this._input.read(c), C = r.get_directives(_);
        C && C.ignore === "start" && (_ += r.readIgnored(this._input)), this.print_string(_), this.eatWhitespace(!0), this._output.add_new_line();
      } else if (this._ch === "/" && this._input.peek() === "/")
        this._output.space_before_token = !0, this._input.back(), this.print_string(this._input.read(u)), this.eatWhitespace(!0);
      else if (this._ch === "$") {
        this.preserveSingleSpace(y), this.print_string(this._ch);
        var M = this._input.peekUntilAfter(/[: ,;{}()[\]\/='"]/g);
        M.match(/[ :]$/) && (M = this.eatString(": ").replace(/\s+$/, ""), this.print_string(M), this._output.space_before_token = !0), b === 0 && M.indexOf(":") !== -1 && (g = !0, this.indent());
      } else if (this._ch === "@")
        if (this.preserveSingleSpace(y), this._input.peek() === "{")
          this.print_string(this._ch + this.eatString("}"));
        else {
          this.print_string(this._ch);
          var H = this._input.peekUntilAfter(/[: ,;{}()[\]\/='"]/g);
          H.match(/[ :]$/) && (H = this.eatString(": ").replace(/\s+$/, ""), this.print_string(H), this._output.space_before_token = !0), b === 0 && H.indexOf(":") !== -1 ? (g = !0, this.indent()) : H in this.NESTED_AT_RULE ? (this._nestedLevel += 1, H in this.CONDITIONAL_GROUP_RULE && (v = !0)) : b === 0 && !g && (x = !0);
        }
      else if (this._ch === "#" && this._input.peek() === "{")
        this.preserveSingleSpace(y), this.print_string(this._ch + this.eatString("}"));
      else if (this._ch === "{")
        g && (g = !1, this.outdent()), x = !1, v ? (v = !1, m = this._indentLevel >= this._nestedLevel) : m = this._indentLevel >= this._nestedLevel - 1, this._options.newline_between_rules && m && this._output.previous_line && this._output.previous_line.item(-1) !== "{" && this._output.ensure_empty_line_above("/", ","), this._output.space_before_token = !0, this._options.brace_style === "expand" ? (this._output.add_new_line(), this.print_string(this._ch), this.indent(), this._output.set_indent(this._indentLevel)) : (T === "(" ? this._output.space_before_token = !1 : T !== "," && this.indent(), this.print_string(this._ch)), this.eatWhitespace(!0), this._output.add_new_line();
      else if (this._ch === "}")
        this.outdent(), this._output.add_new_line(), T === "{" && this._output.trim(!0), g && (this.outdent(), g = !1), this.print_string(this._ch), m = !1, this._nestedLevel && this._nestedLevel--, this.eatWhitespace(!0), this._output.add_new_line(), this._options.newline_between_rules && !this._output.just_added_blankline() && this._input.peek() !== "}" && this._output.add_new_line(!0), this._input.peek() === ")" && (this._output.trim(!0), this._options.brace_style === "expand" && this._output.add_new_line(!0));
      else if (this._ch === ":") {
        for (var D = 0; D < this.NON_SEMICOLON_NEWLINE_PROPERTY.length; D++)
          if (this._input.lookBack(this.NON_SEMICOLON_NEWLINE_PROPERTY[D])) {
            k = !0;
            break;
          }
        (m || v) && !(this._input.lookBack("&") || this.foundNestedPseudoClass()) && !this._input.lookBack("(") && !x && b === 0 ? (this.print_string(":"), g || (g = !0, this._output.space_before_token = !0, this.eatWhitespace(!0), this.indent())) : (this._input.lookBack(" ") && (this._output.space_before_token = !0), this._input.peek() === ":" ? (this._ch = this._input.next(), this.print_string("::")) : this.print_string(":"));
      } else if (this._ch === '"' || this._ch === "'") {
        var F = T === '"' || T === "'";
        this.preserveSingleSpace(F || y), this.print_string(this._ch + this.eatString(this._ch)), this.eatWhitespace(!0);
      } else if (this._ch === ";")
        k = !1, b === 0 ? (g && (this.outdent(), g = !1), x = !1, this.print_string(this._ch), this.eatWhitespace(!0), this._input.peek() !== "/" && this._output.add_new_line()) : (this.print_string(this._ch), this.eatWhitespace(!0), this._output.space_before_token = !0);
      else if (this._ch === "(")
        if (this._input.lookBack("url"))
          this.print_string(this._ch), this.eatWhitespace(), b++, this.indent(), this._ch = this._input.next(), this._ch === ")" || this._ch === '"' || this._ch === "'" ? this._input.back() : this._ch && (this.print_string(this._ch + this.eatString(")")), b && (b--, this.outdent()));
        else {
          var W = !1;
          this._input.lookBack("with") && (W = !0), this.preserveSingleSpace(y || W), this.print_string(this._ch), g && T === "$" && this._options.selector_separator_newline ? (this._output.add_new_line(), w = !0) : (this.eatWhitespace(), b++, this.indent());
        }
      else if (this._ch === ")")
        b && (b--, this.outdent()), w && this._input.peek() === ";" && this._options.selector_separator_newline && (w = !1, this.outdent(), this._output.add_new_line()), this.print_string(this._ch);
      else if (this._ch === ",")
        this.print_string(this._ch), this.eatWhitespace(!0), this._options.selector_separator_newline && (!g || w) && b === 0 && !x ? this._output.add_new_line() : this._output.space_before_token = !0;
      else if ((this._ch === ">" || this._ch === "+" || this._ch === "~") && !g && b === 0)
        this._options.space_around_combinator ? (this._output.space_before_token = !0, this.print_string(this._ch), this._output.space_before_token = !0) : (this.print_string(this._ch), this.eatWhitespace(), this._ch && a.test(this._ch) && (this._ch = ""));
      else if (this._ch === "]")
        this.print_string(this._ch);
      else if (this._ch === "[")
        this.preserveSingleSpace(y), this.print_string(this._ch);
      else if (this._ch === "=")
        this.eatWhitespace(), this.print_string("="), a.test(this._ch) && (this._ch = "");
      else if (this._ch === "!" && !this._input.lookBack("\\"))
        this._output.space_before_token = !0, this.print_string(this._ch);
      else {
        var G = T === '"' || T === "'";
        this.preserveSingleSpace(G || y), this.print_string(this._ch), !this._output.just_added_newline() && this._input.peek() === `
` && k && this._output.add_new_line();
      }
    var re = this._output.get_code(h);
    return re;
  }, cc.Beautifier = d, cc;
}
var Ph;
function fk() {
  if (Ph) return Mo.exports;
  Ph = 1;
  var n = dk().Beautifier, e = w_().Options;
  function t(i, r) {
    var s = new n(i, r);
    return s.beautify();
  }
  return Mo.exports = t, Mo.exports.defaultOptions = function() {
    return new e();
  }, Mo.exports;
}
var Oo = { exports: {} }, dc = {}, fc = {}, Dh;
function k_() {
  if (Dh) return fc;
  Dh = 1;
  var n = vd().Options;
  function e(t) {
    n.call(this, t, "html"), this.templating.length === 1 && this.templating[0] === "auto" && (this.templating = ["django", "erb", "handlebars", "php"]), this.indent_inner_html = this._get_boolean("indent_inner_html"), this.indent_body_inner_html = this._get_boolean("indent_body_inner_html", !0), this.indent_head_inner_html = this._get_boolean("indent_head_inner_html", !0), this.indent_handlebars = this._get_boolean("indent_handlebars", !0), this.wrap_attributes = this._get_selection(
      "wrap_attributes",
      ["auto", "force", "force-aligned", "force-expand-multiline", "aligned-multiple", "preserve", "preserve-aligned"]
    ), this.wrap_attributes_min_attrs = this._get_number("wrap_attributes_min_attrs", 2), this.wrap_attributes_indent_size = this._get_number("wrap_attributes_indent_size", this.indent_size), this.extra_liners = this._get_array("extra_liners", ["head", "body", "/html"]), this.inline = this._get_array("inline", [
      "a",
      "abbr",
      "area",
      "audio",
      "b",
      "bdi",
      "bdo",
      "br",
      "button",
      "canvas",
      "cite",
      "code",
      "data",
      "datalist",
      "del",
      "dfn",
      "em",
      "embed",
      "i",
      "iframe",
      "img",
      "input",
      "ins",
      "kbd",
      "keygen",
      "label",
      "map",
      "mark",
      "math",
      "meter",
      "noscript",
      "object",
      "output",
      "progress",
      "q",
      "ruby",
      "s",
      "samp",
      /* 'script', */
      "select",
      "small",
      "span",
      "strong",
      "sub",
      "sup",
      "svg",
      "template",
      "textarea",
      "time",
      "u",
      "var",
      "video",
      "wbr",
      "text",
      // obsolete inline tags
      "acronym",
      "big",
      "strike",
      "tt"
    ]), this.inline_custom_elements = this._get_boolean("inline_custom_elements", !0), this.void_elements = this._get_array("void_elements", [
      // HTLM void elements - aka self-closing tags - aka singletons
      // https://www.w3.org/html/wg/drafts/html/master/syntax.html#void-elements
      "area",
      "base",
      "br",
      "col",
      "embed",
      "hr",
      "img",
      "input",
      "keygen",
      "link",
      "menuitem",
      "meta",
      "param",
      "source",
      "track",
      "wbr",
      // NOTE: Optional tags are too complex for a simple list
      // they are hard coded in _do_optional_end_element
      // Doctype and xml elements
      "!doctype",
      "?xml",
      // obsolete tags
      // basefont: https://www.computerhope.com/jargon/h/html-basefont-tag.htm
      // isndex: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/isindex
      "basefont",
      "isindex"
    ]), this.unformatted = this._get_array("unformatted", []), this.content_unformatted = this._get_array("content_unformatted", [
      "pre",
      "textarea"
    ]), this.unformatted_content_delimiter = this._get_characters("unformatted_content_delimiter"), this.indent_scripts = this._get_selection("indent_scripts", ["normal", "keep", "separate"]);
  }
  return e.prototype = new n(), fc.Options = e, fc;
}
var No = {}, $h;
function zh() {
  if ($h) return No;
  $h = 1;
  var n = ya().Tokenizer, e = ya().TOKEN, t = xd().Directives, i = x_().TemplatablePattern, r = yl().Pattern, s = {
    TAG_OPEN: "TK_TAG_OPEN",
    TAG_CLOSE: "TK_TAG_CLOSE",
    CONTROL_FLOW_OPEN: "TK_CONTROL_FLOW_OPEN",
    CONTROL_FLOW_CLOSE: "TK_CONTROL_FLOW_CLOSE",
    ATTRIBUTE: "TK_ATTRIBUTE",
    EQUALS: "TK_EQUALS",
    VALUE: "TK_VALUE",
    COMMENT: "TK_COMMENT",
    TEXT: "TK_TEXT",
    UNKNOWN: "TK_UNKNOWN",
    START: e.START,
    RAW: e.RAW,
    EOF: e.EOF
  }, o = new t(/<\!--/, /-->/), a = function(l, c) {
    n.call(this, l, c), this._current_tag_name = "";
    var u = new i(this._input).read_options(this._options), d = new r(this._input);
    if (this.__patterns = {
      word: u.until(/[\n\r\t <]/),
      word_control_flow_close_excluded: u.until(/[\n\r\t <}]/),
      single_quote: u.until_after(/'/),
      double_quote: u.until_after(/"/),
      attribute: u.until(/[\n\r\t =>]|\/>/),
      element_name: u.until(/[\n\r\t >\/]/),
      angular_control_flow_start: d.matching(/\@[a-zA-Z]+[^({]*[({]/),
      handlebars_comment: d.starting_with(/{{!--/).until_after(/--}}/),
      handlebars: d.starting_with(/{{/).until_after(/}}/),
      handlebars_open: d.until(/[\n\r\t }]/),
      handlebars_raw_close: d.until(/}}/),
      comment: d.starting_with(/<!--/).until_after(/-->/),
      cdata: d.starting_with(/<!\[CDATA\[/).until_after(/]]>/),
      // https://en.wikipedia.org/wiki/Conditional_comment
      conditional_comment: d.starting_with(/<!\[/).until_after(/]>/),
      processing: d.starting_with(/<\?/).until_after(/\?>/)
    }, this._options.indent_handlebars && (this.__patterns.word = this.__patterns.word.exclude("handlebars"), this.__patterns.word_control_flow_close_excluded = this.__patterns.word_control_flow_close_excluded.exclude("handlebars")), this._unformatted_content_delimiter = null, this._options.unformatted_content_delimiter) {
      var f = this._input.get_literal_regexp(this._options.unformatted_content_delimiter);
      this.__patterns.unformatted_content_delimiter = d.matching(f).until_after(f);
    }
  };
  return a.prototype = new n(), a.prototype._is_comment = function(l) {
    return !1;
  }, a.prototype._is_opening = function(l) {
    return l.type === s.TAG_OPEN || l.type === s.CONTROL_FLOW_OPEN;
  }, a.prototype._is_closing = function(l, c) {
    return l.type === s.TAG_CLOSE && c && ((l.text === ">" || l.text === "/>") && c.text[0] === "<" || l.text === "}}" && c.text[0] === "{" && c.text[1] === "{") || l.type === s.CONTROL_FLOW_CLOSE && l.text === "}" && c.text.endsWith("{");
  }, a.prototype._reset = function() {
    this._current_tag_name = "";
  }, a.prototype._get_next_token = function(l, c) {
    var u = null;
    this._readWhitespace();
    var d = this._input.peek();
    return d === null ? this._create_token(s.EOF, "") : (u = u || this._read_open_handlebars(d, c), u = u || this._read_attribute(d, l, c), u = u || this._read_close(d, c), u = u || this._read_script_and_style(d, l), u = u || this._read_control_flows(d, c), u = u || this._read_raw_content(d, l, c), u = u || this._read_content_word(d, c), u = u || this._read_comment_or_cdata(d), u = u || this._read_processing(d), u = u || this._read_open(d, c), u = u || this._create_token(s.UNKNOWN, this._input.next()), u);
  }, a.prototype._read_comment_or_cdata = function(l) {
    var c = null, u = null, d = null;
    if (l === "<") {
      var f = this._input.peek(1);
      f === "!" && (u = this.__patterns.comment.read(), u ? (d = o.get_directives(u), d && d.ignore === "start" && (u += o.readIgnored(this._input))) : u = this.__patterns.cdata.read()), u && (c = this._create_token(s.COMMENT, u), c.directives = d);
    }
    return c;
  }, a.prototype._read_processing = function(l) {
    var c = null, u = null, d = null;
    if (l === "<") {
      var f = this._input.peek(1);
      (f === "!" || f === "?") && (u = this.__patterns.conditional_comment.read(), u = u || this.__patterns.processing.read()), u && (c = this._create_token(s.COMMENT, u), c.directives = d);
    }
    return c;
  }, a.prototype._read_open = function(l, c) {
    var u = null, d = null;
    return (!c || c.type === s.CONTROL_FLOW_OPEN) && l === "<" && (u = this._input.next(), this._input.peek() === "/" && (u += this._input.next()), u += this.__patterns.element_name.read(), d = this._create_token(s.TAG_OPEN, u)), d;
  }, a.prototype._read_open_handlebars = function(l, c) {
    var u = null, d = null;
    return (!c || c.type === s.CONTROL_FLOW_OPEN) && (this._options.templating.includes("angular") || this._options.indent_handlebars) && l === "{" && this._input.peek(1) === "{" && (this._options.indent_handlebars && this._input.peek(2) === "!" ? (u = this.__patterns.handlebars_comment.read(), u = u || this.__patterns.handlebars.read(), d = this._create_token(s.COMMENT, u)) : (u = this.__patterns.handlebars_open.read(), d = this._create_token(s.TAG_OPEN, u))), d;
  }, a.prototype._read_control_flows = function(l, c) {
    var u = "", d = null;
    if (!this._options.templating.includes("angular"))
      return d;
    if (l === "@") {
      if (u = this.__patterns.angular_control_flow_start.read(), u === "")
        return d;
      for (var f = u.endsWith("(") ? 1 : 0, h = 0; !(u.endsWith("{") && f === h); ) {
        var p = this._input.next();
        if (p === null)
          break;
        p === "(" ? f++ : p === ")" && h++, u += p;
      }
      d = this._create_token(s.CONTROL_FLOW_OPEN, u);
    } else l === "}" && c && c.type === s.CONTROL_FLOW_OPEN && (u = this._input.next(), d = this._create_token(s.CONTROL_FLOW_CLOSE, u));
    return d;
  }, a.prototype._read_close = function(l, c) {
    var u = null, d = null;
    return c && c.type === s.TAG_OPEN && (c.text[0] === "<" && (l === ">" || l === "/" && this._input.peek(1) === ">") ? (u = this._input.next(), l === "/" && (u += this._input.next()), d = this._create_token(s.TAG_CLOSE, u)) : c.text[0] === "{" && l === "}" && this._input.peek(1) === "}" && (this._input.next(), this._input.next(), d = this._create_token(s.TAG_CLOSE, "}}"))), d;
  }, a.prototype._read_attribute = function(l, c, u) {
    var d = null, f = "";
    if (u && u.text[0] === "<")
      if (l === "=")
        d = this._create_token(s.EQUALS, this._input.next());
      else if (l === '"' || l === "'") {
        var h = this._input.next();
        l === '"' ? h += this.__patterns.double_quote.read() : h += this.__patterns.single_quote.read(), d = this._create_token(s.VALUE, h);
      } else
        f = this.__patterns.attribute.read(), f && (c.type === s.EQUALS ? d = this._create_token(s.VALUE, f) : d = this._create_token(s.ATTRIBUTE, f));
    return d;
  }, a.prototype._is_content_unformatted = function(l) {
    return this._options.void_elements.indexOf(l) === -1 && (this._options.content_unformatted.indexOf(l) !== -1 || this._options.unformatted.indexOf(l) !== -1);
  }, a.prototype._read_raw_content = function(l, c, u) {
    var d = "";
    if (u && u.text[0] === "{")
      d = this.__patterns.handlebars_raw_close.read();
    else if (c.type === s.TAG_CLOSE && c.opened.text[0] === "<" && c.text[0] !== "/") {
      var f = c.opened.text.substr(1).toLowerCase();
      this._is_content_unformatted(f) && (d = this._input.readUntil(new RegExp("</" + f + "[\\n\\r\\t ]*?>", "ig")));
    }
    return d ? this._create_token(s.TEXT, d) : null;
  }, a.prototype._read_script_and_style = function(l, c) {
    if (c.type === s.TAG_CLOSE && c.opened.text[0] === "<" && c.text[0] !== "/") {
      var u = c.opened.text.substr(1).toLowerCase();
      if (u === "script" || u === "style") {
        var d = this._read_comment_or_cdata(l);
        if (d)
          return d.type = s.TEXT, d;
        var f = this._input.readUntil(new RegExp("</" + u + "[\\n\\r\\t ]*?>", "ig"));
        if (f)
          return this._create_token(s.TEXT, f);
      }
    }
    return null;
  }, a.prototype._read_content_word = function(l, c) {
    var u = "";
    return this._options.unformatted_content_delimiter && l === this._options.unformatted_content_delimiter[0] && (u = this.__patterns.unformatted_content_delimiter.read()), u || (u = c && c.type === s.CONTROL_FLOW_OPEN ? this.__patterns.word_control_flow_close_excluded.read() : this.__patterns.word.read()), u ? this._create_token(s.TEXT, u) : null;
  }, No.Tokenizer = a, No.TOKEN = s, No;
}
var Bh;
function hk() {
  if (Bh) return dc;
  Bh = 1;
  var n = k_().Options, e = bd().Output, t = zh().Tokenizer, i = zh().TOKEN, r = /\r\n|[\r\n]/, s = /\r\n|[\r\n]/g, o = function(m, g) {
    this.indent_level = 0, this.alignment_size = 0, this.max_preserve_newlines = m.max_preserve_newlines, this.preserve_newlines = m.preserve_newlines, this._output = new e(m, g);
  };
  o.prototype.current_line_has_match = function(m) {
    return this._output.current_line.has_match(m);
  }, o.prototype.set_space_before_token = function(m, g) {
    this._output.space_before_token = m, this._output.non_breaking_space = g;
  }, o.prototype.set_wrap_point = function() {
    this._output.set_indent(this.indent_level, this.alignment_size), this._output.set_wrap_point();
  }, o.prototype.add_raw_token = function(m) {
    this._output.add_raw_token(m);
  }, o.prototype.print_preserved_newlines = function(m) {
    var g = 0;
    m.type !== i.TEXT && m.previous.type !== i.TEXT && (g = m.newlines ? 1 : 0), this.preserve_newlines && (g = m.newlines < this.max_preserve_newlines + 1 ? m.newlines : this.max_preserve_newlines + 1);
    for (var v = 0; v < g; v++)
      this.print_newline(v > 0);
    return g !== 0;
  }, o.prototype.traverse_whitespace = function(m) {
    return m.whitespace_before || m.newlines ? (this.print_preserved_newlines(m) || (this._output.space_before_token = !0), !0) : !1;
  }, o.prototype.previous_token_wrapped = function() {
    return this._output.previous_token_wrapped;
  }, o.prototype.print_newline = function(m) {
    this._output.add_new_line(m);
  }, o.prototype.print_token = function(m) {
    m.text && (this._output.set_indent(this.indent_level, this.alignment_size), this._output.add_token(m.text));
  }, o.prototype.indent = function() {
    this.indent_level++;
  }, o.prototype.deindent = function() {
    this.indent_level > 0 && (this.indent_level--, this._output.set_indent(this.indent_level, this.alignment_size));
  }, o.prototype.get_full_indent = function(m) {
    return m = this.indent_level + (m || 0), m < 1 ? "" : this._output.get_indent_string(m);
  };
  var a = function(m) {
    for (var g = null, v = m.next; v.type !== i.EOF && m.closed !== v; ) {
      if (v.type === i.ATTRIBUTE && v.text === "type") {
        v.next && v.next.type === i.EQUALS && v.next.next && v.next.next.type === i.VALUE && (g = v.next.next.text);
        break;
      }
      v = v.next;
    }
    return g;
  }, l = function(m, g) {
    var v = null, x = null;
    return g.closed ? (m === "script" ? v = "text/javascript" : m === "style" && (v = "text/css"), v = a(g) || v, v.search("text/css") > -1 ? x = "css" : v.search(/module|((text|application|dojo)\/(x-)?(javascript|ecmascript|jscript|livescript|(ld\+)?json|method|aspect))/) > -1 ? x = "javascript" : v.search(/(text|application|dojo)\/(x-)?(html)/) > -1 ? x = "html" : v.search(/test\/null/) > -1 && (x = "null"), x) : null;
  };
  function c(m, g) {
    return g.indexOf(m) !== -1;
  }
  function u(m, g, v) {
    this.parent = m || null, this.tag = g ? g.tag_name : "", this.indent_level = v || 0, this.parser_token = g || null;
  }
  function d(m) {
    this._printer = m, this._current_frame = null;
  }
  d.prototype.get_parser_token = function() {
    return this._current_frame ? this._current_frame.parser_token : null;
  }, d.prototype.record_tag = function(m) {
    var g = new u(this._current_frame, m, this._printer.indent_level);
    this._current_frame = g;
  }, d.prototype._try_pop_frame = function(m) {
    var g = null;
    return m && (g = m.parser_token, this._printer.indent_level = m.indent_level, this._current_frame = m.parent), g;
  }, d.prototype._get_frame = function(m, g) {
    for (var v = this._current_frame; v && m.indexOf(v.tag) === -1; ) {
      if (g && g.indexOf(v.tag) !== -1) {
        v = null;
        break;
      }
      v = v.parent;
    }
    return v;
  }, d.prototype.try_pop = function(m, g) {
    var v = this._get_frame([m], g);
    return this._try_pop_frame(v);
  }, d.prototype.indent_to_tag = function(m) {
    var g = this._get_frame(m);
    g && (this._printer.indent_level = g.indent_level);
  };
  function f(m, g, v, x) {
    this._source_text = m || "", g = g || {}, this._js_beautify = v, this._css_beautify = x, this._tag_stack = null;
    var w = new n(g, "html");
    this._options = w, this._is_wrap_attributes_force = this._options.wrap_attributes.substr(0, 5) === "force", this._is_wrap_attributes_force_expand_multiline = this._options.wrap_attributes === "force-expand-multiline", this._is_wrap_attributes_force_aligned = this._options.wrap_attributes === "force-aligned", this._is_wrap_attributes_aligned_multiple = this._options.wrap_attributes === "aligned-multiple", this._is_wrap_attributes_preserve = this._options.wrap_attributes.substr(0, 8) === "preserve", this._is_wrap_attributes_preserve_aligned = this._options.wrap_attributes === "preserve-aligned";
  }
  f.prototype.beautify = function() {
    if (this._options.disabled)
      return this._source_text;
    var m = this._source_text, g = this._options.eol;
    this._options.eol === "auto" && (g = `
`, m && r.test(m) && (g = m.match(r)[0])), m = m.replace(s, `
`);
    var v = m.match(/^[\t ]*/)[0], x = {
      text: "",
      type: ""
    }, w = new h(this._options), E = new o(this._options, v), k = new t(m, this._options).tokenize();
    this._tag_stack = new d(E);
    for (var S = null, y = k.next(); y.type !== i.EOF; )
      y.type === i.TAG_OPEN || y.type === i.COMMENT ? (S = this._handle_tag_open(E, y, w, x, k), w = S) : y.type === i.ATTRIBUTE || y.type === i.EQUALS || y.type === i.VALUE || y.type === i.TEXT && !w.tag_complete ? S = this._handle_inside_tag(E, y, w, x) : y.type === i.TAG_CLOSE ? S = this._handle_tag_close(E, y, w) : y.type === i.TEXT ? S = this._handle_text(E, y, w) : y.type === i.CONTROL_FLOW_OPEN ? S = this._handle_control_flow_open(E, y) : y.type === i.CONTROL_FLOW_CLOSE ? S = this._handle_control_flow_close(E, y) : E.add_raw_token(y), x = S, y = k.next();
    var T = E._output.get_code(g);
    return T;
  }, f.prototype._handle_control_flow_open = function(m, g) {
    var v = {
      text: g.text,
      type: g.type
    };
    return m.set_space_before_token(g.newlines || g.whitespace_before !== "", !0), g.newlines ? m.print_preserved_newlines(g) : m.set_space_before_token(g.newlines || g.whitespace_before !== "", !0), m.print_token(g), m.indent(), v;
  }, f.prototype._handle_control_flow_close = function(m, g) {
    var v = {
      text: g.text,
      type: g.type
    };
    return m.deindent(), g.newlines ? m.print_preserved_newlines(g) : m.set_space_before_token(g.newlines || g.whitespace_before !== "", !0), m.print_token(g), v;
  }, f.prototype._handle_tag_close = function(m, g, v) {
    var x = {
      text: g.text,
      type: g.type
    };
    return m.alignment_size = 0, v.tag_complete = !0, m.set_space_before_token(g.newlines || g.whitespace_before !== "", !0), v.is_unformatted ? m.add_raw_token(g) : (v.tag_start_char === "<" && (m.set_space_before_token(g.text[0] === "/", !0), this._is_wrap_attributes_force_expand_multiline && v.has_wrapped_attrs && m.print_newline(!1)), m.print_token(g)), v.indent_content && !(v.is_unformatted || v.is_content_unformatted) && (m.indent(), v.indent_content = !1), !v.is_inline_element && !(v.is_unformatted || v.is_content_unformatted) && m.set_wrap_point(), x;
  }, f.prototype._handle_inside_tag = function(m, g, v, x) {
    var w = v.has_wrapped_attrs, E = {
      text: g.text,
      type: g.type
    };
    return m.set_space_before_token(g.newlines || g.whitespace_before !== "", !0), v.is_unformatted ? m.add_raw_token(g) : v.tag_start_char === "{" && g.type === i.TEXT ? m.print_preserved_newlines(g) ? (g.newlines = 0, m.add_raw_token(g)) : m.print_token(g) : (g.type === i.ATTRIBUTE ? m.set_space_before_token(!0) : (g.type === i.EQUALS || g.type === i.VALUE && g.previous.type === i.EQUALS) && m.set_space_before_token(!1), g.type === i.ATTRIBUTE && v.tag_start_char === "<" && ((this._is_wrap_attributes_preserve || this._is_wrap_attributes_preserve_aligned) && (m.traverse_whitespace(g), w = w || g.newlines !== 0), this._is_wrap_attributes_force && v.attr_count >= this._options.wrap_attributes_min_attrs && (x.type !== i.TAG_OPEN || // ie. second attribute and beyond
    this._is_wrap_attributes_force_expand_multiline) && (m.print_newline(!1), w = !0)), m.print_token(g), w = w || m.previous_token_wrapped(), v.has_wrapped_attrs = w), E;
  }, f.prototype._handle_text = function(m, g, v) {
    var x = {
      text: g.text,
      type: "TK_CONTENT"
    };
    return v.custom_beautifier_name ? this._print_custom_beatifier_text(m, g, v) : v.is_unformatted || v.is_content_unformatted ? m.add_raw_token(g) : (m.traverse_whitespace(g), m.print_token(g)), x;
  }, f.prototype._print_custom_beatifier_text = function(m, g, v) {
    var x = this;
    if (g.text !== "") {
      var w = g.text, E, k = 1, S = "", y = "";
      v.custom_beautifier_name === "javascript" && typeof this._js_beautify == "function" ? E = this._js_beautify : v.custom_beautifier_name === "css" && typeof this._css_beautify == "function" ? E = this._css_beautify : v.custom_beautifier_name === "html" && (E = function(D, F) {
        var W = new f(D, F, x._js_beautify, x._css_beautify);
        return W.beautify();
      }), this._options.indent_scripts === "keep" ? k = 0 : this._options.indent_scripts === "separate" && (k = -m.indent_level);
      var T = m.get_full_indent(k);
      if (w = w.replace(/\n[ \t]*$/, ""), v.custom_beautifier_name !== "html" && w[0] === "<" && w.match(/^(<!--|<!\[CDATA\[)/)) {
        var _ = /^(<!--[^\n]*|<!\[CDATA\[)(\n?)([ \t\n]*)([\s\S]*)(-->|]]>)$/.exec(w);
        if (!_) {
          m.add_raw_token(g);
          return;
        }
        S = T + _[1] + `
`, w = _[4], _[5] && (y = T + _[5]), w = w.replace(/\n[ \t]*$/, ""), (_[2] || _[3].indexOf(`
`) !== -1) && (_ = _[3].match(/[ \t]+$/), _ && (g.whitespace_before = _[0]));
      }
      if (w)
        if (E) {
          var C = function() {
            this.eol = `
`;
          };
          C.prototype = this._options.raw_options;
          var M = new C();
          w = E(T + w, M);
        } else {
          var H = g.whitespace_before;
          H && (w = w.replace(new RegExp(`
(` + H + ")?", "g"), `
`)), w = T + w.replace(/\n/g, `
` + T);
        }
      S && (w ? w = S + w + `
` + y : w = S + y), m.print_newline(!1), w && (g.text = w, g.whitespace_before = "", g.newlines = 0, m.add_raw_token(g), m.print_newline(!0));
    }
  }, f.prototype._handle_tag_open = function(m, g, v, x, w) {
    var E = this._get_tag_open_token(g);
    if ((v.is_unformatted || v.is_content_unformatted) && !v.is_empty_element && g.type === i.TAG_OPEN && !E.is_start_tag ? (m.add_raw_token(g), E.start_tag_token = this._tag_stack.try_pop(E.tag_name)) : (m.traverse_whitespace(g), this._set_tag_position(m, g, E, v, x), E.is_inline_element || m.set_wrap_point(), m.print_token(g)), E.is_start_tag && this._is_wrap_attributes_force) {
      var k = 0, S;
      do
        S = w.peek(k), S.type === i.ATTRIBUTE && (E.attr_count += 1), k += 1;
      while (S.type !== i.EOF && S.type !== i.TAG_CLOSE);
    }
    return (this._is_wrap_attributes_force_aligned || this._is_wrap_attributes_aligned_multiple || this._is_wrap_attributes_preserve_aligned) && (E.alignment_size = g.text.length + 1), !E.tag_complete && !E.is_unformatted && (m.alignment_size = E.alignment_size), E;
  };
  var h = function(m, g, v) {
    if (this.parent = g || null, this.text = "", this.type = "TK_TAG_OPEN", this.tag_name = "", this.is_inline_element = !1, this.is_unformatted = !1, this.is_content_unformatted = !1, this.is_empty_element = !1, this.is_start_tag = !1, this.is_end_tag = !1, this.indent_content = !1, this.multiline_content = !1, this.custom_beautifier_name = null, this.start_tag_token = null, this.attr_count = 0, this.has_wrapped_attrs = !1, this.alignment_size = 0, this.tag_complete = !1, this.tag_start_char = "", this.tag_check = "", !v)
      this.tag_complete = !0;
    else {
      var x;
      this.tag_start_char = v.text[0], this.text = v.text, this.tag_start_char === "<" ? (x = v.text.match(/^<([^\s>]*)/), this.tag_check = x ? x[1] : "") : (x = v.text.match(/^{{~?(?:[\^]|#\*?)?([^\s}]+)/), this.tag_check = x ? x[1] : "", (v.text.startsWith("{{#>") || v.text.startsWith("{{~#>")) && this.tag_check[0] === ">" && (this.tag_check === ">" && v.next !== null ? this.tag_check = v.next.text.split(" ")[0] : this.tag_check = v.text.split(">")[1])), this.tag_check = this.tag_check.toLowerCase(), v.type === i.COMMENT && (this.tag_complete = !0), this.is_start_tag = this.tag_check.charAt(0) !== "/", this.tag_name = this.is_start_tag ? this.tag_check : this.tag_check.substr(1), this.is_end_tag = !this.is_start_tag || v.closed && v.closed.text === "/>";
      var w = 2;
      this.tag_start_char === "{" && this.text.length >= 3 && this.text.charAt(2) === "~" && (w = 3), this.is_end_tag = this.is_end_tag || this.tag_start_char === "{" && (!m.indent_handlebars || this.text.length < 3 || /[^#\^]/.test(this.text.charAt(w)));
    }
  };
  f.prototype._get_tag_open_token = function(m) {
    var g = new h(this._options, this._tag_stack.get_parser_token(), m);
    return g.alignment_size = this._options.wrap_attributes_indent_size, g.is_end_tag = g.is_end_tag || c(g.tag_check, this._options.void_elements), g.is_empty_element = g.tag_complete || g.is_start_tag && g.is_end_tag, g.is_unformatted = !g.tag_complete && c(g.tag_check, this._options.unformatted), g.is_content_unformatted = !g.is_empty_element && c(g.tag_check, this._options.content_unformatted), g.is_inline_element = c(g.tag_name, this._options.inline) || this._options.inline_custom_elements && g.tag_name.includes("-") || g.tag_start_char === "{", g;
  }, f.prototype._set_tag_position = function(m, g, v, x, w) {
    if (v.is_empty_element || (v.is_end_tag ? v.start_tag_token = this._tag_stack.try_pop(v.tag_name) : (this._do_optional_end_element(v) && (v.is_inline_element || m.print_newline(!1)), this._tag_stack.record_tag(v), (v.tag_name === "script" || v.tag_name === "style") && !(v.is_unformatted || v.is_content_unformatted) && (v.custom_beautifier_name = l(v.tag_check, g)))), c(v.tag_check, this._options.extra_liners) && (m.print_newline(!1), m._output.just_added_blankline() || m.print_newline(!0)), v.is_empty_element) {
      if (v.tag_start_char === "{" && v.tag_check === "else") {
        this._tag_stack.indent_to_tag(["if", "unless", "each"]), v.indent_content = !0;
        var E = m.current_line_has_match(/{{#if/);
        E || m.print_newline(!1);
      }
      v.tag_name === "!--" && w.type === i.TAG_CLOSE && x.is_end_tag && v.text.indexOf(`
`) === -1 || (v.is_inline_element || v.is_unformatted || m.print_newline(!1), this._calcluate_parent_multiline(m, v));
    } else if (v.is_end_tag) {
      var k = !1;
      k = v.start_tag_token && v.start_tag_token.multiline_content, k = k || !v.is_inline_element && !(x.is_inline_element || x.is_unformatted) && !(w.type === i.TAG_CLOSE && v.start_tag_token === x) && w.type !== "TK_CONTENT", (v.is_content_unformatted || v.is_unformatted) && (k = !1), k && m.print_newline(!1);
    } else
      v.indent_content = !v.custom_beautifier_name, v.tag_start_char === "<" && (v.tag_name === "html" ? v.indent_content = this._options.indent_inner_html : v.tag_name === "head" ? v.indent_content = this._options.indent_head_inner_html : v.tag_name === "body" && (v.indent_content = this._options.indent_body_inner_html)), !(v.is_inline_element || v.is_unformatted) && (w.type !== "TK_CONTENT" || v.is_content_unformatted) && m.print_newline(!1), this._calcluate_parent_multiline(m, v);
  }, f.prototype._calcluate_parent_multiline = function(m, g) {
    g.parent && m._output.just_added_newline() && !((g.is_inline_element || g.is_unformatted) && g.parent.is_inline_element) && (g.parent.multiline_content = !0);
  };
  var p = ["address", "article", "aside", "blockquote", "details", "div", "dl", "fieldset", "figcaption", "figure", "footer", "form", "h1", "h2", "h3", "h4", "h5", "h6", "header", "hr", "main", "menu", "nav", "ol", "p", "pre", "section", "table", "ul"], b = ["a", "audio", "del", "ins", "map", "noscript", "video"];
  return f.prototype._do_optional_end_element = function(m) {
    var g = null;
    if (!(m.is_empty_element || !m.is_start_tag || !m.parent)) {
      if (m.tag_name === "body")
        g = g || this._tag_stack.try_pop("head");
      else if (m.tag_name === "li")
        g = g || this._tag_stack.try_pop("li", ["ol", "ul", "menu"]);
      else if (m.tag_name === "dd" || m.tag_name === "dt")
        g = g || this._tag_stack.try_pop("dt", ["dl"]), g = g || this._tag_stack.try_pop("dd", ["dl"]);
      else if (m.parent.tag_name === "p" && p.indexOf(m.tag_name) !== -1) {
        var v = m.parent.parent;
        (!v || b.indexOf(v.tag_name) === -1) && (g = g || this._tag_stack.try_pop("p"));
      } else m.tag_name === "rp" || m.tag_name === "rt" ? (g = g || this._tag_stack.try_pop("rt", ["ruby", "rtc"]), g = g || this._tag_stack.try_pop("rp", ["ruby", "rtc"])) : m.tag_name === "optgroup" ? g = g || this._tag_stack.try_pop("optgroup", ["select"]) : m.tag_name === "option" ? g = g || this._tag_stack.try_pop("option", ["select", "datalist", "optgroup"]) : m.tag_name === "colgroup" ? g = g || this._tag_stack.try_pop("caption", ["table"]) : m.tag_name === "thead" ? (g = g || this._tag_stack.try_pop("caption", ["table"]), g = g || this._tag_stack.try_pop("colgroup", ["table"])) : m.tag_name === "tbody" || m.tag_name === "tfoot" ? (g = g || this._tag_stack.try_pop("caption", ["table"]), g = g || this._tag_stack.try_pop("colgroup", ["table"]), g = g || this._tag_stack.try_pop("thead", ["table"]), g = g || this._tag_stack.try_pop("tbody", ["table"])) : m.tag_name === "tr" ? (g = g || this._tag_stack.try_pop("caption", ["table"]), g = g || this._tag_stack.try_pop("colgroup", ["table"]), g = g || this._tag_stack.try_pop("tr", ["table", "thead", "tbody", "tfoot"])) : (m.tag_name === "th" || m.tag_name === "td") && (g = g || this._tag_stack.try_pop("td", ["table", "thead", "tbody", "tfoot", "tr"]), g = g || this._tag_stack.try_pop("th", ["table", "thead", "tbody", "tfoot", "tr"]));
      return m.parent = this._tag_stack.get_parser_token(), g;
    }
  }, dc.Beautifier = f, dc;
}
var Hh;
function pk() {
  if (Hh) return Oo.exports;
  Hh = 1;
  var n = hk().Beautifier, e = k_().Options;
  function t(i, r, s, o) {
    var a = new n(i, r, s, o);
    return a.beautify();
  }
  return Oo.exports = t, Oo.exports.defaultOptions = function() {
    return new e();
  }, Oo.exports;
}
var Fh;
function mk() {
  if (Fh) return rs;
  Fh = 1;
  var n = uk(), e = fk(), t = pk();
  function i(r, s, o, a) {
    return o = o || n, a = a || e, t(r, s, o, a);
  }
  return i.defaultOptions = t.defaultOptions, rs.js = n, rs.css = e, rs.html = i, rs;
}
var Vh;
function gk() {
  return Vh || (Vh = 1, function(n) {
    function e(t, i, r) {
      var s = function(o, a) {
        return t.js_beautify(o, a);
      };
      return s.js = t.js_beautify, s.css = i.css_beautify, s.html = r.html_beautify, s.js_beautify = t.js_beautify, s.css_beautify = i.css_beautify, s.html_beautify = r.html_beautify, s;
    }
    (function(t) {
      var i = mk();
      i.js_beautify = i.js, i.css_beautify = i.css, i.html_beautify = i.html, t.exports = e(i, i, i);
    })(n);
  }(Yl)), Yl.exports;
}
var S_ = gk(), _k = Ie.create({
  name: "doc",
  topNode: !0,
  content: "block+"
}), bk = Ie.create({
  name: "text",
  group: "inline"
}), vk = nn.create({
  name: "subscript",
  addOptions() {
    return {
      HTMLAttributes: {}
    };
  },
  parseHTML() {
    return [
      {
        tag: "sub"
      },
      {
        style: "vertical-align",
        getAttrs(n) {
          return n !== "sub" ? !1 : null;
        }
      }
    ];
  },
  renderHTML({ HTMLAttributes: n }) {
    return ["sub", Ce(this.options.HTMLAttributes, n), 0];
  },
  addCommands() {
    return {
      setSubscript: () => ({ commands: n }) => n.setMark(this.name),
      toggleSubscript: () => ({ commands: n }) => n.toggleMark(this.name),
      unsetSubscript: () => ({ commands: n }) => n.unsetMark(this.name)
    };
  },
  addKeyboardShortcuts() {
    return {
      "Mod-,": () => this.editor.commands.toggleSubscript()
    };
  }
}), yk = nn.create({
  name: "superscript",
  addOptions() {
    return {
      HTMLAttributes: {}
    };
  },
  parseHTML() {
    return [
      {
        tag: "sup"
      },
      {
        style: "vertical-align",
        getAttrs(n) {
          return n !== "super" ? !1 : null;
        }
      }
    ];
  },
  renderHTML({ HTMLAttributes: n }) {
    return ["sup", Ce(this.options.HTMLAttributes, n), 0];
  },
  addCommands() {
    return {
      setSuperscript: () => ({ commands: n }) => n.setMark(this.name),
      toggleSuperscript: () => ({ commands: n }) => n.toggleMark(this.name),
      unsetSuperscript: () => ({ commands: n }) => n.unsetMark(this.name)
    };
  },
  addKeyboardShortcuts() {
    return {
      "Mod-.": () => this.editor.commands.toggleSuperscript()
    };
  }
}), xk = /(?:^|\s)(!\[(.+|:?)]\((\S+)(?:(?:\s+)["'](\S+)["'])?\))$/, wk = Ie.create({
  name: "image",
  addOptions() {
    return {
      inline: !1,
      allowBase64: !1,
      HTMLAttributes: {}
    };
  },
  inline() {
    return this.options.inline;
  },
  group() {
    return this.options.inline ? "inline" : "block";
  },
  draggable: !0,
  addAttributes() {
    return {
      src: {
        default: null
      },
      alt: {
        default: null
      },
      title: {
        default: null
      },
      width: {
        default: null
      },
      height: {
        default: null
      }
    };
  },
  parseHTML() {
    return [
      {
        tag: this.options.allowBase64 ? "img[src]" : 'img[src]:not([src^="data:"])'
      }
    ];
  },
  renderHTML({ HTMLAttributes: n }) {
    return ["img", Ce(this.options.HTMLAttributes, n)];
  },
  addCommands() {
    return {
      setImage: (n) => ({ commands: e }) => e.insertContent({
        type: this.name,
        attrs: n
      })
    };
  },
  addInputRules() {
    return [
      gd({
        find: xk,
        type: this.type,
        getAttributes: (n) => {
          const [, , e, t, i] = n;
          return { src: t, alt: e, title: i };
        }
      })
    ];
  }
}), kk = Ie.create({
  name: "hardBreak",
  addOptions() {
    return {
      keepMarks: !0,
      HTMLAttributes: {}
    };
  },
  inline: !0,
  group: "inline",
  selectable: !1,
  linebreakReplacement: !0,
  parseHTML() {
    return [{ tag: "br" }];
  },
  renderHTML({ HTMLAttributes: n }) {
    return ["br", Ce(this.options.HTMLAttributes, n)];
  },
  renderText() {
    return `
`;
  },
  addCommands() {
    return {
      setHardBreak: () => ({ commands: n, chain: e, state: t, editor: i }) => n.first([
        () => n.exitCode(),
        () => n.command(() => {
          const { selection: r, storedMarks: s } = t;
          if (r.$from.parent.type.spec.isolating)
            return !1;
          const { keepMarks: o } = this.options, { splittableMarks: a } = i.extensionManager, l = s || r.$to.parentOffset && r.$from.marks();
          return e().insertContent({ type: this.name }).command(({ tr: c, dispatch: u }) => {
            if (u && l && o) {
              const d = l.filter((f) => a.includes(f.type.name));
              c.ensureMarks(d);
            }
            return !0;
          }).run();
        })
      ])
    };
  },
  addKeyboardShortcuts() {
    return {
      "Mod-Enter": () => this.editor.commands.setHardBreak(),
      "Shift-Enter": () => this.editor.commands.setHardBreak()
    };
  }
}), Sk = /(?:^|\s)(\*(?!\s+\*)((?:[^*]+))\*(?!\s+\*))$/, Ek = /(?:^|\s)(\*(?!\s+\*)((?:[^*]+))\*(?!\s+\*))/g, Ck = /(?:^|\s)(_(?!\s+_)((?:[^_]+))_(?!\s+_))$/, Tk = /(?:^|\s)(_(?!\s+_)((?:[^_]+))_(?!\s+_))/g, Ak = nn.create({
  name: "italic",
  addOptions() {
    return {
      HTMLAttributes: {}
    };
  },
  parseHTML() {
    return [
      {
        tag: "em"
      },
      {
        tag: "i",
        getAttrs: (n) => n.style.fontStyle !== "normal" && null
      },
      {
        style: "font-style=normal",
        clearMark: (n) => n.type.name === this.name
      },
      {
        style: "font-style=italic"
      }
    ];
  },
  renderHTML({ HTMLAttributes: n }) {
    return ["em", Ce(this.options.HTMLAttributes, n), 0];
  },
  addCommands() {
    return {
      setItalic: () => ({ commands: n }) => n.setMark(this.name),
      toggleItalic: () => ({ commands: n }) => n.toggleMark(this.name),
      unsetItalic: () => ({ commands: n }) => n.unsetMark(this.name)
    };
  },
  addKeyboardShortcuts() {
    return {
      "Mod-i": () => this.editor.commands.toggleItalic(),
      "Mod-I": () => this.editor.commands.toggleItalic()
    };
  },
  addInputRules() {
    return [
      jr({
        find: Sk,
        type: this.type
      }),
      jr({
        find: Ck,
        type: this.type
      })
    ];
  },
  addPasteRules() {
    return [
      Xi({
        find: Ek,
        type: this.type
      }),
      Xi({
        find: Tk,
        type: this.type
      })
    ];
  }
}), Mk = nn.create({
  name: "underline",
  addOptions() {
    return {
      HTMLAttributes: {}
    };
  },
  parseHTML() {
    return [
      {
        tag: "u"
      },
      {
        style: "text-decoration",
        consuming: !1,
        getAttrs: (n) => n.includes("underline") ? {} : !1
      }
    ];
  },
  renderHTML({ HTMLAttributes: n }) {
    return ["u", Ce(this.options.HTMLAttributes, n), 0];
  },
  addCommands() {
    return {
      setUnderline: () => ({ commands: n }) => n.setMark(this.name),
      toggleUnderline: () => ({ commands: n }) => n.toggleMark(this.name),
      unsetUnderline: () => ({ commands: n }) => n.unsetMark(this.name)
    };
  },
  addKeyboardShortcuts() {
    return {
      "Mod-u": () => this.editor.commands.toggleUnderline(),
      "Mod-U": () => this.editor.commands.toggleUnderline()
    };
  }
}), xa = (n, e) => {
  if (n === "slot")
    return 0;
  if (n instanceof Function)
    return n(e);
  const { children: t, ...i } = e ?? {};
  if (n === "svg")
    throw new Error("SVG elements are not supported in the JSX syntax, use the array syntax instead");
  return [n, i, t];
}, Ok = /^\s*>\s$/, Nk = Ie.create({
  name: "blockquote",
  addOptions() {
    return {
      HTMLAttributes: {}
    };
  },
  content: "block+",
  group: "block",
  defining: !0,
  parseHTML() {
    return [{ tag: "blockquote" }];
  },
  renderHTML({ HTMLAttributes: n }) {
    return /* @__PURE__ */ xa("blockquote", { ...Ce(this.options.HTMLAttributes, n), children: /* @__PURE__ */ xa("slot", {}) });
  },
  addCommands() {
    return {
      setBlockquote: () => ({ commands: n }) => n.wrapIn(this.name),
      toggleBlockquote: () => ({ commands: n }) => n.toggleWrap(this.name),
      unsetBlockquote: () => ({ commands: n }) => n.lift(this.name)
    };
  },
  addKeyboardShortcuts() {
    return {
      "Mod-Shift-b": () => this.editor.commands.toggleBlockquote()
    };
  },
  addInputRules() {
    return [
      Ji({
        find: Ok,
        type: this.type
      })
    ];
  }
}), Lk = Object.defineProperty, Rk = (n, e) => {
  for (var t in e)
    Lk(n, t, { get: e[t], enumerable: !0 });
}, Ik = "listItem", jh = "textStyle", Wh = /^\s*([-+*])\s$/, E_ = Ie.create({
  name: "bulletList",
  addOptions() {
    return {
      itemTypeName: "listItem",
      HTMLAttributes: {},
      keepMarks: !1,
      keepAttributes: !1
    };
  },
  group: "block list",
  content() {
    return `${this.options.itemTypeName}+`;
  },
  parseHTML() {
    return [{ tag: "ul" }];
  },
  renderHTML({ HTMLAttributes: n }) {
    return ["ul", Ce(this.options.HTMLAttributes, n), 0];
  },
  addCommands() {
    return {
      toggleBulletList: () => ({ commands: n, chain: e }) => this.options.keepAttributes ? e().toggleList(this.name, this.options.itemTypeName, this.options.keepMarks).updateAttributes(Ik, this.editor.getAttributes(jh)).run() : n.toggleList(this.name, this.options.itemTypeName, this.options.keepMarks)
    };
  },
  addKeyboardShortcuts() {
    return {
      "Mod-Shift-8": () => this.editor.commands.toggleBulletList()
    };
  },
  addInputRules() {
    let n = Ji({
      find: Wh,
      type: this.type
    });
    return (this.options.keepMarks || this.options.keepAttributes) && (n = Ji({
      find: Wh,
      type: this.type,
      keepMarks: this.options.keepMarks,
      keepAttributes: this.options.keepAttributes,
      getAttributes: () => this.editor.getAttributes(jh),
      editor: this.editor
    })), [n];
  }
}), C_ = Ie.create({
  name: "listItem",
  addOptions() {
    return {
      HTMLAttributes: {},
      bulletListTypeName: "bulletList",
      orderedListTypeName: "orderedList"
    };
  },
  content: "paragraph block*",
  defining: !0,
  parseHTML() {
    return [
      {
        tag: "li"
      }
    ];
  },
  renderHTML({ HTMLAttributes: n }) {
    return ["li", Ce(this.options.HTMLAttributes, n), 0];
  },
  addKeyboardShortcuts() {
    return {
      Enter: () => this.editor.commands.splitListItem(this.name),
      Tab: () => this.editor.commands.sinkListItem(this.name),
      "Shift-Tab": () => this.editor.commands.liftListItem(this.name)
    };
  }
}), Pk = {};
Rk(Pk, {
  findListItemPos: () => co,
  getNextListDepth: () => wd,
  handleBackspace: () => ru,
  handleDelete: () => su,
  hasListBefore: () => T_,
  hasListItemAfter: () => Dk,
  hasListItemBefore: () => A_,
  listItemHasSubList: () => M_,
  nextListIsDeeper: () => O_,
  nextListIsHigher: () => N_
});
var co = (n, e) => {
  const { $from: t } = e.selection, i = it(n, e.schema);
  let r = null, s = t.depth, o = t.pos, a = null;
  for (; s > 0 && a === null; )
    r = t.node(s), r.type === i ? a = s : (s -= 1, o -= 1);
  return a === null ? null : { $pos: e.doc.resolve(o), depth: a };
}, wd = (n, e) => {
  const t = co(n, e);
  if (!t)
    return !1;
  const [, i] = Vg(e, n, t.$pos.pos + 4);
  return i;
}, T_ = (n, e, t) => {
  const { $anchor: i } = n.selection, r = Math.max(0, i.pos - 2), s = n.doc.resolve(r).node();
  return !(!s || !t.includes(s.type.name));
}, A_ = (n, e) => {
  var t;
  const { $anchor: i } = e.selection, r = e.doc.resolve(i.pos - 2);
  return !(r.index() === 0 || ((t = r.nodeBefore) == null ? void 0 : t.type.name) !== n);
}, M_ = (n, e, t) => {
  if (!t)
    return !1;
  const i = it(n, e.schema);
  let r = !1;
  return t.descendants((s) => {
    s.type === i && (r = !0);
  }), r;
}, ru = (n, e, t) => {
  if (n.commands.undoInputRule())
    return !0;
  if (n.state.selection.from !== n.state.selection.to)
    return !1;
  if (!ni(n.state, e) && T_(n.state, e, t)) {
    const { $anchor: a } = n.state.selection, l = n.state.doc.resolve(a.before() - 1), c = [];
    l.node().descendants((f, h) => {
      f.type.name === e && c.push({ node: f, pos: h });
    });
    const u = c.at(-1);
    if (!u)
      return !1;
    const d = n.state.doc.resolve(l.start() + u.pos + 1);
    return n.chain().cut({ from: a.start() - 1, to: a.end() + 1 }, d.end()).joinForward().run();
  }
  if (!ni(n.state, e) || !Kg(n.state))
    return !1;
  const i = co(e, n.state);
  if (!i)
    return !1;
  const s = n.state.doc.resolve(i.$pos.pos - 2).node(i.depth), o = M_(e, n.state, s);
  return A_(e, n.state) && !o ? n.commands.joinItemBackward() : n.chain().liftListItem(e).run();
}, O_ = (n, e) => {
  const t = wd(n, e), i = co(n, e);
  return !i || !t ? !1 : t > i.depth;
}, N_ = (n, e) => {
  const t = wd(n, e), i = co(n, e);
  return !i || !t ? !1 : t < i.depth;
}, su = (n, e) => {
  if (!ni(n.state, e) || !Ug(n.state, e))
    return !1;
  const { selection: t } = n.state, { $from: i, $to: r } = t;
  return !t.empty && i.sameParent(r) ? !1 : O_(e, n.state) ? n.chain().focus(n.state.selection.from + 4).lift(e).joinBackward().run() : N_(e, n.state) ? n.chain().joinForward().joinBackward().run() : n.commands.joinItemForward();
}, Dk = (n, e) => {
  var t;
  const { $anchor: i } = e.selection, r = e.doc.resolve(i.pos - i.parentOffset - 2);
  return !(r.index() === r.parent.childCount - 1 || ((t = r.nodeAfter) == null ? void 0 : t.type.name) !== n);
}, $k = ze.create({
  name: "listKeymap",
  addOptions() {
    return {
      listTypes: [
        {
          itemName: "listItem",
          wrapperNames: ["bulletList", "orderedList"]
        },
        {
          itemName: "taskItem",
          wrapperNames: ["taskList"]
        }
      ]
    };
  },
  addKeyboardShortcuts() {
    return {
      Delete: ({ editor: n }) => {
        let e = !1;
        return this.options.listTypes.forEach(({ itemName: t }) => {
          n.state.schema.nodes[t] !== void 0 && su(n, t) && (e = !0);
        }), e;
      },
      "Mod-Delete": ({ editor: n }) => {
        let e = !1;
        return this.options.listTypes.forEach(({ itemName: t }) => {
          n.state.schema.nodes[t] !== void 0 && su(n, t) && (e = !0);
        }), e;
      },
      Backspace: ({ editor: n }) => {
        let e = !1;
        return this.options.listTypes.forEach(({ itemName: t, wrapperNames: i }) => {
          n.state.schema.nodes[t] !== void 0 && ru(n, t, i) && (e = !0);
        }), e;
      },
      "Mod-Backspace": ({ editor: n }) => {
        let e = !1;
        return this.options.listTypes.forEach(({ itemName: t, wrapperNames: i }) => {
          n.state.schema.nodes[t] !== void 0 && ru(n, t, i) && (e = !0);
        }), e;
      }
    };
  }
}), zk = "listItem", Uh = "textStyle", Kh = /^(\d+)\.\s$/, L_ = Ie.create({
  name: "orderedList",
  addOptions() {
    return {
      itemTypeName: "listItem",
      HTMLAttributes: {},
      keepMarks: !1,
      keepAttributes: !1
    };
  },
  group: "block list",
  content() {
    return `${this.options.itemTypeName}+`;
  },
  addAttributes() {
    return {
      start: {
        default: 1,
        parseHTML: (n) => n.hasAttribute("start") ? parseInt(n.getAttribute("start") || "", 10) : 1
      },
      type: {
        default: null,
        parseHTML: (n) => n.getAttribute("type")
      }
    };
  },
  parseHTML() {
    return [
      {
        tag: "ol"
      }
    ];
  },
  renderHTML({ HTMLAttributes: n }) {
    const { start: e, ...t } = n;
    return e === 1 ? ["ol", Ce(this.options.HTMLAttributes, t), 0] : ["ol", Ce(this.options.HTMLAttributes, n), 0];
  },
  addCommands() {
    return {
      toggleOrderedList: () => ({ commands: n, chain: e }) => this.options.keepAttributes ? e().toggleList(this.name, this.options.itemTypeName, this.options.keepMarks).updateAttributes(zk, this.editor.getAttributes(Uh)).run() : n.toggleList(this.name, this.options.itemTypeName, this.options.keepMarks)
    };
  },
  addKeyboardShortcuts() {
    return {
      "Mod-Shift-7": () => this.editor.commands.toggleOrderedList()
    };
  },
  addInputRules() {
    let n = Ji({
      find: Kh,
      type: this.type,
      getAttributes: (e) => ({ start: +e[1] }),
      joinPredicate: (e, t) => t.childCount + t.attrs.start === +e[1]
    });
    return (this.options.keepMarks || this.options.keepAttributes) && (n = Ji({
      find: Kh,
      type: this.type,
      keepMarks: this.options.keepMarks,
      keepAttributes: this.options.keepAttributes,
      getAttributes: (e) => ({ start: +e[1], ...this.editor.getAttributes(Uh) }),
      joinPredicate: (e, t) => t.childCount + t.attrs.start === +e[1],
      editor: this.editor
    })), [n];
  }
}), Bk = /^\s*(\[([( |x])?\])\s$/, Hk = Ie.create({
  name: "taskItem",
  addOptions() {
    return {
      nested: !1,
      HTMLAttributes: {},
      taskListTypeName: "taskList",
      a11y: void 0
    };
  },
  content() {
    return this.options.nested ? "paragraph block*" : "paragraph+";
  },
  defining: !0,
  addAttributes() {
    return {
      checked: {
        default: !1,
        keepOnSplit: !1,
        parseHTML: (n) => {
          const e = n.getAttribute("data-checked");
          return e === "" || e === "true";
        },
        renderHTML: (n) => ({
          "data-checked": n.checked
        })
      }
    };
  },
  parseHTML() {
    return [
      {
        tag: `li[data-type="${this.name}"]`,
        priority: 51
      }
    ];
  },
  renderHTML({ node: n, HTMLAttributes: e }) {
    return [
      "li",
      Ce(this.options.HTMLAttributes, e, {
        "data-type": this.name
      }),
      [
        "label",
        [
          "input",
          {
            type: "checkbox",
            checked: n.attrs.checked ? "checked" : null
          }
        ],
        ["span"]
      ],
      ["div", 0]
    ];
  },
  addKeyboardShortcuts() {
    const n = {
      Enter: () => this.editor.commands.splitListItem(this.name),
      "Shift-Tab": () => this.editor.commands.liftListItem(this.name)
    };
    return this.options.nested ? {
      ...n,
      Tab: () => this.editor.commands.sinkListItem(this.name)
    } : n;
  },
  addNodeView() {
    return ({ node: n, HTMLAttributes: e, getPos: t, editor: i }) => {
      const r = document.createElement("li"), s = document.createElement("label"), o = document.createElement("span"), a = document.createElement("input"), l = document.createElement("div"), c = (u) => {
        var d, f;
        a.ariaLabel = ((f = (d = this.options.a11y) == null ? void 0 : d.checkboxLabel) == null ? void 0 : f.call(d, u, a.checked)) || `Task item checkbox for ${u.textContent || "empty task item"}`;
      };
      return c(n), s.contentEditable = "false", a.type = "checkbox", a.addEventListener("mousedown", (u) => u.preventDefault()), a.addEventListener("change", (u) => {
        if (!i.isEditable && !this.options.onReadOnlyChecked) {
          a.checked = !a.checked;
          return;
        }
        const { checked: d } = u.target;
        i.isEditable && typeof t == "function" && i.chain().focus(void 0, { scrollIntoView: !1 }).command(({ tr: f }) => {
          const h = t();
          if (typeof h != "number")
            return !1;
          const p = f.doc.nodeAt(h);
          return f.setNodeMarkup(h, void 0, {
            ...p == null ? void 0 : p.attrs,
            checked: d
          }), !0;
        }).run(), !i.isEditable && this.options.onReadOnlyChecked && (this.options.onReadOnlyChecked(n, d) || (a.checked = !a.checked));
      }), Object.entries(this.options.HTMLAttributes).forEach(([u, d]) => {
        r.setAttribute(u, d);
      }), r.dataset.checked = n.attrs.checked, a.checked = n.attrs.checked, s.append(a, o), r.append(s, l), Object.entries(e).forEach(([u, d]) => {
        r.setAttribute(u, d);
      }), {
        dom: r,
        contentDOM: l,
        update: (u) => u.type !== this.type ? !1 : (r.dataset.checked = u.attrs.checked, a.checked = u.attrs.checked, c(u), !0)
      };
    };
  },
  addInputRules() {
    return [
      Ji({
        find: Bk,
        type: this.type,
        getAttributes: (n) => ({
          checked: n[n.length - 1] === "x"
        })
      })
    ];
  }
}), Fk = Ie.create({
  name: "taskList",
  addOptions() {
    return {
      itemTypeName: "taskItem",
      HTMLAttributes: {}
    };
  },
  group: "block list",
  content() {
    return `${this.options.itemTypeName}+`;
  },
  parseHTML() {
    return [
      {
        tag: `ul[data-type="${this.name}"]`,
        priority: 51
      }
    ];
  },
  renderHTML({ HTMLAttributes: n }) {
    return ["ul", Ce(this.options.HTMLAttributes, n, { "data-type": this.name }), 0];
  },
  addCommands() {
    return {
      toggleTaskList: () => ({ commands: n }) => n.toggleList(this.name, this.options.itemTypeName)
    };
  },
  addKeyboardShortcuts() {
    return {
      "Mod-Shift-9": () => this.editor.commands.toggleTaskList()
    };
  }
});
ze.create({
  name: "listKit",
  addExtensions() {
    const n = [];
    return this.options.bulletList !== !1 && n.push(E_.configure(this.options.bulletList)), this.options.listItem !== !1 && n.push(C_.configure(this.options.listItem)), this.options.listKeymap !== !1 && n.push($k.configure(this.options.listKeymap)), this.options.orderedList !== !1 && n.push(L_.configure(this.options.orderedList)), this.options.taskItem !== !1 && n.push(Hk.configure(this.options.taskItem)), this.options.taskList !== !1 && n.push(Fk.configure(this.options.taskList)), n;
  }
});
var Vk = Ie.create({
  name: "heading",
  addOptions() {
    return {
      levels: [1, 2, 3, 4, 5, 6],
      HTMLAttributes: {}
    };
  },
  content: "inline*",
  group: "block",
  defining: !0,
  addAttributes() {
    return {
      level: {
        default: 1,
        rendered: !1
      }
    };
  },
  parseHTML() {
    return this.options.levels.map((n) => ({
      tag: `h${n}`,
      attrs: { level: n }
    }));
  },
  renderHTML({ node: n, HTMLAttributes: e }) {
    return [`h${this.options.levels.includes(n.attrs.level) ? n.attrs.level : this.options.levels[0]}`, Ce(this.options.HTMLAttributes, e), 0];
  },
  addCommands() {
    return {
      setHeading: (n) => ({ commands: e }) => this.options.levels.includes(n.level) ? e.setNode(this.name, n) : !1,
      toggleHeading: (n) => ({ commands: e }) => this.options.levels.includes(n.level) ? e.toggleNode(this.name, "paragraph", n) : !1
    };
  },
  addKeyboardShortcuts() {
    return this.options.levels.reduce(
      (n, e) => ({
        ...n,
        [`Mod-Alt-${e}`]: () => this.editor.commands.toggleHeading({ level: e })
      }),
      {}
    );
  },
  addInputRules() {
    return this.options.levels.map((n) => m_({
      find: new RegExp(`^(#{${Math.min(...this.options.levels)},${n}})\\s$`),
      type: this.type,
      getAttributes: {
        level: n
      }
    }));
  }
}), jk = Ie.create({
  name: "horizontalRule",
  addOptions() {
    return {
      HTMLAttributes: {}
    };
  },
  group: "block",
  parseHTML() {
    return [{ tag: "hr" }];
  },
  renderHTML({ HTMLAttributes: n }) {
    return ["hr", Ce(this.options.HTMLAttributes, n)];
  },
  addCommands() {
    return {
      setHorizontalRule: () => ({ chain: n, state: e }) => {
        if (!g_(e, e.schema.nodes[this.name]))
          return !1;
        const { selection: t } = e, { $to: i } = t, r = n();
        return ud(t) ? r.insertContentAt(i.pos, {
          type: this.name
        }) : r.insertContent({ type: this.name }), r.command(({ tr: s, dispatch: o }) => {
          var a;
          if (o) {
            const { $to: l } = s.selection, c = l.end();
            if (l.nodeAfter)
              l.nodeAfter.isTextblock ? s.setSelection(fe.create(s.doc, l.pos + 1)) : l.nodeAfter.isBlock ? s.setSelection(le.create(s.doc, l.pos)) : s.setSelection(fe.create(s.doc, l.pos));
            else {
              const u = (a = l.parent.type.contentMatch.defaultType) == null ? void 0 : a.create();
              u && (s.insert(c, u), s.setSelection(fe.create(s.doc, c + 1)));
            }
            s.scrollIntoView();
          }
          return !0;
        }).run();
      }
    };
  },
  addInputRules() {
    return [
      gd({
        find: /^(?:---|—-|___\s|\*\*\*\s)$/,
        type: this.type
      })
    ];
  }
}), Wk = /(?:^|\s)(~~(?!\s+~~)((?:[^~]+))~~(?!\s+~~))$/, Uk = /(?:^|\s)(~~(?!\s+~~)((?:[^~]+))~~(?!\s+~~))/g, Kk = nn.create({
  name: "strike",
  addOptions() {
    return {
      HTMLAttributes: {}
    };
  },
  parseHTML() {
    return [
      {
        tag: "s"
      },
      {
        tag: "del"
      },
      {
        tag: "strike"
      },
      {
        style: "text-decoration",
        consuming: !1,
        getAttrs: (n) => n.includes("line-through") ? {} : !1
      }
    ];
  },
  renderHTML({ HTMLAttributes: n }) {
    return ["s", Ce(this.options.HTMLAttributes, n), 0];
  },
  addCommands() {
    return {
      setStrike: () => ({ commands: n }) => n.setMark(this.name),
      toggleStrike: () => ({ commands: n }) => n.toggleMark(this.name),
      unsetStrike: () => ({ commands: n }) => n.unsetMark(this.name)
    };
  },
  addKeyboardShortcuts() {
    return {
      "Mod-Shift-s": () => this.editor.commands.toggleStrike()
    };
  },
  addInputRules() {
    return [
      jr({
        find: Wk,
        type: this.type
      })
    ];
  },
  addPasteRules() {
    return [
      Xi({
        find: Uk,
        type: this.type
      })
    ];
  }
});
function qk(n = {}) {
  return new Je({
    view(e) {
      return new Gk(e, n);
    }
  });
}
class Gk {
  constructor(e, t) {
    var i;
    this.editorView = e, this.cursorPos = null, this.element = null, this.timeout = -1, this.width = (i = t.width) !== null && i !== void 0 ? i : 1, this.color = t.color === !1 ? void 0 : t.color || "black", this.class = t.class, this.handlers = ["dragover", "dragend", "drop", "dragleave"].map((r) => {
      let s = (o) => {
        this[r](o);
      };
      return e.dom.addEventListener(r, s), { name: r, handler: s };
    });
  }
  destroy() {
    this.handlers.forEach(({ name: e, handler: t }) => this.editorView.dom.removeEventListener(e, t));
  }
  update(e, t) {
    this.cursorPos != null && t.doc != e.state.doc && (this.cursorPos > e.state.doc.content.size ? this.setCursor(null) : this.updateOverlay());
  }
  setCursor(e) {
    e != this.cursorPos && (this.cursorPos = e, e == null ? (this.element.parentNode.removeChild(this.element), this.element = null) : this.updateOverlay());
  }
  updateOverlay() {
    let e = this.editorView.state.doc.resolve(this.cursorPos), t = !e.parent.inlineContent, i;
    if (t) {
      let a = e.nodeBefore, l = e.nodeAfter;
      if (a || l) {
        let c = this.editorView.nodeDOM(this.cursorPos - (a ? a.nodeSize : 0));
        if (c) {
          let u = c.getBoundingClientRect(), d = a ? u.bottom : u.top;
          a && l && (d = (d + this.editorView.nodeDOM(this.cursorPos).getBoundingClientRect().top) / 2), i = { left: u.left, right: u.right, top: d - this.width / 2, bottom: d + this.width / 2 };
        }
      }
    }
    if (!i) {
      let a = this.editorView.coordsAtPos(this.cursorPos);
      i = { left: a.left - this.width / 2, right: a.left + this.width / 2, top: a.top, bottom: a.bottom };
    }
    let r = this.editorView.dom.offsetParent;
    this.element || (this.element = r.appendChild(document.createElement("div")), this.class && (this.element.className = this.class), this.element.style.cssText = "position: absolute; z-index: 50; pointer-events: none;", this.color && (this.element.style.backgroundColor = this.color)), this.element.classList.toggle("prosemirror-dropcursor-block", t), this.element.classList.toggle("prosemirror-dropcursor-inline", !t);
    let s, o;
    if (!r || r == document.body && getComputedStyle(r).position == "static")
      s = -pageXOffset, o = -pageYOffset;
    else {
      let a = r.getBoundingClientRect();
      s = a.left - r.scrollLeft, o = a.top - r.scrollTop;
    }
    this.element.style.left = i.left - s + "px", this.element.style.top = i.top - o + "px", this.element.style.width = i.right - i.left + "px", this.element.style.height = i.bottom - i.top + "px";
  }
  scheduleRemoval(e) {
    clearTimeout(this.timeout), this.timeout = setTimeout(() => this.setCursor(null), e);
  }
  dragover(e) {
    if (!this.editorView.editable)
      return;
    let t = this.editorView.posAtCoords({ left: e.clientX, top: e.clientY }), i = t && t.inside >= 0 && this.editorView.state.doc.nodeAt(t.inside), r = i && i.type.spec.disableDropCursor, s = typeof r == "function" ? r(this.editorView, t, e) : r;
    if (t && !s) {
      let o = t.pos;
      if (this.editorView.dragging && this.editorView.dragging.slice) {
        let a = Nm(this.editorView.state.doc, o, this.editorView.dragging.slice);
        a != null && (o = a);
      }
      this.setCursor(o), this.scheduleRemoval(5e3);
    }
  }
  dragend() {
    this.scheduleRemoval(20);
  }
  drop() {
    this.scheduleRemoval(20);
  }
  dragleave(e) {
    (e.target == this.editorView.dom || !this.editorView.dom.contains(e.relatedTarget)) && this.setCursor(null);
  }
}
class Ze extends pe {
  /**
  Create a gap cursor.
  */
  constructor(e) {
    super(e, e);
  }
  map(e, t) {
    let i = e.resolve(t.map(this.head));
    return Ze.valid(i) ? new Ze(i) : pe.near(i);
  }
  content() {
    return X.empty;
  }
  eq(e) {
    return e instanceof Ze && e.head == this.head;
  }
  toJSON() {
    return { type: "gapcursor", pos: this.head };
  }
  /**
  @internal
  */
  static fromJSON(e, t) {
    if (typeof t.pos != "number")
      throw new RangeError("Invalid input for GapCursor.fromJSON");
    return new Ze(e.resolve(t.pos));
  }
  /**
  @internal
  */
  getBookmark() {
    return new kd(this.anchor);
  }
  /**
  @internal
  */
  static valid(e) {
    let t = e.parent;
    if (t.isTextblock || !Jk(e) || !Xk(e))
      return !1;
    let i = t.type.spec.allowGapCursor;
    if (i != null)
      return i;
    let r = t.contentMatchAt(e.index()).defaultType;
    return r && r.isTextblock;
  }
  /**
  @internal
  */
  static findGapCursorFrom(e, t, i = !1) {
    e: for (; ; ) {
      if (!i && Ze.valid(e))
        return e;
      let r = e.pos, s = null;
      for (let o = e.depth; ; o--) {
        let a = e.node(o);
        if (t > 0 ? e.indexAfter(o) < a.childCount : e.index(o) > 0) {
          s = a.child(t > 0 ? e.indexAfter(o) : e.index(o) - 1);
          break;
        } else if (o == 0)
          return null;
        r += t;
        let l = e.doc.resolve(r);
        if (Ze.valid(l))
          return l;
      }
      for (; ; ) {
        let o = t > 0 ? s.firstChild : s.lastChild;
        if (!o) {
          if (s.isAtom && !s.isText && !le.isSelectable(s)) {
            e = e.doc.resolve(r + s.nodeSize * t), i = !1;
            continue e;
          }
          break;
        }
        s = o, r += t;
        let a = e.doc.resolve(r);
        if (Ze.valid(a))
          return a;
      }
      return null;
    }
  }
}
Ze.prototype.visible = !1;
Ze.findFrom = Ze.findGapCursorFrom;
pe.jsonID("gapcursor", Ze);
class kd {
  constructor(e) {
    this.pos = e;
  }
  map(e) {
    return new kd(e.map(this.pos));
  }
  resolve(e) {
    let t = e.resolve(this.pos);
    return Ze.valid(t) ? new Ze(t) : pe.near(t);
  }
}
function Jk(n) {
  for (let e = n.depth; e >= 0; e--) {
    let t = n.index(e), i = n.node(e);
    if (t == 0) {
      if (i.type.spec.isolating)
        return !0;
      continue;
    }
    for (let r = i.child(t - 1); ; r = r.lastChild) {
      if (r.childCount == 0 && !r.inlineContent || r.isAtom || r.type.spec.isolating)
        return !0;
      if (r.inlineContent)
        return !1;
    }
  }
  return !0;
}
function Xk(n) {
  for (let e = n.depth; e >= 0; e--) {
    let t = n.indexAfter(e), i = n.node(e);
    if (t == i.childCount) {
      if (i.type.spec.isolating)
        return !0;
      continue;
    }
    for (let r = i.child(t); ; r = r.firstChild) {
      if (r.childCount == 0 && !r.inlineContent || r.isAtom || r.type.spec.isolating)
        return !0;
      if (r.inlineContent)
        return !1;
    }
  }
  return !0;
}
function Yk() {
  return new Je({
    props: {
      decorations: tS,
      createSelectionBetween(n, e, t) {
        return e.pos == t.pos && Ze.valid(t) ? new Ze(t) : null;
      },
      handleClick: Qk,
      handleKeyDown: Zk,
      handleDOMEvents: { beforeinput: eS }
    }
  });
}
const Zk = Gu({
  ArrowLeft: Lo("horiz", -1),
  ArrowRight: Lo("horiz", 1),
  ArrowUp: Lo("vert", -1),
  ArrowDown: Lo("vert", 1)
});
function Lo(n, e) {
  const t = n == "vert" ? e > 0 ? "down" : "up" : e > 0 ? "right" : "left";
  return function(i, r, s) {
    let o = i.selection, a = e > 0 ? o.$to : o.$from, l = o.empty;
    if (o instanceof fe) {
      if (!s.endOfTextblock(t) || a.depth == 0)
        return !1;
      l = !1, a = i.doc.resolve(e > 0 ? a.after() : a.before());
    }
    let c = Ze.findGapCursorFrom(a, e, l);
    return c ? (r && r(i.tr.setSelection(new Ze(c))), !0) : !1;
  };
}
function Qk(n, e, t) {
  if (!n || !n.editable)
    return !1;
  let i = n.state.doc.resolve(e);
  if (!Ze.valid(i))
    return !1;
  let r = n.posAtCoords({ left: t.clientX, top: t.clientY });
  return r && r.inside > -1 && le.isSelectable(n.state.doc.nodeAt(r.inside)) ? !1 : (n.dispatch(n.state.tr.setSelection(new Ze(i))), !0);
}
function eS(n, e) {
  if (e.inputType != "insertCompositionText" || !(n.state.selection instanceof Ze))
    return !1;
  let { $from: t } = n.state.selection, i = t.parent.contentMatchAt(t.index()).findWrapping(n.state.schema.nodes.text);
  if (!i)
    return !1;
  let r = $.empty;
  for (let o = i.length - 1; o >= 0; o--)
    r = $.from(i[o].createAndFill(null, r));
  let s = n.state.tr.replace(t.pos, t.pos, new X(r, 0, 0));
  return s.setSelection(fe.near(s.doc.resolve(t.pos + 1))), n.dispatch(s), !1;
}
function tS(n) {
  if (!(n.selection instanceof Ze))
    return null;
  let e = document.createElement("div");
  return e.className = "ProseMirror-gapcursor", je.create(n.doc, [bt.widget(n.selection.head, e, { key: "gapcursor" })]);
}
var wa = 200, yt = function() {
};
yt.prototype.append = function(e) {
  return e.length ? (e = yt.from(e), !this.length && e || e.length < wa && this.leafAppend(e) || this.length < wa && e.leafPrepend(this) || this.appendInner(e)) : this;
};
yt.prototype.prepend = function(e) {
  return e.length ? yt.from(e).append(this) : this;
};
yt.prototype.appendInner = function(e) {
  return new nS(this, e);
};
yt.prototype.slice = function(e, t) {
  return e === void 0 && (e = 0), t === void 0 && (t = this.length), e >= t ? yt.empty : this.sliceInner(Math.max(0, e), Math.min(this.length, t));
};
yt.prototype.get = function(e) {
  if (!(e < 0 || e >= this.length))
    return this.getInner(e);
};
yt.prototype.forEach = function(e, t, i) {
  t === void 0 && (t = 0), i === void 0 && (i = this.length), t <= i ? this.forEachInner(e, t, i, 0) : this.forEachInvertedInner(e, t, i, 0);
};
yt.prototype.map = function(e, t, i) {
  t === void 0 && (t = 0), i === void 0 && (i = this.length);
  var r = [];
  return this.forEach(function(s, o) {
    return r.push(e(s, o));
  }, t, i), r;
};
yt.from = function(e) {
  return e instanceof yt ? e : e && e.length ? new R_(e) : yt.empty;
};
var R_ = /* @__PURE__ */ function(n) {
  function e(i) {
    n.call(this), this.values = i;
  }
  n && (e.__proto__ = n), e.prototype = Object.create(n && n.prototype), e.prototype.constructor = e;
  var t = { length: { configurable: !0 }, depth: { configurable: !0 } };
  return e.prototype.flatten = function() {
    return this.values;
  }, e.prototype.sliceInner = function(r, s) {
    return r == 0 && s == this.length ? this : new e(this.values.slice(r, s));
  }, e.prototype.getInner = function(r) {
    return this.values[r];
  }, e.prototype.forEachInner = function(r, s, o, a) {
    for (var l = s; l < o; l++)
      if (r(this.values[l], a + l) === !1)
        return !1;
  }, e.prototype.forEachInvertedInner = function(r, s, o, a) {
    for (var l = s - 1; l >= o; l--)
      if (r(this.values[l], a + l) === !1)
        return !1;
  }, e.prototype.leafAppend = function(r) {
    if (this.length + r.length <= wa)
      return new e(this.values.concat(r.flatten()));
  }, e.prototype.leafPrepend = function(r) {
    if (this.length + r.length <= wa)
      return new e(r.flatten().concat(this.values));
  }, t.length.get = function() {
    return this.values.length;
  }, t.depth.get = function() {
    return 0;
  }, Object.defineProperties(e.prototype, t), e;
}(yt);
yt.empty = new R_([]);
var nS = /* @__PURE__ */ function(n) {
  function e(t, i) {
    n.call(this), this.left = t, this.right = i, this.length = t.length + i.length, this.depth = Math.max(t.depth, i.depth) + 1;
  }
  return n && (e.__proto__ = n), e.prototype = Object.create(n && n.prototype), e.prototype.constructor = e, e.prototype.flatten = function() {
    return this.left.flatten().concat(this.right.flatten());
  }, e.prototype.getInner = function(i) {
    return i < this.left.length ? this.left.get(i) : this.right.get(i - this.left.length);
  }, e.prototype.forEachInner = function(i, r, s, o) {
    var a = this.left.length;
    if (r < a && this.left.forEachInner(i, r, Math.min(s, a), o) === !1 || s > a && this.right.forEachInner(i, Math.max(r - a, 0), Math.min(this.length, s) - a, o + a) === !1)
      return !1;
  }, e.prototype.forEachInvertedInner = function(i, r, s, o) {
    var a = this.left.length;
    if (r > a && this.right.forEachInvertedInner(i, r - a, Math.max(s, a) - a, o + a) === !1 || s < a && this.left.forEachInvertedInner(i, Math.min(r, a), s, o) === !1)
      return !1;
  }, e.prototype.sliceInner = function(i, r) {
    if (i == 0 && r == this.length)
      return this;
    var s = this.left.length;
    return r <= s ? this.left.slice(i, r) : i >= s ? this.right.slice(i - s, r - s) : this.left.slice(i, s).append(this.right.slice(0, r - s));
  }, e.prototype.leafAppend = function(i) {
    var r = this.right.leafAppend(i);
    if (r)
      return new e(this.left, r);
  }, e.prototype.leafPrepend = function(i) {
    var r = this.left.leafPrepend(i);
    if (r)
      return new e(r, this.right);
  }, e.prototype.appendInner = function(i) {
    return this.left.depth >= Math.max(this.right.depth, i.depth) + 1 ? new e(this.left, new e(this.right, i)) : new e(this, i);
  }, e;
}(yt);
const iS = 500;
class wn {
  constructor(e, t) {
    this.items = e, this.eventCount = t;
  }
  // Pop the latest event off the branch's history and apply it
  // to a document transform.
  popEvent(e, t) {
    if (this.eventCount == 0)
      return null;
    let i = this.items.length;
    for (; ; i--)
      if (this.items.get(i - 1).selection) {
        --i;
        break;
      }
    let r, s;
    t && (r = this.remapping(i, this.items.length), s = r.maps.length);
    let o = e.tr, a, l, c = [], u = [];
    return this.items.forEach((d, f) => {
      if (!d.step) {
        r || (r = this.remapping(i, f + 1), s = r.maps.length), s--, u.push(d);
        return;
      }
      if (r) {
        u.push(new In(d.map));
        let h = d.step.map(r.slice(s)), p;
        h && o.maybeStep(h).doc && (p = o.mapping.maps[o.mapping.maps.length - 1], c.push(new In(p, void 0, void 0, c.length + u.length))), s--, p && r.appendMap(p, s);
      } else
        o.maybeStep(d.step);
      if (d.selection)
        return a = r ? d.selection.map(r.slice(s)) : d.selection, l = new wn(this.items.slice(0, i).append(u.reverse().concat(c)), this.eventCount - 1), !1;
    }, this.items.length, 0), { remaining: l, transform: o, selection: a };
  }
  // Create a new branch with the given transform added.
  addTransform(e, t, i, r) {
    let s = [], o = this.eventCount, a = this.items, l = !r && a.length ? a.get(a.length - 1) : null;
    for (let u = 0; u < e.steps.length; u++) {
      let d = e.steps[u].invert(e.docs[u]), f = new In(e.mapping.maps[u], d, t), h;
      (h = l && l.merge(f)) && (f = h, u ? s.pop() : a = a.slice(0, a.length - 1)), s.push(f), t && (o++, t = void 0), r || (l = f);
    }
    let c = o - i.depth;
    return c > sS && (a = rS(a, c), o -= c), new wn(a.append(s), o);
  }
  remapping(e, t) {
    let i = new yr();
    return this.items.forEach((r, s) => {
      let o = r.mirrorOffset != null && s - r.mirrorOffset >= e ? i.maps.length - r.mirrorOffset : void 0;
      i.appendMap(r.map, o);
    }, e, t), i;
  }
  addMaps(e) {
    return this.eventCount == 0 ? this : new wn(this.items.append(e.map((t) => new In(t))), this.eventCount);
  }
  // When the collab module receives remote changes, the history has
  // to know about those, so that it can adjust the steps that were
  // rebased on top of the remote changes, and include the position
  // maps for the remote changes in its array of items.
  rebased(e, t) {
    if (!this.eventCount)
      return this;
    let i = [], r = Math.max(0, this.items.length - t), s = e.mapping, o = e.steps.length, a = this.eventCount;
    this.items.forEach((f) => {
      f.selection && a--;
    }, r);
    let l = t;
    this.items.forEach((f) => {
      let h = s.getMirror(--l);
      if (h == null)
        return;
      o = Math.min(o, h);
      let p = s.maps[h];
      if (f.step) {
        let b = e.steps[h].invert(e.docs[h]), m = f.selection && f.selection.map(s.slice(l + 1, h));
        m && a++, i.push(new In(p, b, m));
      } else
        i.push(new In(p));
    }, r);
    let c = [];
    for (let f = t; f < o; f++)
      c.push(new In(s.maps[f]));
    let u = this.items.slice(0, r).append(c).append(i), d = new wn(u, a);
    return d.emptyItemCount() > iS && (d = d.compress(this.items.length - i.length)), d;
  }
  emptyItemCount() {
    let e = 0;
    return this.items.forEach((t) => {
      t.step || e++;
    }), e;
  }
  // Compressing a branch means rewriting it to push the air (map-only
  // items) out. During collaboration, these naturally accumulate
  // because each remote change adds one. The `upto` argument is used
  // to ensure that only the items below a given level are compressed,
  // because `rebased` relies on a clean, untouched set of items in
  // order to associate old items with rebased steps.
  compress(e = this.items.length) {
    let t = this.remapping(0, e), i = t.maps.length, r = [], s = 0;
    return this.items.forEach((o, a) => {
      if (a >= e)
        r.push(o), o.selection && s++;
      else if (o.step) {
        let l = o.step.map(t.slice(i)), c = l && l.getMap();
        if (i--, c && t.appendMap(c, i), l) {
          let u = o.selection && o.selection.map(t.slice(i));
          u && s++;
          let d = new In(c.invert(), l, u), f, h = r.length - 1;
          (f = r.length && r[h].merge(d)) ? r[h] = f : r.push(d);
        }
      } else o.map && i--;
    }, this.items.length, 0), new wn(yt.from(r.reverse()), s);
  }
}
wn.empty = new wn(yt.empty, 0);
function rS(n, e) {
  let t;
  return n.forEach((i, r) => {
    if (i.selection && e-- == 0)
      return t = r, !1;
  }), n.slice(t);
}
class In {
  constructor(e, t, i, r) {
    this.map = e, this.step = t, this.selection = i, this.mirrorOffset = r;
  }
  merge(e) {
    if (this.step && e.step && !e.selection) {
      let t = e.step.merge(this.step);
      if (t)
        return new In(t.getMap().invert(), t, this.selection);
    }
  }
}
class ci {
  constructor(e, t, i, r, s) {
    this.done = e, this.undone = t, this.prevRanges = i, this.prevTime = r, this.prevComposition = s;
  }
}
const sS = 20;
function oS(n, e, t, i) {
  let r = t.getMeta(ti), s;
  if (r)
    return r.historyState;
  t.getMeta(cS) && (n = new ci(n.done, n.undone, null, 0, -1));
  let o = t.getMeta("appendedTransaction");
  if (t.steps.length == 0)
    return n;
  if (o && o.getMeta(ti))
    return o.getMeta(ti).redo ? new ci(n.done.addTransform(t, void 0, i, Jo(e)), n.undone, qh(t.mapping.maps), n.prevTime, n.prevComposition) : new ci(n.done, n.undone.addTransform(t, void 0, i, Jo(e)), null, n.prevTime, n.prevComposition);
  if (t.getMeta("addToHistory") !== !1 && !(o && o.getMeta("addToHistory") === !1)) {
    let a = t.getMeta("composition"), l = n.prevTime == 0 || !o && n.prevComposition != a && (n.prevTime < (t.time || 0) - i.newGroupDelay || !aS(t, n.prevRanges)), c = o ? hc(n.prevRanges, t.mapping) : qh(t.mapping.maps);
    return new ci(n.done.addTransform(t, l ? e.selection.getBookmark() : void 0, i, Jo(e)), wn.empty, c, t.time, a ?? n.prevComposition);
  } else return (s = t.getMeta("rebased")) ? new ci(n.done.rebased(t, s), n.undone.rebased(t, s), hc(n.prevRanges, t.mapping), n.prevTime, n.prevComposition) : new ci(n.done.addMaps(t.mapping.maps), n.undone.addMaps(t.mapping.maps), hc(n.prevRanges, t.mapping), n.prevTime, n.prevComposition);
}
function aS(n, e) {
  if (!e)
    return !1;
  if (!n.docChanged)
    return !0;
  let t = !1;
  return n.mapping.maps[0].forEach((i, r) => {
    for (let s = 0; s < e.length; s += 2)
      i <= e[s + 1] && r >= e[s] && (t = !0);
  }), t;
}
function qh(n) {
  let e = [];
  for (let t = n.length - 1; t >= 0 && e.length == 0; t--)
    n[t].forEach((i, r, s, o) => e.push(s, o));
  return e;
}
function hc(n, e) {
  if (!n)
    return null;
  let t = [];
  for (let i = 0; i < n.length; i += 2) {
    let r = e.map(n[i], 1), s = e.map(n[i + 1], -1);
    r <= s && t.push(r, s);
  }
  return t;
}
function lS(n, e, t) {
  let i = Jo(e), r = ti.get(e).spec.config, s = (t ? n.undone : n.done).popEvent(e, i);
  if (!s)
    return null;
  let o = s.selection.resolve(s.transform.doc), a = (t ? n.done : n.undone).addTransform(s.transform, e.selection.getBookmark(), r, i), l = new ci(t ? a : s.remaining, t ? s.remaining : a, null, 0, -1);
  return s.transform.setSelection(o).setMeta(ti, { redo: t, historyState: l });
}
let pc = !1, Gh = null;
function Jo(n) {
  let e = n.plugins;
  if (Gh != e) {
    pc = !1, Gh = e;
    for (let t = 0; t < e.length; t++)
      if (e[t].spec.historyPreserveItems) {
        pc = !0;
        break;
      }
  }
  return pc;
}
const ti = new dt("history"), cS = new dt("closeHistory");
function uS(n = {}) {
  return n = {
    depth: n.depth || 100,
    newGroupDelay: n.newGroupDelay || 500
  }, new Je({
    key: ti,
    state: {
      init() {
        return new ci(wn.empty, wn.empty, null, 0, -1);
      },
      apply(e, t, i) {
        return oS(t, i, e, n);
      }
    },
    config: n,
    props: {
      handleDOMEvents: {
        beforeinput(e, t) {
          let i = t.inputType, r = i == "historyUndo" ? P_ : i == "historyRedo" ? D_ : null;
          return r ? (t.preventDefault(), r(e.state, e.dispatch)) : !1;
        }
      }
    }
  });
}
function I_(n, e) {
  return (t, i) => {
    let r = ti.getState(t);
    if (!r || (n ? r.undone : r.done).eventCount == 0)
      return !1;
    if (i) {
      let s = lS(r, t, n);
      s && i(e ? s.scrollIntoView() : s);
    }
    return !0;
  };
}
const P_ = I_(!1, !0), D_ = I_(!0, !0);
function dS(n) {
  let e = ti.getState(n);
  return e ? e.done.eventCount : 0;
}
function fS(n) {
  let e = ti.getState(n);
  return e ? e.undone.eventCount : 0;
}
ze.create({
  name: "characterCount",
  addOptions() {
    return {
      limit: null,
      mode: "textSize",
      textCounter: (n) => n.length,
      wordCounter: (n) => n.split(" ").filter((e) => e !== "").length
    };
  },
  addStorage() {
    return {
      characters: () => 0,
      words: () => 0
    };
  },
  onBeforeCreate() {
    this.storage.characters = (n) => {
      const e = (n == null ? void 0 : n.node) || this.editor.state.doc;
      if (((n == null ? void 0 : n.mode) || this.options.mode) === "textSize") {
        const i = e.textBetween(0, e.content.size, void 0, " ");
        return this.options.textCounter(i);
      }
      return e.nodeSize;
    }, this.storage.words = (n) => {
      const e = (n == null ? void 0 : n.node) || this.editor.state.doc, t = e.textBetween(0, e.content.size, " ", " ");
      return this.options.wordCounter(t);
    };
  },
  addProseMirrorPlugins() {
    let n = !1;
    return [
      new Je({
        key: new dt("characterCount"),
        appendTransaction: (e, t, i) => {
          if (n)
            return;
          const r = this.options.limit;
          if (r == null || r === 0) {
            n = !0;
            return;
          }
          const s = this.storage.characters({ node: i.doc });
          if (s > r) {
            const o = s - r, a = 0, l = o;
            console.warn(
              `[CharacterCount] Initial content exceeded limit of ${r} characters. Content was automatically trimmed.`
            );
            const c = i.tr.deleteRange(a, l);
            return n = !0, c;
          }
          n = !0;
        },
        filterTransaction: (e, t) => {
          const i = this.options.limit;
          if (!e.docChanged || i === 0 || i === null || i === void 0)
            return !0;
          const r = this.storage.characters({ node: t.doc }), s = this.storage.characters({ node: e.doc });
          if (s <= i || r > i && s > i && s <= r)
            return !0;
          if (r > i && s > i && s > r || !e.getMeta("paste"))
            return !1;
          const a = e.selection.$head.pos, l = s - i, c = a - l, u = a;
          return e.deleteRange(c, u), !(this.storage.characters({ node: e.doc }) > i);
        }
      })
    ];
  }
});
var hS = ze.create({
  name: "dropCursor",
  addOptions() {
    return {
      color: "currentColor",
      width: 1,
      class: void 0
    };
  },
  addProseMirrorPlugins() {
    return [qk(this.options)];
  }
});
ze.create({
  name: "focus",
  addOptions() {
    return {
      className: "has-focus",
      mode: "all"
    };
  },
  addProseMirrorPlugins() {
    return [
      new Je({
        key: new dt("focus"),
        props: {
          decorations: ({ doc: n, selection: e }) => {
            const { isEditable: t, isFocused: i } = this.editor, { anchor: r } = e, s = [];
            if (!t || !i)
              return je.create(n, []);
            let o = 0;
            this.options.mode === "deepest" && n.descendants((l, c) => {
              if (l.isText)
                return;
              if (!(r >= c && r <= c + l.nodeSize - 1))
                return !1;
              o += 1;
            });
            let a = 0;
            return n.descendants((l, c) => {
              if (l.isText || !(r >= c && r <= c + l.nodeSize - 1))
                return !1;
              if (a += 1, this.options.mode === "deepest" && o - a > 0 || this.options.mode === "shallowest" && a > 1)
                return this.options.mode === "deepest";
              s.push(
                bt.node(c, c + l.nodeSize, {
                  class: this.options.className
                })
              );
            }), je.create(n, s);
          }
        }
      })
    ];
  }
});
var pS = ze.create({
  name: "gapCursor",
  addProseMirrorPlugins() {
    return [Yk()];
  },
  extendNodeSchema(n) {
    var e;
    const t = {
      name: n.name,
      options: n.options,
      storage: n.storage
    };
    return {
      allowGapCursor: (e = Me(ae(n, "allowGapCursor", t))) != null ? e : null
    };
  }
});
ze.create({
  name: "placeholder",
  addOptions() {
    return {
      emptyEditorClass: "is-editor-empty",
      emptyNodeClass: "is-empty",
      placeholder: "Write something …",
      showOnlyWhenEditable: !0,
      showOnlyCurrent: !0,
      includeChildren: !1
    };
  },
  addProseMirrorPlugins() {
    return [
      new Je({
        key: new dt("placeholder"),
        props: {
          decorations: ({ doc: n, selection: e }) => {
            const t = this.editor.isEditable || !this.options.showOnlyWhenEditable, { anchor: i } = e, r = [];
            if (!t)
              return null;
            const s = this.editor.isEmpty;
            return n.descendants((o, a) => {
              const l = i >= a && i <= a + o.nodeSize, c = !o.isLeaf && lo(o);
              if ((l || !this.options.showOnlyCurrent) && c) {
                const u = [this.options.emptyNodeClass];
                s && u.push(this.options.emptyEditorClass);
                const d = bt.node(a, a + o.nodeSize, {
                  class: u.join(" "),
                  "data-placeholder": typeof this.options.placeholder == "function" ? this.options.placeholder({
                    editor: this.editor,
                    node: o,
                    pos: a,
                    hasAnchor: l
                  }) : this.options.placeholder
                });
                r.push(d);
              }
              return this.options.includeChildren;
            }), je.create(n, r);
          }
        }
      })
    ];
  }
});
ze.create({
  name: "selection",
  addOptions() {
    return {
      className: "selection"
    };
  },
  addProseMirrorPlugins() {
    const { editor: n, options: e } = this;
    return [
      new Je({
        key: new dt("selection"),
        props: {
          decorations(t) {
            return t.selection.empty || n.isFocused || !n.isEditable || ud(t.selection) || n.view.dragging ? null : je.create(t.doc, [
              bt.inline(t.selection.from, t.selection.to, {
                class: e.className
              })
            ]);
          }
        }
      })
    ];
  }
});
function Jh({ types: n, node: e }) {
  return e && Array.isArray(n) && n.includes(e.type) || (e == null ? void 0 : e.type) === n;
}
ze.create({
  name: "trailingNode",
  addOptions() {
    return {
      node: "paragraph",
      notAfter: []
    };
  },
  addProseMirrorPlugins() {
    const n = new dt(this.name), e = Object.entries(this.editor.schema.nodes).map(([, t]) => t).filter((t) => (this.options.notAfter || []).concat(this.options.node).includes(t.name));
    return [
      new Je({
        key: n,
        appendTransaction: (t, i, r) => {
          const { doc: s, tr: o, schema: a } = r, l = n.getState(r), c = s.content.size, u = a.nodes[this.options.node];
          if (l)
            return o.insert(c, u.create());
        },
        state: {
          init: (t, i) => {
            const r = i.tr.doc.lastChild;
            return !Jh({ node: r, types: e });
          },
          apply: (t, i) => {
            if (!t.docChanged)
              return i;
            const r = t.doc.lastChild;
            return !Jh({ node: r, types: e });
          }
        }
      })
    ];
  }
});
var mS = ze.create({
  name: "undoRedo",
  addOptions() {
    return {
      depth: 100,
      newGroupDelay: 500
    };
  },
  addCommands() {
    return {
      undo: () => ({ state: n, dispatch: e }) => P_(n, e),
      redo: () => ({ state: n, dispatch: e }) => D_(n, e)
    };
  },
  addProseMirrorPlugins() {
    return [uS(this.options)];
  },
  addKeyboardShortcuts() {
    return {
      "Mod-z": () => this.editor.commands.undo(),
      "Shift-Mod-z": () => this.editor.commands.redo(),
      "Mod-y": () => this.editor.commands.redo(),
      // Russian keyboard layouts
      "Mod-я": () => this.editor.commands.undo(),
      "Shift-Mod-я": () => this.editor.commands.redo()
    };
  }
}), gS = ze.create({
  name: "textAlign",
  addOptions() {
    return {
      types: [],
      alignments: ["left", "center", "right", "justify"],
      defaultAlignment: null
    };
  },
  addGlobalAttributes() {
    return [
      {
        types: this.options.types,
        attributes: {
          textAlign: {
            default: this.options.defaultAlignment,
            parseHTML: (n) => {
              const e = n.style.textAlign;
              return this.options.alignments.includes(e) ? e : this.options.defaultAlignment;
            },
            renderHTML: (n) => n.textAlign ? { style: `text-align: ${n.textAlign}` } : {}
          }
        }
      }
    ];
  },
  addCommands() {
    return {
      setTextAlign: (n) => ({ commands: e }) => this.options.alignments.includes(n) ? this.options.types.map((t) => e.updateAttributes(t, { textAlign: n })).every((t) => t) : !1,
      unsetTextAlign: () => ({ commands: n }) => this.options.types.map((e) => n.resetAttributes(e, "textAlign")).every((e) => e),
      toggleTextAlign: (n) => ({ editor: e, commands: t }) => this.options.alignments.includes(n) ? e.isActive({ textAlign: n }) ? t.unsetTextAlign() : t.setTextAlign(n) : !1
    };
  },
  addKeyboardShortcuts() {
    return {
      "Mod-Shift-l": () => this.editor.commands.setTextAlign("left"),
      "Mod-Shift-e": () => this.editor.commands.setTextAlign("center"),
      "Mod-Shift-r": () => this.editor.commands.setTextAlign("right"),
      "Mod-Shift-j": () => this.editor.commands.setTextAlign("justify")
    };
  }
}), _S = (n) => {
  if (!n.children.length)
    return;
  const e = n.querySelectorAll("span");
  e && e.forEach((t) => {
    var i, r;
    const s = t.getAttribute("style"), o = (r = (i = t.parentElement) == null ? void 0 : i.closest("span")) == null ? void 0 : r.getAttribute("style");
    t.setAttribute("style", `${o};${s}`);
  });
}, bS = nn.create({
  name: "textStyle",
  priority: 101,
  addOptions() {
    return {
      HTMLAttributes: {},
      mergeNestedSpanStyles: !0
    };
  },
  parseHTML() {
    return [
      {
        tag: "span",
        consuming: !1,
        getAttrs: (n) => n.hasAttribute("style") ? (this.options.mergeNestedSpanStyles && _S(n), {}) : !1
      }
    ];
  },
  renderHTML({ HTMLAttributes: n }) {
    return ["span", Ce(this.options.HTMLAttributes, n), 0];
  },
  addCommands() {
    return {
      toggleTextStyle: (n) => ({ commands: e }) => e.toggleMark(this.name, n),
      removeEmptyTextStyle: () => ({ tr: n }) => {
        const { selection: e } = n;
        return n.doc.nodesBetween(e.from, e.to, (t, i) => {
          if (t.isTextblock)
            return !0;
          t.marks.filter((r) => r.type === this.type).some((r) => Object.values(r.attrs).some((s) => !!s)) || n.removeMark(i, i + t.nodeSize, this.type);
        }), !0;
      }
    };
  }
}), vS = (n) => {
  if (!n.children.length)
    return;
  const e = n.querySelectorAll("span");
  e && e.forEach((t) => {
    var i, r;
    const s = t.getAttribute("style"), o = (r = (i = t.parentElement) == null ? void 0 : i.closest("span")) == null ? void 0 : r.getAttribute("style");
    t.setAttribute("style", `${o};${s}`);
  });
};
nn.create({
  name: "textStyle",
  priority: 101,
  addOptions() {
    return {
      HTMLAttributes: {},
      mergeNestedSpanStyles: !0
    };
  },
  parseHTML() {
    return [
      {
        tag: "span",
        consuming: !1,
        getAttrs: (n) => n.hasAttribute("style") ? (this.options.mergeNestedSpanStyles && vS(n), {}) : !1
      }
    ];
  },
  renderHTML({ HTMLAttributes: n }) {
    return ["span", Ce(this.options.HTMLAttributes, n), 0];
  },
  addCommands() {
    return {
      toggleTextStyle: (n) => ({ commands: e }) => e.toggleMark(this.name, n),
      removeEmptyTextStyle: () => ({ tr: n }) => {
        const { selection: e } = n;
        return n.doc.nodesBetween(e.from, e.to, (t, i) => {
          if (t.isTextblock)
            return !0;
          t.marks.filter((r) => r.type === this.type).some((r) => Object.values(r.attrs).some((s) => !!s)) || n.removeMark(i, i + t.nodeSize, this.type);
        }), !0;
      }
    };
  }
});
var yS = ze.create({
  name: "color",
  addOptions() {
    return {
      types: ["textStyle"]
    };
  },
  addGlobalAttributes() {
    return [
      {
        types: this.options.types,
        attributes: {
          color: {
            default: null,
            parseHTML: (n) => {
              var e;
              return (e = n.style.color) == null ? void 0 : e.replace(/['"]+/g, "");
            },
            renderHTML: (n) => n.color ? {
              style: `color: ${n.color}`
            } : {}
          }
        }
      }
    ];
  },
  addCommands() {
    return {
      setColor: (n) => ({ chain: e }) => e().setMark("textStyle", { color: n }).run(),
      unsetColor: () => ({ chain: n }) => n().setMark("textStyle", { color: null }).removeEmptyTextStyle().run()
    };
  }
}), xS = (n) => {
  if (!n.children.length)
    return;
  const e = n.querySelectorAll("span");
  e && e.forEach((t) => {
    var i, r;
    const s = t.getAttribute("style"), o = (r = (i = t.parentElement) == null ? void 0 : i.closest("span")) == null ? void 0 : r.getAttribute("style");
    t.setAttribute("style", `${o};${s}`);
  });
};
nn.create({
  name: "textStyle",
  priority: 101,
  addOptions() {
    return {
      HTMLAttributes: {},
      mergeNestedSpanStyles: !0
    };
  },
  parseHTML() {
    return [
      {
        tag: "span",
        consuming: !1,
        getAttrs: (n) => n.hasAttribute("style") ? (this.options.mergeNestedSpanStyles && xS(n), {}) : !1
      }
    ];
  },
  renderHTML({ HTMLAttributes: n }) {
    return ["span", Ce(this.options.HTMLAttributes, n), 0];
  },
  addCommands() {
    return {
      toggleTextStyle: (n) => ({ commands: e }) => e.toggleMark(this.name, n),
      removeEmptyTextStyle: () => ({ tr: n }) => {
        const { selection: e } = n;
        return n.doc.nodesBetween(e.from, e.to, (t, i) => {
          if (t.isTextblock)
            return !0;
          t.marks.filter((r) => r.type === this.type).some((r) => Object.values(r.attrs).some((s) => !!s)) || n.removeMark(i, i + t.nodeSize, this.type);
        }), !0;
      }
    };
  }
});
var wS = ze.create({
  name: "backgroundColor",
  addOptions() {
    return {
      types: ["textStyle"]
    };
  },
  addGlobalAttributes() {
    return [
      {
        types: this.options.types,
        attributes: {
          backgroundColor: {
            default: null,
            parseHTML: (n) => {
              var e;
              return (e = n.style.backgroundColor) == null ? void 0 : e.replace(/['"]+/g, "");
            },
            renderHTML: (n) => n.backgroundColor ? {
              style: `background-color: ${n.backgroundColor}`
            } : {}
          }
        }
      }
    ];
  },
  addCommands() {
    return {
      setBackgroundColor: (n) => ({ chain: e }) => e().setMark("textStyle", { backgroundColor: n }).run(),
      unsetBackgroundColor: () => ({ chain: n }) => n().setMark("textStyle", { backgroundColor: null }).removeEmptyTextStyle().run()
    };
  }
});
const mc = async (n, e) => {
  for (let t of e)
    if (t) {
      if (/^blob:/.test(t))
        try {
          t = await (await fetch(t)).text();
        } catch (i) {
          console.error(i);
          continue;
        }
      else !/^https?:/.test(t) && /\.css$/i.test(t) && (t = new URL(t, window.location.href).href);
      if (/^https?:/.test(t)) {
        const i = document.createElement("link");
        i.rel = "stylesheet", i.href = t, n.appendChild(i);
      } else {
        const i = document.createElement("style");
        i.textContent = t, n.appendChild(i);
      }
    }
}, kS = (n) => {
  if ("srcdoc" in n)
    return !0;
  const e = n.src;
  if (!e)
    return !0;
  const t = document.createElement("a");
  return t.href = e, t.hostname === window.location.hostname && t.protocol === window.location.protocol && t.port === window.location.port;
}, SS = Ie.create({
  name: "iframe",
  group: "inline",
  content: "text*",
  inline: !0,
  atom: !0,
  parseHTML() {
    return [
      {
        tag: "iframe"
      }
    ];
  },
  addNodeView() {
    return ({ node: n }) => {
      let { MTRichTextEditorHTMLAttributes: e } = n.attrs;
      if (kS(e)) {
        const i = e.sandbox ? e.sandbox.split(/\s+/).filter((r) => !/allow-same-origin/i.test(r)).join(" ") : "allow-scripts";
        e = {
          ...e,
          sandbox: i
        };
      }
      const t = document.createElement("iframe");
      for (const i in e)
        t.setAttribute(i, e[i]);
      return {
        dom: t
      };
    };
  },
  renderHTML({ HTMLAttributes: n }) {
    return ["iframe", n];
  }
});
var ou, au;
if (typeof WeakMap < "u") {
  let n = /* @__PURE__ */ new WeakMap();
  ou = (e) => n.get(e), au = (e, t) => (n.set(e, t), t);
} else {
  const n = [];
  let t = 0;
  ou = (i) => {
    for (let r = 0; r < n.length; r += 2)
      if (n[r] == i) return n[r + 1];
  }, au = (i, r) => (t == 10 && (t = 0), n[t++] = i, n[t++] = r);
}
var Qe = class {
  constructor(n, e, t, i) {
    this.width = n, this.height = e, this.map = t, this.problems = i;
  }
  // Find the dimensions of the cell at the given position.
  findCell(n) {
    for (let e = 0; e < this.map.length; e++) {
      const t = this.map[e];
      if (t != n) continue;
      const i = e % this.width, r = e / this.width | 0;
      let s = i + 1, o = r + 1;
      for (let a = 1; s < this.width && this.map[e + a] == t; a++)
        s++;
      for (let a = 1; o < this.height && this.map[e + this.width * a] == t; a++)
        o++;
      return { left: i, top: r, right: s, bottom: o };
    }
    throw new RangeError(`No cell with offset ${n} found`);
  }
  // Find the left side of the cell at the given position.
  colCount(n) {
    for (let e = 0; e < this.map.length; e++)
      if (this.map[e] == n)
        return e % this.width;
    throw new RangeError(`No cell with offset ${n} found`);
  }
  // Find the next cell in the given direction, starting from the cell
  // at `pos`, if any.
  nextCell(n, e, t) {
    const { left: i, right: r, top: s, bottom: o } = this.findCell(n);
    return e == "horiz" ? (t < 0 ? i == 0 : r == this.width) ? null : this.map[s * this.width + (t < 0 ? i - 1 : r)] : (t < 0 ? s == 0 : o == this.height) ? null : this.map[i + this.width * (t < 0 ? s - 1 : o)];
  }
  // Get the rectangle spanning the two given cells.
  rectBetween(n, e) {
    const {
      left: t,
      right: i,
      top: r,
      bottom: s
    } = this.findCell(n), {
      left: o,
      right: a,
      top: l,
      bottom: c
    } = this.findCell(e);
    return {
      left: Math.min(t, o),
      top: Math.min(r, l),
      right: Math.max(i, a),
      bottom: Math.max(s, c)
    };
  }
  // Return the position of all cells that have the top left corner in
  // the given rectangle.
  cellsInRect(n) {
    const e = [], t = {};
    for (let i = n.top; i < n.bottom; i++)
      for (let r = n.left; r < n.right; r++) {
        const s = i * this.width + r, o = this.map[s];
        t[o] || (t[o] = !0, !(r == n.left && r && this.map[s - 1] == o || i == n.top && i && this.map[s - this.width] == o) && e.push(o));
      }
    return e;
  }
  // Return the position at which the cell at the given row and column
  // starts, or would start, if a cell started there.
  positionAt(n, e, t) {
    for (let i = 0, r = 0; ; i++) {
      const s = r + t.child(i).nodeSize;
      if (i == n) {
        let o = e + n * this.width;
        const a = (n + 1) * this.width;
        for (; o < a && this.map[o] < r; ) o++;
        return o == a ? s - 1 : this.map[o];
      }
      r = s;
    }
  }
  // Find the table map for the given table node.
  static get(n) {
    return ou(n) || au(n, ES(n));
  }
};
function ES(n) {
  if (n.type.spec.tableRole != "table")
    throw new RangeError("Not a table node: " + n.type.name);
  const e = CS(n), t = n.childCount, i = [];
  let r = 0, s = null;
  const o = [];
  for (let c = 0, u = e * t; c < u; c++) i[c] = 0;
  for (let c = 0, u = 0; c < t; c++) {
    const d = n.child(c);
    u++;
    for (let p = 0; ; p++) {
      for (; r < i.length && i[r] != 0; ) r++;
      if (p == d.childCount) break;
      const b = d.child(p), { colspan: m, rowspan: g, colwidth: v } = b.attrs;
      for (let x = 0; x < g; x++) {
        if (x + c >= t) {
          (s || (s = [])).push({
            type: "overlong_rowspan",
            pos: u,
            n: g - x
          });
          break;
        }
        const w = r + x * e;
        for (let E = 0; E < m; E++) {
          i[w + E] == 0 ? i[w + E] = u : (s || (s = [])).push({
            type: "collision",
            row: c,
            pos: u,
            n: m - E
          });
          const k = v && v[E];
          if (k) {
            const S = (w + E) % e * 2, y = o[S];
            y == null || y != k && o[S + 1] == 1 ? (o[S] = k, o[S + 1] = 1) : y == k && o[S + 1]++;
          }
        }
      }
      r += m, u += b.nodeSize;
    }
    const f = (c + 1) * e;
    let h = 0;
    for (; r < f; ) i[r++] == 0 && h++;
    h && (s || (s = [])).push({ type: "missing", row: c, n: h }), u++;
  }
  (e === 0 || t === 0) && (s || (s = [])).push({ type: "zero_sized" });
  const a = new Qe(e, t, i, s);
  let l = !1;
  for (let c = 0; !l && c < o.length; c += 2)
    o[c] != null && o[c + 1] < t && (l = !0);
  return l && TS(a, o, n), a;
}
function CS(n) {
  let e = -1, t = !1;
  for (let i = 0; i < n.childCount; i++) {
    const r = n.child(i);
    let s = 0;
    if (t)
      for (let o = 0; o < i; o++) {
        const a = n.child(o);
        for (let l = 0; l < a.childCount; l++) {
          const c = a.child(l);
          o + c.attrs.rowspan > i && (s += c.attrs.colspan);
        }
      }
    for (let o = 0; o < r.childCount; o++) {
      const a = r.child(o);
      s += a.attrs.colspan, a.attrs.rowspan > 1 && (t = !0);
    }
    e == -1 ? e = s : e != s && (e = Math.max(e, s));
  }
  return e;
}
function TS(n, e, t) {
  n.problems || (n.problems = []);
  const i = {};
  for (let r = 0; r < n.map.length; r++) {
    const s = n.map[r];
    if (i[s]) continue;
    i[s] = !0;
    const o = t.nodeAt(s);
    if (!o)
      throw new RangeError(`No cell with offset ${s} found`);
    let a = null;
    const l = o.attrs;
    for (let c = 0; c < l.colspan; c++) {
      const u = (r + c) % n.width, d = e[u * 2];
      d != null && (!l.colwidth || l.colwidth[c] != d) && ((a || (a = AS(l)))[c] = d);
    }
    a && n.problems.unshift({
      type: "colwidth mismatch",
      pos: s,
      colwidth: a
    });
  }
}
function AS(n) {
  if (n.colwidth) return n.colwidth.slice();
  const e = [];
  for (let t = 0; t < n.colspan; t++) e.push(0);
  return e;
}
function Lt(n) {
  let e = n.cached.tableNodeTypes;
  if (!e) {
    e = n.cached.tableNodeTypes = {};
    for (const t in n.nodes) {
      const i = n.nodes[t], r = i.spec.tableRole;
      r && (e[r] = i);
    }
  }
  return e;
}
var hi = new dt("selectingCells");
function Gr(n) {
  for (let e = n.depth - 1; e > 0; e--)
    if (n.node(e).type.spec.tableRole == "row")
      return n.node(0).resolve(n.before(e + 1));
  return null;
}
function MS(n) {
  for (let e = n.depth; e > 0; e--) {
    const t = n.node(e).type.spec.tableRole;
    if (t === "cell" || t === "header_cell") return n.node(e);
  }
  return null;
}
function Mn(n) {
  const e = n.selection.$head;
  for (let t = e.depth; t > 0; t--)
    if (e.node(t).type.spec.tableRole == "row") return !0;
  return !1;
}
function xl(n) {
  const e = n.selection;
  if ("$anchorCell" in e && e.$anchorCell)
    return e.$anchorCell.pos > e.$headCell.pos ? e.$anchorCell : e.$headCell;
  if ("node" in e && e.node && e.node.type.spec.tableRole == "cell")
    return e.$anchor;
  const t = Gr(e.$head) || OS(e.$head);
  if (t)
    return t;
  throw new RangeError(`No cell found around position ${e.head}`);
}
function OS(n) {
  for (let e = n.nodeAfter, t = n.pos; e; e = e.firstChild, t++) {
    const i = e.type.spec.tableRole;
    if (i == "cell" || i == "header_cell") return n.doc.resolve(t);
  }
  for (let e = n.nodeBefore, t = n.pos; e; e = e.lastChild, t--) {
    const i = e.type.spec.tableRole;
    if (i == "cell" || i == "header_cell")
      return n.doc.resolve(t - e.nodeSize);
  }
}
function lu(n) {
  return n.parent.type.spec.tableRole == "row" && !!n.nodeAfter;
}
function NS(n) {
  return n.node(0).resolve(n.pos + n.nodeAfter.nodeSize);
}
function Sd(n, e) {
  return n.depth == e.depth && n.pos >= e.start(-1) && n.pos <= e.end(-1);
}
function $_(n, e, t) {
  const i = n.node(-1), r = Qe.get(i), s = n.start(-1), o = r.nextCell(n.pos - s, e, t);
  return o == null ? null : n.node(0).resolve(s + o);
}
function Yi(n, e, t = 1) {
  const i = { ...n, colspan: n.colspan - t };
  return i.colwidth && (i.colwidth = i.colwidth.slice(), i.colwidth.splice(e, t), i.colwidth.some((r) => r > 0) || (i.colwidth = null)), i;
}
function z_(n, e, t = 1) {
  const i = { ...n, colspan: n.colspan + t };
  if (i.colwidth) {
    i.colwidth = i.colwidth.slice();
    for (let r = 0; r < t; r++) i.colwidth.splice(e, 0, 0);
  }
  return i;
}
function LS(n, e, t) {
  const i = Lt(e.type.schema).header_cell;
  for (let r = 0; r < n.height; r++)
    if (e.nodeAt(n.map[t + r * n.width]).type != i)
      return !1;
  return !0;
}
var We = class qn extends pe {
  // A table selection is identified by its anchor and head cells. The
  // positions given to this constructor should point _before_ two
  // cells in the same table. They may be the same, to select a single
  // cell.
  constructor(e, t = e) {
    const i = e.node(-1), r = Qe.get(i), s = e.start(-1), o = r.rectBetween(
      e.pos - s,
      t.pos - s
    ), a = e.node(0), l = r.cellsInRect(o).filter((u) => u != t.pos - s);
    l.unshift(t.pos - s);
    const c = l.map((u) => {
      const d = i.nodeAt(u);
      if (!d)
        throw RangeError(`No cell with offset ${u} found`);
      const f = s + u + 1;
      return new Dm(
        a.resolve(f),
        a.resolve(f + d.content.size)
      );
    });
    super(c[0].$from, c[0].$to, c), this.$anchorCell = e, this.$headCell = t;
  }
  map(e, t) {
    const i = e.resolve(t.map(this.$anchorCell.pos)), r = e.resolve(t.map(this.$headCell.pos));
    if (lu(i) && lu(r) && Sd(i, r)) {
      const s = this.$anchorCell.node(-1) != i.node(-1);
      return s && this.isRowSelection() ? qn.rowSelection(i, r) : s && this.isColSelection() ? qn.colSelection(i, r) : new qn(i, r);
    }
    return fe.between(i, r);
  }
  // Returns a rectangular slice of table rows containing the selected
  // cells.
  content() {
    const e = this.$anchorCell.node(-1), t = Qe.get(e), i = this.$anchorCell.start(-1), r = t.rectBetween(
      this.$anchorCell.pos - i,
      this.$headCell.pos - i
    ), s = {}, o = [];
    for (let l = r.top; l < r.bottom; l++) {
      const c = [];
      for (let u = l * t.width + r.left, d = r.left; d < r.right; d++, u++) {
        const f = t.map[u];
        if (s[f]) continue;
        s[f] = !0;
        const h = t.findCell(f);
        let p = e.nodeAt(f);
        if (!p)
          throw RangeError(`No cell with offset ${f} found`);
        const b = r.left - h.left, m = h.right - r.right;
        if (b > 0 || m > 0) {
          let g = p.attrs;
          if (b > 0 && (g = Yi(g, 0, b)), m > 0 && (g = Yi(
            g,
            g.colspan - m,
            m
          )), h.left < r.left) {
            if (p = p.type.createAndFill(g), !p)
              throw RangeError(
                `Could not create cell with attrs ${JSON.stringify(g)}`
              );
          } else
            p = p.type.create(g, p.content);
        }
        if (h.top < r.top || h.bottom > r.bottom) {
          const g = {
            ...p.attrs,
            rowspan: Math.min(h.bottom, r.bottom) - Math.max(h.top, r.top)
          };
          h.top < r.top ? p = p.type.createAndFill(g) : p = p.type.create(g, p.content);
        }
        c.push(p);
      }
      o.push(e.child(l).copy($.from(c)));
    }
    const a = this.isColSelection() && this.isRowSelection() ? e : o;
    return new X($.from(a), 1, 1);
  }
  replace(e, t = X.empty) {
    const i = e.steps.length, r = this.ranges;
    for (let o = 0; o < r.length; o++) {
      const { $from: a, $to: l } = r[o], c = e.mapping.slice(i);
      e.replace(
        c.map(a.pos),
        c.map(l.pos),
        o ? X.empty : t
      );
    }
    const s = pe.findFrom(
      e.doc.resolve(e.mapping.slice(i).map(this.to)),
      -1
    );
    s && e.setSelection(s);
  }
  replaceWith(e, t) {
    this.replace(e, new X($.from(t), 0, 0));
  }
  forEachCell(e) {
    const t = this.$anchorCell.node(-1), i = Qe.get(t), r = this.$anchorCell.start(-1), s = i.cellsInRect(
      i.rectBetween(
        this.$anchorCell.pos - r,
        this.$headCell.pos - r
      )
    );
    for (let o = 0; o < s.length; o++)
      e(t.nodeAt(s[o]), r + s[o]);
  }
  // True if this selection goes all the way from the top to the
  // bottom of the table.
  isColSelection() {
    const e = this.$anchorCell.index(-1), t = this.$headCell.index(-1);
    if (Math.min(e, t) > 0) return !1;
    const i = e + this.$anchorCell.nodeAfter.attrs.rowspan, r = t + this.$headCell.nodeAfter.attrs.rowspan;
    return Math.max(i, r) == this.$headCell.node(-1).childCount;
  }
  // Returns the smallest column selection that covers the given anchor
  // and head cell.
  static colSelection(e, t = e) {
    const i = e.node(-1), r = Qe.get(i), s = e.start(-1), o = r.findCell(e.pos - s), a = r.findCell(t.pos - s), l = e.node(0);
    return o.top <= a.top ? (o.top > 0 && (e = l.resolve(s + r.map[o.left])), a.bottom < r.height && (t = l.resolve(
      s + r.map[r.width * (r.height - 1) + a.right - 1]
    ))) : (a.top > 0 && (t = l.resolve(s + r.map[a.left])), o.bottom < r.height && (e = l.resolve(
      s + r.map[r.width * (r.height - 1) + o.right - 1]
    ))), new qn(e, t);
  }
  // True if this selection goes all the way from the left to the
  // right of the table.
  isRowSelection() {
    const e = this.$anchorCell.node(-1), t = Qe.get(e), i = this.$anchorCell.start(-1), r = t.colCount(this.$anchorCell.pos - i), s = t.colCount(this.$headCell.pos - i);
    if (Math.min(r, s) > 0) return !1;
    const o = r + this.$anchorCell.nodeAfter.attrs.colspan, a = s + this.$headCell.nodeAfter.attrs.colspan;
    return Math.max(o, a) == t.width;
  }
  eq(e) {
    return e instanceof qn && e.$anchorCell.pos == this.$anchorCell.pos && e.$headCell.pos == this.$headCell.pos;
  }
  // Returns the smallest row selection that covers the given anchor
  // and head cell.
  static rowSelection(e, t = e) {
    const i = e.node(-1), r = Qe.get(i), s = e.start(-1), o = r.findCell(e.pos - s), a = r.findCell(t.pos - s), l = e.node(0);
    return o.left <= a.left ? (o.left > 0 && (e = l.resolve(
      s + r.map[o.top * r.width]
    )), a.right < r.width && (t = l.resolve(
      s + r.map[r.width * (a.top + 1) - 1]
    ))) : (a.left > 0 && (t = l.resolve(s + r.map[a.top * r.width])), o.right < r.width && (e = l.resolve(
      s + r.map[r.width * (o.top + 1) - 1]
    ))), new qn(e, t);
  }
  toJSON() {
    return {
      type: "cell",
      anchor: this.$anchorCell.pos,
      head: this.$headCell.pos
    };
  }
  static fromJSON(e, t) {
    return new qn(e.resolve(t.anchor), e.resolve(t.head));
  }
  static create(e, t, i = t) {
    return new qn(e.resolve(t), e.resolve(i));
  }
  getBookmark() {
    return new RS(this.$anchorCell.pos, this.$headCell.pos);
  }
};
We.prototype.visible = !1;
pe.jsonID("cell", We);
var RS = class B_ {
  constructor(e, t) {
    this.anchor = e, this.head = t;
  }
  map(e) {
    return new B_(e.map(this.anchor), e.map(this.head));
  }
  resolve(e) {
    const t = e.resolve(this.anchor), i = e.resolve(this.head);
    return t.parent.type.spec.tableRole == "row" && i.parent.type.spec.tableRole == "row" && t.index() < t.parent.childCount && i.index() < i.parent.childCount && Sd(t, i) ? new We(t, i) : pe.near(i, 1);
  }
};
function IS(n) {
  if (!(n.selection instanceof We)) return null;
  const e = [];
  return n.selection.forEachCell((t, i) => {
    e.push(
      bt.node(i, i + t.nodeSize, { class: "selectedCell" })
    );
  }), je.create(n.doc, e);
}
function PS({ $from: n, $to: e }) {
  if (n.pos == e.pos || n.pos < e.pos - 6) return !1;
  let t = n.pos, i = e.pos, r = n.depth;
  for (; r >= 0 && !(n.after(r + 1) < n.end(r)); r--, t++)
    ;
  for (let s = e.depth; s >= 0 && !(e.before(s + 1) > e.start(s)); s--, i--)
    ;
  return t == i && /row|table/.test(n.node(r).type.spec.tableRole);
}
function DS({ $from: n, $to: e }) {
  let t, i;
  for (let r = n.depth; r > 0; r--) {
    const s = n.node(r);
    if (s.type.spec.tableRole === "cell" || s.type.spec.tableRole === "header_cell") {
      t = s;
      break;
    }
  }
  for (let r = e.depth; r > 0; r--) {
    const s = e.node(r);
    if (s.type.spec.tableRole === "cell" || s.type.spec.tableRole === "header_cell") {
      i = s;
      break;
    }
  }
  return t !== i && e.parentOffset === 0;
}
function $S(n, e, t) {
  const i = (e || n).selection, r = (e || n).doc;
  let s, o;
  if (i instanceof le && (o = i.node.type.spec.tableRole)) {
    if (o == "cell" || o == "header_cell")
      s = We.create(r, i.from);
    else if (o == "row") {
      const a = r.resolve(i.from + 1);
      s = We.rowSelection(a, a);
    } else if (!t) {
      const a = Qe.get(i.node), l = i.from + 1, c = l + a.map[a.width * a.height - 1];
      s = We.create(r, l + 1, c);
    }
  } else i instanceof fe && PS(i) ? s = fe.create(r, i.from) : i instanceof fe && DS(i) && (s = fe.create(r, i.$from.start(), i.$from.end()));
  return s && (e || (e = n.tr)).setSelection(s), e;
}
var zS = new dt("fix-tables");
function H_(n, e, t, i) {
  const r = n.childCount, s = e.childCount;
  e: for (let o = 0, a = 0; o < s; o++) {
    const l = e.child(o);
    for (let c = a, u = Math.min(r, o + 3); c < u; c++)
      if (n.child(c) == l) {
        a = c + 1, t += l.nodeSize;
        continue e;
      }
    i(l, t), a < r && n.child(a).sameMarkup(l) ? H_(n.child(a), l, t + 1, i) : l.nodesBetween(0, l.content.size, i, t + 1), t += l.nodeSize;
  }
}
function F_(n, e) {
  let t;
  const i = (r, s) => {
    r.type.spec.tableRole == "table" && (t = BS(n, r, s, t));
  };
  return e ? e.doc != n.doc && H_(e.doc, n.doc, 0, i) : n.doc.descendants(i), t;
}
function BS(n, e, t, i) {
  const r = Qe.get(e);
  if (!r.problems) return i;
  i || (i = n.tr);
  const s = [];
  for (let l = 0; l < r.height; l++) s.push(0);
  for (let l = 0; l < r.problems.length; l++) {
    const c = r.problems[l];
    if (c.type == "collision") {
      const u = e.nodeAt(c.pos);
      if (!u) continue;
      const d = u.attrs;
      for (let f = 0; f < d.rowspan; f++) s[c.row + f] += c.n;
      i.setNodeMarkup(
        i.mapping.map(t + 1 + c.pos),
        null,
        Yi(d, d.colspan - c.n, c.n)
      );
    } else if (c.type == "missing")
      s[c.row] += c.n;
    else if (c.type == "overlong_rowspan") {
      const u = e.nodeAt(c.pos);
      if (!u) continue;
      i.setNodeMarkup(i.mapping.map(t + 1 + c.pos), null, {
        ...u.attrs,
        rowspan: u.attrs.rowspan - c.n
      });
    } else if (c.type == "colwidth mismatch") {
      const u = e.nodeAt(c.pos);
      if (!u) continue;
      i.setNodeMarkup(i.mapping.map(t + 1 + c.pos), null, {
        ...u.attrs,
        colwidth: c.colwidth
      });
    } else if (c.type == "zero_sized") {
      const u = i.mapping.map(t);
      i.delete(u, u + e.nodeSize);
    }
  }
  let o, a;
  for (let l = 0; l < s.length; l++)
    s[l] && (o == null && (o = l), a = l);
  for (let l = 0, c = t + 1; l < r.height; l++) {
    const u = e.child(l), d = c + u.nodeSize, f = s[l];
    if (f > 0) {
      let h = "cell";
      u.firstChild && (h = u.firstChild.type.spec.tableRole);
      const p = [];
      for (let m = 0; m < f; m++) {
        const g = Lt(n.schema)[h].createAndFill();
        g && p.push(g);
      }
      const b = (l == 0 || o == l - 1) && a == l ? c + 1 : d - 1;
      i.insert(i.mapping.map(b), p);
    }
    c = d;
  }
  return i.setMeta(zS, { fixTables: !0 });
}
function mn(n) {
  const e = n.selection, t = xl(n), i = t.node(-1), r = t.start(-1), s = Qe.get(i);
  return { ...e instanceof We ? s.rectBetween(
    e.$anchorCell.pos - r,
    e.$headCell.pos - r
  ) : s.findCell(t.pos - r), tableStart: r, map: s, table: i };
}
function V_(n, { map: e, tableStart: t, table: i }, r) {
  let s = r > 0 ? -1 : 0;
  LS(e, i, r + s) && (s = r == 0 || r == e.width ? null : 0);
  for (let o = 0; o < e.height; o++) {
    const a = o * e.width + r;
    if (r > 0 && r < e.width && e.map[a - 1] == e.map[a]) {
      const l = e.map[a], c = i.nodeAt(l);
      n.setNodeMarkup(
        n.mapping.map(t + l),
        null,
        z_(c.attrs, r - e.colCount(l))
      ), o += c.attrs.rowspan - 1;
    } else {
      const l = s == null ? Lt(i.type.schema).cell : i.nodeAt(e.map[a + s]).type, c = e.positionAt(o, r, i);
      n.insert(n.mapping.map(t + c), l.createAndFill());
    }
  }
  return n;
}
function HS(n, e) {
  if (!Mn(n)) return !1;
  if (e) {
    const t = mn(n);
    e(V_(n.tr, t, t.left));
  }
  return !0;
}
function FS(n, e) {
  if (!Mn(n)) return !1;
  if (e) {
    const t = mn(n);
    e(V_(n.tr, t, t.right));
  }
  return !0;
}
function VS(n, { map: e, table: t, tableStart: i }, r) {
  const s = n.mapping.maps.length;
  for (let o = 0; o < e.height; ) {
    const a = o * e.width + r, l = e.map[a], c = t.nodeAt(l), u = c.attrs;
    if (r > 0 && e.map[a - 1] == l || r < e.width - 1 && e.map[a + 1] == l)
      n.setNodeMarkup(
        n.mapping.slice(s).map(i + l),
        null,
        Yi(u, r - e.colCount(l))
      );
    else {
      const d = n.mapping.slice(s).map(i + l);
      n.delete(d, d + c.nodeSize);
    }
    o += u.rowspan;
  }
}
function jS(n, e) {
  if (!Mn(n)) return !1;
  if (e) {
    const t = mn(n), i = n.tr;
    if (t.left == 0 && t.right == t.map.width) return !1;
    for (let r = t.right - 1; VS(i, t, r), r != t.left; r--) {
      const s = t.tableStart ? i.doc.nodeAt(t.tableStart - 1) : i.doc;
      if (!s)
        throw RangeError("No table found");
      t.table = s, t.map = Qe.get(s);
    }
    e(i);
  }
  return !0;
}
function WS(n, e, t) {
  var i;
  const r = Lt(e.type.schema).header_cell;
  for (let s = 0; s < n.width; s++)
    if (((i = e.nodeAt(n.map[s + t * n.width])) == null ? void 0 : i.type) != r)
      return !1;
  return !0;
}
function j_(n, { map: e, tableStart: t, table: i }, r) {
  var s;
  let o = t;
  for (let c = 0; c < r; c++) o += i.child(c).nodeSize;
  const a = [];
  let l = r > 0 ? -1 : 0;
  WS(e, i, r + l) && (l = r == 0 || r == e.height ? null : 0);
  for (let c = 0, u = e.width * r; c < e.width; c++, u++)
    if (r > 0 && r < e.height && e.map[u] == e.map[u - e.width]) {
      const d = e.map[u], f = i.nodeAt(d).attrs;
      n.setNodeMarkup(t + d, null, {
        ...f,
        rowspan: f.rowspan + 1
      }), c += f.colspan - 1;
    } else {
      const d = l == null ? Lt(i.type.schema).cell : (s = i.nodeAt(e.map[u + l * e.width])) == null ? void 0 : s.type, f = d == null ? void 0 : d.createAndFill();
      f && a.push(f);
    }
  return n.insert(o, Lt(i.type.schema).row.create(null, a)), n;
}
function US(n, e) {
  if (!Mn(n)) return !1;
  if (e) {
    const t = mn(n);
    e(j_(n.tr, t, t.top));
  }
  return !0;
}
function KS(n, e) {
  if (!Mn(n)) return !1;
  if (e) {
    const t = mn(n);
    e(j_(n.tr, t, t.bottom));
  }
  return !0;
}
function qS(n, { map: e, table: t, tableStart: i }, r) {
  let s = 0;
  for (let c = 0; c < r; c++) s += t.child(c).nodeSize;
  const o = s + t.child(r).nodeSize, a = n.mapping.maps.length;
  n.delete(s + i, o + i);
  const l = /* @__PURE__ */ new Set();
  for (let c = 0, u = r * e.width; c < e.width; c++, u++) {
    const d = e.map[u];
    if (!l.has(d)) {
      if (l.add(d), r > 0 && d == e.map[u - e.width]) {
        const f = t.nodeAt(d).attrs;
        n.setNodeMarkup(n.mapping.slice(a).map(d + i), null, {
          ...f,
          rowspan: f.rowspan - 1
        }), c += f.colspan - 1;
      } else if (r < e.height && d == e.map[u + e.width]) {
        const f = t.nodeAt(d), h = f.attrs, p = f.type.create(
          { ...h, rowspan: f.attrs.rowspan - 1 },
          f.content
        ), b = e.positionAt(r + 1, c, t);
        n.insert(n.mapping.slice(a).map(i + b), p), c += h.colspan - 1;
      }
    }
  }
}
function GS(n, e) {
  if (!Mn(n)) return !1;
  if (e) {
    const t = mn(n), i = n.tr;
    if (t.top == 0 && t.bottom == t.map.height) return !1;
    for (let r = t.bottom - 1; qS(i, t, r), r != t.top; r--) {
      const s = t.tableStart ? i.doc.nodeAt(t.tableStart - 1) : i.doc;
      if (!s)
        throw RangeError("No table found");
      t.table = s, t.map = Qe.get(t.table);
    }
    e(i);
  }
  return !0;
}
function Xh(n) {
  const e = n.content;
  return e.childCount == 1 && e.child(0).isTextblock && e.child(0).childCount == 0;
}
function JS({ width: n, height: e, map: t }, i) {
  let r = i.top * n + i.left, s = r, o = (i.bottom - 1) * n + i.left, a = r + (i.right - i.left - 1);
  for (let l = i.top; l < i.bottom; l++) {
    if (i.left > 0 && t[s] == t[s - 1] || i.right < n && t[a] == t[a + 1])
      return !0;
    s += n, a += n;
  }
  for (let l = i.left; l < i.right; l++) {
    if (i.top > 0 && t[r] == t[r - n] || i.bottom < e && t[o] == t[o + n])
      return !0;
    r++, o++;
  }
  return !1;
}
function Yh(n, e) {
  const t = n.selection;
  if (!(t instanceof We) || t.$anchorCell.pos == t.$headCell.pos)
    return !1;
  const i = mn(n), { map: r } = i;
  if (JS(r, i)) return !1;
  if (e) {
    const s = n.tr, o = {};
    let a = $.empty, l, c;
    for (let u = i.top; u < i.bottom; u++)
      for (let d = i.left; d < i.right; d++) {
        const f = r.map[u * r.width + d], h = i.table.nodeAt(f);
        if (!(o[f] || !h))
          if (o[f] = !0, l == null)
            l = f, c = h;
          else {
            Xh(h) || (a = a.append(h.content));
            const p = s.mapping.map(f + i.tableStart);
            s.delete(p, p + h.nodeSize);
          }
      }
    if (l == null || c == null)
      return !0;
    if (s.setNodeMarkup(l + i.tableStart, null, {
      ...z_(
        c.attrs,
        c.attrs.colspan,
        i.right - i.left - c.attrs.colspan
      ),
      rowspan: i.bottom - i.top
    }), a.size) {
      const u = l + 1 + c.content.size, d = Xh(c) ? l + 1 : u;
      s.replaceWith(d + i.tableStart, u + i.tableStart, a);
    }
    s.setSelection(
      new We(s.doc.resolve(l + i.tableStart))
    ), e(s);
  }
  return !0;
}
function Zh(n, e) {
  const t = Lt(n.schema);
  return XS(({ node: i }) => t[i.type.spec.tableRole])(n, e);
}
function XS(n) {
  return (e, t) => {
    var i;
    const r = e.selection;
    let s, o;
    if (r instanceof We) {
      if (r.$anchorCell.pos != r.$headCell.pos) return !1;
      s = r.$anchorCell.nodeAfter, o = r.$anchorCell.pos;
    } else {
      if (s = MS(r.$from), !s) return !1;
      o = (i = Gr(r.$from)) == null ? void 0 : i.pos;
    }
    if (s == null || o == null || s.attrs.colspan == 1 && s.attrs.rowspan == 1)
      return !1;
    if (t) {
      let a = s.attrs;
      const l = [], c = a.colwidth;
      a.rowspan > 1 && (a = { ...a, rowspan: 1 }), a.colspan > 1 && (a = { ...a, colspan: 1 });
      const u = mn(e), d = e.tr;
      for (let h = 0; h < u.right - u.left; h++)
        l.push(
          c ? {
            ...a,
            colwidth: c && c[h] ? [c[h]] : null
          } : a
        );
      let f;
      for (let h = u.top; h < u.bottom; h++) {
        let p = u.map.positionAt(h, u.left, u.table);
        h == u.top && (p += s.nodeSize);
        for (let b = u.left, m = 0; b < u.right; b++, m++)
          b == u.left && h == u.top || d.insert(
            f = d.mapping.map(p + u.tableStart, 1),
            n({ node: s, row: h, col: b }).createAndFill(l[m])
          );
      }
      d.setNodeMarkup(
        o,
        n({ node: s, row: u.top, col: u.left }),
        l[0]
      ), r instanceof We && d.setSelection(
        new We(
          d.doc.resolve(r.$anchorCell.pos),
          f ? d.doc.resolve(f) : void 0
        )
      ), t(d);
    }
    return !0;
  };
}
function YS(n, e) {
  return function(t, i) {
    if (!Mn(t)) return !1;
    const r = xl(t);
    if (r.nodeAfter.attrs[n] === e) return !1;
    if (i) {
      const s = t.tr;
      t.selection instanceof We ? t.selection.forEachCell((o, a) => {
        o.attrs[n] !== e && s.setNodeMarkup(a, null, {
          ...o.attrs,
          [n]: e
        });
      }) : s.setNodeMarkup(r.pos, null, {
        ...r.nodeAfter.attrs,
        [n]: e
      }), i(s);
    }
    return !0;
  };
}
function ZS(n) {
  return function(e, t) {
    if (!Mn(e)) return !1;
    if (t) {
      const i = Lt(e.schema), r = mn(e), s = e.tr, o = r.map.cellsInRect(
        n == "column" ? {
          left: r.left,
          top: 0,
          right: r.right,
          bottom: r.map.height
        } : n == "row" ? {
          left: 0,
          top: r.top,
          right: r.map.width,
          bottom: r.bottom
        } : r
      ), a = o.map((l) => r.table.nodeAt(l));
      for (let l = 0; l < o.length; l++)
        a[l].type == i.header_cell && s.setNodeMarkup(
          r.tableStart + o[l],
          i.cell,
          a[l].attrs
        );
      if (s.steps.length == 0)
        for (let l = 0; l < o.length; l++)
          s.setNodeMarkup(
            r.tableStart + o[l],
            i.header_cell,
            a[l].attrs
          );
      t(s);
    }
    return !0;
  };
}
function Qh(n, e, t) {
  const i = e.map.cellsInRect({
    left: 0,
    top: 0,
    right: n == "row" ? e.map.width : 1,
    bottom: n == "column" ? e.map.height : 1
  });
  for (let r = 0; r < i.length; r++) {
    const s = e.table.nodeAt(i[r]);
    if (s && s.type !== t.header_cell)
      return !1;
  }
  return !0;
}
function Us(n, e) {
  return e = e || { useDeprecatedLogic: !1 }, e.useDeprecatedLogic ? ZS(n) : function(t, i) {
    if (!Mn(t)) return !1;
    if (i) {
      const r = Lt(t.schema), s = mn(t), o = t.tr, a = Qh("row", s, r), l = Qh(
        "column",
        s,
        r
      ), u = (n === "column" ? a : n === "row" ? l : !1) ? 1 : 0, d = n == "column" ? {
        left: 0,
        top: u,
        right: 1,
        bottom: s.map.height
      } : n == "row" ? {
        left: u,
        top: 0,
        right: s.map.width,
        bottom: 1
      } : s, f = n == "column" ? l ? r.cell : r.header_cell : n == "row" ? a ? r.cell : r.header_cell : r.cell;
      s.map.cellsInRect(d).forEach((h) => {
        const p = h + s.tableStart, b = o.doc.nodeAt(p);
        b && o.setNodeMarkup(p, f, b.attrs);
      }), i(o);
    }
    return !0;
  };
}
Us("row", {
  useDeprecatedLogic: !0
});
Us("column", {
  useDeprecatedLogic: !0
});
var QS = Us("cell", {
  useDeprecatedLogic: !0
});
function eE(n, e) {
  if (e < 0) {
    const t = n.nodeBefore;
    if (t) return n.pos - t.nodeSize;
    for (let i = n.index(-1) - 1, r = n.before(); i >= 0; i--) {
      const s = n.node(-1).child(i), o = s.lastChild;
      if (o)
        return r - 1 - o.nodeSize;
      r -= s.nodeSize;
    }
  } else {
    if (n.index() < n.parent.childCount - 1)
      return n.pos + n.nodeAfter.nodeSize;
    const t = n.node(-1);
    for (let i = n.indexAfter(-1), r = n.after(); i < t.childCount; i++) {
      const s = t.child(i);
      if (s.childCount) return r + 1;
      r += s.nodeSize;
    }
  }
  return null;
}
function ep(n) {
  return function(e, t) {
    if (!Mn(e)) return !1;
    const i = eE(xl(e), n);
    if (i == null) return !1;
    if (t) {
      const r = e.doc.resolve(i);
      t(
        e.tr.setSelection(fe.between(r, NS(r))).scrollIntoView()
      );
    }
    return !0;
  };
}
function tE(n, e) {
  const t = n.selection.$anchor;
  for (let i = t.depth; i > 0; i--)
    if (t.node(i).type.spec.tableRole == "table")
      return e && e(
        n.tr.delete(t.before(i), t.after(i)).scrollIntoView()
      ), !0;
  return !1;
}
function Ro(n, e) {
  const t = n.selection;
  if (!(t instanceof We)) return !1;
  if (e) {
    const i = n.tr, r = Lt(n.schema).cell.createAndFill().content;
    t.forEachCell((s, o) => {
      s.content.eq(r) || i.replace(
        i.mapping.map(o + 1),
        i.mapping.map(o + s.nodeSize - 1),
        new X(r, 0, 0)
      );
    }), i.docChanged && e(i);
  }
  return !0;
}
function nE(n) {
  if (!n.size) return null;
  let { content: e, openStart: t, openEnd: i } = n;
  for (; e.childCount == 1 && (t > 0 && i > 0 || e.child(0).type.spec.tableRole == "table"); )
    t--, i--, e = e.child(0).content;
  const r = e.child(0), s = r.type.spec.tableRole, o = r.type.schema, a = [];
  if (s == "row")
    for (let l = 0; l < e.childCount; l++) {
      let c = e.child(l).content;
      const u = l ? 0 : Math.max(0, t - 1), d = l < e.childCount - 1 ? 0 : Math.max(0, i - 1);
      (u || d) && (c = cu(
        Lt(o).row,
        new X(c, u, d)
      ).content), a.push(c);
    }
  else if (s == "cell" || s == "header_cell")
    a.push(
      t || i ? cu(
        Lt(o).row,
        new X(e, t, i)
      ).content : e
    );
  else
    return null;
  return iE(o, a);
}
function iE(n, e) {
  const t = [];
  for (let r = 0; r < e.length; r++) {
    const s = e[r];
    for (let o = s.childCount - 1; o >= 0; o--) {
      const { rowspan: a, colspan: l } = s.child(o).attrs;
      for (let c = r; c < r + a; c++)
        t[c] = (t[c] || 0) + l;
    }
  }
  let i = 0;
  for (let r = 0; r < t.length; r++) i = Math.max(i, t[r]);
  for (let r = 0; r < t.length; r++)
    if (r >= e.length && e.push($.empty), t[r] < i) {
      const s = Lt(n).cell.createAndFill(), o = [];
      for (let a = t[r]; a < i; a++)
        o.push(s);
      e[r] = e[r].append($.from(o));
    }
  return { height: e.length, width: i, rows: e };
}
function cu(n, e) {
  const t = n.createAndFill();
  return new $u(t).replace(0, t.content.size, e).doc;
}
function rE({ width: n, height: e, rows: t }, i, r) {
  if (n != i) {
    const s = [], o = [];
    for (let a = 0; a < t.length; a++) {
      const l = t[a], c = [];
      for (let u = s[a] || 0, d = 0; u < i; d++) {
        let f = l.child(d % l.childCount);
        u + f.attrs.colspan > i && (f = f.type.createChecked(
          Yi(
            f.attrs,
            f.attrs.colspan,
            u + f.attrs.colspan - i
          ),
          f.content
        )), c.push(f), u += f.attrs.colspan;
        for (let h = 1; h < f.attrs.rowspan; h++)
          s[a + h] = (s[a + h] || 0) + f.attrs.colspan;
      }
      o.push($.from(c));
    }
    t = o, n = i;
  }
  if (e != r) {
    const s = [];
    for (let o = 0, a = 0; o < r; o++, a++) {
      const l = [], c = t[a % e];
      for (let u = 0; u < c.childCount; u++) {
        let d = c.child(u);
        o + d.attrs.rowspan > r && (d = d.type.create(
          {
            ...d.attrs,
            rowspan: Math.max(1, r - d.attrs.rowspan)
          },
          d.content
        )), l.push(d);
      }
      s.push($.from(l));
    }
    t = s, e = r;
  }
  return { width: n, height: e, rows: t };
}
function sE(n, e, t, i, r, s, o) {
  const a = n.doc.type.schema, l = Lt(a);
  let c, u;
  if (r > e.width)
    for (let d = 0, f = 0; d < e.height; d++) {
      const h = t.child(d);
      f += h.nodeSize;
      const p = [];
      let b;
      h.lastChild == null || h.lastChild.type == l.cell ? b = c || (c = l.cell.createAndFill()) : b = u || (u = l.header_cell.createAndFill());
      for (let m = e.width; m < r; m++) p.push(b);
      n.insert(n.mapping.slice(o).map(f - 1 + i), p);
    }
  if (s > e.height) {
    const d = [];
    for (let p = 0, b = (e.height - 1) * e.width; p < Math.max(e.width, r); p++) {
      const m = p >= e.width ? !1 : t.nodeAt(e.map[b + p]).type == l.header_cell;
      d.push(
        m ? u || (u = l.header_cell.createAndFill()) : c || (c = l.cell.createAndFill())
      );
    }
    const f = l.row.create(null, $.from(d)), h = [];
    for (let p = e.height; p < s; p++) h.push(f);
    n.insert(n.mapping.slice(o).map(i + t.nodeSize - 2), h);
  }
  return !!(c || u);
}
function tp(n, e, t, i, r, s, o, a) {
  if (o == 0 || o == e.height) return !1;
  let l = !1;
  for (let c = r; c < s; c++) {
    const u = o * e.width + c, d = e.map[u];
    if (e.map[u - e.width] == d) {
      l = !0;
      const f = t.nodeAt(d), { top: h, left: p } = e.findCell(d);
      n.setNodeMarkup(n.mapping.slice(a).map(d + i), null, {
        ...f.attrs,
        rowspan: o - h
      }), n.insert(
        n.mapping.slice(a).map(e.positionAt(o, p, t)),
        f.type.createAndFill({
          ...f.attrs,
          rowspan: h + f.attrs.rowspan - o
        })
      ), c += f.attrs.colspan - 1;
    }
  }
  return l;
}
function np(n, e, t, i, r, s, o, a) {
  if (o == 0 || o == e.width) return !1;
  let l = !1;
  for (let c = r; c < s; c++) {
    const u = c * e.width + o, d = e.map[u];
    if (e.map[u - 1] == d) {
      l = !0;
      const f = t.nodeAt(d), h = e.colCount(d), p = n.mapping.slice(a).map(d + i);
      n.setNodeMarkup(
        p,
        null,
        Yi(
          f.attrs,
          o - h,
          f.attrs.colspan - (o - h)
        )
      ), n.insert(
        p + f.nodeSize,
        f.type.createAndFill(
          Yi(f.attrs, 0, o - h)
        )
      ), c += f.attrs.rowspan - 1;
    }
  }
  return l;
}
function ip(n, e, t, i, r) {
  let s = t ? n.doc.nodeAt(t - 1) : n.doc;
  if (!s)
    throw new Error("No table found");
  let o = Qe.get(s);
  const { top: a, left: l } = i, c = l + r.width, u = a + r.height, d = n.tr;
  let f = 0;
  function h() {
    if (s = t ? d.doc.nodeAt(t - 1) : d.doc, !s)
      throw new Error("No table found");
    o = Qe.get(s), f = d.mapping.maps.length;
  }
  sE(d, o, s, t, c, u, f) && h(), tp(d, o, s, t, l, c, a, f) && h(), tp(d, o, s, t, l, c, u, f) && h(), np(d, o, s, t, a, u, l, f) && h(), np(d, o, s, t, a, u, c, f) && h();
  for (let p = a; p < u; p++) {
    const b = o.positionAt(p, l, s), m = o.positionAt(p, c, s);
    d.replace(
      d.mapping.slice(f).map(b + t),
      d.mapping.slice(f).map(m + t),
      new X(r.rows[p - a], 0, 0)
    );
  }
  h(), d.setSelection(
    new We(
      d.doc.resolve(t + o.positionAt(a, l, s)),
      d.doc.resolve(t + o.positionAt(u - 1, c - 1, s))
    )
  ), e(d);
}
var oE = Gu({
  ArrowLeft: Io("horiz", -1),
  ArrowRight: Io("horiz", 1),
  ArrowUp: Io("vert", -1),
  ArrowDown: Io("vert", 1),
  "Shift-ArrowLeft": Po("horiz", -1),
  "Shift-ArrowRight": Po("horiz", 1),
  "Shift-ArrowUp": Po("vert", -1),
  "Shift-ArrowDown": Po("vert", 1),
  Backspace: Ro,
  "Mod-Backspace": Ro,
  Delete: Ro,
  "Mod-Delete": Ro
});
function Xo(n, e, t) {
  return t.eq(n.selection) ? !1 : (e && e(n.tr.setSelection(t).scrollIntoView()), !0);
}
function Io(n, e) {
  return (t, i, r) => {
    if (!r) return !1;
    const s = t.selection;
    if (s instanceof We)
      return Xo(
        t,
        i,
        pe.near(s.$headCell, e)
      );
    if (n != "horiz" && !s.empty) return !1;
    const o = W_(r, n, e);
    if (o == null) return !1;
    if (n == "horiz")
      return Xo(
        t,
        i,
        pe.near(t.doc.resolve(s.head + e), e)
      );
    {
      const a = t.doc.resolve(o), l = $_(a, n, e);
      let c;
      return l ? c = pe.near(l, 1) : e < 0 ? c = pe.near(t.doc.resolve(a.before(-1)), -1) : c = pe.near(t.doc.resolve(a.after(-1)), 1), Xo(t, i, c);
    }
  };
}
function Po(n, e) {
  return (t, i, r) => {
    if (!r) return !1;
    const s = t.selection;
    let o;
    if (s instanceof We)
      o = s;
    else {
      const l = W_(r, n, e);
      if (l == null) return !1;
      o = new We(t.doc.resolve(l));
    }
    const a = $_(o.$headCell, n, e);
    return a ? Xo(
      t,
      i,
      new We(o.$anchorCell, a)
    ) : !1;
  };
}
function aE(n, e) {
  const t = n.state.doc, i = Gr(t.resolve(e));
  return i ? (n.dispatch(n.state.tr.setSelection(new We(i))), !0) : !1;
}
function lE(n, e, t) {
  if (!Mn(n.state)) return !1;
  let i = nE(t);
  const r = n.state.selection;
  if (r instanceof We) {
    i || (i = {
      width: 1,
      height: 1,
      rows: [
        $.from(
          cu(Lt(n.state.schema).cell, t)
        )
      ]
    });
    const s = r.$anchorCell.node(-1), o = r.$anchorCell.start(-1), a = Qe.get(s).rectBetween(
      r.$anchorCell.pos - o,
      r.$headCell.pos - o
    );
    return i = rE(i, a.right - a.left, a.bottom - a.top), ip(n.state, n.dispatch, o, a, i), !0;
  } else if (i) {
    const s = xl(n.state), o = s.start(-1);
    return ip(
      n.state,
      n.dispatch,
      o,
      Qe.get(s.node(-1)).findCell(s.pos - o),
      i
    ), !0;
  } else
    return !1;
}
function cE(n, e) {
  var t;
  if (e.ctrlKey || e.metaKey) return;
  const i = rp(n, e.target);
  let r;
  if (e.shiftKey && n.state.selection instanceof We)
    s(n.state.selection.$anchorCell, e), e.preventDefault();
  else if (e.shiftKey && i && (r = Gr(n.state.selection.$anchor)) != null && ((t = gc(n, e)) == null ? void 0 : t.pos) != r.pos)
    s(r, e), e.preventDefault();
  else if (!i)
    return;
  function s(l, c) {
    let u = gc(n, c);
    const d = hi.getState(n.state) == null;
    if (!u || !Sd(l, u))
      if (d) u = l;
      else return;
    const f = new We(l, u);
    if (d || !n.state.selection.eq(f)) {
      const h = n.state.tr.setSelection(f);
      d && h.setMeta(hi, l.pos), n.dispatch(h);
    }
  }
  function o() {
    n.root.removeEventListener("mouseup", o), n.root.removeEventListener("dragstart", o), n.root.removeEventListener("mousemove", a), hi.getState(n.state) != null && n.dispatch(n.state.tr.setMeta(hi, -1));
  }
  function a(l) {
    const c = l, u = hi.getState(n.state);
    let d;
    if (u != null)
      d = n.state.doc.resolve(u);
    else if (rp(n, c.target) != i && (d = gc(n, e), !d))
      return o();
    d && s(d, c);
  }
  n.root.addEventListener("mouseup", o), n.root.addEventListener("dragstart", o), n.root.addEventListener("mousemove", a);
}
function W_(n, e, t) {
  if (!(n.state.selection instanceof fe)) return null;
  const { $head: i } = n.state.selection;
  for (let r = i.depth - 1; r >= 0; r--) {
    const s = i.node(r);
    if ((t < 0 ? i.index(r) : i.indexAfter(r)) != (t < 0 ? 0 : s.childCount)) return null;
    if (s.type.spec.tableRole == "cell" || s.type.spec.tableRole == "header_cell") {
      const a = i.before(r), l = e == "vert" ? t > 0 ? "down" : "up" : t > 0 ? "right" : "left";
      return n.endOfTextblock(l) ? a : null;
    }
  }
  return null;
}
function rp(n, e) {
  for (; e && e != n.dom; e = e.parentNode)
    if (e.nodeName == "TD" || e.nodeName == "TH")
      return e;
  return null;
}
function gc(n, e) {
  const t = n.posAtCoords({
    left: e.clientX,
    top: e.clientY
  });
  return t && t ? Gr(n.state.doc.resolve(t.pos)) : null;
}
var uE = class {
  constructor(e, t) {
    this.node = e, this.defaultCellMinWidth = t, this.dom = document.createElement("div"), this.dom.className = "tableWrapper", this.table = this.dom.appendChild(document.createElement("table")), this.table.style.setProperty(
      "--default-cell-min-width",
      `${t}px`
    ), this.colgroup = this.table.appendChild(document.createElement("colgroup")), uu(e, this.colgroup, this.table, t), this.contentDOM = this.table.appendChild(document.createElement("tbody"));
  }
  update(e) {
    return e.type != this.node.type ? !1 : (this.node = e, uu(
      e,
      this.colgroup,
      this.table,
      this.defaultCellMinWidth
    ), !0);
  }
  ignoreMutation(e) {
    return e.type == "attributes" && (e.target == this.table || this.colgroup.contains(e.target));
  }
};
function uu(n, e, t, i, r, s) {
  var o;
  let a = 0, l = !0, c = e.firstChild;
  const u = n.firstChild;
  if (u) {
    for (let d = 0, f = 0; d < u.childCount; d++) {
      const { colspan: h, colwidth: p } = u.child(d).attrs;
      for (let b = 0; b < h; b++, f++) {
        const m = r == f ? s : p && p[b], g = m ? m + "px" : "";
        if (a += m || i, m || (l = !1), c)
          c.style.width != g && (c.style.width = g), c = c.nextSibling;
        else {
          const v = document.createElement("col");
          v.style.width = g, e.appendChild(v);
        }
      }
    }
    for (; c; ) {
      const d = c.nextSibling;
      (o = c.parentNode) == null || o.removeChild(c), c = d;
    }
    l ? (t.style.width = a + "px", t.style.minWidth = "") : (t.style.width = "", t.style.minWidth = a + "px");
  }
}
var tn = new dt(
  "tableColumnResizing"
);
function dE({
  handleWidth: n = 5,
  cellMinWidth: e = 25,
  defaultCellMinWidth: t = 100,
  View: i = uE,
  lastColumnResizable: r = !0
} = {}) {
  const s = new Je({
    key: tn,
    state: {
      init(o, a) {
        var l, c;
        const u = (c = (l = s.spec) == null ? void 0 : l.props) == null ? void 0 : c.nodeViews, d = Lt(a.schema).table.name;
        return i && u && (u[d] = (f, h) => new i(f, t, h)), new fE(-1, !1);
      },
      apply(o, a) {
        return a.apply(o);
      }
    },
    props: {
      attributes: (o) => {
        const a = tn.getState(o);
        return a && a.activeHandle > -1 ? { class: "resize-cursor" } : {};
      },
      handleDOMEvents: {
        mousemove: (o, a) => {
          hE(o, a, n, r);
        },
        mouseleave: (o) => {
          pE(o);
        },
        mousedown: (o, a) => {
          mE(o, a, e, t);
        }
      },
      decorations: (o) => {
        const a = tn.getState(o);
        if (a && a.activeHandle > -1)
          return yE(o, a.activeHandle);
      },
      nodeViews: {}
    }
  });
  return s;
}
var fE = class Yo {
  constructor(e, t) {
    this.activeHandle = e, this.dragging = t;
  }
  apply(e) {
    const t = this, i = e.getMeta(tn);
    if (i && i.setHandle != null)
      return new Yo(i.setHandle, !1);
    if (i && i.setDragging !== void 0)
      return new Yo(t.activeHandle, i.setDragging);
    if (t.activeHandle > -1 && e.docChanged) {
      let r = e.mapping.map(t.activeHandle, -1);
      return lu(e.doc.resolve(r)) || (r = -1), new Yo(r, t.dragging);
    }
    return t;
  }
};
function hE(n, e, t, i) {
  if (!n.editable) return;
  const r = tn.getState(n.state);
  if (r && !r.dragging) {
    const s = _E(e.target);
    let o = -1;
    if (s) {
      const { left: a, right: l } = s.getBoundingClientRect();
      e.clientX - a <= t ? o = sp(n, e, "left", t) : l - e.clientX <= t && (o = sp(n, e, "right", t));
    }
    if (o != r.activeHandle) {
      if (!i && o !== -1) {
        const a = n.state.doc.resolve(o), l = a.node(-1), c = Qe.get(l), u = a.start(-1);
        if (c.colCount(a.pos - u) + a.nodeAfter.attrs.colspan - 1 == c.width - 1)
          return;
      }
      U_(n, o);
    }
  }
}
function pE(n) {
  if (!n.editable) return;
  const e = tn.getState(n.state);
  e && e.activeHandle > -1 && !e.dragging && U_(n, -1);
}
function mE(n, e, t, i) {
  var r;
  if (!n.editable) return !1;
  const s = (r = n.dom.ownerDocument.defaultView) != null ? r : window, o = tn.getState(n.state);
  if (!o || o.activeHandle == -1 || o.dragging)
    return !1;
  const a = n.state.doc.nodeAt(o.activeHandle), l = gE(n, o.activeHandle, a.attrs);
  n.dispatch(
    n.state.tr.setMeta(tn, {
      setDragging: { startX: e.clientX, startWidth: l }
    })
  );
  function c(d) {
    s.removeEventListener("mouseup", c), s.removeEventListener("mousemove", u);
    const f = tn.getState(n.state);
    f != null && f.dragging && (bE(
      n,
      f.activeHandle,
      op(f.dragging, d, t)
    ), n.dispatch(
      n.state.tr.setMeta(tn, { setDragging: null })
    ));
  }
  function u(d) {
    if (!d.which) return c(d);
    const f = tn.getState(n.state);
    if (f && f.dragging) {
      const h = op(f.dragging, d, t);
      ap(
        n,
        f.activeHandle,
        h,
        i
      );
    }
  }
  return ap(
    n,
    o.activeHandle,
    l,
    i
  ), s.addEventListener("mouseup", c), s.addEventListener("mousemove", u), e.preventDefault(), !0;
}
function gE(n, e, { colspan: t, colwidth: i }) {
  const r = i && i[i.length - 1];
  if (r) return r;
  const s = n.domAtPos(e);
  let a = s.node.childNodes[s.offset].offsetWidth, l = t;
  if (i)
    for (let c = 0; c < t; c++)
      i[c] && (a -= i[c], l--);
  return a / l;
}
function _E(n) {
  for (; n && n.nodeName != "TD" && n.nodeName != "TH"; )
    n = n.classList && n.classList.contains("ProseMirror") ? null : n.parentNode;
  return n;
}
function sp(n, e, t, i) {
  const r = t == "right" ? -i : i, s = n.posAtCoords({
    left: e.clientX + r,
    top: e.clientY
  });
  if (!s) return -1;
  const { pos: o } = s, a = Gr(n.state.doc.resolve(o));
  if (!a) return -1;
  if (t == "right") return a.pos;
  const l = Qe.get(a.node(-1)), c = a.start(-1), u = l.map.indexOf(a.pos - c);
  return u % l.width == 0 ? -1 : c + l.map[u - 1];
}
function op(n, e, t) {
  const i = e.clientX - n.startX;
  return Math.max(t, n.startWidth + i);
}
function U_(n, e) {
  n.dispatch(
    n.state.tr.setMeta(tn, { setHandle: e })
  );
}
function bE(n, e, t) {
  const i = n.state.doc.resolve(e), r = i.node(-1), s = Qe.get(r), o = i.start(-1), a = s.colCount(i.pos - o) + i.nodeAfter.attrs.colspan - 1, l = n.state.tr;
  for (let c = 0; c < s.height; c++) {
    const u = c * s.width + a;
    if (c && s.map[u] == s.map[u - s.width]) continue;
    const d = s.map[u], f = r.nodeAt(d).attrs, h = f.colspan == 1 ? 0 : a - s.colCount(d);
    if (f.colwidth && f.colwidth[h] == t) continue;
    const p = f.colwidth ? f.colwidth.slice() : vE(f.colspan);
    p[h] = t, l.setNodeMarkup(o + d, null, { ...f, colwidth: p });
  }
  l.docChanged && n.dispatch(l);
}
function ap(n, e, t, i) {
  const r = n.state.doc.resolve(e), s = r.node(-1), o = r.start(-1), a = Qe.get(s).colCount(r.pos - o) + r.nodeAfter.attrs.colspan - 1;
  let l = n.domAtPos(r.start(-1)).node;
  for (; l && l.nodeName != "TABLE"; )
    l = l.parentNode;
  l && uu(
    s,
    l.firstChild,
    l,
    i,
    a,
    t
  );
}
function vE(n) {
  return Array(n).fill(0);
}
function yE(n, e) {
  var t;
  const i = [], r = n.doc.resolve(e), s = r.node(-1);
  if (!s)
    return je.empty;
  const o = Qe.get(s), a = r.start(-1), l = o.colCount(r.pos - a) + r.nodeAfter.attrs.colspan - 1;
  for (let c = 0; c < o.height; c++) {
    const u = l + c * o.width;
    if ((l == o.width - 1 || o.map[u] != o.map[u + 1]) && (c == 0 || o.map[u] != o.map[u - o.width])) {
      const d = o.map[u], f = a + d + s.nodeAt(d).nodeSize - 1, h = document.createElement("div");
      h.className = "column-resize-handle", (t = tn.getState(n)) != null && t.dragging && i.push(
        bt.node(
          a + d,
          a + d + s.nodeAt(d).nodeSize,
          {
            class: "column-resize-dragging"
          }
        )
      ), i.push(bt.widget(f, h));
    }
  }
  return je.create(n.doc, i);
}
function xE({
  allowTableNodeSelection: n = !1
} = {}) {
  return new Je({
    key: hi,
    // This piece of state is used to remember when a mouse-drag
    // cell-selection is happening, so that it can continue even as
    // transactions (which might move its anchor cell) come in.
    state: {
      init() {
        return null;
      },
      apply(e, t) {
        const i = e.getMeta(hi);
        if (i != null) return i == -1 ? null : i;
        if (t == null || !e.docChanged) return t;
        const { deleted: r, pos: s } = e.mapping.mapResult(t);
        return r ? null : s;
      }
    },
    props: {
      decorations: IS,
      handleDOMEvents: {
        mousedown: cE
      },
      createSelectionBetween(e) {
        return hi.getState(e.state) != null ? e.state.selection : null;
      },
      handleTripleClick: aE,
      handleKeyDown: oE,
      handlePaste: lE
    },
    appendTransaction(e, t, i) {
      return $S(
        i,
        F_(i, t),
        n
      );
    }
  });
}
var K_ = Ie.create({
  name: "tableCell",
  addOptions() {
    return {
      HTMLAttributes: {}
    };
  },
  content: "block+",
  addAttributes() {
    return {
      colspan: {
        default: 1
      },
      rowspan: {
        default: 1
      },
      colwidth: {
        default: null,
        parseHTML: (n) => {
          const e = n.getAttribute("colwidth");
          return e ? e.split(",").map((i) => parseInt(i, 10)) : null;
        }
      }
    };
  },
  tableRole: "cell",
  isolating: !0,
  parseHTML() {
    return [{ tag: "td" }];
  },
  renderHTML({ HTMLAttributes: n }) {
    return ["td", Ce(this.options.HTMLAttributes, n), 0];
  }
}), q_ = Ie.create({
  name: "tableHeader",
  addOptions() {
    return {
      HTMLAttributes: {}
    };
  },
  content: "block+",
  addAttributes() {
    return {
      colspan: {
        default: 1
      },
      rowspan: {
        default: 1
      },
      colwidth: {
        default: null,
        parseHTML: (n) => {
          const e = n.getAttribute("colwidth");
          return e ? e.split(",").map((i) => parseInt(i, 10)) : null;
        }
      }
    };
  },
  tableRole: "header_cell",
  isolating: !0,
  parseHTML() {
    return [{ tag: "th" }];
  },
  renderHTML({ HTMLAttributes: n }) {
    return ["th", Ce(this.options.HTMLAttributes, n), 0];
  }
}), G_ = Ie.create({
  name: "tableRow",
  addOptions() {
    return {
      HTMLAttributes: {}
    };
  },
  content: "(tableCell | tableHeader)*",
  tableRole: "row",
  parseHTML() {
    return [{ tag: "tr" }];
  },
  renderHTML({ HTMLAttributes: n }) {
    return ["tr", Ce(this.options.HTMLAttributes, n), 0];
  }
});
function du(n, e) {
  return e ? ["width", `${Math.max(e, n)}px`] : ["min-width", `${n}px`];
}
function lp(n, e, t, i, r, s) {
  var o;
  let a = 0, l = !0, c = e.firstChild;
  const u = n.firstChild;
  if (u !== null)
    for (let d = 0, f = 0; d < u.childCount; d += 1) {
      const { colspan: h, colwidth: p } = u.child(d).attrs;
      for (let b = 0; b < h; b += 1, f += 1) {
        const m = r === f ? s : p && p[b], g = m ? `${m}px` : "";
        if (a += m || i, m || (l = !1), c) {
          if (c.style.width !== g) {
            const [v, x] = du(i, m);
            c.style.setProperty(v, x);
          }
          c = c.nextSibling;
        } else {
          const v = document.createElement("col"), [x, w] = du(i, m);
          v.style.setProperty(x, w), e.appendChild(v);
        }
      }
    }
  for (; c; ) {
    const d = c.nextSibling;
    (o = c.parentNode) == null || o.removeChild(c), c = d;
  }
  l ? (t.style.width = `${a}px`, t.style.minWidth = "") : (t.style.width = "", t.style.minWidth = `${a}px`);
}
var wE = class {
  constructor(n, e) {
    this.node = n, this.cellMinWidth = e, this.dom = document.createElement("div"), this.dom.className = "tableWrapper", this.table = this.dom.appendChild(document.createElement("table")), this.colgroup = this.table.appendChild(document.createElement("colgroup")), lp(n, this.colgroup, this.table, e), this.contentDOM = this.table.appendChild(document.createElement("tbody"));
  }
  update(n) {
    return n.type !== this.node.type ? !1 : (this.node = n, lp(n, this.colgroup, this.table, this.cellMinWidth), !0);
  }
  ignoreMutation(n) {
    return n.type === "attributes" && (n.target === this.table || this.colgroup.contains(n.target));
  }
};
function kE(n, e, t, i) {
  let r = 0, s = !0;
  const o = [], a = n.firstChild;
  if (!a)
    return {};
  for (let d = 0, f = 0; d < a.childCount; d += 1) {
    const { colspan: h, colwidth: p } = a.child(d).attrs;
    for (let b = 0; b < h; b += 1, f += 1) {
      const m = t === f ? i : p && p[b];
      r += m || e, m || (s = !1);
      const [g, v] = du(e, m);
      o.push(["col", { style: `${g}: ${v}` }]);
    }
  }
  const l = s ? `${r}px` : "", c = s ? "" : `${r}px`;
  return { colgroup: ["colgroup", {}, ...o], tableWidth: l, tableMinWidth: c };
}
function cp(n, e) {
  return e ? n.createChecked(null, e) : n.createAndFill();
}
function SE(n) {
  if (n.cached.tableNodeTypes)
    return n.cached.tableNodeTypes;
  const e = {};
  return Object.keys(n.nodes).forEach((t) => {
    const i = n.nodes[t];
    i.spec.tableRole && (e[i.spec.tableRole] = i);
  }), n.cached.tableNodeTypes = e, e;
}
function J_(n, e, t, i, r) {
  const s = SE(n), o = [], a = [];
  for (let c = 0; c < t; c += 1) {
    const u = cp(s.cell, r);
    if (u && a.push(u), i) {
      const d = cp(s.header_cell, r);
      d && o.push(d);
    }
  }
  const l = [];
  for (let c = 0; c < e; c += 1)
    l.push(s.row.createChecked(null, i && c === 0 ? o : a));
  return s.table.createChecked(null, l);
}
function EE(n) {
  return n instanceof We;
}
var Do = ({ editor: n }) => {
  const { selection: e } = n.state;
  if (!EE(e))
    return !1;
  let t = 0;
  const i = td(e.ranges[0].$from, (s) => s.type.name === "table");
  return i == null || i.node.descendants((s) => {
    if (s.type.name === "table")
      return !1;
    ["tableCell", "tableHeader"].includes(s.type.name) && (t += 1);
  }), t === e.ranges.length ? (n.commands.deleteTable(), !0) : !1;
}, X_ = Ie.create({
  name: "table",
  // @ts-ignore
  addOptions() {
    return {
      HTMLAttributes: {},
      resizable: !1,
      handleWidth: 5,
      cellMinWidth: 25,
      // TODO: fix
      View: wE,
      lastColumnResizable: !0,
      allowTableNodeSelection: !1
    };
  },
  content: "tableRow+",
  tableRole: "table",
  isolating: !0,
  group: "block",
  parseHTML() {
    return [{ tag: "table" }];
  },
  renderHTML({ node: n, HTMLAttributes: e }) {
    const { colgroup: t, tableWidth: i, tableMinWidth: r } = kE(n, this.options.cellMinWidth);
    return [
      "table",
      Ce(this.options.HTMLAttributes, e, {
        style: i ? `width: ${i}` : `min-width: ${r}`
      }),
      t,
      ["tbody", 0]
    ];
  },
  addCommands() {
    return {
      insertTable: ({ rows: n = 3, cols: e = 3, withHeaderRow: t = !0 } = {}) => ({ tr: i, dispatch: r, editor: s }) => {
        const o = J_(s.schema, n, e, t);
        if (r) {
          const a = i.selection.from + 1;
          i.replaceSelectionWith(o).scrollIntoView().setSelection(fe.near(i.doc.resolve(a)));
        }
        return !0;
      },
      addColumnBefore: () => ({ state: n, dispatch: e }) => HS(n, e),
      addColumnAfter: () => ({ state: n, dispatch: e }) => FS(n, e),
      deleteColumn: () => ({ state: n, dispatch: e }) => jS(n, e),
      addRowBefore: () => ({ state: n, dispatch: e }) => US(n, e),
      addRowAfter: () => ({ state: n, dispatch: e }) => KS(n, e),
      deleteRow: () => ({ state: n, dispatch: e }) => GS(n, e),
      deleteTable: () => ({ state: n, dispatch: e }) => tE(n, e),
      mergeCells: () => ({ state: n, dispatch: e }) => Yh(n, e),
      splitCell: () => ({ state: n, dispatch: e }) => Zh(n, e),
      toggleHeaderColumn: () => ({ state: n, dispatch: e }) => Us("column")(n, e),
      toggleHeaderRow: () => ({ state: n, dispatch: e }) => Us("row")(n, e),
      toggleHeaderCell: () => ({ state: n, dispatch: e }) => QS(n, e),
      mergeOrSplit: () => ({ state: n, dispatch: e }) => Yh(n, e) ? !0 : Zh(n, e),
      setCellAttribute: (n, e) => ({ state: t, dispatch: i }) => YS(n, e)(t, i),
      goToNextCell: () => ({ state: n, dispatch: e }) => ep(1)(n, e),
      goToPreviousCell: () => ({ state: n, dispatch: e }) => ep(-1)(n, e),
      fixTables: () => ({ state: n, dispatch: e }) => (e && F_(n), !0),
      setCellSelection: (n) => ({ tr: e, dispatch: t }) => {
        if (t) {
          const i = We.create(e.doc, n.anchorCell, n.headCell);
          e.setSelection(i);
        }
        return !0;
      }
    };
  },
  addKeyboardShortcuts() {
    return {
      Tab: () => this.editor.commands.goToNextCell() ? !0 : this.editor.can().addRowAfter() ? this.editor.chain().addRowAfter().goToNextCell().run() : !1,
      "Shift-Tab": () => this.editor.commands.goToPreviousCell(),
      Backspace: Do,
      "Mod-Backspace": Do,
      Delete: Do,
      "Mod-Delete": Do
    };
  },
  addProseMirrorPlugins() {
    return [
      ...this.options.resizable && this.editor.isEditable ? [
        dE({
          handleWidth: this.options.handleWidth,
          cellMinWidth: this.options.cellMinWidth,
          defaultCellMinWidth: this.options.cellMinWidth,
          View: this.options.View,
          lastColumnResizable: this.options.lastColumnResizable
        })
      ] : [],
      xE({
        allowTableNodeSelection: this.options.allowTableNodeSelection
      })
    ];
  },
  extendNodeSchema(n) {
    const e = {
      name: n.name,
      options: n.options,
      storage: n.storage
    };
    return {
      tableRole: Me(ae(n, "tableRole", e))
    };
  }
});
ze.create({
  name: "tableKit",
  addExtensions() {
    const n = [];
    return this.options.table !== !1 && n.push(X_.configure(this.options.table)), this.options.tableCell !== !1 && n.push(K_.configure(this.options.tableCell)), this.options.tableHeader !== !1 && n.push(q_.configure(this.options.tableHeader)), this.options.tableRow !== !1 && n.push(G_.configure(this.options.tableRow)), n;
  }
});
const CE = X_.extend({
  addAttributes() {
    var n;
    return {
      ...(n = this.parent) == null ? void 0 : n.call(this),
      style: {}
    };
  },
  addOptions() {
    var e;
    const n = (e = this.parent) == null ? void 0 : e.call(this);
    return n && (n.View = class extends n.View {
      update(t) {
        return super.update(t), this.table.style.cssText = t.attrs.style, !0;
      }
    }), n;
  },
  // FIXME: renderHTML with customized attributes
  renderHTML({ HTMLAttributes: n }) {
    return ["table", n, 0];
  }
}), TE = K_.extend({
  addAttributes() {
    var n;
    return {
      ...(n = this.parent) == null ? void 0 : n.call(this),
      style: {
        default: ""
      }
    };
  },
  renderHTML({ HTMLAttributes: n }) {
    const { colspan: e, rowspan: t, style: i, ...r } = n;
    return [
      "td",
      Ce(r, {
        colspan: e === 1 ? void 0 : e,
        rowspan: t === 1 ? void 0 : t,
        style: i === "" ? void 0 : i
      }),
      0
    ];
  }
}), AE = q_.extend({
  addAttributes() {
    var n;
    return {
      ...(n = this.parent) == null ? void 0 : n.call(this),
      scope: {
        default: ""
      },
      style: {
        default: ""
      }
    };
  },
  renderHTML({ HTMLAttributes: n }) {
    const { colspan: e, rowspan: t, scope: i, style: r, ...s } = n;
    return [
      "th",
      Ce(s, {
        colspan: e === 1 ? void 0 : e,
        rowspan: t === 1 ? void 0 : t,
        scope: i === "" ? void 0 : i,
        style: r === "" ? void 0 : r
      }),
      0
    ];
  }
}), ME = ze.create({
  name: "indent",
  addOptions() {
    return {
      types: ["listItem", "paragraph"]
    };
  },
  addGlobalAttributes() {
    return [
      {
        types: this.options.types,
        attributes: {
          "data-mt-indent": {
            default: null,
            renderHTML: ({ "data-mt-indent": n }) => n && n !== "0" ? {
              style: `padding-left: ${n * 80}px`
            } : {},
            parseHTML: (n) => Number(n.getAttribute("data-mt-indent"))
          }
        }
      }
    ];
  },
  addCommands() {
    const n = (i, r, s) => {
      var a;
      const o = (a = i == null ? void 0 : i.doc) == null ? void 0 : a.nodeAt(r);
      if (o) {
        let { "data-mt-indent": l, ...c } = o.attrs;
        return l = (l || 0) + s, l > 0 && (c = { ...c, "data-mt-indent": l }), i.setNodeMarkup(r, o.type, c, o.marks);
      }
      return i;
    }, e = (i, r) => {
      const { doc: s, selection: o } = i;
      if (s && o && (o instanceof fe || o instanceof Gt)) {
        const { from: a, to: l } = o;
        s.nodesBetween(a, l, (c, u) => this.options.types.includes(c.type.name) ? (i = n(i, u, r), !1) : !0);
      }
      return i;
    }, t = (i) => () => ({ tr: r, state: s, dispatch: o }) => {
      const { selection: a } = s;
      return r = r.setSelection(a), r = e(r, i), r.docChanged ? (o == null || o(r), !0) : !1;
    };
    return {
      indent: t(1),
      outdent: t(-1)
    };
  }
}), OE = Ie.create({
  name: "div",
  priority: 1e3,
  group: "block",
  content: "block+",
  defining: !0,
  parseHTML() {
    return [
      { tag: "div:not([data-mt-rich-text-editor-embed-object])" },
      { tag: "main" },
      { tag: "article" },
      { tag: "section" },
      { tag: "aside" },
      { tag: "nav" },
      { tag: "header" },
      { tag: "footer" },
      { tag: "figure" },
      { tag: "figcaption" },
      { tag: "details" },
      { tag: "dialog" }
    ];
  },
  renderHTML({ HTMLAttributes: n, node: e }) {
    return [
      e.attrs["data-tag"] || "div",
      Ce(this.options.HTMLAttributes, n, {
        "data-tag": void 0
      }),
      0
    ];
  },
  addAttributes() {
    return {
      "data-tag": {
        default: "div",
        parseHTML: (n) => n.tagName.toLowerCase()
      }
    };
  }
}), NE = nn.create({
  name: "span",
  priority: 1e3,
  content: "inline*",
  parseHTML() {
    return [
      {
        tag: "span"
      }
    ];
  },
  renderHTML({ HTMLAttributes: n }) {
    return ["span", n, 0];
  }
});
var LE = /(?:^|\s)(\*\*(?!\s+\*\*)((?:[^*]+))\*\*(?!\s+\*\*))$/, RE = /(?:^|\s)(\*\*(?!\s+\*\*)((?:[^*]+))\*\*(?!\s+\*\*))/g, IE = /(?:^|\s)(__(?!\s+__)((?:[^_]+))__(?!\s+__))$/, PE = /(?:^|\s)(__(?!\s+__)((?:[^_]+))__(?!\s+__))/g, DE = nn.create({
  name: "bold",
  addOptions() {
    return {
      HTMLAttributes: {}
    };
  },
  parseHTML() {
    return [
      {
        tag: "strong"
      },
      {
        tag: "b",
        getAttrs: (n) => n.style.fontWeight !== "normal" && null
      },
      {
        style: "font-weight=400",
        clearMark: (n) => n.type.name === this.name
      },
      {
        style: "font-weight",
        getAttrs: (n) => /^(bold(er)?|[5-9]\d{2,})$/.test(n) && null
      }
    ];
  },
  renderHTML({ HTMLAttributes: n }) {
    return /* @__PURE__ */ xa("strong", { ...Ce(this.options.HTMLAttributes, n), children: /* @__PURE__ */ xa("slot", {}) });
  },
  addCommands() {
    return {
      setBold: () => ({ commands: n }) => n.setMark(this.name),
      toggleBold: () => ({ commands: n }) => n.toggleMark(this.name),
      unsetBold: () => ({ commands: n }) => n.unsetMark(this.name)
    };
  },
  addKeyboardShortcuts() {
    return {
      "Mod-b": () => this.editor.commands.toggleBold(),
      "Mod-B": () => this.editor.commands.toggleBold()
    };
  },
  addInputRules() {
    return [
      jr({
        find: LE,
        type: this.type
      }),
      jr({
        find: IE,
        type: this.type
      })
    ];
  },
  addPasteRules() {
    return [
      Xi({
        find: RE,
        type: this.type
      }),
      Xi({
        find: PE,
        type: this.type
      })
    ];
  }
});
const $E = DE.extend({
  priority: 1e3,
  content: "inline*"
}), zE = Ie.create({
  name: "blockLink",
  priority: 1e3,
  group: "block",
  content: "block+",
  defining: !0,
  addAttributes() {
    return {
      HTMLAttributes: {
        default: {},
        parseHTML: (n) => {
          const e = {};
          return Array.from(n.attributes).forEach((t) => {
            e[t.name] = t.value;
          }), e;
        },
        renderHTML: (n) => n.HTMLAttributes
      },
      "data-mt-rich-text-editor-block": {
        default: null,
        renderHTML: () => null
      }
    };
  },
  parseHTML() {
    return [
      {
        tag: "a[data-mt-rich-text-editor-block]",
        getAttrs: (n) => n instanceof HTMLElement ? {
          href: n.getAttribute("href"),
          "data-mt-rich-text-editor-block": n.getAttribute(
            "data-mt-rich-text-editor-block"
          )
        } : !1
      }
    ];
  },
  renderHTML({ HTMLAttributes: n }) {
    const { href: e } = n;
    return ["a", Ce(this.options.HTMLAttributes, { href: e }), 0];
  },
  addCommands() {
    return {
      setBlockLink: (n = {}) => ({ commands: e }) => e.wrapIn(this.name, n),
      unsetBlockLink: () => ({ commands: n }) => n.lift(this.name)
    };
  }
}), BE = "aaa1rp3bb0ott3vie4c1le2ogado5udhabi7c0ademy5centure6ountant0s9o1tor4d0s1ult4e0g1ro2tna4f0l1rica5g0akhan5ency5i0g1rbus3force5tel5kdn3l0ibaba4pay4lfinanz6state5y2sace3tom5m0azon4ericanexpress7family11x2fam3ica3sterdam8nalytics7droid5quan4z2o0l2partments8p0le4q0uarelle8r0ab1mco4chi3my2pa2t0e3s0da2ia2sociates9t0hleta5torney7u0ction5di0ble3o3spost5thor3o0s4w0s2x0a2z0ure5ba0by2idu3namex4d1k2r0celona5laycard4s5efoot5gains6seball5ketball8uhaus5yern5b0c1t1va3cg1n2d1e0ats2uty4er2rlin4st0buy5t2f1g1h0arti5i0ble3d1ke2ng0o3o1z2j1lack0friday9ockbuster8g1omberg7ue3m0s1w2n0pparibas9o0ats3ehringer8fa2m1nd2o0k0ing5sch2tik2on4t1utique6x2r0adesco6idgestone9oadway5ker3ther5ussels7s1t1uild0ers6siness6y1zz3v1w1y1z0h3ca0b1fe2l0l1vinklein9m0era3p2non3petown5ital0one8r0avan4ds2e0er0s4s2sa1e1h1ino4t0ering5holic7ba1n1re3c1d1enter4o1rn3f0a1d2g1h0anel2nel4rity4se2t2eap3intai5ristmas6ome4urch5i0priani6rcle4sco3tadel4i0c2y3k1l0aims4eaning6ick2nic1que6othing5ud3ub0med6m1n1o0ach3des3ffee4llege4ogne5m0mbank4unity6pany2re3uter5sec4ndos3struction8ulting7tact3ractors9oking4l1p2rsica5untry4pon0s4rses6pa2r0edit0card4union9icket5own3s1uise0s6u0isinella9v1w1x1y0mru3ou3z2dad1nce3ta1e1ing3sun4y2clk3ds2e0al0er2s3gree4livery5l1oitte5ta3mocrat6ntal2ist5si0gn4v2hl2iamonds6et2gital5rect0ory7scount3ver5h2y2j1k1m1np2o0cs1tor4g1mains5t1wnload7rive4tv2ubai3nlop4pont4rban5vag2r2z2earth3t2c0o2deka3u0cation8e1g1mail3erck5nergy4gineer0ing9terprises10pson4quipment8r0icsson6ni3s0q1tate5t1u0rovision8s2vents5xchange6pert3osed4ress5traspace10fage2il1rwinds6th3mily4n0s2rm0ers5shion4t3edex3edback6rrari3ero6i0delity5o2lm2nal1nce1ial7re0stone6mdale6sh0ing5t0ness6j1k1lickr3ghts4r2orist4wers5y2m1o0o0d1tball6rd1ex2sale4um3undation8x2r0ee1senius7l1ogans4ntier7tr2ujitsu5n0d2rniture7tbol5yi3ga0l0lery3o1up4me0s3p1rden4y2b0iz3d0n2e0a1nt0ing5orge5f1g0ee3h1i0ft0s3ves2ing5l0ass3e1obal2o4m0ail3bh2o1x2n1odaddy5ld0point6f2o0dyear5g0le4p1t1v2p1q1r0ainger5phics5tis4een3ipe3ocery4up4s1t1u0cci3ge2ide2tars5ru3w1y2hair2mburg5ngout5us3bo2dfc0bank7ealth0care8lp1sinki6re1mes5iphop4samitsu7tachi5v2k0t2m1n1ockey4ldings5iday5medepot5goods5s0ense7nda3rse3spital5t0ing5t0els3mail5use3w2r1sbc3t1u0ghes5yatt3undai7ibm2cbc2e1u2d1e0ee3fm2kano4l1m0amat4db2mo0bilien9n0c1dustries8finiti5o2g1k1stitute6urance4e4t0ernational10uit4vestments10o1piranga7q1r0ish4s0maili5t0anbul7t0au2v3jaguar4va3cb2e0ep2tzt3welry6io2ll2m0p2nj2o0bs1urg4t1y2p0morgan6rs3uegos4niper7kaufen5ddi3e0rryhotels6properties14fh2g1h1i0a1ds2m1ndle4tchen5wi3m1n1oeln3matsu5sher5p0mg2n2r0d1ed3uokgroup8w1y0oto4z2la0caixa5mborghini8er3nd0rover6xess5salle5t0ino3robe5w0yer5b1c1ds2ease3clerc5frak4gal2o2xus4gbt3i0dl2fe0insurance9style7ghting6ke2lly3mited4o2ncoln4k2ve1ing5k1lc1p2oan0s3cker3us3l1ndon4tte1o3ve3pl0financial11r1s1t0d0a3u0ndbeck6xe1ury5v1y2ma0drid4if1son4keup4n0agement7go3p1rket0ing3s4riott5shalls7ttel5ba2c0kinsey7d1e0d0ia3et2lbourne7me1orial6n0u2rckmsd7g1h1iami3crosoft7l1ni1t2t0subishi9k1l0b1s2m0a2n1o0bi0le4da2e1i1m1nash3ey2ster5rmon3tgage6scow4to0rcycles9v0ie4p1q1r1s0d2t0n1r2u0seum3ic4v1w1x1y1z2na0b1goya4me2vy3ba2c1e0c1t0bank4flix4work5ustar5w0s2xt0direct7us4f0l2g0o2hk2i0co2ke1on3nja3ssan1y5l1o0kia3rton4w0ruz3tv4p1r0a1w2tt2u1yc2z2obi1server7ffice5kinawa6layan0group9lo3m0ega4ne1g1l0ine5oo2pen3racle3nge4g0anic5igins6saka4tsuka4t2vh3pa0ge2nasonic7ris2s1tners4s1y3y2ccw3e0t2f0izer5g1h0armacy6d1ilips5one2to0graphy6s4ysio5ics1tet2ures6d1n0g1k2oneer5zza4k1l0ace2y0station9umbing5s3m1n0c2ohl2ker3litie5rn2st3r0axi3ess3ime3o0d0uctions8f1gressive8mo2perties3y5tection8u0dential9s1t1ub2w0c2y2qa1pon3uebec3st5racing4dio4e0ad1lestate6tor2y4cipes5d0stone5umbrella9hab3ise0n3t2liance6n0t0als5pair3ort3ublican8st0aurant8view0s5xroth6ich0ardli6oh3l1o1p2o0cks3deo3gers4om3s0vp3u0gby3hr2n2w0e2yukyu6sa0arland6fe0ty4kura4le1on3msclub4ung5ndvik0coromant12ofi4p1rl2s1ve2xo3b0i1s2c0b1haeffler7midt4olarships8ol3ule3warz5ience5ot3d1e0arch3t2cure1ity6ek2lect4ner3rvices6ven3w1x0y3fr2g1h0angrila6rp3ell3ia1ksha5oes2p0ping5uji3w3i0lk2na1gles5te3j1k0i0n2y0pe4l0ing4m0art3ile4n0cf3o0ccer3ial4ftbank4ware6hu2lar2utions7ng1y2y2pa0ce3ort2t3r0l2s1t0ada2ples4r1tebank4farm7c0group6ockholm6rage3e3ream4udio2y3yle4u0cks3pplies3y2ort5rf1gery5zuki5v1watch4iss4x1y0dney4stems6z2tab1ipei4lk2obao4rget4tamotors6r2too4x0i3c0i2d0k2eam2ch0nology8l1masek5nnis4va3f1g1h0d1eater2re6iaa2ckets5enda4ps2res2ol4j0maxx4x2k0maxx5l1m0all4n1o0day3kyo3ols3p1ray3shiba5tal3urs3wn2yota3s3r0ade1ing4ining5vel0ers0insurance16ust3v2t1ube2i1nes3shu4v0s2w1z2ua1bank3s2g1k1nicom3versity8o2ol2ps2s1y1z2va0cations7na1guard7c1e0gas3ntures6risign5mögensberater2ung14sicherung10t2g1i0ajes4deo3g1king4llas4n1p1rgin4sa1ion4va1o3laanderen9n1odka3lvo3te1ing3o2yage5u2wales2mart4ter4ng0gou5tch0es6eather0channel12bcam3er2site5d0ding5ibo2r3f1hoswho6ien2ki2lliamhill9n0dows4e1ners6me2olterskluwer11odside6rk0s2ld3w2s1tc1f3xbox3erox4ihuan4n2xx2yz3yachts4hoo3maxun5ndex5e1odobashi7ga2kohama6u0tube6t1un3za0ppos4ra3ero3ip2m1one3uerich6w2", HE = "ελ1υ2бг1ел3дети4ею2католик6ом3мкд2он1сква6онлайн5рг3рус2ф2сайт3рб3укр3қаз3հայ3ישראל5קום3ابوظبي5رامكو5لاردن4بحرين5جزائر5سعودية6عليان5مغرب5مارات5یران5بارت2زار4يتك3ھارت5تونس4سودان3رية5شبكة4عراق2ب2مان4فلسطين6قطر3كاثوليك6وم3مصر2ليسيا5وريتانيا7قع4همراه5پاکستان7ڀارت4कॉम3नेट3भारत0म्3ोत5संगठन5বাংলা5ভারত2ৰত4ਭਾਰਤ4ભારત4ଭାରତ4இந்தியா6லங்கை6சிங்கப்பூர்11భారత్5ಭಾರತ4ഭാരതം5ලංකා4คอม3ไทย3ລາວ3გე2みんな3アマゾン4クラウド4グーグル4コム2ストア3セール3ファッション6ポイント4世界2中信1国1國1文网3亚马逊3企业2佛山2信息2健康2八卦2公司1益2台湾1灣2商城1店1标2嘉里0大酒店5在线2大拿2天主教3娱乐2家電2广东2微博2慈善2我爱你3手机2招聘2政务1府2新加坡2闻2时尚2書籍2机构2淡马锡3游戏2澳門2点看2移动2组织机构4网址1店1站1络2联通2谷歌2购物2通販2集团2電訊盈科4飞利浦3食品2餐厅2香格里拉3港2닷넷1컴2삼성2한국2", fu = "numeric", hu = "ascii", pu = "alpha", Ts = "asciinumeric", vs = "alphanumeric", mu = "domain", Y_ = "emoji", FE = "scheme", VE = "slashscheme", _c = "whitespace";
function jE(n, e) {
  return n in e || (e[n] = []), e[n];
}
function Ii(n, e, t) {
  e[fu] && (e[Ts] = !0, e[vs] = !0), e[hu] && (e[Ts] = !0, e[pu] = !0), e[Ts] && (e[vs] = !0), e[pu] && (e[vs] = !0), e[vs] && (e[mu] = !0), e[Y_] && (e[mu] = !0);
  for (const i in e) {
    const r = jE(i, t);
    r.indexOf(n) < 0 && r.push(n);
  }
}
function WE(n, e) {
  const t = {};
  for (const i in e)
    e[i].indexOf(n) >= 0 && (t[i] = !0);
  return t;
}
function qt(n = null) {
  this.j = {}, this.jr = [], this.jd = null, this.t = n;
}
qt.groups = {};
qt.prototype = {
  accepts() {
    return !!this.t;
  },
  /**
   * Follow an existing transition from the given input to the next state.
   * Does not mutate.
   * @param {string} input character or token type to transition on
   * @returns {?State<T>} the next state, if any
   */
  go(n) {
    const e = this, t = e.j[n];
    if (t)
      return t;
    for (let i = 0; i < e.jr.length; i++) {
      const r = e.jr[i][0], s = e.jr[i][1];
      if (s && r.test(n))
        return s;
    }
    return e.jd;
  },
  /**
   * Whether the state has a transition for the given input. Set the second
   * argument to true to only look for an exact match (and not a default or
   * regular-expression-based transition)
   * @param {string} input
   * @param {boolean} exactOnly
   */
  has(n, e = !1) {
    return e ? n in this.j : !!this.go(n);
  },
  /**
   * Short for "transition all"; create a transition from the array of items
   * in the given list to the same final resulting state.
   * @param {string | string[]} inputs Group of inputs to transition on
   * @param {Transition<T> | State<T>} [next] Transition options
   * @param {Flags} [flags] Collections flags to add token to
   * @param {Collections<T>} [groups] Master list of token groups
   */
  ta(n, e, t, i) {
    for (let r = 0; r < n.length; r++)
      this.tt(n[r], e, t, i);
  },
  /**
   * Short for "take regexp transition"; defines a transition for this state
   * when it encounters a token which matches the given regular expression
   * @param {RegExp} regexp Regular expression transition (populate first)
   * @param {T | State<T>} [next] Transition options
   * @param {Flags} [flags] Collections flags to add token to
   * @param {Collections<T>} [groups] Master list of token groups
   * @returns {State<T>} taken after the given input
   */
  tr(n, e, t, i) {
    i = i || qt.groups;
    let r;
    return e && e.j ? r = e : (r = new qt(e), t && i && Ii(e, t, i)), this.jr.push([n, r]), r;
  },
  /**
   * Short for "take transitions", will take as many sequential transitions as
   * the length of the given input and returns the
   * resulting final state.
   * @param {string | string[]} input
   * @param {T | State<T>} [next] Transition options
   * @param {Flags} [flags] Collections flags to add token to
   * @param {Collections<T>} [groups] Master list of token groups
   * @returns {State<T>} taken after the given input
   */
  ts(n, e, t, i) {
    let r = this;
    const s = n.length;
    if (!s)
      return r;
    for (let o = 0; o < s - 1; o++)
      r = r.tt(n[o]);
    return r.tt(n[s - 1], e, t, i);
  },
  /**
   * Short for "take transition", this is a method for building/working with
   * state machines.
   *
   * If a state already exists for the given input, returns it.
   *
   * If a token is specified, that state will emit that token when reached by
   * the linkify engine.
   *
   * If no state exists, it will be initialized with some default transitions
   * that resemble existing default transitions.
   *
   * If a state is given for the second argument, that state will be
   * transitioned to on the given input regardless of what that input
   * previously did.
   *
   * Specify a token group flags to define groups that this token belongs to.
   * The token will be added to corresponding entires in the given groups
   * object.
   *
   * @param {string} input character, token type to transition on
   * @param {T | State<T>} [next] Transition options
   * @param {Flags} [flags] Collections flags to add token to
   * @param {Collections<T>} [groups] Master list of groups
   * @returns {State<T>} taken after the given input
   */
  tt(n, e, t, i) {
    i = i || qt.groups;
    const r = this;
    if (e && e.j)
      return r.j[n] = e, e;
    const s = e;
    let o, a = r.go(n);
    if (a ? (o = new qt(), Object.assign(o.j, a.j), o.jr.push.apply(o.jr, a.jr), o.jd = a.jd, o.t = a.t) : o = new qt(), s) {
      if (i)
        if (o.t && typeof o.t == "string") {
          const l = Object.assign(WE(o.t, i), t);
          Ii(s, l, i);
        } else t && Ii(s, t, i);
      o.t = s;
    }
    return r.j[n] = o, o;
  }
};
const ke = (n, e, t, i, r) => n.ta(e, t, i, r), Ye = (n, e, t, i, r) => n.tr(e, t, i, r), up = (n, e, t, i, r) => n.ts(e, t, i, r), U = (n, e, t, i, r) => n.tt(e, t, i, r), Gn = "WORD", gu = "UWORD", Z_ = "ASCIINUMERICAL", Q_ = "ALPHANUMERICAL", Ks = "LOCALHOST", _u = "TLD", bu = "UTLD", Zo = "SCHEME", fr = "SLASH_SCHEME", Ed = "NUM", vu = "WS", Cd = "NL", As = "OPENBRACE", Ms = "CLOSEBRACE", ka = "OPENBRACKET", Sa = "CLOSEBRACKET", Ea = "OPENPAREN", Ca = "CLOSEPAREN", Ta = "OPENANGLEBRACKET", Aa = "CLOSEANGLEBRACKET", Ma = "FULLWIDTHLEFTPAREN", Oa = "FULLWIDTHRIGHTPAREN", Na = "LEFTCORNERBRACKET", La = "RIGHTCORNERBRACKET", Ra = "LEFTWHITECORNERBRACKET", Ia = "RIGHTWHITECORNERBRACKET", Pa = "FULLWIDTHLESSTHAN", Da = "FULLWIDTHGREATERTHAN", $a = "AMPERSAND", za = "APOSTROPHE", Ba = "ASTERISK", ui = "AT", Ha = "BACKSLASH", Fa = "BACKTICK", Va = "CARET", pi = "COLON", Td = "COMMA", ja = "DOLLAR", Pn = "DOT", Wa = "EQUALS", Ad = "EXCLAMATION", un = "HYPHEN", Os = "PERCENT", Ua = "PIPE", Ka = "PLUS", qa = "POUND", Ns = "QUERY", Md = "QUOTE", e0 = "FULLWIDTHMIDDLEDOT", Od = "SEMI", Dn = "SLASH", Ls = "TILDE", Ga = "UNDERSCORE", t0 = "EMOJI", Ja = "SYM";
var n0 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  ALPHANUMERICAL: Q_,
  AMPERSAND: $a,
  APOSTROPHE: za,
  ASCIINUMERICAL: Z_,
  ASTERISK: Ba,
  AT: ui,
  BACKSLASH: Ha,
  BACKTICK: Fa,
  CARET: Va,
  CLOSEANGLEBRACKET: Aa,
  CLOSEBRACE: Ms,
  CLOSEBRACKET: Sa,
  CLOSEPAREN: Ca,
  COLON: pi,
  COMMA: Td,
  DOLLAR: ja,
  DOT: Pn,
  EMOJI: t0,
  EQUALS: Wa,
  EXCLAMATION: Ad,
  FULLWIDTHGREATERTHAN: Da,
  FULLWIDTHLEFTPAREN: Ma,
  FULLWIDTHLESSTHAN: Pa,
  FULLWIDTHMIDDLEDOT: e0,
  FULLWIDTHRIGHTPAREN: Oa,
  HYPHEN: un,
  LEFTCORNERBRACKET: Na,
  LEFTWHITECORNERBRACKET: Ra,
  LOCALHOST: Ks,
  NL: Cd,
  NUM: Ed,
  OPENANGLEBRACKET: Ta,
  OPENBRACE: As,
  OPENBRACKET: ka,
  OPENPAREN: Ea,
  PERCENT: Os,
  PIPE: Ua,
  PLUS: Ka,
  POUND: qa,
  QUERY: Ns,
  QUOTE: Md,
  RIGHTCORNERBRACKET: La,
  RIGHTWHITECORNERBRACKET: Ia,
  SCHEME: Zo,
  SEMI: Od,
  SLASH: Dn,
  SLASH_SCHEME: fr,
  SYM: Ja,
  TILDE: Ls,
  TLD: _u,
  UNDERSCORE: Ga,
  UTLD: bu,
  UWORD: gu,
  WORD: Gn,
  WS: vu
});
const Un = /[a-z]/, as = new RegExp("\\p{L}", "u"), bc = new RegExp("\\p{Emoji}", "u"), Kn = /\d/, vc = /\s/, dp = "\r", yc = `
`, UE = "️", KE = "‍", xc = "￼";
let $o = null, zo = null;
function qE(n = []) {
  const e = {};
  qt.groups = e;
  const t = new qt();
  $o == null && ($o = fp(BE)), zo == null && (zo = fp(HE)), U(t, "'", za), U(t, "{", As), U(t, "}", Ms), U(t, "[", ka), U(t, "]", Sa), U(t, "(", Ea), U(t, ")", Ca), U(t, "<", Ta), U(t, ">", Aa), U(t, "（", Ma), U(t, "）", Oa), U(t, "「", Na), U(t, "」", La), U(t, "『", Ra), U(t, "』", Ia), U(t, "＜", Pa), U(t, "＞", Da), U(t, "&", $a), U(t, "*", Ba), U(t, "@", ui), U(t, "`", Fa), U(t, "^", Va), U(t, ":", pi), U(t, ",", Td), U(t, "$", ja), U(t, ".", Pn), U(t, "=", Wa), U(t, "!", Ad), U(t, "-", un), U(t, "%", Os), U(t, "|", Ua), U(t, "+", Ka), U(t, "#", qa), U(t, "?", Ns), U(t, '"', Md), U(t, "/", Dn), U(t, ";", Od), U(t, "~", Ls), U(t, "_", Ga), U(t, "\\", Ha), U(t, "・", e0);
  const i = Ye(t, Kn, Ed, {
    [fu]: !0
  });
  Ye(i, Kn, i);
  const r = Ye(i, Un, Z_, {
    [Ts]: !0
  }), s = Ye(i, as, Q_, {
    [vs]: !0
  }), o = Ye(t, Un, Gn, {
    [hu]: !0
  });
  Ye(o, Kn, r), Ye(o, Un, o), Ye(r, Kn, r), Ye(r, Un, r);
  const a = Ye(t, as, gu, {
    [pu]: !0
  });
  Ye(a, Un), Ye(a, Kn, s), Ye(a, as, a), Ye(s, Kn, s), Ye(s, Un), Ye(s, as, s);
  const l = U(t, yc, Cd, {
    [_c]: !0
  }), c = U(t, dp, vu, {
    [_c]: !0
  }), u = Ye(t, vc, vu, {
    [_c]: !0
  });
  U(t, xc, u), U(c, yc, l), U(c, xc, u), Ye(c, vc, u), U(u, dp), U(u, yc), Ye(u, vc, u), U(u, xc, u);
  const d = Ye(t, bc, t0, {
    [Y_]: !0
  });
  U(d, "#"), Ye(d, bc, d), U(d, UE, d);
  const f = U(d, KE);
  U(f, "#"), Ye(f, bc, d);
  const h = [[Un, o], [Kn, r]], p = [[Un, null], [as, a], [Kn, s]];
  for (let b = 0; b < $o.length; b++)
    oi(t, $o[b], _u, Gn, h);
  for (let b = 0; b < zo.length; b++)
    oi(t, zo[b], bu, gu, p);
  Ii(_u, {
    tld: !0,
    ascii: !0
  }, e), Ii(bu, {
    utld: !0,
    alpha: !0
  }, e), oi(t, "file", Zo, Gn, h), oi(t, "mailto", Zo, Gn, h), oi(t, "http", fr, Gn, h), oi(t, "https", fr, Gn, h), oi(t, "ftp", fr, Gn, h), oi(t, "ftps", fr, Gn, h), Ii(Zo, {
    scheme: !0,
    ascii: !0
  }, e), Ii(fr, {
    slashscheme: !0,
    ascii: !0
  }, e), n = n.sort((b, m) => b[0] > m[0] ? 1 : -1);
  for (let b = 0; b < n.length; b++) {
    const m = n[b][0], v = n[b][1] ? {
      [FE]: !0
    } : {
      [VE]: !0
    };
    m.indexOf("-") >= 0 ? v[mu] = !0 : Un.test(m) ? Kn.test(m) ? v[Ts] = !0 : v[hu] = !0 : v[fu] = !0, up(t, m, m, v);
  }
  return up(t, "localhost", Ks, {
    ascii: !0
  }), t.jd = new qt(Ja), {
    start: t,
    tokens: Object.assign({
      groups: e
    }, n0)
  };
}
function i0(n, e) {
  const t = GE(e.replace(/[A-Z]/g, (a) => a.toLowerCase())), i = t.length, r = [];
  let s = 0, o = 0;
  for (; o < i; ) {
    let a = n, l = null, c = 0, u = null, d = -1, f = -1;
    for (; o < i && (l = a.go(t[o])); )
      a = l, a.accepts() ? (d = 0, f = 0, u = a) : d >= 0 && (d += t[o].length, f++), c += t[o].length, s += t[o].length, o++;
    s -= d, o -= f, c -= d, r.push({
      t: u.t,
      // token type/name
      v: e.slice(s - c, s),
      // string value
      s: s - c,
      // start index
      e: s
      // end index (excluding)
    });
  }
  return r;
}
function GE(n) {
  const e = [], t = n.length;
  let i = 0;
  for (; i < t; ) {
    let r = n.charCodeAt(i), s, o = r < 55296 || r > 56319 || i + 1 === t || (s = n.charCodeAt(i + 1)) < 56320 || s > 57343 ? n[i] : n.slice(i, i + 2);
    e.push(o), i += o.length;
  }
  return e;
}
function oi(n, e, t, i, r) {
  let s;
  const o = e.length;
  for (let a = 0; a < o - 1; a++) {
    const l = e[a];
    n.j[l] ? s = n.j[l] : (s = new qt(i), s.jr = r.slice(), n.j[l] = s), n = s;
  }
  return s = new qt(t), s.jr = r.slice(), n.j[e[o - 1]] = s, s;
}
function fp(n) {
  const e = [], t = [];
  let i = 0, r = "0123456789";
  for (; i < n.length; ) {
    let s = 0;
    for (; r.indexOf(n[i + s]) >= 0; )
      s++;
    if (s > 0) {
      e.push(t.join(""));
      for (let o = parseInt(n.substring(i, i + s), 10); o > 0; o--)
        t.pop();
      i += s;
    } else
      t.push(n[i]), i++;
  }
  return e;
}
const qs = {
  defaultProtocol: "http",
  events: null,
  format: hp,
  formatHref: hp,
  nl2br: !1,
  tagName: "a",
  target: null,
  rel: null,
  validate: !0,
  truncate: 1 / 0,
  className: null,
  attributes: null,
  ignoreTags: [],
  render: null
};
function Nd(n, e = null) {
  let t = Object.assign({}, qs);
  n && (t = Object.assign(t, n instanceof Nd ? n.o : n));
  const i = t.ignoreTags, r = [];
  for (let s = 0; s < i.length; s++)
    r.push(i[s].toUpperCase());
  this.o = t, e && (this.defaultRender = e), this.ignoreTags = r;
}
Nd.prototype = {
  o: qs,
  /**
   * @type string[]
   */
  ignoreTags: [],
  /**
   * @param {IntermediateRepresentation} ir
   * @returns {any}
   */
  defaultRender(n) {
    return n;
  },
  /**
   * Returns true or false based on whether a token should be displayed as a
   * link based on the user options.
   * @param {MultiToken} token
   * @returns {boolean}
   */
  check(n) {
    return this.get("validate", n.toString(), n);
  },
  // Private methods
  /**
   * Resolve an option's value based on the value of the option and the given
   * params. If operator and token are specified and the target option is
   * callable, automatically calls the function with the given argument.
   * @template {keyof Opts} K
   * @param {K} key Name of option to use
   * @param {string} [operator] will be passed to the target option if it's a
   * function. If not specified, RAW function value gets returned
   * @param {MultiToken} [token] The token from linkify.tokenize
   * @returns {Opts[K] | any}
   */
  get(n, e, t) {
    const i = e != null;
    let r = this.o[n];
    return r && (typeof r == "object" ? (r = t.t in r ? r[t.t] : qs[n], typeof r == "function" && i && (r = r(e, t))) : typeof r == "function" && i && (r = r(e, t.t, t)), r);
  },
  /**
   * @template {keyof Opts} L
   * @param {L} key Name of options object to use
   * @param {string} [operator]
   * @param {MultiToken} [token]
   * @returns {Opts[L] | any}
   */
  getObj(n, e, t) {
    let i = this.o[n];
    return typeof i == "function" && e != null && (i = i(e, t.t, t)), i;
  },
  /**
   * Convert the given token to a rendered element that may be added to the
   * calling-interface's DOM
   * @param {MultiToken} token Token to render to an HTML element
   * @returns {any} Render result; e.g., HTML string, DOM element, React
   *   Component, etc.
   */
  render(n) {
    const e = n.render(this);
    return (this.get("render", null, n) || this.defaultRender)(e, n.t, n);
  }
};
function hp(n) {
  return n;
}
function r0(n, e) {
  this.t = "token", this.v = n, this.tk = e;
}
r0.prototype = {
  isLink: !1,
  /**
   * Return the string this token represents.
   * @return {string}
   */
  toString() {
    return this.v;
  },
  /**
   * What should the value for this token be in the `href` HTML attribute?
   * Returns the `.toString` value by default.
   * @param {string} [scheme]
   * @return {string}
   */
  toHref(n) {
    return this.toString();
  },
  /**
   * @param {Options} options Formatting options
   * @returns {string}
   */
  toFormattedString(n) {
    const e = this.toString(), t = n.get("truncate", e, this), i = n.get("format", e, this);
    return t && i.length > t ? i.substring(0, t) + "…" : i;
  },
  /**
   *
   * @param {Options} options
   * @returns {string}
   */
  toFormattedHref(n) {
    return n.get("formatHref", this.toHref(n.get("defaultProtocol")), this);
  },
  /**
   * The start index of this token in the original input string
   * @returns {number}
   */
  startIndex() {
    return this.tk[0].s;
  },
  /**
   * The end index of this token in the original input string (up to this
   * index but not including it)
   * @returns {number}
   */
  endIndex() {
    return this.tk[this.tk.length - 1].e;
  },
  /**
  	Returns an object  of relevant values for this token, which includes keys
  	* type - Kind of token ('url', 'email', etc.)
  	* value - Original text
  	* href - The value that should be added to the anchor tag's href
  		attribute
  		@method toObject
  	@param {string} [protocol] `'http'` by default
  */
  toObject(n = qs.defaultProtocol) {
    return {
      type: this.t,
      value: this.toString(),
      isLink: this.isLink,
      href: this.toHref(n),
      start: this.startIndex(),
      end: this.endIndex()
    };
  },
  /**
   *
   * @param {Options} options Formatting option
   */
  toFormattedObject(n) {
    return {
      type: this.t,
      value: this.toFormattedString(n),
      isLink: this.isLink,
      href: this.toFormattedHref(n),
      start: this.startIndex(),
      end: this.endIndex()
    };
  },
  /**
   * Whether this token should be rendered as a link according to the given options
   * @param {Options} options
   * @returns {boolean}
   */
  validate(n) {
    return n.get("validate", this.toString(), this);
  },
  /**
   * Return an object that represents how this link should be rendered.
   * @param {Options} options Formattinng options
   */
  render(n) {
    const e = this, t = this.toHref(n.get("defaultProtocol")), i = n.get("formatHref", t, this), r = n.get("tagName", t, e), s = this.toFormattedString(n), o = {}, a = n.get("className", t, e), l = n.get("target", t, e), c = n.get("rel", t, e), u = n.getObj("attributes", t, e), d = n.getObj("events", t, e);
    return o.href = i, a && (o.class = a), l && (o.target = l), c && (o.rel = c), u && Object.assign(o, u), {
      tagName: r,
      attributes: o,
      content: s,
      eventListeners: d
    };
  }
};
function wl(n, e) {
  class t extends r0 {
    constructor(r, s) {
      super(r, s), this.t = n;
    }
  }
  for (const i in e)
    t.prototype[i] = e[i];
  return t.t = n, t;
}
const pp = wl("email", {
  isLink: !0,
  toHref() {
    return "mailto:" + this.toString();
  }
}), mp = wl("text"), JE = wl("nl"), Bo = wl("url", {
  isLink: !0,
  /**
  	Lowercases relevant parts of the domain and adds the protocol if
  	required. Note that this will not escape unsafe HTML characters in the
  	URL.
  		@param {string} [scheme] default scheme (e.g., 'https')
  	@return {string} the full href
  */
  toHref(n = qs.defaultProtocol) {
    return this.hasProtocol() ? this.v : `${n}://${this.v}`;
  },
  /**
   * Check whether this URL token has a protocol
   * @return {boolean}
   */
  hasProtocol() {
    const n = this.tk;
    return n.length >= 2 && n[0].t !== Ks && n[1].t === pi;
  }
}), cn = (n) => new qt(n);
function XE({
  groups: n
}) {
  const e = n.domain.concat([$a, Ba, ui, Ha, Fa, Va, ja, Wa, un, Ed, Os, Ua, Ka, qa, Dn, Ja, Ls, Ga]), t = [za, pi, Td, Pn, Ad, Os, Ns, Md, Od, Ta, Aa, As, Ms, Sa, ka, Ea, Ca, Ma, Oa, Na, La, Ra, Ia, Pa, Da], i = [$a, za, Ba, Ha, Fa, Va, ja, Wa, un, As, Ms, Os, Ua, Ka, qa, Ns, Dn, Ja, Ls, Ga], r = cn(), s = U(r, Ls);
  ke(s, i, s), ke(s, n.domain, s);
  const o = cn(), a = cn(), l = cn();
  ke(r, n.domain, o), ke(r, n.scheme, a), ke(r, n.slashscheme, l), ke(o, i, s), ke(o, n.domain, o);
  const c = U(o, ui);
  U(s, ui, c), U(a, ui, c), U(l, ui, c);
  const u = U(s, Pn);
  ke(u, i, s), ke(u, n.domain, s);
  const d = cn();
  ke(c, n.domain, d), ke(d, n.domain, d);
  const f = U(d, Pn);
  ke(f, n.domain, d);
  const h = cn(pp);
  ke(f, n.tld, h), ke(f, n.utld, h), U(c, Ks, h);
  const p = U(d, un);
  U(p, un, p), ke(p, n.domain, d), ke(h, n.domain, d), U(h, Pn, f), U(h, un, p);
  const b = U(h, pi);
  ke(b, n.numeric, pp);
  const m = U(o, un), g = U(o, Pn);
  U(m, un, m), ke(m, n.domain, o), ke(g, i, s), ke(g, n.domain, o);
  const v = cn(Bo);
  ke(g, n.tld, v), ke(g, n.utld, v), ke(v, n.domain, o), ke(v, i, s), U(v, Pn, g), U(v, un, m), U(v, ui, c);
  const x = U(v, pi), w = cn(Bo);
  ke(x, n.numeric, w);
  const E = cn(Bo), k = cn();
  ke(E, e, E), ke(E, t, k), ke(k, e, E), ke(k, t, k), U(v, Dn, E), U(w, Dn, E);
  const S = U(a, pi), y = U(l, pi), T = U(y, Dn), _ = U(T, Dn);
  ke(a, n.domain, o), U(a, Pn, g), U(a, un, m), ke(l, n.domain, o), U(l, Pn, g), U(l, un, m), ke(S, n.domain, E), U(S, Dn, E), U(S, Ns, E), ke(_, n.domain, E), ke(_, e, E), U(_, Dn, E);
  const C = [
    [As, Ms],
    // {}
    [ka, Sa],
    // []
    [Ea, Ca],
    // ()
    [Ta, Aa],
    // <>
    [Ma, Oa],
    // （）
    [Na, La],
    // 「」
    [Ra, Ia],
    // 『』
    [Pa, Da]
    // ＜＞
  ];
  for (let M = 0; M < C.length; M++) {
    const [H, D] = C[M], F = U(E, H);
    U(k, H, F), U(F, D, E);
    const W = cn(Bo);
    ke(F, e, W);
    const G = cn();
    ke(F, t), ke(W, e, W), ke(W, t, G), ke(G, e, W), ke(G, t, G), U(W, D, E), U(G, D, E);
  }
  return U(r, Ks, v), U(r, Cd, JE), {
    start: r,
    tokens: n0
  };
}
function YE(n, e, t) {
  let i = t.length, r = 0, s = [], o = [];
  for (; r < i; ) {
    let a = n, l = null, c = null, u = 0, d = null, f = -1;
    for (; r < i && !(l = a.go(t[r].t)); )
      o.push(t[r++]);
    for (; r < i && (c = l || a.go(t[r].t)); )
      l = null, a = c, a.accepts() ? (f = 0, d = a) : f >= 0 && f++, r++, u++;
    if (f < 0)
      r -= u, r < i && (o.push(t[r]), r++);
    else {
      o.length > 0 && (s.push(wc(mp, e, o)), o = []), r -= f, u -= f;
      const h = d.t, p = t.slice(r - u, r);
      s.push(wc(h, e, p));
    }
  }
  return o.length > 0 && s.push(wc(mp, e, o)), s;
}
function wc(n, e, t) {
  const i = t[0].s, r = t[t.length - 1].e, s = e.slice(i, r);
  return new n(s, t);
}
const ZE = typeof console < "u" && console && console.warn || (() => {
}), QE = "until manual call of linkify.init(). Register all schemes and plugins before invoking linkify the first time.", Ke = {
  scanner: null,
  parser: null,
  tokenQueue: [],
  pluginQueue: [],
  customSchemes: [],
  initialized: !1
};
function eC() {
  return qt.groups = {}, Ke.scanner = null, Ke.parser = null, Ke.tokenQueue = [], Ke.pluginQueue = [], Ke.customSchemes = [], Ke.initialized = !1, Ke;
}
function gp(n, e = !1) {
  if (Ke.initialized && ZE(`linkifyjs: already initialized - will not register custom scheme "${n}" ${QE}`), !/^[0-9a-z]+(-[0-9a-z]+)*$/.test(n))
    throw new Error(`linkifyjs: incorrect scheme format.
1. Must only contain digits, lowercase ASCII letters or "-"
2. Cannot start or end with "-"
3. "-" cannot repeat`);
  Ke.customSchemes.push([n, e]);
}
function tC() {
  Ke.scanner = qE(Ke.customSchemes);
  for (let n = 0; n < Ke.tokenQueue.length; n++)
    Ke.tokenQueue[n][1]({
      scanner: Ke.scanner
    });
  Ke.parser = XE(Ke.scanner.tokens);
  for (let n = 0; n < Ke.pluginQueue.length; n++)
    Ke.pluginQueue[n][1]({
      scanner: Ke.scanner,
      parser: Ke.parser
    });
  return Ke.initialized = !0, Ke;
}
function Ld(n) {
  return Ke.initialized || tC(), YE(Ke.parser.start, n, i0(Ke.scanner.start, n));
}
Ld.scan = i0;
function s0(n, e = null, t = null) {
  if (e && typeof e == "object") {
    if (t)
      throw Error(`linkifyjs: Invalid link type ${e}; must be a string`);
    t = e, e = null;
  }
  const i = new Nd(t), r = Ld(n), s = [];
  for (let o = 0; o < r.length; o++) {
    const a = r[o];
    a.isLink && (!e || a.t === e) && i.check(a) && s.push(a.toFormattedObject(i));
  }
  return s;
}
var Rd = "[\0-   ᠎ -\u2029 　]", nC = new RegExp(Rd), iC = new RegExp(`${Rd}$`), rC = new RegExp(Rd, "g");
function sC(n) {
  return n.length === 1 ? n[0].isLink : n.length === 3 && n[1].isLink ? ["()", "[]"].includes(n[0].value + n[2].value) : !1;
}
function oC(n) {
  return new Je({
    key: new dt("autolink"),
    appendTransaction: (e, t, i) => {
      const r = e.some((c) => c.docChanged) && !t.doc.eq(i.doc), s = e.some((c) => c.getMeta("preventAutolink"));
      if (!r || s)
        return;
      const { tr: o } = i, a = ed(t.doc, [...e]);
      if (cd(a).forEach(({ newRange: c }) => {
        const u = Rg(i.doc, c, (h) => h.isTextblock);
        let d, f;
        if (u.length > 1)
          d = u[0], f = i.doc.textBetween(
            d.pos,
            d.pos + d.node.nodeSize,
            void 0,
            " "
          );
        else if (u.length) {
          const h = i.doc.textBetween(c.from, c.to, " ", " ");
          if (!iC.test(h))
            return;
          d = u[0], f = i.doc.textBetween(d.pos, c.to, void 0, " ");
        }
        if (d && f) {
          const h = f.split(nC).filter(Boolean);
          if (h.length <= 0)
            return !1;
          const p = h[h.length - 1], b = d.pos + f.lastIndexOf(p);
          if (!p)
            return !1;
          const m = Ld(p).map((g) => g.toObject(n.defaultProtocol));
          if (!sC(m))
            return !1;
          m.filter((g) => g.isLink).map((g) => ({
            ...g,
            from: b + g.start + 1,
            to: b + g.end + 1
          })).filter((g) => i.schema.marks.code ? !i.doc.rangeHasMark(g.from, g.to, i.schema.marks.code) : !0).filter((g) => n.validate(g.value)).filter((g) => n.shouldAutoLink(g.value)).forEach((g) => {
            gl(g.from, g.to, i.doc).some((v) => v.mark.type === n.type) || o.addMark(
              g.from,
              g.to,
              n.type.create({
                href: g.href
              })
            );
          });
        }
      }), !!o.steps.length)
        return o;
    }
  });
}
function aC(n) {
  return new Je({
    key: new dt("handleClickLink"),
    props: {
      handleClick: (e, t, i) => {
        var r, s;
        if (i.button !== 0 || !e.editable)
          return !1;
        let o = null;
        if (i.target instanceof HTMLAnchorElement)
          o = i.target;
        else {
          let u = i.target;
          const d = [];
          for (; u.nodeName !== "DIV"; )
            d.push(u), u = u.parentNode;
          o = d.find((f) => f.nodeName === "A");
        }
        if (!o)
          return !1;
        const a = ld(e.state, n.type.name), l = (r = o == null ? void 0 : o.href) != null ? r : a.href, c = (s = o == null ? void 0 : o.target) != null ? s : a.target;
        return n.enableClickSelection && n.editor.commands.extendMarkRange(n.type.name), o && l ? (window.open(l, c), !0) : !1;
      }
    }
  });
}
function lC(n) {
  return new Je({
    key: new dt("handlePasteLink"),
    props: {
      handlePaste: (e, t, i) => {
        const { state: r } = e, { selection: s } = r, { empty: o } = s;
        if (o)
          return !1;
        let a = "";
        i.content.forEach((c) => {
          a += c.textContent;
        });
        const l = s0(a, { defaultProtocol: n.defaultProtocol }).find(
          (c) => c.isLink && c.value === a
        );
        return !a || !l ? !1 : n.editor.commands.setMark(n.type, {
          href: l.href
        });
      }
    }
  });
}
function Mi(n, e) {
  const t = ["http", "https", "ftp", "ftps", "mailto", "tel", "callto", "sms", "cid", "xmpp"];
  return e && e.forEach((i) => {
    const r = typeof i == "string" ? i : i.scheme;
    r && t.push(r);
  }), !n || n.replace(rC, "").match(
    new RegExp(
      // eslint-disable-next-line no-useless-escape
      `^(?:(?:${t.join("|")}):|[^a-z]|[a-z0-9+.-]+(?:[^a-z+.-:]|$))`,
      "i"
    )
  );
}
var cC = nn.create({
  name: "link",
  priority: 1e3,
  keepOnSplit: !1,
  exitable: !0,
  onCreate() {
    this.options.validate && !this.options.shouldAutoLink && (this.options.shouldAutoLink = this.options.validate, console.warn("The `validate` option is deprecated. Rename to the `shouldAutoLink` option instead.")), this.options.protocols.forEach((n) => {
      if (typeof n == "string") {
        gp(n);
        return;
      }
      gp(n.scheme, n.optionalSlashes);
    });
  },
  onDestroy() {
    eC();
  },
  inclusive() {
    return this.options.autolink;
  },
  addOptions() {
    return {
      openOnClick: !0,
      enableClickSelection: !1,
      linkOnPaste: !0,
      autolink: !0,
      protocols: [],
      defaultProtocol: "http",
      HTMLAttributes: {
        target: "_blank",
        rel: "noopener noreferrer nofollow",
        class: null
      },
      isAllowedUri: (n, e) => !!Mi(n, e.protocols),
      validate: (n) => !!n,
      shouldAutoLink: (n) => !!n
    };
  },
  addAttributes() {
    return {
      href: {
        default: null,
        parseHTML(n) {
          return n.getAttribute("href");
        }
      },
      target: {
        default: this.options.HTMLAttributes.target
      },
      rel: {
        default: this.options.HTMLAttributes.rel
      },
      class: {
        default: this.options.HTMLAttributes.class
      }
    };
  },
  parseHTML() {
    return [
      {
        tag: "a[href]",
        getAttrs: (n) => {
          const e = n.getAttribute("href");
          return !e || !this.options.isAllowedUri(e, {
            defaultValidate: (t) => !!Mi(t, this.options.protocols),
            protocols: this.options.protocols,
            defaultProtocol: this.options.defaultProtocol
          }) ? !1 : null;
        }
      }
    ];
  },
  renderHTML({ HTMLAttributes: n }) {
    return this.options.isAllowedUri(n.href, {
      defaultValidate: (e) => !!Mi(e, this.options.protocols),
      protocols: this.options.protocols,
      defaultProtocol: this.options.defaultProtocol
    }) ? ["a", Ce(this.options.HTMLAttributes, n), 0] : ["a", Ce(this.options.HTMLAttributes, { ...n, href: "" }), 0];
  },
  addCommands() {
    return {
      setLink: (n) => ({ chain: e }) => {
        const { href: t } = n;
        return this.options.isAllowedUri(t, {
          defaultValidate: (i) => !!Mi(i, this.options.protocols),
          protocols: this.options.protocols,
          defaultProtocol: this.options.defaultProtocol
        }) ? e().setMark(this.name, n).setMeta("preventAutolink", !0).run() : !1;
      },
      toggleLink: (n) => ({ chain: e }) => {
        const { href: t } = n || {};
        return t && !this.options.isAllowedUri(t, {
          defaultValidate: (i) => !!Mi(i, this.options.protocols),
          protocols: this.options.protocols,
          defaultProtocol: this.options.defaultProtocol
        }) ? !1 : e().toggleMark(this.name, n, { extendEmptyMarkRange: !0 }).setMeta("preventAutolink", !0).run();
      },
      unsetLink: () => ({ chain: n }) => n().unsetMark(this.name, { extendEmptyMarkRange: !0 }).setMeta("preventAutolink", !0).run()
    };
  },
  addPasteRules() {
    return [
      Xi({
        find: (n) => {
          const e = [];
          if (n) {
            const { protocols: t, defaultProtocol: i } = this.options, r = s0(n).filter(
              (s) => s.isLink && this.options.isAllowedUri(s.value, {
                defaultValidate: (o) => !!Mi(o, t),
                protocols: t,
                defaultProtocol: i
              })
            );
            r.length && r.forEach(
              (s) => e.push({
                text: s.value,
                data: {
                  href: s.href
                },
                index: s.start
              })
            );
          }
          return e;
        },
        type: this.type,
        getAttributes: (n) => {
          var e;
          return {
            href: (e = n.data) == null ? void 0 : e.href
          };
        }
      })
    ];
  },
  addProseMirrorPlugins() {
    const n = [], { protocols: e, defaultProtocol: t } = this.options;
    return this.options.autolink && n.push(
      oC({
        type: this.type,
        defaultProtocol: this.options.defaultProtocol,
        validate: (i) => this.options.isAllowedUri(i, {
          defaultValidate: (r) => !!Mi(r, e),
          protocols: e,
          defaultProtocol: t
        }),
        shouldAutoLink: this.options.shouldAutoLink
      })
    ), this.options.openOnClick === !0 && n.push(
      aC({
        type: this.type,
        editor: this.editor,
        enableClickSelection: this.options.enableClickSelection
      })
    ), this.options.linkOnPaste && n.push(
      lC({
        editor: this.editor,
        defaultProtocol: this.options.defaultProtocol,
        type: this.type
      })
    ), n;
  }
});
const uC = cC.extend({
  addOptions() {
    var n;
    return {
      ...(n = this.parent) == null ? void 0 : n.call(this),
      shortcutHandler: void 0
    };
  },
  addAttributes() {
    return {
      href: {
        default: null,
        parseHTML(n) {
          return n.getAttribute("href");
        }
      },
      target: {
        default: null
      },
      title: {
        default: null
      },
      rel: {
        default: null
      },
      class: {
        default: null
      },
      "data-inline": {
        default: "true",
        renderHTML: () => null
      }
    };
  },
  parseHTML() {
    return [
      {
        tag: "a:not([data-mt-rich-text-editor-block])",
        getAttrs: (n) => {
          if (!(n instanceof HTMLElement))
            return !1;
          const e = {};
          return Array.from(n.attributes).forEach((t) => {
            e[t.name] = t.value;
          }), {
            HTMLAttributes: e,
            "data-inline": n.getAttribute("data-inline")
          };
        }
      }
    ];
  },
  renderHTML({ HTMLAttributes: n }) {
    const { HTMLAttributes: e = {}, ...t } = n;
    return ["a", { ...e, ...t, "data-inline": void 0 }, 0];
  },
  addKeyboardShortcuts() {
    return {
      "Mod-k": () => {
        var n, e;
        return (e = (n = this.options).shortcutHandler) == null || e.call(n), !0;
      }
    };
  },
  addCommands() {
    var n;
    return {
      ...(n = this.parent) == null ? void 0 : n.call(this),
      setInlineLinkShortcutHandler: (e) => () => {
        this.options.shortcutHandler = e;
      }
    };
  }
});
var dC = Ie.create({
  name: "paragraph",
  priority: 1e3,
  addOptions() {
    return {
      HTMLAttributes: {}
    };
  },
  group: "block",
  content: "inline*",
  parseHTML() {
    return [{ tag: "p" }];
  },
  renderHTML({ HTMLAttributes: n }) {
    return ["p", Ce(this.options.HTMLAttributes, n), 0];
  },
  addCommands() {
    return {
      setParagraph: () => ({ commands: n }) => n.setNode(this.name)
    };
  },
  addKeyboardShortcuts() {
    return {
      "Mod-Alt-0": () => this.editor.commands.setParagraph()
    };
  }
});
const fC = dC.extend({
  name: "paragraph",
  priority: 1e3,
  group: "block",
  content: "inline*",
  addOptions() {
    return {
      HTMLAttributes: {}
    };
  },
  parseHTML() {
    return [{ tag: "p" }];
  },
  renderHTML({ node: n, HTMLAttributes: e }) {
    const { MTRichTextEditorHTMLAttributes: t, textAlign: i, ...r } = n.attrs;
    return ["p", Ce(this.options.HTMLAttributes, r, e), 0];
  },
  addCommands() {
    return {
      setParagraph: () => ({ commands: n }) => n.setNode(this.name)
    };
  }
}), hC = Ie.create({
  name: "textBlock",
  group: "block",
  content: "inline*",
  parseHTML() {
    return [
      {
        tag: "mt-text-block",
        getAttrs: (n) => n instanceof HTMLElement ? {} : !1
      }
    ];
  },
  renderHTML() {
    return ["mt-text-block", 0];
  },
  addKeyboardShortcuts() {
    return {
      Enter: ({ editor: n }) => {
        if (!n.isActive(this.name))
          return !1;
        const { state: e } = n, { selection: t } = e, { $from: i } = t, r = i.node(-1);
        if (!r)
          return !1;
        if (r.type.name === "tableCell" || r.type.name === "tableHeader")
          return n.chain().insertContent("<br />").run(), !0;
        const s = i.after(-1), o = i.parent.content.cut(i.parentOffset).toJSON();
        if (!n.chain().insertContentAt(s, {
          type: r.type.name,
          content: [
            {
              type: this.name,
              content: o
            }
          ]
        }).deleteRange({ from: i.pos, to: i.after() }).run()) return !1;
        const u = n.state.doc.resolve(s + 1).start();
        return n.chain().setTextSelection(u).focus().run(), !0;
      }
    };
  },
  addStorage() {
    return {
      originalText: ""
    };
  }
}), pC = Ie.create({
  name: "pre",
  priority: 1e3,
  group: "block",
  content: "inline*|text*",
  defining: !0,
  parseHTML() {
    return [
      {
        tag: "pre",
        preserveWhitespace: "full"
      }
    ];
  },
  renderHTML({ HTMLAttributes: n }) {
    return ["pre", n, 0];
  },
  addCommands() {
    return {
      setPre: () => ({ commands: n }) => n.setNode(this.name),
      unsetPre: () => ({ commands: n }) => n.setNode("paragraph")
    };
  }
}), mC = Ie.create({
  name: "code",
  priority: 1e3,
  group: "inline",
  inline: !0,
  content: "text*",
  defining: !0,
  parseHTML() {
    return [
      {
        tag: "code",
        preserveWhitespace: "full"
      }
    ];
  },
  renderHTML({ HTMLAttributes: n }) {
    return ["code", n, 0];
  }
}), gC = Ie.create({
  name: "descriptionList",
  priority: 1e3,
  group: "block",
  content: "(descriptionTerm|descriptionDetails)+",
  defining: !0,
  parseHTML() {
    return [{ tag: "dl" }];
  },
  renderHTML({ HTMLAttributes: n }) {
    return ["dl", n, 0];
  }
}), _C = Ie.create({
  name: "descriptionTerm",
  priority: 1e3,
  group: "block",
  content: "(textBlock|paragraph) block*",
  defining: !0,
  parseHTML() {
    return [{ tag: "dt" }];
  },
  renderHTML({ HTMLAttributes: n }) {
    return ["dt", n, 0];
  }
}), bC = Ie.create({
  name: "descriptionDetails",
  priority: 1e3,
  group: "block",
  content: "(textBlock|paragraph) block*",
  defining: !0,
  parseHTML() {
    return [{ tag: "dd" }];
  },
  renderHTML({ HTMLAttributes: n }) {
    return ["dd", n, 0];
  }
}), vC = Ie.create({
  name: "summary",
  priority: 1e3,
  group: "block",
  content: "inline*",
  defining: !0,
  parseHTML() {
    return [{ tag: "summary" }];
  },
  renderHTML({ HTMLAttributes: n }) {
    return ["summary", n, 0];
  }
}), yC = C_.extend({
  name: "listItem",
  priority: 1e3,
  content: "(textBlock|block)*",
  parseHTML() {
    return [
      {
        tag: "li"
      }
    ];
  },
  renderHTML({ HTMLAttributes: n }) {
    return ["li", Ce(this.options.HTMLAttributes, n), 0];
  }
}), yu = {}, xC = (n) => {
  const e = Math.random().toString(36).substring(2, 15), t = n.view.dom, i = (r) => {
    const s = t.querySelector(
      `iframe[data-mt-rich-text-editor-iframe="${e}"]`
    );
    if (!s)
      return;
    const o = r.data;
    o.method === "click" ? s.click() : o.method === "resize" && (o.width && (s.style.width = `${o.width}px`), o.height && (s.style.height = `${o.height}px`));
  };
  return yu[e] = i, window.addEventListener("message", i, {
    capture: !0,
    passive: !0
  }), {
    id: e,
    handler: i
  };
}, wC = (n) => {
  const e = yu[n];
  e && (window.removeEventListener("message", e, {
    capture: !0
  }), delete yu[n]);
}, o0 = (n, e) => {
  const { id: t } = xC(n), i = document.createElement("iframe");
  i.setAttribute("data-mt-rich-text-editor-iframe", t), i.setAttribute("frameborder", "0"), i.setAttribute("allowfullscreen", "true"), i.style.width = "100%", i.sandbox = "allow-scripts allow-same-origin";
  const r = `
      <!DOCTYPE html>
      <html>
        <head>
          <meta charset="${document.characterSet || "UTF-8"}">
          <style>
            html, body {
              margin: 0;
              padding: 0;
              overflow: hidden;
            }
            ::-webkit-scrollbar {
              display: none;
            }
          </style>
          <script>
            const resizeObserver = new ResizeObserver((entries) => {
              window.parent.postMessage({
                method: "resize",
                id: "${t}",
                width: document.body.scrollWidth,
                height: document.body.scrollHeight,
              }, "*");
            });
            
            window.addEventListener('load', () => {
              resizeObserver.observe(document.body);
            });

            const events = ['mousedown', 'mouseup', 'click', 'dblclick', 'contextmenu', 'mousemove'];
            events.forEach(eventName => {
              document.addEventListener(eventName, (e) => {
                e.stopPropagation();
                e.preventDefault();
                if (eventName === "click") {
                  window.parent.postMessage({
                    method: eventName,
                    id: "${t}",
                  }, "*");
                }
              }, true);
            });
          <\/script>
        </head>
        <body>
          ${e}
        </body>
      </html>
    `, s = new TextEncoder().encode(r), o = btoa(String.fromCharCode(...s));
  return i.src = `data:text/html;base64,${o}`, i;
}, a0 = (n) => {
  wC(n.getAttribute("data-mt-rich-text-editor-iframe") || "");
}, kC = (n) => {
  if (!n)
    return;
  const e = document.createElement("a");
  return e.href = n, e.origin;
}, SC = Ie.create({
  name: "script",
  group: "inline",
  content: "text*",
  inline: !0,
  atom: !0,
  addOptions() {
    return {
      allowedOrigins: ["https://gist.github.com", "https://pastebin.com"]
    };
  },
  parseHTML() {
    return [
      {
        tag: "mt-rich-text-editor-script",
        preserveWhitespace: "full"
      }
    ];
  },
  addNodeView() {
    const n = this.options.allowedOrigins || [];
    return ({ editor: e, node: t }) => {
      const i = document.createElement("div");
      i.classList.add("mt-rich-text-editor-script");
      const r = t.attrs.MTRichTextEditorHTMLAttributes || {};
      i.dataset.mtRichTextEditorScriptTitle = "<script " + Object.entries(r).map(([a, l]) => `${a}="${l}"`).join(" ") + "/>";
      const s = r.src, o = kC(s);
      if (o && n.includes(o)) {
        i.classList.add("mt-rich-text-editor-script--preview");
        const a = document.createElement("script");
        a.src = s;
        const l = o0(e, a.outerHTML);
        return i.appendChild(l), {
          dom: i,
          destroy: () => {
            a0(l);
          }
        };
      }
      return i.innerText = t.content.content.map((a) => a.text).join("").replace(/^\n/, "").replace(/\s+$/, ""), {
        dom: i
      };
    };
  },
  renderHTML({ HTMLAttributes: n }) {
    return ["mt-rich-text-editor-script", n, 0];
  }
}), EC = Ie.create({
  name: "embedObject",
  priority: 1e3,
  group: "block",
  content: "block*",
  defining: !0,
  addAttributes() {
    return {
      content: {
        default: null
      }
    };
  },
  parseHTML() {
    return [
      {
        tag: "div[data-mt-rich-text-editor-embed-object]",
        getAttrs: (n) => n instanceof HTMLElement ? {
          content: n.innerHTML
        } : !1
      }
    ];
  },
  renderHTML({ HTMLAttributes: n }) {
    return [
      "div",
      Ce({
        "data-mt-rich-text-editor-embed-object": "",
        "data-mt-rich-text-editor-content": n.content
      }),
      0
    ];
  },
  addNodeView() {
    return ({ editor: n, node: e }) => {
      const t = o0(n, e.attrs.content);
      return {
        dom: t,
        update: () => !0,
        destroy: () => {
          a0(t);
        }
      };
    };
  },
  addCommands() {
    return {
      getEmbedObject: (n) => () => this.options.resolver(n),
      insertEmbedObject: (n) => ({ state: e, commands: t }) => {
        const i = e.selection.$anchor.pos;
        return t.insertContent({
          type: this.name,
          attrs: {
            content: n
          }
        }), t.setTextSelection(i + 2), !0;
      }
    };
  }
}), CC = ze.create({
  name: "markdown",
  addCommands() {
    return {
      // FIXME: fix type error
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      isMarkdownConversionAvailable: () => () => !!this.options.toHtml,
      // FIXME: fix type error
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      markdownToHtml: (n) => () => this.options.toHtml(n)
    };
  }
}), TC = mS.extend({
  addOptions() {
    var n;
    return {
      ...(n = this.parent) == null ? void 0 : n.call(this),
      registerShortcuts: !0
    };
  },
  addKeyboardShortcuts() {
    var n;
    return this.options.registerShortcuts ? ((n = this.parent) == null ? void 0 : n.call(this)) ?? {} : {};
  }
}), AC = /* @__PURE__ */ new Set([
  "onabortonblur",
  "oncancel",
  "oncanplay",
  "oncanplaythrough",
  "onchange",
  "onclick",
  "onclose",
  "oncontextmenu",
  "oncuechange",
  "ondblclick",
  "ondrag",
  "ondragend",
  "ondragenter",
  "ondragleave",
  "ondragover",
  "ondragstart",
  "ondrop",
  "ondurationchange",
  "onemptied",
  "onended",
  "onerror",
  "onfocus",
  "oninput",
  "oninvalid",
  "onkeydown",
  "onkeypress",
  "onkeyup",
  "onload",
  "onloadeddata",
  "onloadedmetadata",
  "onloadstart",
  "onmousedown",
  "onmousemove",
  "onmouseout",
  "onmouseover",
  "onmouseup",
  "onmousewheel",
  "onpause",
  "onplay",
  "onplaying",
  "onprogress",
  "onratechange",
  "onreset",
  "onscroll",
  "onseeked",
  "onseeking",
  "onseeking",
  "onselect",
  "onshow",
  "onstalled",
  "onsubmit",
  "onsuspend",
  "ontimeupdate",
  "onvolumechange",
  "onwaiting",
  "formaction",
  "action"
]), MC = ze.create({
  name: "mt-rich-text-editor-global",
  addGlobalAttributes() {
    return [
      {
        types: [
          "div",
          "pre",
          "code",
          "blockquote",
          "bulletList",
          "document",
          "embedObject",
          "hardBreak",
          "heading",
          "horizontalRule",
          "iframe",
          "image",
          "inlineLink",
          "listItem",
          "orderedList",
          "paragraph",
          "span",
          "textStyle",
          "script",
          "table",
          "tableRow",
          "tableCell",
          "tableHeader",
          "link",
          "blockLink",
          "descriptionList",
          "descriptionTerm",
          "descriptionDetails"
        ],
        attributes: {
          MTRichTextEditorHTMLAttributes: {
            default: {},
            parseHTML: (n) => {
              const e = {}, t = {};
              for (const i of n.attributes)
                /^data-mt-rich-text-editor-/.test(i.name) || (AC.has(i.name.toLowerCase()) ? t[i.name] = i.value : e[i.name] = i.value);
              return Object.keys(t).length > 0 && (e["data-mt-rich-text-editor-event-attributes"] = JSON.stringify(t)), e;
            },
            renderHTML: (n) => n.MTRichTextEditorHTMLAttributes
          }
        }
      }
    ];
  }
});
window.customElements.define(
  "mt-rich-text-editor-mt-function-tag",
  class extends HTMLElement {
    connectedCallback() {
      this.style.color = "#9333ea", this.style.fontFamily = "monospace";
      const n = ["data-tag-name", "contenteditable", "style", "class"], e = this.getAttribute("data-tag-name");
      if (!e)
        return;
      let t = "";
      Array.from(this.attributes).filter((i) => !n.includes(i.name)).forEach((i) => {
        t += ` ${i.name}="${i.value}"`;
      }), this.textContent = `<mt:${e}${t}>`;
    }
  }
);
const OC = Ie.create({
  name: "mt-rich-text-editor-mt-function-tag",
  group: "inline",
  inline: !0,
  atom: !0,
  addAttributes() {
    return {
      "data-tag-name": {
        default: null
      },
      HTMLAttributes: {
        default: {},
        parseHTML: (n) => {
          const e = {}, t = ["data-tag-name", "contenteditable", "style", "class"];
          return Array.from(n.attributes).filter((i) => !t.includes(i.name)).forEach((i) => {
            e[i.name] = i.value;
          }), e;
        },
        renderHTML: (n) => n.HTMLAttributes
      }
    };
  },
  addInputRules() {
    const n = this.options.tags;
    return n != null && n.length ? [
      new er({
        find: new RegExp(`<\\$?mt:?(${n.join("|")})[^>]*\\$?>$`, "i"),
        handler: ({ state: e, range: t, match: i }) => {
          const s = new DOMParser().parseFromString(
            i[0].replace(/^<\$/, "<").replace(/\$>$/, ">"),
            "text/html"
          ).body.firstChild, o = {
            "data-tag-name": i[1],
            HTMLAttributes: {}
          };
          for (const l of s.attributes)
            l.name !== "data-tag-name" && (o.HTMLAttributes[l.name] = l.value);
          const a = this.type.create(o);
          e.tr.replaceWith(t.from, t.to, a);
        }
      })
    ] : [];
  },
  parseHTML() {
    return [
      {
        tag: "mt-rich-text-editor-mt-function-tag",
        getAttrs: (n) => n instanceof HTMLElement ? {
          "data-tag-name": n.getAttribute("data-tag-name"),
          ...Object.fromEntries(
            Array.from(n.attributes).filter((e) => e.name !== "data-tag-name").map((e) => [e.name, e.value])
          )
        } : {}
      }
    ];
  },
  renderHTML({ HTMLAttributes: n }) {
    return ["mt-rich-text-editor-mt-function-tag", Ce(n)];
  }
}), NC = ze.create({
  name: "mt-rich-text-editor-group",
  addExtensions() {
    return [
      MC,
      OC.configure({
        tags: this.options.tags
      })
    ];
  }
}), _p = {
  openOnClick: !1
}, LC = ze.create({
  name: "mt-rich-text-editor",
  addExtensions() {
    var e, t, i, r, s, o, a, l, c, u, d, f, h, p, b, m, g, v, x, w, E, k, S, y, T, _, C, M, H, D, F, W, G, re, Z, ue, he, Te, oe, Ve, be, R, tt, ge, rt;
    const n = [];
    return this.options.movableType !== !1 && n.push(NC.configure((e = this.options) == null ? void 0 : e.movableType)), this.options.undoRedo !== !1 && n.push(TC.configure((t = this.options) == null ? void 0 : t.undoRedo)), this.options.document !== !1 && n.push(_k.configure((i = this.options) == null ? void 0 : i.document)), this.options.text !== !1 && n.push(bk.configure((r = this.options) == null ? void 0 : r.text)), this.options.subscript !== !1 && n.push(vk.configure((s = this.options) == null ? void 0 : s.subscript)), this.options.superscript !== !1 && n.push(yk.configure((o = this.options) == null ? void 0 : o.superscript)), this.options.image !== !1 && n.push(
      wk.configure(
        ((a = this.options) == null ? void 0 : a.image) ?? {
          inline: !0,
          allowBase64: !0
        }
      )
    ), this.options.hardBreak !== !1 && n.push(kk.configure((l = this.options) == null ? void 0 : l.hardBreak)), this.options.bold !== !1 && n.push($E.configure((c = this.options) == null ? void 0 : c.bold)), this.options.italic !== !1 && n.push(Ak.configure((u = this.options) == null ? void 0 : u.italic)), this.options.underline !== !1 && n.push(Mk.configure((d = this.options) == null ? void 0 : d.underline)), this.options.strike !== !1 && n.push(Kk.configure((f = this.options) == null ? void 0 : f.strike)), this.options.blockquote !== !1 && n.push(Nk.configure((h = this.options) == null ? void 0 : h.blockquote)), this.options.table !== !1 && n.push(
      CE.configure(
        ((p = this.options) == null ? void 0 : p.table) ?? {
          resizable: !0
        }
      )
    ), this.options.tableRow !== !1 && n.push(G_.configure((b = this.options) == null ? void 0 : b.tableRow)), this.options.tableHeader !== !1 && n.push(AE.configure((m = this.options) == null ? void 0 : m.tableHeader)), this.options.tableCell !== !1 && n.push(TE.configure((g = this.options) == null ? void 0 : g.tableCell)), this.options.bulletList !== !1 && n.push(E_.configure((v = this.options) == null ? void 0 : v.bulletList)), this.options.heading !== !1 && n.push(Vk.configure((x = this.options) == null ? void 0 : x.heading)), this.options.horizontalRule !== !1 && n.push(jk.configure((w = this.options) == null ? void 0 : w.horizontalRule)), this.options.orderedList !== !1 && n.push(L_.configure((E = this.options) == null ? void 0 : E.orderedList)), this.options.dropcursor !== !1 && n.push(hS.configure((k = this.options) == null ? void 0 : k.dropcursor)), this.options.gapcursor !== !1 && n.push(pS.configure((S = this.options) == null ? void 0 : S.gapcursor)), this.options.textAlign !== !1 && n.push(
      gS.configure(
        ((y = this.options) == null ? void 0 : y.textAlign) ?? {
          types: ["heading", "paragraph"],
          defaultAlignment: ""
        }
      )
    ), this.options.color !== !1 && n.push(yS.configure((T = this.options) == null ? void 0 : T.color)), this.options.backgroundColor !== !1 && n.push(wS.configure((_ = this.options) == null ? void 0 : _.backgroundColor)), this.options.textStyle !== !1 && n.push(bS.configure((C = this.options) == null ? void 0 : C.textStyle)), this.options.iframe !== !1 && n.push(SS.configure((M = this.options) == null ? void 0 : M.iframe)), this.options.indent !== !1 && n.push(ME.configure((H = this.options) == null ? void 0 : H.indent)), this.options.paragraph !== !1 && n.push(fC.configure((D = this.options) == null ? void 0 : D.paragraph)), this.options.textBlock !== !1 && n.push(hC.configure((F = this.options) == null ? void 0 : F.textBlock)), this.options.pre !== !1 && n.push(pC.configure((W = this.options) == null ? void 0 : W.pre)), this.options.code !== !1 && n.push(mC.configure((G = this.options) == null ? void 0 : G.code)), this.options.descriptionList !== !1 && n.push(gC.configure((re = this.options) == null ? void 0 : re.descriptionList)), this.options.descriptionTerm !== !1 && n.push(_C.configure((Z = this.options) == null ? void 0 : Z.descriptionTerm)), this.options.descriptionDetails !== !1 && n.push(bC.configure((ue = this.options) == null ? void 0 : ue.descriptionDetails)), this.options.summary !== !1 && n.push(vC.configure((he = this.options) == null ? void 0 : he.summary)), this.options.listItem !== !1 && n.push(yC.configure((Te = this.options) == null ? void 0 : Te.listItem)), this.options.div !== !1 && n.push(OE.configure((oe = this.options) == null ? void 0 : oe.div)), this.options.span !== !1 && n.push(NE.configure((Ve = this.options) == null ? void 0 : Ve.span)), this.options.inlineLink !== !1 && n.push(uC.configure(((be = this.options) == null ? void 0 : be.inlineLink) ?? _p)), this.options.blockLink !== !1 && n.push(zE.configure(((R = this.options) == null ? void 0 : R.blockLink) ?? _p)), this.options.script !== !1 && n.push(SC.configure((tt = this.options) == null ? void 0 : tt.script)), this.options.embedObject !== !1 && n.push(EC.configure((ge = this.options) == null ? void 0 : ge.embedObject)), this.options.markdown !== !1 && n.push(CC.configure((rt = this.options) == null ? void 0 : rt.markdown)), n;
  }
});
function lt(n, e, [t, i] = [0, 0]) {
  De && t === 0 && Ui();
  var r = n, s = null, o = null, a = gb, l = t > 0 ? Cu : 0, c = !1;
  const u = (f, h = !0) => {
    c = !0, d(h, f);
  }, d = (f, h) => {
    if (a === (a = f)) return;
    let p = !1;
    if (De && i !== -1) {
      if (t === 0) {
        const m = (
          /** @type {Comment} */
          r.data
        );
        m === _b ? i = 0 : m === Kp ? i = 1 / 0 : (i = parseInt(m.substring(1)), i !== i && (i = a ? 1 / 0 : -1));
      }
      const b = i > t;
      !!a === b && (r = Rc(), Hi(r), Zn(!1), p = !0, i = -1);
    }
    a ? (s ? Is(s) : h && (s = Ir(() => h(r))), o && ea(o, () => {
      o = null;
    })) : (o ? Is(o) : h && (o = Ir(() => h(r, [t + 1, i]))), s && ea(s, () => {
      s = null;
    })), p && Zn(!0);
  };
  Za(() => {
    c = !1, e(u), c || d(null, null);
  }, l), De && (r = xn);
}
function En(n, e) {
  return e;
}
function RC(n, e, t, i) {
  for (var r = [], s = e.length, o = 0; o < s; o++)
    vb(e[o].e, r, !0);
  var a = s > 0 && r.length === 0 && t !== null;
  if (a) {
    var l = (
      /** @type {Element} */
      /** @type {Element} */
      t.parentNode
    );
    yb(l), l.append(
      /** @type {Element} */
      t
    ), i.clear(), di(n, e[0].prev, e[s - 1].next);
  }
  xb(r, () => {
    for (var c = 0; c < s; c++) {
      var u = e[c];
      a || (i.delete(u.k), di(n, u.prev, u.next)), Mu(u.e, !a);
    }
  });
}
function pt(n, e, t, i, r, s = null) {
  var o = n, a = { flags: e, items: /* @__PURE__ */ new Map(), first: null }, l = (e & Xp) !== 0;
  if (l) {
    var c = (
      /** @type {Element} */
      n
    );
    o = De ? Hi(
      /** @type {Comment | Text} */
      Ou(c)
    ) : c.appendChild(qp());
  }
  De && Ui();
  var u = null, d = !1, f = ta(() => {
    var h = t();
    return Nu(h) ? h : h == null ? [] : Gp(h);
  });
  Za(() => {
    var h = A(f), p = h.length;
    if (d && p === 0)
      return;
    d = p === 0;
    let b = !1;
    if (De) {
      var m = (
        /** @type {Comment} */
        o.data === Kp
      );
      m !== (p === 0) && (o = Rc(), Hi(o), Zn(!1), b = !0);
    }
    if (De) {
      for (var g = null, v, x = 0; x < p; x++) {
        if (xn.nodeType === 8 && /** @type {Comment} */
        xn.data === kb) {
          o = /** @type {Comment} */
          xn, b = !0, Zn(!1);
          break;
        }
        var w = h[x], E = i(w, x);
        v = l0(
          xn,
          a,
          g,
          null,
          w,
          E,
          x,
          r,
          e,
          t
        ), a.items.set(E, v), g = v;
      }
      p > 0 && Hi(Rc());
    }
    De || IC(h, a, o, r, e, i, t), s !== null && (p === 0 ? u ? Is(u) : u = Ir(() => s(o)) : u !== null && ea(u, () => {
      u = null;
    })), b && Zn(!0), A(f);
  }), De && (o = xn);
}
function IC(n, e, t, i, r, s, o) {
  var D, F, W, G;
  var a = (r & bb) !== 0, l = (r & (Tu | Au)) !== 0, c = n.length, u = e.items, d = e.first, f = d, h, p = null, b, m = [], g = [], v, x, w, E;
  if (a)
    for (E = 0; E < c; E += 1)
      v = n[E], x = s(v, E), w = u.get(x), w !== void 0 && ((D = w.a) == null || D.measure(), (b ?? (b = /* @__PURE__ */ new Set())).add(w));
  for (E = 0; E < c; E += 1) {
    if (v = n[E], x = s(v, E), w = u.get(x), w === void 0) {
      var k = f ? (
        /** @type {TemplateNode} */
        f.e.nodes_start
      ) : t;
      p = l0(
        k,
        e,
        p,
        p === null ? e.first : p.next,
        v,
        x,
        E,
        i,
        r,
        o
      ), u.set(x, p), m = [], g = [], f = p.next;
      continue;
    }
    if (l && PC(w, v, E, r), (w.e.f & Ll) !== 0 && (Is(w.e), a && ((F = w.a) == null || F.unfix(), (b ?? (b = /* @__PURE__ */ new Set())).delete(w))), w !== f) {
      if (h !== void 0 && h.has(w)) {
        if (m.length < g.length) {
          var S = g[0], y;
          p = S.prev;
          var T = m[0], _ = m[m.length - 1];
          for (y = 0; y < m.length; y += 1)
            bp(m[y], S, t);
          for (y = 0; y < g.length; y += 1)
            h.delete(g[y]);
          di(e, T.prev, _.next), di(e, p, T), di(e, _, S), f = S, p = _, E -= 1, m = [], g = [];
        } else
          h.delete(w), bp(w, f, t), di(e, w.prev, w.next), di(e, w, p === null ? e.first : p.next), di(e, p, w), p = w;
        continue;
      }
      for (m = [], g = []; f !== null && f.k !== x; )
        (f.e.f & Ll) === 0 && (h ?? (h = /* @__PURE__ */ new Set())).add(f), g.push(f), f = f.next;
      if (f === null)
        continue;
      w = f;
    }
    m.push(w), p = w, f = w.next;
  }
  if (f !== null || h !== void 0) {
    for (var C = h === void 0 ? [] : Gp(h); f !== null; )
      (f.e.f & Ll) === 0 && C.push(f), f = f.next;
    var M = C.length;
    if (M > 0) {
      var H = (r & Xp) !== 0 && c === 0 ? t : null;
      if (a) {
        for (E = 0; E < M; E += 1)
          (W = C[E].a) == null || W.measure();
        for (E = 0; E < M; E += 1)
          (G = C[E].a) == null || G.fix();
      }
      RC(e, C, H, u);
    }
  }
  a && Jp(() => {
    var re;
    if (b !== void 0)
      for (w of b)
        (re = w.a) == null || re.apply();
  }), Ps.first = e.first && e.first.e, Ps.last = p && p.e;
}
function PC(n, e, t, i) {
  (i & Tu) !== 0 && qd(n.v, e), (i & Au) !== 0 ? qd(
    /** @type {Value<number>} */
    n.i,
    t
  ) : n.i = t;
}
function l0(n, e, t, i, r, s, o, a, l, c) {
  var u = (l & Tu) !== 0, d = (l & wb) === 0, f = u ? d ? _r(r) : Gd(r) : r, h = (l & Au) === 0 ? o : Gd(o), p = {
    i: h,
    v: f,
    k: s,
    a: null,
    // @ts-expect-error
    e: null,
    prev: t,
    next: i
  };
  try {
    return p.e = Ir(() => a(n, f, h, c), De), p.e.prev = t && t.e, p.e.next = i && i.e, t === null ? e.first = p : (t.next = p, t.e.next = p.e), i !== null && (i.prev = p, i.e.prev = p.e), p;
  } finally {
  }
}
function bp(n, e, t) {
  for (var i = n.next ? (
    /** @type {TemplateNode} */
    n.next.e.nodes_start
  ) : t, r = e ? (
    /** @type {TemplateNode} */
    e.e.nodes_start
  ) : t, s = (
    /** @type {TemplateNode} */
    n.e.nodes_start
  ); s !== i; ) {
    var o = (
      /** @type {TemplateNode} */
      Yp(s)
    );
    r.before(s), s = o;
  }
}
function di(n, e, t) {
  e === null ? n.first = t : (e.next = t, e.e.next = t && t.e), t !== null && (t.prev = e, t.e.prev = e && e.e);
}
function Xt(n, e, t, i, r) {
  var s = n, o = "", a;
  Za(() => {
    if (o === (o = e() ?? "")) {
      De && Ui();
      return;
    }
    a !== void 0 && (Mu(a), a = void 0), o !== "" && (a = Ir(() => {
      if (De) {
        xn.data;
        for (var l = Ui(), c = l; l !== null && (l.nodeType !== 8 || /** @type {Comment} */
        l.data !== ""); )
          c = l, l = /** @type {TemplateNode} */
          Yp(l);
        if (l === null)
          throw Eb(), Cb;
        Ic(xn, c), s = Hi(l);
        return;
      }
      var u = o + "", d = Sb(u);
      Ic(
        /** @type {TemplateNode} */
        Ou(d),
        /** @type {TemplateNode} */
        d.lastChild
      ), s.before(d);
    }));
  });
}
function kr(n, e, t, i, r) {
  var a;
  De && Ui();
  var s = (a = e.$$slots) == null ? void 0 : a[t], o = !1;
  s === !0 && (s = e[t === "default" ? "children" : t], o = !0), s === void 0 || s(n, o ? () => i : i);
}
function DC(n) {
  const e = {};
  n.children && (e.default = !0);
  for (const t in n.$$slots)
    e[t] = !0;
  return e;
}
function Jr(n, e, t, i, r, s) {
  let o = De;
  De && Ui();
  var a, l, c = null;
  De && xn.nodeType === 1 && (c = /** @type {Element} */
  xn, Ui());
  var u = (
    /** @type {TemplateNode} */
    De ? xn : n
  ), d;
  Za(() => {
    const f = e() || null;
    var h = f === "svg" ? Tb : null;
    f !== a && (d && (f === null ? ea(d, () => {
      d = null, l = null;
    }) : f === l ? Is(d) : (Mu(d), Jd(!1))), f && f !== l && (d = Ir(() => {
      if (c = De ? (
        /** @type {Element} */
        c
      ) : h ? document.createElementNS(h, f) : document.createElement(f), Ic(c, c), i) {
        De && Ab(f) && c.append(document.createComment(""));
        var p = (
          /** @type {TemplateNode} */
          De ? Ou(c) : c.appendChild(qp())
        );
        De && (p === null ? Zn(!1) : Hi(p)), i(c, p);
      }
      Ps.nodes_end = c, u.before(c);
    })), a = f, a && (l = a), Jd(!0));
  }, Cu), o && (Zn(!0), Hi(u));
}
function nt(n, e, t) {
  Qa(() => {
    var i = Wr(() => e(n, t == null ? void 0 : t()) || {});
    if (t && (i != null && i.update)) {
      var r = !1, s = (
        /** @type {any} */
        {}
      );
      Lu(() => {
        var o = t();
        el(o), r && Mb(s, o) && (s = o, i.update(o));
      }), r = !0;
    }
    if (i != null && i.destroy)
      return () => (
        /** @type {Function} */
        i.destroy()
      );
  });
}
function c0(n) {
  var e, t, i = "";
  if (typeof n == "string" || typeof n == "number") i += n;
  else if (typeof n == "object") if (Array.isArray(n)) {
    var r = n.length;
    for (e = 0; e < r; e++) n[e] && (t = c0(n[e])) && (i && (i += " "), i += t);
  } else for (t in n) n[t] && (i && (i += " "), i += t);
  return i;
}
function $C() {
  for (var n, e, t = 0, i = "", r = arguments.length; t < r; t++) (n = arguments[t]) && (e = c0(n)) && (i && (i += " "), i += e);
  return i;
}
function u0(n) {
  return typeof n == "object" ? $C(n) : n ?? "";
}
const vp = [...` 	
\r\f \v\uFEFF`];
function zC(n, e, t) {
  var i = n == null ? "" : "" + n;
  if (e && (i = i ? i + " " + e : e), t) {
    for (var r in t)
      if (t[r])
        i = i ? i + " " + r : r;
      else if (i.length)
        for (var s = r.length, o = 0; (o = i.indexOf(r, o)) >= 0; ) {
          var a = o + s;
          (o === 0 || vp.includes(i[o - 1])) && (a === i.length || vp.includes(i[a])) ? i = (o === 0 ? "" : i.substring(0, o)) + i.substring(a + 1) : o = a;
        }
  }
  return i === "" ? null : i;
}
function yp(n, e = !1) {
  var t = e ? " !important;" : ";", i = "";
  for (var r in n) {
    var s = n[r];
    s != null && s !== "" && (i += " " + r + ": " + s + t);
  }
  return i;
}
function kc(n) {
  return n[0] !== "-" || n[1] !== "-" ? n.toLowerCase() : n;
}
function BC(n, e) {
  if (e) {
    var t = "", i, r;
    if (Array.isArray(e) ? (i = e[0], r = e[1]) : i = e, n) {
      n = String(n).replaceAll(/\s*\/\*.*?\*\/\s*/g, "").trim();
      var s = !1, o = 0, a = !1, l = [];
      i && l.push(...Object.keys(i).map(kc)), r && l.push(...Object.keys(r).map(kc));
      var c = 0, u = -1;
      const b = n.length;
      for (var d = 0; d < b; d++) {
        var f = n[d];
        if (a ? f === "/" && n[d - 1] === "*" && (a = !1) : s ? s === f && (s = !1) : f === "/" && n[d + 1] === "*" ? a = !0 : f === '"' || f === "'" ? s = f : f === "(" ? o++ : f === ")" && o--, !a && s === !1 && o === 0) {
          if (f === ":" && u === -1)
            u = d;
          else if (f === ";" || d === b - 1) {
            if (u !== -1) {
              var h = kc(n.substring(c, u).trim());
              if (!l.includes(h)) {
                f !== ";" && d++;
                var p = n.substring(c, d).trim();
                t += " " + p + ";";
              }
            }
            c = d + 1, u = -1;
          }
        }
      }
    }
    return i && (t += yp(i)), r && (t += yp(r, !0)), t = t.trim(), t === "" ? null : t;
  }
  return n == null ? null : String(n);
}
function gt(n, e, t, i, r, s) {
  var o = n.__className;
  if (De || o !== t || o === void 0) {
    var a = zC(t, i, s);
    (!De || a !== n.getAttribute("class")) && (a == null ? n.removeAttribute("class") : e ? n.className = a : n.setAttribute("class", a)), n.__className = t;
  } else if (s && r !== s)
    for (var l in s) {
      var c = !!s[l];
      (r == null || c !== !!r[l]) && n.classList.toggle(l, c);
    }
  return s;
}
function Sc(n, e = {}, t, i) {
  for (var r in t) {
    var s = t[r];
    e[r] !== s && (t[r] == null ? n.style.removeProperty(r) : n.style.setProperty(r, s, i));
  }
}
function Gs(n, e, t, i) {
  var r = n.__style;
  if (De || r !== e) {
    var s = BC(e, i);
    (!De || s !== n.getAttribute("style")) && (s == null ? n.removeAttribute("style") : n.style.cssText = s), n.__style = e;
  } else i && (Array.isArray(i) ? (Sc(n, t == null ? void 0 : t[0], i[0]), Sc(n, t == null ? void 0 : t[1], i[1], "important")) : Sc(n, t, i));
  return i;
}
const ls = Symbol("class"), cs = Symbol("style"), d0 = Symbol("is custom element"), f0 = Symbol("is html");
function mt(n) {
  if (De) {
    var e = !1, t = () => {
      if (!e) {
        if (e = !0, n.hasAttribute("value")) {
          var i = n.value;
          Ae(n, "value", null), n.value = i;
        }
        if (n.hasAttribute("checked")) {
          var r = n.checked;
          Ae(n, "checked", null), n.checked = r;
        }
      }
    };
    n.__on_r = t, Ib(t), Pb();
  }
}
function xp(n, e) {
  var t = Id(n);
  t.checked !== (t.checked = // treat null and undefined the same for the initial value
  e ?? void 0) && (n.checked = e);
}
function HC(n, e) {
  e ? n.hasAttribute("selected") || n.setAttribute("selected", "") : n.removeAttribute("selected");
}
function Ae(n, e, t, i) {
  var r = Id(n);
  De && (r[e] = n.getAttribute(e), e === "src" || e === "srcset" || e === "href" && n.nodeName === "LINK") || r[e] !== (r[e] = t) && (e === "loading" && (n[Ob] = t), t == null ? n.removeAttribute(e) : typeof t != "string" && p0(n).includes(e) ? n[e] = t : n.setAttribute(e, t));
}
function h0(n, e, t, i, r = !1) {
  var s = Id(n), o = s[d0], a = !s[f0];
  let l = De && o;
  l && Zn(!1);
  var c = e || {}, u = n.tagName === "OPTION";
  for (var d in e)
    d in t || (t[d] = null);
  t.class ? t.class = u0(t.class) : t[ls] && (t.class = null), t[cs] && (t.style ?? (t.style = null));
  var f = p0(n);
  for (const x in t) {
    let w = t[x];
    if (u && x === "value" && w == null) {
      n.value = n.__value = "", c[x] = w;
      continue;
    }
    if (x === "class") {
      var h = n.namespaceURI === "http://www.w3.org/1999/xhtml";
      gt(n, h, w, i, e == null ? void 0 : e[ls], t[ls]), c[x] = w, c[ls] = t[ls];
      continue;
    }
    if (x === "style") {
      Gs(n, w, e == null ? void 0 : e[cs], t[cs]), c[x] = w, c[cs] = t[cs];
      continue;
    }
    var p = c[x];
    if (w !== p) {
      c[x] = w;
      var b = x[0] + x[1];
      if (b !== "$$")
        if (b === "on") {
          const E = {}, k = "$$" + x;
          let S = x.slice(2);
          var m = Hb(S);
          if (Db(S) && (S = S.slice(0, -7), E.capture = !0), !m && p) {
            if (w != null) continue;
            n.removeEventListener(S, c[k], E), c[k] = null;
          }
          if (w != null)
            if (m)
              n[`__${S}`] = w, Rt([S]);
            else {
              let y = function(T) {
                c[x].call(this, T);
              };
              c[k] = $b(S, n, y, E);
            }
          else m && (n[`__${S}`] = void 0);
        } else if (x === "style")
          Ae(n, x, w);
        else if (x === "autofocus")
          zb(
            /** @type {HTMLElement} */
            n,
            !!w
          );
        else if (!o && (x === "__value" || x === "value" && w != null))
          n.value = n.__value = w;
        else if (x === "selected" && u)
          HC(
            /** @type {HTMLOptionElement} */
            n,
            w
          );
        else {
          var g = x;
          a || (g = Bb(g));
          var v = g === "defaultValue" || g === "defaultChecked";
          if (w == null && !o && !v)
            if (s[x] = null, g === "value" || g === "checked") {
              let E = (
                /** @type {HTMLInputElement} */
                n
              );
              const k = e === void 0;
              if (g === "value") {
                let S = E.defaultValue;
                E.removeAttribute(g), E.defaultValue = S, E.value = E.__value = k ? S : null;
              } else {
                let S = E.defaultChecked;
                E.removeAttribute(g), E.defaultChecked = S, E.checked = k ? S : !1;
              }
            } else
              n.removeAttribute(x);
          else v || f.includes(g) && (o || typeof w != "string") ? n[g] = w : typeof w != "function" && Ae(n, g, w);
        }
    }
  }
  return l && Zn(!0), c;
}
function Id(n) {
  return (
    /** @type {Record<string | symbol, unknown>} **/
    // @ts-expect-error
    n.__attributes ?? (n.__attributes = {
      [d0]: n.nodeName.includes("-"),
      [f0]: n.namespaceURI === Nb
    })
  );
}
var wp = /* @__PURE__ */ new Map();
function p0(n) {
  var e = wp.get(n.nodeName);
  if (e) return e;
  wp.set(n.nodeName, e = []);
  for (var t, i = n, r = Element.prototype; r !== i; ) {
    t = Rb(i);
    for (var s in t)
      t[s].set && e.push(s);
    i = Lb(i);
  }
  return e;
}
const FC = () => performance.now(), Xn = {
  // don't access requestAnimationFrame eagerly outside method
  // this allows basic testing of user code without JSDOM
  // bunder will eval and remove ternary when the user's app is built
  tick: (
    /** @param {any} _ */
    (n) => requestAnimationFrame(n)
  ),
  now: () => FC(),
  tasks: /* @__PURE__ */ new Set()
};
function m0() {
  const n = Xn.now();
  Xn.tasks.forEach((e) => {
    e.c(n) || (Xn.tasks.delete(e), e.f());
  }), Xn.tasks.size !== 0 && Xn.tick(m0);
}
function VC(n) {
  let e;
  return Xn.tasks.size === 0 && Xn.tick(m0), {
    promise: new Promise((t) => {
      Xn.tasks.add(e = { c: n, f: t });
    }),
    abort() {
      Xn.tasks.delete(e);
    }
  };
}
function Ho(n, e) {
  qb(() => {
    n.dispatchEvent(new CustomEvent(e));
  });
}
function jC(n) {
  if (n === "float") return "cssFloat";
  if (n === "offset") return "cssOffset";
  if (n.startsWith("--")) return n;
  const e = n.split("-");
  return e.length === 1 ? e[0] : e[0] + e.slice(1).map(
    /** @param {any} word */
    (t) => t[0].toUpperCase() + t.slice(1)
  ).join("");
}
function kp(n) {
  const e = {}, t = n.split(";");
  for (const i of t) {
    const [r, s] = i.split(":");
    if (!r || s === void 0) break;
    const o = jC(r.trim());
    e[o] = s.trim();
  }
  return e;
}
const WC = (n) => n;
function Fo(n, e, t, i) {
  var r = (n & Ub) !== 0, s = (n & Kb) !== 0, o = r && s, a = (n & Wb) !== 0, l = o ? "both" : r ? "in" : "out", c, u = e.inert, d = e.style.overflow, f, h;
  function p() {
    var x = Jb, w = Ps;
    Xd(null), Yd(null);
    try {
      return c ?? (c = t()(e, (i == null ? void 0 : i()) ?? /** @type {P} */
      {}, {
        direction: l
      }));
    } finally {
      Xd(x), Yd(w);
    }
  }
  var b = {
    is_global: a,
    in() {
      var x;
      if (e.inert = u, !r) {
        h == null || h.abort(), (x = h == null ? void 0 : h.reset) == null || x.call(h);
        return;
      }
      s || f == null || f.abort(), Ho(e, "introstart"), f = xu(e, p(), h, 1, () => {
        Ho(e, "introend"), f == null || f.abort(), f = c = void 0, e.style.overflow = d;
      });
    },
    out(x) {
      if (!s) {
        x == null || x(), c = void 0;
        return;
      }
      e.inert = !0, Ho(e, "outrostart"), h = xu(e, p(), f, 0, () => {
        Ho(e, "outroend"), x == null || x();
      });
    },
    stop: () => {
      f == null || f.abort(), h == null || h.abort();
    }
  }, m = (
    /** @type {Effect} */
    Ps
  );
  if ((m.transitions ?? (m.transitions = [])).push(b), r && Fb) {
    var g = a;
    if (!g) {
      for (var v = (
        /** @type {Effect | null} */
        m.parent
      ); v && (v.f & Cu) !== 0; )
        for (; (v = v.parent) && (v.f & Vb) === 0; )
          ;
      g = !v || (v.f & jb) !== 0;
    }
    g && Qa(() => {
      Wr(() => b.in());
    });
  }
}
function xu(n, e, t, i, r) {
  var s = i === 1;
  if (Gb(e)) {
    var o, a = !1;
    return Jp(() => {
      if (!a) {
        var m = e({ direction: s ? "in" : "out" });
        o = xu(n, m, t, i, r);
      }
    }), {
      abort: () => {
        a = !0, o == null || o.abort();
      },
      deactivate: () => o.deactivate(),
      reset: () => o.reset(),
      t: () => o.t()
    };
  }
  if (t == null || t.deactivate(), !(e != null && e.duration))
    return r(), {
      abort: ts,
      deactivate: ts,
      reset: ts,
      t: () => i
    };
  const { delay: l = 0, css: c, tick: u, easing: d = WC } = e;
  var f = [];
  if (s && t === void 0 && (u && u(0, 1), c)) {
    var h = kp(c(0, 1));
    f.push(h, h);
  }
  var p = () => 1 - i, b = n.animate(f, { duration: l });
  return b.onfinish = () => {
    var m = (t == null ? void 0 : t.t()) ?? 1 - i;
    t == null || t.abort();
    var g = i - m, v = (
      /** @type {number} */
      e.duration * Math.abs(g)
    ), x = [];
    if (v > 0) {
      var w = !1;
      if (c)
        for (var E = Math.ceil(v / 16.666666666666668), k = 0; k <= E; k += 1) {
          var S = m + g * d(k / E), y = kp(c(S, 1 - S));
          x.push(y), w || (w = y.overflow === "hidden");
        }
      w && (n.style.overflow = "hidden"), p = () => {
        var T = (
          /** @type {number} */
          /** @type {globalThis.Animation} */
          b.currentTime
        );
        return m + g * d(T / v);
      }, u && VC(() => {
        if (b.playState !== "running") return !1;
        var T = p();
        return u(T, 1 - T), !0;
      });
    }
    b = n.animate(x, { duration: v, fill: "forwards" }), b.onfinish = () => {
      p = () => i, u == null || u(i, 1 - i), r();
    };
  }, {
    abort: () => {
      b && (b.cancel(), b.effect = null, b.onfinish = ts);
    },
    deactivate: () => {
      r = ts;
    },
    reset: () => {
      i === 0 && (u == null || u(1, 0));
    },
    t: () => p()
  };
}
function Ct(n, e, t = e) {
  var i = Xb();
  Ru(n, "input", (r) => {
    var s = r ? n.defaultValue : n.value;
    if (s = Ec(n) ? Cc(s) : s, t(s), i && s !== (s = e())) {
      var o = n.selectionStart, a = n.selectionEnd;
      n.value = s ?? "", a !== null && (n.selectionStart = o, n.selectionEnd = Math.min(a, n.value.length));
    }
  }), // If we are hydrating and the value has since changed,
  // then use the updated value from the input instead.
  (De && n.defaultValue !== n.value || // If defaultValue is set, then value == defaultValue
  // TODO Svelte 6: remove input.value check and set to empty string?
  Wr(e) == null && n.value) && t(Ec(n) ? Cc(n.value) : n.value), Lu(() => {
    var r = e();
    Ec(n) && r === Cc(n.value) || n.type === "date" && !r && !n.value || r !== n.value && (n.value = r ?? "");
  });
}
function Sp(n, e, t = e) {
  Ru(n, "change", (i) => {
    var r = i ? n.defaultChecked : n.checked;
    t(r);
  }), // If we are hydrating and the value has since changed,
  // then use the update value from the input instead.
  (De && n.defaultChecked !== n.checked || // If defaultChecked is set, then checked == defaultChecked
  Wr(e) == null) && t(n.checked), Lu(() => {
    var i = e();
    n.checked = !!i;
  });
}
function Ec(n) {
  var e = n.type;
  return e === "number" || e === "range";
}
function Cc(n) {
  return n === "" ? null : +n;
}
function g0(n, e, t) {
  if (n.multiple)
    return KC(n, e);
  for (var i of n.options) {
    var r = Rs(i);
    if (Yb(r, e)) {
      i.selected = !0;
      return;
    }
  }
  (!t || e !== void 0) && (n.selectedIndex = -1);
}
function UC(n, e) {
  Qa(() => {
    var t = new MutationObserver(() => {
      var i = n.__value;
      g0(n, i);
    });
    return t.observe(n, {
      // Listen to option element changes
      childList: !0,
      subtree: !0,
      // because of <optgroup>
      // Listen to option element value attribute changes
      // (doesn't get notified of select value changes,
      // because that property is not reflected as an attribute)
      attributes: !0,
      attributeFilter: ["value"]
    }), () => {
      t.disconnect();
    };
  });
}
function gr(n, e, t = e) {
  var i = !0;
  Ru(n, "change", (r) => {
    var s = r ? "[selected]" : ":checked", o;
    if (n.multiple)
      o = [].map.call(n.querySelectorAll(s), Rs);
    else {
      var a = n.querySelector(s) ?? // will fall back to first non-disabled option if no option is selected
      n.querySelector("option:not([disabled])");
      o = a && Rs(a);
    }
    t(o);
  }), Qa(() => {
    var r = e();
    if (g0(n, r, i), i && r === void 0) {
      var s = n.querySelector(":checked");
      s !== null && (r = Rs(s), t(r));
    }
    n.__value = r, i = !1;
  }), UC(n);
}
function KC(n, e) {
  for (var t of n.options)
    t.selected = ~e.indexOf(Rs(t));
}
function Rs(n) {
  return "__value" in n ? n.__value : n.value;
}
function Vo(n) {
  return function(...e) {
    var t = (
      /** @type {Event} */
      e[0]
    );
    return t.preventDefault(), n == null ? void 0 : n.apply(this, e);
  };
}
function kl(n = !1) {
  const e = (
    /** @type {ComponentContextLegacy} */
    xs
  ), t = e.l.u;
  if (!t) return;
  let i = () => el(e.s);
  if (n) {
    let r = 0, s = (
      /** @type {Record<string, any>} */
      {}
    );
    const o = e1(() => {
      let a = !1;
      const l = e.s;
      for (const c in l)
        l[c] !== s[c] && (s[c] = l[c], a = !0);
      return a && r++, r;
    });
    i = () => A(o);
  }
  t.b.length && Zb(() => {
    Ep(e, i), Zd(t.b);
  }), Re(() => {
    const r = Wr(() => t.m.map(Qb));
    return () => {
      for (const s of r)
        typeof s == "function" && s();
    };
  }), t.a.length && Re(() => {
    Ep(e, i), Zd(t.a);
  });
}
function Ep(n, e) {
  if (n.l.s)
    for (const t of n.l.s) A(t);
  e();
}
function Xa(n, e) {
  var s;
  var t = (
    /** @type {Record<string, Function[] | Function>} */
    (s = n.$$events) == null ? void 0 : s[e.type]
  ), i = Nu(t) ? t.slice() : t == null ? [] : [t];
  for (var r of i)
    r.call(this, e);
}
function _0(n) {
  xs === null && Zp(), t1 && xs.l !== null ? JC(xs).m.push(n) : Re(() => {
    const e = Wr(n);
    if (typeof e == "function") return (
      /** @type {() => void} */
      e
    );
  });
}
function qC(n, e, { bubbles: t = !1, cancelable: i = !1 } = {}) {
  return new CustomEvent(n, { detail: e, bubbles: t, cancelable: i });
}
function GC() {
  const n = xs;
  return n === null && Zp(), (e, t, i) => {
    var s;
    const r = (
      /** @type {Record<string, Function | Function[]>} */
      (s = n.s.$$events) == null ? void 0 : s[
        /** @type {any} */
        e
      ]
    );
    if (r) {
      const o = Nu(r) ? r.slice() : [r], a = qC(
        /** @type {string} */
        e,
        t,
        i
      );
      for (const l of o)
        l.call(n.x, a);
      return !a.defaultPrevented;
    }
    return !0;
  };
}
function JC(n) {
  var e = (
    /** @type {ComponentContextLegacy} */
    n.l
  );
  return e.u ?? (e.u = { a: [], b: [], m: [] });
}
const b0 = (n, e) => {
  let t;
  return (...i) => {
    clearTimeout(t), t = setTimeout(() => n(...i), e);
  };
};
var ys = { exports: {} };
/*!
 * Platform.js v1.3.6
 * Copyright 2014-2020 Benjamin Tan
 * Copyright 2011-2013 John-David Dalton
 * Available under MIT license
 */
var XC = ys.exports, Cp;
function YC() {
  return Cp || (Cp = 1, function(n, e) {
    (function() {
      var t = {
        function: !0,
        object: !0
      }, i = t[typeof window] && window || this, r = e, s = n && !n.nodeType && n, o = r && s && typeof _h == "object" && _h;
      o && (o.global === o || o.window === o || o.self === o) && (i = o);
      var a = Math.pow(2, 53) - 1, l = /\bOpera/, c = Object.prototype, u = c.hasOwnProperty, d = c.toString;
      function f(y) {
        return y = String(y), y.charAt(0).toUpperCase() + y.slice(1);
      }
      function h(y, T, _) {
        var C = {
          "10.0": "10",
          "6.4": "10 Technical Preview",
          "6.3": "8.1",
          "6.2": "8",
          "6.1": "Server 2008 R2 / 7",
          "6.0": "Server 2008 / Vista",
          "5.2": "Server 2003 / XP 64-bit",
          "5.1": "XP",
          "5.01": "2000 SP1",
          "5.0": "2000",
          "4.0": "NT",
          "4.90": "ME"
        };
        return T && _ && /^Win/i.test(y) && !/^Windows Phone /i.test(y) && (C = C[/[\d.]+$/.exec(y)]) && (y = "Windows " + C), y = String(y), T && _ && (y = y.replace(RegExp(T, "i"), _)), y = b(
          y.replace(/ ce$/i, " CE").replace(/\bhpw/i, "web").replace(/\bMacintosh\b/, "Mac OS").replace(/_PowerPC\b/i, " OS").replace(/\b(OS X) [^ \d]+/i, "$1").replace(/\bMac (OS X)\b/, "$1").replace(/\/(\d)/, " $1").replace(/_/g, ".").replace(/(?: BePC|[ .]*fc[ \d.]+)$/i, "").replace(/\bx86\.64\b/gi, "x86_64").replace(/\b(Windows Phone) OS\b/, "$1").replace(/\b(Chrome OS \w+) [\d.]+\b/, "$1").split(" on ")[0]
        ), y;
      }
      function p(y, T) {
        var _ = -1, C = y ? y.length : 0;
        if (typeof C == "number" && C > -1 && C <= a)
          for (; ++_ < C; )
            T(y[_], _, y);
        else
          m(y, T);
      }
      function b(y) {
        return y = E(y), /^(?:webOS|i(?:OS|P))/.test(y) ? y : f(y);
      }
      function m(y, T) {
        for (var _ in y)
          u.call(y, _) && T(y[_], _, y);
      }
      function g(y) {
        return y == null ? f(y) : d.call(y).slice(8, -1);
      }
      function v(y, T) {
        var _ = y != null ? typeof y[T] : "number";
        return !/^(?:boolean|number|string|undefined)$/.test(_) && (_ == "object" ? !!y[T] : !0);
      }
      function x(y) {
        return String(y).replace(/([ -])(?!$)/g, "$1?");
      }
      function w(y, T) {
        var _ = null;
        return p(y, function(C, M) {
          _ = T(_, C, M, y);
        }), _;
      }
      function E(y) {
        return String(y).replace(/^ +| +$/g, "");
      }
      function k(y) {
        var T = i, _ = y && typeof y == "object" && g(y) != "String";
        _ && (T = y, y = null);
        var C = T.navigator || {}, M = C.userAgent || "";
        y || (y = M);
        var H = _ ? !!C.likeChrome : /\bChrome\b/.test(y) && !/internal|\n/i.test(d.toString()), D = "Object", F = _ ? D : "ScriptBridgingProxyObject", W = _ ? D : "Environment", G = _ && T.java ? "JavaPackage" : g(T.java), re = _ ? D : "RuntimeObject", Z = /\bJava/.test(G) && T.java, ue = Z && g(T.environment) == W, he = Z ? "a" : "α", Te = Z ? "b" : "β", oe = T.document || {}, Ve = T.operamini || T.opera, be = l.test(be = _ && Ve ? Ve["[[Class]]"] : g(Ve)) ? be : Ve = null, R, tt = y, ge = [], rt = null, ft = y == M, ne = ft && Ve && typeof Ve.version == "function" && Ve.version(), xt, we = Be([
          { label: "EdgeHTML", pattern: "Edge" },
          "Trident",
          { label: "WebKit", pattern: "AppleWebKit" },
          "iCab",
          "Presto",
          "NetFront",
          "Tasman",
          "KHTML",
          "Gecko"
        ]), P = Xe([
          "Adobe AIR",
          "Arora",
          "Avant Browser",
          "Breach",
          "Camino",
          "Electron",
          "Epiphany",
          "Fennec",
          "Flock",
          "Galeon",
          "GreenBrowser",
          "iCab",
          "Iceweasel",
          "K-Meleon",
          "Konqueror",
          "Lunascape",
          "Maxthon",
          { label: "Microsoft Edge", pattern: "(?:Edge|Edg|EdgA|EdgiOS)" },
          "Midori",
          "Nook Browser",
          "PaleMoon",
          "PhantomJS",
          "Raven",
          "Rekonq",
          "RockMelt",
          { label: "Samsung Internet", pattern: "SamsungBrowser" },
          "SeaMonkey",
          { label: "Silk", pattern: "(?:Cloud9|Silk-Accelerated)" },
          "Sleipnir",
          "SlimBrowser",
          { label: "SRWare Iron", pattern: "Iron" },
          "Sunrise",
          "Swiftfox",
          "Vivaldi",
          "Waterfox",
          "WebPositive",
          { label: "Yandex Browser", pattern: "YaBrowser" },
          { label: "UC Browser", pattern: "UCBrowser" },
          "Opera Mini",
          { label: "Opera Mini", pattern: "OPiOS" },
          "Opera",
          { label: "Opera", pattern: "OPR" },
          "Chromium",
          "Chrome",
          { label: "Chrome", pattern: "(?:HeadlessChrome)" },
          { label: "Chrome Mobile", pattern: "(?:CriOS|CrMo)" },
          { label: "Firefox", pattern: "(?:Firefox|Minefield)" },
          { label: "Firefox for iOS", pattern: "FxiOS" },
          { label: "IE", pattern: "IEMobile" },
          { label: "IE", pattern: "MSIE" },
          "Safari"
        ]), Q = on([
          { label: "BlackBerry", pattern: "BB10" },
          "BlackBerry",
          { label: "Galaxy S", pattern: "GT-I9000" },
          { label: "Galaxy S2", pattern: "GT-I9100" },
          { label: "Galaxy S3", pattern: "GT-I9300" },
          { label: "Galaxy S4", pattern: "GT-I9500" },
          { label: "Galaxy S5", pattern: "SM-G900" },
          { label: "Galaxy S6", pattern: "SM-G920" },
          { label: "Galaxy S6 Edge", pattern: "SM-G925" },
          { label: "Galaxy S7", pattern: "SM-G930" },
          { label: "Galaxy S7 Edge", pattern: "SM-G935" },
          "Google TV",
          "Lumia",
          "iPad",
          "iPod",
          "iPhone",
          "Kindle",
          { label: "Kindle Fire", pattern: "(?:Cloud9|Silk-Accelerated)" },
          "Nexus",
          "Nook",
          "PlayBook",
          "PlayStation Vita",
          "PlayStation",
          "TouchPad",
          "Transformer",
          { label: "Wii U", pattern: "WiiU" },
          "Wii",
          "Xbox One",
          { label: "Xbox 360", pattern: "Xbox" },
          "Xoom"
        ]), me = st({
          Apple: { iPad: 1, iPhone: 1, iPod: 1 },
          Alcatel: {},
          Archos: {},
          Amazon: { Kindle: 1, "Kindle Fire": 1 },
          Asus: { Transformer: 1 },
          "Barnes & Noble": { Nook: 1 },
          BlackBerry: { PlayBook: 1 },
          Google: { "Google TV": 1, Nexus: 1 },
          HP: { TouchPad: 1 },
          HTC: {},
          Huawei: {},
          Lenovo: {},
          LG: {},
          Microsoft: { Xbox: 1, "Xbox One": 1 },
          Motorola: { Xoom: 1 },
          Nintendo: { "Wii U": 1, Wii: 1 },
          Nokia: { Lumia: 1 },
          Oppo: {},
          Samsung: { "Galaxy S": 1, "Galaxy S2": 1, "Galaxy S3": 1, "Galaxy S4": 1 },
          Sony: { PlayStation: 1, "PlayStation Vita": 1 },
          Xiaomi: { Mi: 1, Redmi: 1 }
        }), j = Tt([
          "Windows Phone",
          "KaiOS",
          "Android",
          "CentOS",
          { label: "Chrome OS", pattern: "CrOS" },
          "Debian",
          { label: "DragonFly BSD", pattern: "DragonFly" },
          "Fedora",
          "FreeBSD",
          "Gentoo",
          "Haiku",
          "Kubuntu",
          "Linux Mint",
          "OpenBSD",
          "Red Hat",
          "SuSE",
          "Ubuntu",
          "Xubuntu",
          "Cygwin",
          "Symbian OS",
          "hpwOS",
          "webOS ",
          "webOS",
          "Tablet OS",
          "Tizen",
          "Linux",
          "Mac OS X",
          "Macintosh",
          "Mac",
          "Windows 98;",
          "Windows "
        ]);
        function Be(Ue) {
          return w(Ue, function(Pe, Se) {
            return Pe || RegExp("\\b" + (Se.pattern || x(Se)) + "\\b", "i").exec(y) && (Se.label || Se);
          });
        }
        function st(Ue) {
          return w(Ue, function(Pe, Se, At) {
            return Pe || (Se[Q] || Se[/^[a-z]+(?: +[a-z]+\b)*/i.exec(Q)] || RegExp("\\b" + x(At) + "(?:\\b|\\w*\\d)", "i").exec(y)) && At;
          });
        }
        function Xe(Ue) {
          return w(Ue, function(Pe, Se) {
            return Pe || RegExp("\\b" + (Se.pattern || x(Se)) + "\\b", "i").exec(y) && (Se.label || Se);
          });
        }
        function Tt(Ue) {
          return w(Ue, function(Pe, Se) {
            var At = Se.pattern || x(Se);
            return !Pe && (Pe = RegExp("\\b" + At + "(?:/[\\d.]+|[ \\w.]*)", "i").exec(y)) && (Pe = h(Pe, At, Se.label || Se)), Pe;
          });
        }
        function on(Ue) {
          return w(Ue, function(Pe, Se) {
            var At = Se.pattern || x(Se);
            return !Pe && (Pe = RegExp("\\b" + At + " *\\d+[.\\w_]*", "i").exec(y) || RegExp("\\b" + At + " *\\w+-[\\w]*", "i").exec(y) || RegExp("\\b" + At + "(?:; *(?:[a-z]+[_-])?[a-z]+\\d+|[^ ();-]*)", "i").exec(y)) && ((Pe = String(Se.label && !RegExp(At, "i").test(Se.label) ? Se.label : Pe).split("/"))[1] && !/[\d.]+/.test(Pe[0]) && (Pe[0] += " " + Pe[1]), Se = Se.label || Se, Pe = b(Pe[0].replace(RegExp(At, "i"), Se).replace(RegExp("; *(?:" + Se + "[_-])?", "i"), " ").replace(RegExp("(" + Se + ")[-_.]?(\\w)", "i"), "$1 $2"))), Pe;
          });
        }
        function ht(Ue) {
          return w(Ue, function(Pe, Se) {
            return Pe || (RegExp(Se + "(?:-[\\d.]+/|(?: for [\\w-]+)?[ /-])([\\d.]+[^ ();/_-]*)", "i").exec(y) || 0)[1] || null;
          });
        }
        function Dt() {
          return this.description || "";
        }
        if (we && (we = [we]), /\bAndroid\b/.test(j) && !Q && (R = /\bAndroid[^;]*;(.*?)(?:Build|\) AppleWebKit)\b/i.exec(y)) && (Q = E(R[1]).replace(/^[a-z]{2}-[a-z]{2};\s*/i, "") || null), me && !Q ? Q = on([me]) : me && Q && (Q = Q.replace(RegExp("^(" + x(me) + ")[-_.\\s]", "i"), me + " ").replace(RegExp("^(" + x(me) + ")[-_.]?(\\w)", "i"), me + " $2")), (R = /\bGoogle TV\b/.exec(Q)) && (Q = R[0]), /\bSimulator\b/i.test(y) && (Q = (Q ? Q + " " : "") + "Simulator"), P == "Opera Mini" && /\bOPiOS\b/.test(y) && ge.push("running in Turbo/Uncompressed mode"), P == "IE" && /\blike iPhone OS\b/.test(y) ? (R = k(y.replace(/like iPhone OS/, "")), me = R.manufacturer, Q = R.product) : /^iP/.test(Q) ? (P || (P = "Safari"), j = "iOS" + ((R = / OS ([\d_]+)/i.exec(y)) ? " " + R[1].replace(/_/g, ".") : "")) : P == "Konqueror" && /^Linux\b/i.test(j) ? j = "Kubuntu" : me && me != "Google" && (/Chrome/.test(P) && !/\bMobile Safari\b/i.test(y) || /\bVita\b/.test(Q)) || /\bAndroid\b/.test(j) && /^Chrome/.test(P) && /\bVersion\//i.test(y) ? (P = "Android Browser", j = /\bAndroid\b/.test(j) ? j : "Android") : P == "Silk" ? (/\bMobi/i.test(y) || (j = "Android", ge.unshift("desktop mode")), /Accelerated *= *true/i.test(y) && ge.unshift("accelerated")) : P == "UC Browser" && /\bUCWEB\b/.test(y) ? ge.push("speed mode") : P == "PaleMoon" && (R = /\bFirefox\/([\d.]+)\b/.exec(y)) ? ge.push("identifying as Firefox " + R[1]) : P == "Firefox" && (R = /\b(Mobile|Tablet|TV)\b/i.exec(y)) ? (j || (j = "Firefox OS"), Q || (Q = R[1])) : !P || (R = !/\bMinefield\b/i.test(y) && /\b(?:Firefox|Safari)\b/.exec(P)) ? (P && !Q && /[\/,]|^[^(]+?\)/.test(y.slice(y.indexOf(R + "/") + 8)) && (P = null), (R = Q || me || j) && (Q || me || /\b(?:Android|Symbian OS|Tablet OS|webOS)\b/.test(j)) && (P = /[a-z]+(?: Hat)?/i.exec(/\bAndroid\b/.test(j) ? j : R) + " Browser")) : P == "Electron" && (R = (/\bChrome\/([\d.]+)\b/.exec(y) || 0)[1]) && ge.push("Chromium " + R), ne || (ne = ht([
          "(?:Cloud9|CriOS|CrMo|Edge|Edg|EdgA|EdgiOS|FxiOS|HeadlessChrome|IEMobile|Iron|Opera ?Mini|OPiOS|OPR|Raven|SamsungBrowser|Silk(?!/[\\d.]+$)|UCBrowser|YaBrowser)",
          "Version",
          x(P),
          "(?:Firefox|Minefield|NetFront)"
        ])), (R = we == "iCab" && parseFloat(ne) > 3 && "WebKit" || /\bOpera\b/.test(P) && (/\bOPR\b/.test(y) ? "Blink" : "Presto") || /\b(?:Midori|Nook|Safari)\b/i.test(y) && !/^(?:Trident|EdgeHTML)$/.test(we) && "WebKit" || !we && /\bMSIE\b/i.test(y) && (j == "Mac OS" ? "Tasman" : "Trident") || we == "WebKit" && /\bPlayStation\b(?! Vita\b)/i.test(P) && "NetFront") && (we = [R]), P == "IE" && (R = (/; *(?:XBLWP|ZuneWP)(\d+)/i.exec(y) || 0)[1]) ? (P += " Mobile", j = "Windows Phone " + (/\+$/.test(R) ? R : R + ".x"), ge.unshift("desktop mode")) : /\bWPDesktop\b/i.test(y) ? (P = "IE Mobile", j = "Windows Phone 8.x", ge.unshift("desktop mode"), ne || (ne = (/\brv:([\d.]+)/.exec(y) || 0)[1])) : P != "IE" && we == "Trident" && (R = /\brv:([\d.]+)/.exec(y)) && (P && ge.push("identifying as " + P + (ne ? " " + ne : "")), P = "IE", ne = R[1]), ft) {
          if (v(T, "global"))
            if (Z && (R = Z.lang.System, tt = R.getProperty("os.arch"), j = j || R.getProperty("os.name") + " " + R.getProperty("os.version")), ue) {
              try {
                ne = T.require("ringo/engine").version.join("."), P = "RingoJS";
              } catch {
                (R = T.system) && R.global.system == T.system && (P = "Narwhal", j || (j = R[0].os || null));
              }
              P || (P = "Rhino");
            } else typeof T.process == "object" && !T.process.browser && (R = T.process) && (typeof R.versions == "object" && (typeof R.versions.electron == "string" ? (ge.push("Node " + R.versions.node), P = "Electron", ne = R.versions.electron) : typeof R.versions.nw == "string" && (ge.push("Chromium " + ne, "Node " + R.versions.node), P = "NW.js", ne = R.versions.nw)), P || (P = "Node.js", tt = R.arch, j = R.platform, ne = /[\d.]+/.exec(R.version), ne = ne ? ne[0] : null));
          else g(R = T.runtime) == F ? (P = "Adobe AIR", j = R.flash.system.Capabilities.os) : g(R = T.phantom) == re ? (P = "PhantomJS", ne = (R = R.version || null) && R.major + "." + R.minor + "." + R.patch) : typeof oe.documentMode == "number" && (R = /\bTrident\/(\d+)/i.exec(y)) ? (ne = [ne, oe.documentMode], (R = +R[1] + 4) != ne[1] && (ge.push("IE " + ne[1] + " mode"), we && (we[1] = ""), ne[1] = R), ne = P == "IE" ? String(ne[1].toFixed(1)) : ne[0]) : typeof oe.documentMode == "number" && /^(?:Chrome|Firefox)\b/.test(P) && (ge.push("masking as " + P + " " + ne), P = "IE", ne = "11.0", we = ["Trident"], j = "Windows");
          j = j && b(j);
        }
        if (ne && (R = /(?:[ab]|dp|pre|[ab]\d+pre)(?:\d+\+?)?$/i.exec(ne) || /(?:alpha|beta)(?: ?\d)?/i.exec(y + ";" + (ft && C.appMinorVersion)) || /\bMinefield\b/i.test(y) && "a") && (rt = /b/i.test(R) ? "beta" : "alpha", ne = ne.replace(RegExp(R + "\\+?$"), "") + (rt == "beta" ? Te : he) + (/\d+\+?/.exec(R) || "")), P == "Fennec" || P == "Firefox" && /\b(?:Android|Firefox OS|KaiOS)\b/.test(j))
          P = "Firefox Mobile";
        else if (P == "Maxthon" && ne)
          ne = ne.replace(/\.[\d.]+/, ".x");
        else if (/\bXbox\b/i.test(Q))
          Q == "Xbox 360" && (j = null), Q == "Xbox 360" && /\bIEMobile\b/.test(y) && ge.unshift("mobile mode");
        else if ((/^(?:Chrome|IE|Opera)$/.test(P) || P && !Q && !/Browser|Mobi/.test(P)) && (j == "Windows CE" || /Mobi/i.test(y)))
          P += " Mobile";
        else if (P == "IE" && ft)
          try {
            T.external === null && ge.unshift("platform preview");
          } catch {
            ge.unshift("embedded");
          }
        else (/\bBlackBerry\b/.test(Q) || /\bBB10\b/.test(y)) && (R = (RegExp(Q.replace(/ +/g, " *") + "/([.\\d]+)", "i").exec(y) || 0)[1] || ne) ? (R = [R, /BB10/.test(y)], j = (R[1] ? (Q = null, me = "BlackBerry") : "Device Software") + " " + R[0], ne = null) : this != m && Q != "Wii" && (ft && Ve || /Opera/.test(P) && /\b(?:MSIE|Firefox)\b/i.test(y) || P == "Firefox" && /\bOS X (?:\d+\.){2,}/.test(j) || P == "IE" && (j && !/^Win/.test(j) && ne > 5.5 || /\bWindows XP\b/.test(j) && ne > 8 || ne == 8 && !/\bTrident\b/.test(y))) && !l.test(R = k.call(m, y.replace(l, "") + ";")) && R.name && (R = "ing as " + R.name + ((R = R.version) ? " " + R : ""), l.test(P) ? (/\bIE\b/.test(R) && j == "Mac OS" && (j = null), R = "identify" + R) : (R = "mask" + R, be ? P = b(be.replace(/([a-z])([A-Z])/g, "$1 $2")) : P = "Opera", /\bIE\b/.test(R) && (j = null), ft || (ne = null)), we = ["Presto"], ge.push(R));
        (R = (/\bAppleWebKit\/([\d.]+\+?)/i.exec(y) || 0)[1]) && (R = [parseFloat(R.replace(/\.(\d)$/, ".0$1")), R], P == "Safari" && R[1].slice(-1) == "+" ? (P = "WebKit Nightly", rt = "alpha", ne = R[1].slice(0, -1)) : (ne == R[1] || ne == (R[2] = (/\bSafari\/([\d.]+\+?)/i.exec(y) || 0)[1])) && (ne = null), R[1] = (/\b(?:Headless)?Chrome\/([\d.]+)/i.exec(y) || 0)[1], R[0] == 537.36 && R[2] == 537.36 && parseFloat(R[1]) >= 28 && we == "WebKit" && (we = ["Blink"]), !ft || !H && !R[1] ? (we && (we[1] = "like Safari"), R = (R = R[0], R < 400 ? 1 : R < 500 ? 2 : R < 526 ? 3 : R < 533 ? 4 : R < 534 ? "4+" : R < 535 ? 5 : R < 537 ? 6 : R < 538 ? 7 : R < 601 ? 8 : R < 602 ? 9 : R < 604 ? 10 : R < 606 ? 11 : R < 608 ? 12 : "12")) : (we && (we[1] = "like Chrome"), R = R[1] || (R = R[0], R < 530 ? 1 : R < 532 ? 2 : R < 532.05 ? 3 : R < 533 ? 4 : R < 534.03 ? 5 : R < 534.07 ? 6 : R < 534.1 ? 7 : R < 534.13 ? 8 : R < 534.16 ? 9 : R < 534.24 ? 10 : R < 534.3 ? 11 : R < 535.01 ? 12 : R < 535.02 ? "13+" : R < 535.07 ? 15 : R < 535.11 ? 16 : R < 535.19 ? 17 : R < 536.05 ? 18 : R < 536.1 ? 19 : R < 537.01 ? 20 : R < 537.11 ? "21+" : R < 537.13 ? 23 : R < 537.18 ? 24 : R < 537.24 ? 25 : R < 537.36 ? 26 : we != "Blink" ? "27" : "28")), we && (we[1] += " " + (R += typeof R == "number" ? ".x" : /[.+]/.test(R) ? "" : "+")), P == "Safari" && (!ne || parseInt(ne) > 45) ? ne = R : P == "Chrome" && /\bHeadlessChrome/i.test(y) && ge.unshift("headless")), P == "Opera" && (R = /\bzbov|zvav$/.exec(j)) ? (P += " ", ge.unshift("desktop mode"), R == "zvav" ? (P += "Mini", ne = null) : P += "Mobile", j = j.replace(RegExp(" *" + R + "$"), "")) : P == "Safari" && /\bChrome\b/.exec(we && we[1]) ? (ge.unshift("desktop mode"), P = "Chrome Mobile", ne = null, /\bOS X\b/.test(j) ? (me = "Apple", j = "iOS 4.3+") : j = null) : /\bSRWare Iron\b/.test(P) && !ne && (ne = ht("Chrome")), ne && ne.indexOf(R = /[\d.]+$/.exec(j)) == 0 && y.indexOf("/" + R + "-") > -1 && (j = E(j.replace(R, ""))), j && j.indexOf(P) != -1 && !RegExp(P + " OS").test(j) && (j = j.replace(RegExp(" *" + x(P) + " *"), "")), we && !/\b(?:Avant|Nook)\b/.test(P) && (/Browser|Lunascape|Maxthon/.test(P) || P != "Safari" && /^iOS/.test(j) && /\bSafari\b/.test(we[1]) || /^(?:Adobe|Arora|Breach|Midori|Opera|Phantom|Rekonq|Rock|Samsung Internet|Sleipnir|SRWare Iron|Vivaldi|Web)/.test(P) && we[1]) && (R = we[we.length - 1]) && ge.push(R), ge.length && (ge = ["(" + ge.join("; ") + ")"]), me && Q && Q.indexOf(me) < 0 && ge.push("on " + me), Q && ge.push((/^on /.test(ge[ge.length - 1]) ? "" : "on ") + Q), j && (R = / ([\d.+]+)$/.exec(j), xt = R && j.charAt(j.length - R[0].length - 1) == "/", j = {
          architecture: 32,
          family: R && !xt ? j.replace(R[0], "") : j,
          version: R ? R[1] : null,
          toString: function() {
            var Ue = this.version;
            return this.family + (Ue && !xt ? " " + Ue : "") + (this.architecture == 64 ? " 64-bit" : "");
          }
        }), (R = /\b(?:AMD|IA|Win|WOW|x86_|x)64\b/i.exec(tt)) && !/\bi686\b/i.test(tt) ? (j && (j.architecture = 64, j.family = j.family.replace(RegExp(" *" + R), "")), P && (/\bWOW64\b/i.test(y) || ft && /\w(?:86|32)$/.test(C.cpuClass || C.platform) && !/\bWin64; x64\b/i.test(y)) && ge.unshift("32-bit")) : j && /^OS X/.test(j.family) && P == "Chrome" && parseFloat(ne) >= 39 && (j.architecture = 64), y || (y = null);
        var $e = {};
        return $e.description = y, $e.layout = we && we[0], $e.manufacturer = me, $e.name = P, $e.prerelease = rt, $e.product = Q, $e.ua = y, $e.version = P && ne, $e.os = j || {
          /**
           * The CPU architecture the OS is built for.
           *
           * @memberOf platform.os
           * @type number|null
           */
          architecture: null,
          /**
           * The family of the OS.
           *
           * Common values include:
           * "Windows", "Windows Server 2008 R2 / 7", "Windows Server 2008 / Vista",
           * "Windows XP", "OS X", "Linux", "Ubuntu", "Debian", "Fedora", "Red Hat",
           * "SuSE", "Android", "iOS" and "Windows Phone"
           *
           * @memberOf platform.os
           * @type string|null
           */
          family: null,
          /**
           * The version of the OS.
           *
           * @memberOf platform.os
           * @type string|null
           */
          version: null,
          /**
           * Returns the OS string.
           *
           * @memberOf platform.os
           * @returns {string} The OS string.
           */
          toString: function() {
            return "null";
          }
        }, $e.parse = k, $e.toString = Dt, $e.version && ge.unshift(ne), $e.name && ge.unshift(P), j && P && !(j == String(j).split(" ")[0] && (j == P.split(" ")[0] || Q)) && ge.push(Q ? "(" + j + ")" : "on " + j), ge.length && ($e.description = ge.join(" ")), $e;
      }
      var S = k();
      r && s ? m(S, function(y, T) {
        r[T] = y;
      }) : i.platform = S;
    }).call(XC);
  }(ys, ys.exports)), ys.exports;
}
var ZC = YC();
const QC = /* @__PURE__ */ ok(ZC), wu = {
  mac: {
    cmd: "⌘",
    alt: "⌥",
    ctrl: "⌃",
    shift: "⇧"
  },
  other: {
    cmd: "Ctrl+",
    alt: "Alt+",
    ctrl: "Ctrl+",
    shift: "Shift+"
  }
};
let Tp = !1, v0 = wu.other;
const eT = (n) => {
  var e;
  Tp = ["OS X", "iOS"].includes(((e = n.os) == null ? void 0 : e.family) || ""), v0 = Tp ? wu.mac : wu.other;
};
eT(QC);
const Pd = (n) => n.replace(/(ctrl|cmd|alt|shift)\+/g, (e, t) => v0[t] || t), tT = `<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24">
    <path fill-rule="evenodd" d="M12.767 13.084l-2.211 2.211 2.233 2.233-.789.789-3-3 3-3 .767.767zm.884 4.538l2.327-2.327-2.305-2.305.673-.673 3 3-3 3-.695-.695zm-5.561-15.622h9.916c1.101 0 1.993.898 1.993 1.991v16.018c0 1.099-.895 1.991-1.994 1.991h-12.012c-1.101 0-1.994-.897-1.994-1.999v-14.044l4.09-3.957zm.599 2l-.1 2.606h-2.59v13.394h12v-16h-9.31z"/>
</svg>
`;
n1();
var nT = Y("<div></div>");
function y0(n, e) {
  ye(e, !0);
  let t = ee(e, "element", 7), i = ee(e, "event", 7), r = ee(e, "onReady", 7);
  if (typeof t() == "string") {
    const a = customElements.get(t());
    if (a)
      t(new a());
    else {
      const l = t();
      t(document.createElement("div")), t().innerHTML = l;
    }
  }
  let s = de(void 0);
  Re(() => {
    A(s).appendChild(t()), setTimeout(() => {
      t().dispatchEvent(i()), r()(t());
    });
  });
  var o = nT();
  return Ge(o, (a) => K(s, a), () => A(s)), kn("mt-component-update", o, function(a) {
    Xa.call(this, e, a);
  }), V(n, o), xe({
    get element() {
      return t();
    },
    set element(a) {
      t(a), te();
    },
    get event() {
      return i();
    },
    set event(a) {
      i(a), te();
    },
    get onReady() {
      return r();
    },
    set onReady(a) {
      r(a), te();
    }
  });
}
ve(y0, { element: {}, event: {}, onReady: {} }, [], [], !0);
var iT = Y('<div class="d-flex flex-column"><!> <!> <!></div>');
function rT(n, e) {
  ye(e, !1);
  let t = ee(e, "namespace", 12), i = ee(e, "detail", 12), r = _r([]), s = 0;
  window.MT.UI.Component.getAll(t()).then((b) => {
    K(r, b);
  });
  let a = [], l = _r();
  function c(b) {
    ++s === A(r).length && [...A(l).childNodes].filter((m) => m instanceof HTMLElement).forEach((m, g) => {
      var v, x;
      (x = m.style).order || (x.order = ((v = m.firstElementChild) == null ? void 0 : v.style.order) || String((g + 1) * 100));
    });
  }
  function u(b) {
    b.dispatchEvent(new CustomEvent("mt-component-init", { detail: i() })), c();
  }
  _0(() => {
    A(l).addEventListener("mt-component-update", (b) => {
      a.forEach((m) => {
        m.dispatchEvent(new CustomEvent("mt-component-update", { detail: b.detail }));
      });
    });
  }), kl();
  var d = iT(), f = L(d);
  kr(f, e, "prepend", {});
  var h = B(f, 2);
  pt(h, 1, () => A(r), En, (b, m) => {
    var g = ki(), v = Le(g);
    {
      var x = (E) => {
        var k = ki(), S = Le(k);
        Jr(S, () => A(m), !1, (y, T) => {
          nt(y, (_) => u == null ? void 0 : u(_)), kn("mt-component-update", y, function(_) {
            Xa.call(this, e, _);
          });
        }), V(E, k);
      }, w = (E) => {
        const k = ta(() => new CustomEvent("mt-component-init", { detail: i() }));
        y0(E, {
          get element() {
            return A(m);
          },
          get event() {
            return A(k);
          },
          onReady: c,
          $$events: {
            "mt-component-update"(S) {
              Xa.call(this, e, S);
            }
          }
        });
      };
      lt(v, (E) => {
        typeof A(m) == "string" && customElements.get(A(m)) ? E(x) : E(w, !1);
      });
    }
    V(b, g);
  });
  var p = B(h, 2);
  return kr(p, e, "append", {}), O(d), Ge(d, (b) => K(l, b), () => A(l)), V(n, d), xe({
    get namespace() {
      return t();
    },
    set namespace(b) {
      t(b), te();
    },
    get detail() {
      return i();
    },
    set detail(b) {
      i(b), te();
    }
  });
}
ve(rT, { namespace: {}, detail: {} }, ["prepend", "append"], [], !0);
const sT = (n) => n;
function oT(n) {
  const e = n - 1;
  return e * e * e + 1;
}
function Ap(n) {
  const e = typeof n == "string" && n.match(/^\s*(-?[\d.]+)([^\s]*)\s*$/);
  return e ? [parseFloat(e[1]), e[2] || "px"] : [
    /** @type {number} */
    n,
    "px"
  ];
}
function Mp(n, { delay: e = 0, duration: t = 400, easing: i = sT } = {}) {
  const r = +getComputedStyle(n).opacity;
  return {
    delay: e,
    duration: t,
    easing: i,
    css: (s) => `opacity: ${s * r}`
  };
}
function Op(n, { delay: e = 0, duration: t = 400, easing: i = oT, x: r = 0, y: s = 0, opacity: o = 0 } = {}) {
  const a = getComputedStyle(n), l = +a.opacity, c = a.transform === "none" ? "" : a.transform, u = l * (1 - o), [d, f] = Ap(r), [h, p] = Ap(s);
  return {
    delay: e,
    duration: t,
    easing: i,
    css: (b, m) => `
			transform: ${c} translate(${(1 - b) * d}${f}, ${(1 - b) * h}${p});
			opacity: ${l - u * m}`
  };
}
function aT(n) {
  return --n * n * n * n * n + 1;
}
const x0 = Symbol();
function lT(n) {
  i1(x0, n);
}
function cT() {
  return r1(x0);
}
var uT = Y('<div class="modal show svelte-1m2bluk" tabindex="-1" role="dialog" aria-modal="true"><div role="document"><div class="modal-content"><!></div></div></div> <div class="modal-backdrop show"></div>', 1);
const dT = {
  hash: "svelte-1m2bluk",
  code: ".modal.svelte-1m2bluk {display:block;}"
};
function On(n, e) {
  ye(e, !1), Wt(n, dT);
  const t = GC();
  let i = ee(e, "open", 12, !0), r = ee(e, "id", 12, void 0), s = ee(e, "size", 12, void 0), o = ee(e, "describedby", 12, ""), a = ee(e, "labelledby", 12, "");
  function l() {
    document.body.classList.add("modal-open");
  }
  function c() {
    document.body.classList.remove("modal-open");
  }
  lT({
    closeModal() {
      i(!1);
    }
  }), Qp(() => el(i()), () => {
    i() ? l() : c();
  }), em(), kl();
  var u = ki(), d = Le(u);
  {
    var f = (h) => {
      var p = uT(), b = Le(p), m = L(b), g = L(m), v = L(g);
      kr(v, e, "default", {}), O(g), O(m), O(b);
      var x = B(b, 2);
      ie(() => {
        Ae(b, "id", r()), Ae(b, "aria-labelledby", a()), Ae(b, "aria-describedby", o()), gt(m, 1, `modal-dialog ${s() ? `modal-${s()}` : ""}`, "svelte-1m2bluk");
      }), Fo(1, m, () => Op, () => ({ y: -50, duration: 300 })), Fo(2, m, () => Op, () => ({ y: -50, duration: 300, easing: aT })), kn("introend", b, () => {
        t("open");
      }), kn("outroend", b, () => {
        setTimeout(
          () => {
            t("close");
          },
          100
        );
      }), Fo(3, b, () => Mp), Fo(3, x, () => Mp, () => ({ duration: 150 })), V(h, p);
    };
    lt(d, (h) => {
      i() && h(f);
    });
  }
  return V(n, u), xe({
    get open() {
      return i();
    },
    set open(h) {
      i(h), te();
    },
    get id() {
      return r();
    },
    set id(h) {
      r(h), te();
    },
    get size() {
      return s();
    },
    set size(h) {
      s(h), te();
    },
    get describedby() {
      return o();
    },
    set describedby(h) {
      o(h), te();
    },
    get labelledby() {
      return a();
    },
    set labelledby(h) {
      a(h), te();
    }
  });
}
ve(
  On,
  {
    open: {},
    id: {},
    size: {},
    describedby: {},
    labelledby: {}
  },
  ["default"],
  [],
  !0
);
var fT = Y('<div class="modal-header"><h4 class="modal-title"><!></h4> <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button></div>'), hT = Y('<div class="modal-footer"><!></div>'), pT = Y('<div><!> <div class="modal-body svelte-1grmgzm"><!></div> <!></div>');
const mT = {
  hash: "svelte-1grmgzm",
  code: ".modal-body.svelte-1grmgzm {max-height:600px;}"
};
function Nn(n, e) {
  const t = DC(e);
  ye(e, !1), Wt(n, mT);
  let i = cT(), r = ee(e, "close", 12, () => {
    i.closeModal();
  });
  kl();
  var s = pT(), o = L(s);
  {
    var a = (f) => {
      var h = fT(), p = L(h), b = L(p);
      kr(b, e, "title", {}), O(p);
      var m = B(p, 2);
      O(h), kn("click", m, function(...g) {
        var v;
        (v = r()) == null || v.apply(this, g);
      }), V(f, h);
    };
    lt(o, (f) => {
      t.title && f(a);
    });
  }
  var l = B(o, 2), c = L(l);
  kr(c, e, "body", {}), O(l);
  var u = B(l, 2);
  {
    var d = (f) => {
      var h = hT(), p = L(h);
      kr(p, e, "footer", {}), O(h), V(f, h);
    };
    lt(u, (f) => {
      t.footer && f(d);
    });
  }
  return O(s), V(n, s), xe({
    get close() {
      return r();
    },
    set close(f) {
      r(f), te();
    }
  });
}
ve(Nn, { close: {} }, ["title", "body", "footer"], [], !0);
var gT = Y('<li class="page-item" aria-hidden="true">...</li>'), _T = Y('<li class="page-item active"><a href="#" class="page-link"> <span class="visually-hidden">(current)</span></a></li>'), bT = Y('<li><a href="#" class="page-link"> </a></li>'), vT = Y('<div class="row"><div class="col-auto mx-auto"><nav aria-label="object list"><ul class="pagination d-none d-md-flex"><li class="page-item"><a href="#"></a></li> <!> <li class="page-item"><a href="#"></a></li></ul></nav></div></div>');
function yT(n, e) {
  ye(e, !1);
  let t = ee(e, "data", 12), i = _r(), r = _r(), s = _r();
  Qp(
    () => (A(i), el(t()), A(r), A(s)),
    () => {
      var u, d;
      K(i, ((u = t()) == null ? void 0 : u.totalPages) ?? 0), K(r, ((d = t()) == null ? void 0 : d.currentPage) ?? 0), K(s, []);
      let c = !1;
      for (let f = 1; f <= A(i); f++)
        f < 3 || f > A(i) - 2 || Math.abs(f - A(r)) < 2 ? (A(s).push(f), c = !1) : c || (A(s).push(0), c = !0);
    }
  ), em(), kl();
  var o = ki(), a = Le(o);
  {
    var l = (c) => {
      var u = vT(), d = L(u), f = L(d), h = L(f), p = L(h), b = L(p);
      let m;
      b.textContent = window.trans("Previous"), O(p);
      var g = B(p, 2);
      pt(g, 1, () => A(s), En, (E, k) => {
        var S = ki(), y = Le(S);
        {
          var T = (C) => {
            var M = gT();
            V(C, M);
          }, _ = (C, M) => {
            {
              var H = (F) => {
                var W = _T(), G = L(W), re = L(G);
                tm(), O(G), O(W), ie(() => z(re, `${A(k) ?? ""} `)), kn("click", G, Vo(function(Z) {
                  Xa.call(this, e, Z);
                })), V(F, W);
              }, D = (F) => {
                var W = bT();
                let G;
                var re = L(W), Z = L(re, !0);
                O(re), O(W), ie(
                  (ue) => {
                    G = gt(W, 1, "page-item", null, G, ue), z(Z, A(k));
                  },
                  [
                    () => ({
                      "first-last": A(k) === 1 || A(k) === A(i)
                    })
                  ],
                  ta
                ), kn("click", re, Vo(() => t().setPage(A(k)))), V(F, W);
              };
              lt(
                C,
                (F) => {
                  A(k) === A(r) ? F(H) : F(D, !1);
                },
                M
              );
            }
          };
          lt(y, (C) => {
            A(k) === 0 ? C(T) : C(_, !1);
          });
        }
        V(E, S);
      });
      var v = B(g, 2), x = L(v);
      let w;
      x.textContent = window.trans("Next"), O(v), O(h), O(f), O(d), O(u), ie(
        (E, k) => {
          m = gt(b, 1, "page-link", null, m, E), w = gt(x, 1, "page-link", null, w, k);
        },
        [
          () => ({ disabled: A(r) <= 1 }),
          () => ({
            disabled: A(r) === A(i)
          })
        ],
        ta
      ), kn("click", b, Vo(() => A(r) > 1 && t().setPage(A(r) - 1))), kn("click", x, Vo(() => A(r) !== A(i) && t().setPage(A(r) + 1))), V(c, u);
    };
    lt(a, (c) => {
      t() && A(i) && A(r) && c(l);
    });
  }
  return V(n, o), xe({
    get data() {
      return t();
    },
    set data(c) {
      t(c), te();
    }
  });
}
ve(yT, { data: {} }, [], [], !0);
var xT = Y('<div class="form-group mb-3"><textarea id="source_text" class="form-control" style="height: calc(100vh - 240px)"></textarea></div>'), wT = Y('<button type="button" class="action primary button btn btn-primary"> </button> <button type="button" class="cancel action button mt-close-dialog btn btn-default"> </button>', 1);
function w0(n, e) {
  ye(e, !0);
  let t = ee(e, "onSubmit", 7), i = ee(e, "onClose", 7), r;
  Re(() => {
    r == null || r.focus();
  });
  let s = de(""), o;
  return On(n, {
    size: "lg",
    $$events: {
      close(...a) {
        var l;
        (l = i()) == null || l.apply(this, a);
      }
    },
    children: (a, l) => {
      Nn(a, {
        get close() {
          return o;
        },
        set close(c) {
          o = c;
        },
        $$slots: {
          title: (c, u) => {
            var d = Tn();
            ie((f) => z(d, f), [() => I("Source Code")]), V(c, d);
          },
          body: (c, u) => {
            var d = xT(), f = L(d);
            nm(f), Ge(f, (h) => r = h, () => r), O(d), ie((h) => Ae(f, "aria-label", h), [() => I("Source Code")]), Ct(f, () => A(s), (h) => K(s, h)), V(c, d);
          },
          footer: (c, u) => {
            var d = wT(), f = Le(d);
            f.__click = () => {
              t()(A(s)), o();
            };
            var h = L(f, !0);
            O(f);
            var p = B(f, 2);
            p.__click = o;
            var b = L(p, !0);
            O(p), ie(
              (m, g, v, x) => {
                Ae(f, "title", m), z(h, g), Ae(p, "title", v), z(b, x);
              },
              [
                () => I("Insert (s)"),
                () => I("Insert"),
                () => I("Cancel (x)"),
                () => I("Cancel")
              ]
            ), V(c, d);
          }
        }
      });
    },
    $$slots: { default: !0 }
  }), xe({
    get onSubmit() {
      return t();
    },
    set onSubmit(a) {
      t(a), te();
    },
    get onClose() {
      return i();
    },
    set onClose(a) {
      i(a), te();
    }
  });
}
Rt(["click"]);
ve(w0, { onSubmit: {}, onClose: {} }, [], [], !0);
const kT = `<svg width="72" height="72" viewBox="0 0 72 72" fill="none"
    xmlns="http://www.w3.org/2000/svg">
    <g clip-path="url(#clip0_57_49)">
        <path d="M47.55 54.84L42.12 49.41L55.53 36L42.12 22.59L47.55 17.16L63.68 33.29C65.18 34.79 65.18 37.22 63.68 38.72L47.55 54.85V54.84Z" fill="black"/>
        <path d="M24.45 54.84L8.32001 38.71C6.82001 37.21 6.82001 34.78 8.32001 33.28L24.45 17.15L29.88 22.58L16.47 35.99L29.88 49.4L24.45 54.83V54.84Z" fill="black"/>
    </g>
    <defs>
        <clipPath id="clip0_57_49">
            <rect width="72" height="72" fill="white"/>
        </clipPath>
    </defs>
</svg>
`;
var ST = Y('<div class="form-group mb-3"><textarea id="source_text" class="form-control" style="height: calc(100vh - 240px); max-height: 568px"></textarea></div>'), ET = Y('<button type="button" class="action primary button btn btn-primary"> </button> <button type="button" class="cancel action button mt-close-dialog btn btn-default"> </button>', 1);
function k0(n, e) {
  ye(e, !0);
  let t = ee(e, "text", 7), i = ee(e, "onSubmit", 7), r = ee(e, "onClose", 7);
  t(S_.html(t()));
  let s;
  Re(() => {
    s == null || s.focus();
  });
  let o;
  return On(n, {
    size: "lg",
    $$events: {
      close(...a) {
        var l;
        (l = r()) == null || l.apply(this, a);
      }
    },
    children: (a, l) => {
      Nn(a, {
        get close() {
          return o;
        },
        set close(c) {
          o = c;
        },
        $$slots: {
          title: (c, u) => {
            var d = Tn();
            ie((f) => z(d, f), [() => I("Source Code")]), V(c, d);
          },
          body: (c, u) => {
            var d = ST(), f = L(d);
            nm(f), Ge(f, (h) => s = h, () => s), O(d), ie((h) => Ae(f, "aria-label", h), [() => I("Source Code")]), Ct(f, t), V(c, d);
          },
          footer: (c, u) => {
            var d = ET(), f = Le(d);
            f.__click = () => {
              i()(t()), o();
            };
            var h = L(f, !0);
            O(f);
            var p = B(f, 2);
            p.__click = o;
            var b = L(p, !0);
            O(p), ie(
              (m, g, v, x) => {
                Ae(f, "title", m), z(h, g), Ae(p, "title", v), z(b, x);
              },
              [
                () => I("Save (s)"),
                () => I("Save"),
                () => I("Cancel (x)"),
                () => I("Cancel")
              ]
            ), V(c, d);
          }
        }
      });
    },
    $$slots: { default: !0 }
  }), xe({
    get text() {
      return t();
    },
    set text(a) {
      t(a), te();
    },
    get onSubmit() {
      return i();
    },
    set onSubmit(a) {
      i(a), te();
    },
    get onClose() {
      return r();
    },
    set onClose(a) {
      r(a), te();
    }
  });
}
Rt(["click"]);
ve(k0, { text: {}, onSubmit: {}, onClose: {} }, [], [], !0);
const CT = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24"><path fill-rule="evenodd" d="M18.045 7.95c0-1.877-1.596-3.95-4.207-3.95h-8.262c-.427 0-.576.24-.576.647v14.79c0 .406.204.563.631.563h8.484c3.111 0 4.885-2.063 4.885-4.342 0-2.306-1.446-3.943-2.96-4.27.9-.409 2.006-1.561 2.006-3.438zm-5.326-.95c.867 0 1.497.682 1.497 1.5 0 .694-.52 1.5-1.497 1.5h-4.52v-3h4.52zm-4.52 9.5v-3h5.57c.897 0 1.472.775 1.472 1.5 0 .948-.79 1.5-1.472 1.5h-5.57z"/></svg>', TT = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24"><path fill-rule="evenodd" d="M12.435 16.33l.105-.38c.005-.021.557-2.182 1.147-4.438 1.015-3.879 1.263-4.66 1.318-4.779.189-.396.495-.695.936-.916.381-.19.866-.315 1.443-.373.17-.018.33-.113.447-.267.106-.14.168-.317.168-.486 0-.381-.306-.692-.682-.692h-7.733c-.376 0-.682.311-.682.692v.024c0 .341.241.628.573.682.439.072 1.042.172 1.515.399.243.116.431.257.557.418.143.182.213.393.213.642 0 .467-.135.935-.265 1.387l-.082.291c-.167.603-.412 1.519-.696 2.579-.655 2.441-1.47 5.477-1.675 6.055-.138.389-.65 1.311-2.413 1.448-.171.013-.332.092-.447.219-.117.129-.181.294-.181.47v.002c0 .381.306.692.682.692h7.735c.376 0 .682-.311.682-.692v-.005c0-.349-.257-.644-.598-.685l-.201-.024c-.679-.079-1.523-.179-1.878-.647-.165-.217-.217-.504-.163-.872.035-.249.105-.491.178-.745"/></svg>', AT = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24"><path fill-rule="evenodd" d="M6 20h12v1h-12v-1zm12-7.242c0 1.907-.532 3.324-1.596 4.251-1.064.927-2.535 1.391-4.414 1.391-1.905 0-3.379-.46-4.424-1.381-1.044-.921-1.567-2.341-1.567-4.261v-8.758h3.094v8.758c0 .381.033.756.099 1.124.066.368.204.694.414.976.21.283.502.513.877.69.374.178.877.266 1.507.266 1.103 0 1.865-.247 2.286-.74.42-.493.631-1.266.631-2.318v-8.758h3.094v8.758z"/></svg>', MT = `<svg width="72" height="72" viewBox="0 0 72 72" fill="none"
    xmlns="http://www.w3.org/2000/svg">
    <g clip-path="url(#clip0_57_45)">
        <path d="M64.8 37.01H51.4V36.28C51.4 32.16 52.74 30.45 55.27 30.45C57.39 30.45 58.58 31.7 58.98 33.73H63.16C62.44 29.02 59.54 26.77 55.27 26.77C50.43 26.77 47.03 29.64 47.03 36.29V37.02H42.11C43.55 36.14 44.47 34.7 44.47 32.7C44.47 28.86 41.69 27.05 36.61 27.05H29.4V37.01H23.97L20.5 27.05H16.32L12.85 37.01H7.19V40.21H11.74L8.83 48.57H13.51L14.82 44.48H22.03L23.34 48.57H27.99L25.08 40.21H29.39V48.57H37.28C42.96 48.57 45.14 45.73 45.14 42.39C45.14 41.56 45 40.84 44.76 40.2H47.04C47.33 46.17 50.63 48.85 55.25 48.85C59.87 48.85 62.4 46.73 63.11 41.89H58.96C58.49 44.07 57.43 45.17 55.25 45.17C52.92 45.17 51.6 43.59 51.41 40.21H64.79V37.01H64.8ZM33.77 30.72H36.2C39.35 30.72 40.1 31.59 40.1 33.09C40.1 34.59 39.07 35.55 36.67 35.55H33.77V30.71V30.72ZM18.42 33.22L19.64 37.01H17.21L18.43 33.22H18.42ZM20.85 40.8H15.98L16.17 40.2H20.65L20.84 40.8H20.85ZM40.79 42.05C40.79 43.89 39.54 44.89 36.92 44.89H33.77V40.21H40.14C40.58 40.65 40.8 41.25 40.8 42.05H40.79Z" fill="black"/>
    </g>
    <defs>
        <clipPath id="clip0_57_45">
            <rect width="72" height="72" fill="white"/>
        </clipPath>
    </defs>
</svg>
`, OT = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24"><path fill-rule="evenodd" d="M8 11.505c0-.279.229-.505.5-.505h10.999c.276 0 .5.214.5.505v.991c0 .279-.229.505-.5.505h-10.999c-.276 0-.5-.214-.5-.505v-.991zm0 6c0-.279.229-.505.5-.505h10.999c.276 0 .5.214.5.505v.991c0 .279-.229.505-.5.505h-10.999c-.276 0-.5-.214-.5-.505v-.991zm0-12c0-.279.229-.505.5-.505h10.999c.276 0 .5.214.5.505v.991c0 .279-.229.505-.5.505h-10.999c-.276 0-.5-.214-.5-.505v-.991zm-3 1.495c-.552 0-1-.448-1-1s.448-1 1-1 1 .448 1 1-.448 1-1 1zm0 6c-.552 0-1-.448-1-1s.448-1 1-1 1 .448 1 1-.448 1-1 1zm0 6c-.552 0-1-.448-1-1s.448-1 1-1 1 .448 1 1-.448 1-1 1z"/></svg>', NT = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24"><path fill-rule="evenodd" d="M6 18.5h-2v-.5h2v-1h.5v2.5h-2.5v-.5h2v-.5zm-2-6.25v-.25h2v-1h.5v1.5h-2v.5h2v.5h-2.5v-1.25zm4-.745c0-.279.229-.505.5-.505h10.999c.276 0 .5.214.5.505v.991c0 .279-.229.505-.5.505h-10.999c-.276 0-.5-.214-.5-.505v-.991zm0 6c0-.279.229-.505.5-.505h10.999c.276 0 .5.214.5.505v.991c0 .279-.229.505-.5.505h-10.999c-.276 0-.5-.214-.5-.505v-.991zm0-12c0-.279.229-.505.5-.505h10.999c.276 0 .5.214.5.505v.991c0 .279-.229.505-.5.505h-10.999c-.276 0-.5-.214-.5-.505v-.991zm-3-1.005h.5v3h-.5v-3zm-1 6.5h2v.5h-2v-.5zm0 6h2v.5h-2v-.5z"/></svg>', LT = `<svg width="72" height="72" viewBox="0 0 72 72" fill="none"
    xmlns="http://www.w3.org/2000/svg">
    <path d="M63 32H9V40H63V32Z" fill="black"/>
</svg>
`, RT = `<svg width="72" height="72" viewBox="0 0 72 72" fill="none"
    xmlns="http://www.w3.org/2000/svg">
    <g clip-path="url(#clip0_57_31)">
        <path d="M30.09 44.49H13.05V31.36C13.05 26.53 14.05 22.71 16.07 19.92C18.09 17.13 21.53 14.66 26.41 12.51L30.09 19.49C27.09 20.9 25.01 22.31 23.86 23.7C22.71 25.1 22.07 26.75 21.94 28.66H30.09V44.49ZM49.95 44.49H32.91V31.36C32.91 26.53 33.91 22.71 35.93 19.92C37.95 17.13 41.39 14.66 46.27 12.51L49.95 19.49C46.95 20.9 44.87 22.31 43.72 23.7C42.57 25.09 41.93 26.75 41.8 28.66H49.95V44.49Z" fill="black"/>
    </g>
    <defs>
        <clipPath id="clip0_57_31">
            <rect width="72" height="72" fill="white"/>
        </clipPath>
    </defs>
</svg>
`, IT = `<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24">
    <path fill-rule="evenodd" d="M16.407 6.284l1.732 1c.957.552 1.284 1.775.732 2.732l-5 8.66c-.552.957-1.775 1.284-2.732.732l-1.732-1-1.5 2.598c-.276.478-.888.642-1.366.366-.478-.276-.642-.888-.366-1.366l1.5-2.598-1.732-1c-.957-.552-1.284-1.775-.732-2.732l5-8.66c.552-.957 1.775-1.284 2.732-.732l1.732 1 1.5-2.598c.276-.478.888-.642 1.366-.366.478.276.642.888.366 1.366l-1.5 2.598zm-1 1.732l-.5.866c-.276.478-.888.642-1.366.366-.478-.276-.642-.888-.366-1.366l.5-.866-1.299-.75c-.239-.138-.545-.056-.683.183l-4.5 7.794c-.138.239-.056.545.183.683l1.299.75.5-.866c.276-.478.888-.642 1.366-.366.478.276.642.888.366 1.366l-.5.866 1.299.75c.239.138.545.056.683-.183l4.5-7.794c.138-.239.056-.545-.183-.683l-1.299-.75zm-6.696-.402l-1.961 3.397c.443-.415.872-.503 1.287-.263.415.24.564.661.445 1.263l1.961-3.397c-.448.57-.921.711-1.42.423-.499-.288-.603-.762-.312-1.423zm6.928 4l-1.961 3.397c.443-.415.872-.503 1.287-.263.415.24.564.661.445 1.263l1.961-3.397c-.448.57-.921.711-1.42.423-.499-.288-.603-.762-.312-1.423zm4.464 1.634c.138.239.056.545-.183.683l-.866.5c-.239.138-.545.056-.683-.183s-.056-.545.183-.683l.866-.5c.239-.138.545-.056.683.183zm-2.866 2.964c.276 0 .5.224.5.5v1c0 .276-.224.5-.5.5s-.5-.224-.5-.5v-1c0-.276.224-.5.5-.5zm2.732.268c-.138.239-.444.321-.683.183l-.866-.5c-.239-.138-.321-.444-.183-.683.138-.239.444-.321.683-.183l.866.5c.239.138.321.444.183.683zm-12.64-10.607c.276 0 .5.224.5.5v1c0 .276-.224.5-.5.5s-.5-.224-.5-.5v-1c0-.276.224-.5.5-.5zm-1.134 3.964c.138.239.056.545-.183.683l-.866.5c-.239.138-.545.056-.683-.183s-.056-.545.183-.683l.866-.5c.239-.138.545-.056.683.183zm.134-1.232c-.138.239-.444.321-.683.183l-.866-.5c-.239-.138-.321-.444-.183-.683.138-.239.444-.321.683-.183l.866.5c.239.138.321.444.183.683z"/>
</svg>
`, PT = `<svg width="72" height="72" viewBox="0 0 72 72" fill="none"
    xmlns="http://www.w3.org/2000/svg">
    <g clip-path="url(#clip0_57_171)">
        <path d="M43.45 22.79H26.67L34.86 14.43L28.46 8.10001L9.65002 27.31L28.47 46.52L34.87 40.19L26.68 31.83H43.46C48.93 31.83 53.38 36.4 53.38 42.02V44.69C53.38 50.31 48.93 54.88 43.46 54.88V63.9C53.88 63.9 62.36 55.28 62.36 44.68V42.01C62.36 31.41 53.88 22.79 43.46 22.79H43.45Z" fill="black"/>
    </g>
    <defs>
        <clipPath id="clip0_57_171">
            <rect width="72" height="72" fill="white"/>
        </clipPath>
    </defs>
</svg>
`, DT = `<svg width="72" height="72" viewBox="0 0 72 72" fill="none"
    xmlns="http://www.w3.org/2000/svg">
    <g clip-path="url(#clip0_57_35)">
        <path d="M43.53 8.10001L37.13 14.43L45.32 22.79H28.54C18.12 22.79 9.64001 31.41 9.64001 42.01V44.68C9.64001 55.28 18.12 63.9 28.54 63.9V54.88C23.07 54.88 18.62 50.31 18.62 44.69V42.02C18.62 36.4 23.07 31.83 28.54 31.83H45.32L37.13 40.19L43.53 46.52L62.35 27.31L43.53 8.10001Z" fill="black"/>
    </g>
    <defs>
        <clipPath id="clip0_57_35">
            <rect width="72" height="72" fill="white"/>
        </clipPath>
    </defs>
</svg>
`, $T = `<svg width="72" height="72" viewBox="0 0 72 72" fill="none"
    xmlns="http://www.w3.org/2000/svg">
    <g clip-path="url(#clip0_57_39)">
        <path d="M39 56.99H9V62.99H39V56.99Z" fill="black"/>
        <path d="M57 9L55.41 17.02H40.79L33.12 52.49H23.45L31.12 17.02H16.5L18.09 9H57Z" fill="black"/>
        <path fill-rule="evenodd" clip-rule="evenodd" d="M56.7601 52.5L62.1101 47.15C63.2801 45.98 63.2801 44.08 62.1101 42.91L62.0801 42.88C60.9101 41.71 59.0101 41.71 57.8401 42.88L52.4901 48.23L47.1401 42.88C45.9701 41.71 44.0701 41.71 42.9001 42.88L42.8701 42.91C41.7001 44.08 41.7001 45.98 42.8701 47.15L48.2201 52.5L42.8701 57.85C41.7001 59.02 41.7001 60.92 42.8701 62.09L42.9001 62.12C44.0701 63.29 45.9701 63.29 47.1401 62.12L52.4901 56.77L57.8401 62.12C59.0101 63.29 60.9101 63.29 62.0801 62.12L62.1101 62.09C63.2801 60.92 63.2801 59.02 62.1101 57.85L56.7601 52.5Z" fill="black"/>
    </g>
    <defs>
        <clipPath id="clip0_57_39">
            <rect width="72" height="72" fill="white"/>
        </clipPath>
    </defs>
</svg>
`, zT = `<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24"><path id="a" fill-rule="evenodd" d="M8 6.49c0-.271.229-.49.5-.49h10.999c.276 0 .5.215.5.49v3.019c0 .271-.229.49-.5.49h-10.999c-.276 0-.5-.215-.5-.49v-3.019zm-4-1.994c0-.274.214-.496.505-.496h.991c.279 0 .505.226.505.496v15.007c0 .274-.214.496-.505.496h-.991c-.279 0-.505-.226-.505-.496v-15.007zm4 9.994c0-.271.231-.49.5-.49h6.999c.276 0 .5.215.5.49v3.019c0 .271-.231.49-.5.49h-6.999c-.276 0-.5-.215-.5-.49v-3.019z"/></svg>
`, BT = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24"><path fill-rule="evenodd" d="M11 13v-2h-7.5c-.276 0-.5-.215-.5-.49v-3.019c0-.271.228-.49.5-.49h7.5v-2.504c0-.274.214-.496.505-.496h.991c.279 0 .505.226.505.496v2.504h7.5c.276 0 .5.215.5.49v3.019c0 .271-.228.49-.5.49h-7.5v2h2.5c.276 0 .5.215.5.49v3.019c0 .271-.231.49-.5.49h-2.5v2.504c0 .274-.214.496-.505.496h-.991c-.279 0-.505-.226-.505-.496v-2.504h-2.5c-.276 0-.5-.215-.5-.49v-3.019c0-.271.231-.49.5-.49h2.5z"/></svg>', HT = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24"><path fill-rule="evenodd" d="M4 6.49c0-.271.229-.49.5-.49h10.999c.276 0 .5.215.5.49v3.019c0 .271-.229.49-.5.49h-10.999c-.276 0-.5-.215-.5-.49v-3.019zm4 8c0-.271.231-.49.5-.49h6.999c.276 0 .5.215.5.49v3.019c0 .271-.231.49-.5.49h-6.999c-.276 0-.5-.215-.5-.49v-3.019zm10-9.994c0-.274.214-.496.505-.496h.991c.279 0 .505.226.505.496v15.007c0 .274-.214.496-.505.496h-.991c-.279 0-.505-.226-.505-.496v-15.007z"/></svg>', FT = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24"><path fill-rule="evenodd" d="M6.553 12.06c0 .06-.036.112-.088.135l.002.003-3.216 1.856a.147.147 0 0 1-.25-.1H3v-3.787a.148.148 0 0 1 .253-.103l3.229 1.864-.004.006a.146.146 0 0 1 .075.126zM3.5 3h17a.5.5 0 0 1 .5.5v2a.5.5 0 0 1-.5.5h-17a.5.5 0 0 1-.5-.5v-2a.5.5 0 0 1 .5-.5zm6 5h11a.5.5 0 0 1 .5.5v2a.5.5 0 0 1-.5.5h-11a.5.5 0 0 1-.5-.5v-2a.5.5 0 0 1 .5-.5zm0 5h11a.5.5 0 0 1 .5.5v2a.5.5 0 0 1-.5.5h-11a.5.5 0 0 1-.5-.5v-2a.5.5 0 0 1 .5-.5zm-6 5h17a.5.5 0 0 1 .5.5v2a.5.5 0 0 1-.5.5h-17a.5.5 0 0 1-.5-.5v-2a.5.5 0 0 1 .5-.5z"/></svg>', VT = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24"><path fill-rule="evenodd" d="M3 12.06c0-.055.031-.1.075-.126l-.004-.006L6.3 10.064a.147.147 0 0 1 .253.103v3.786a.147.147 0 0 1-.25.101l-3.216-1.856.001-.003A.147.147 0 0 1 3 12.06zM3.5 3h17a.5.5 0 0 1 .5.5v2a.5.5 0 0 1-.5.5h-17a.5.5 0 0 1-.5-.5v-2a.5.5 0 0 1 .5-.5zm6 5h11a.5.5 0 0 1 .5.5v2a.5.5 0 0 1-.5.5h-11a.5.5 0 0 1-.5-.5v-2a.5.5 0 0 1 .5-.5zm0 5h11a.5.5 0 0 1 .5.5v2a.5.5 0 0 1-.5.5h-11a.5.5 0 0 1-.5-.5v-2a.5.5 0 0 1 .5-.5zm-6 5h17a.5.5 0 0 1 .5.5v2a.5.5 0 0 1-.5.5h-17a.5.5 0 0 1-.5-.5v-2a.5.5 0 0 1 .5-.5z"/></svg>', jT = `<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24"><path fill-rule="evenodd" d="M3.923 15.095c.019-.117.102-.213.215-.249.113-.036.236-.006.319.077l1.08 1.08 2.899-2.899c.123-.123.323-.123.446 0l1.998 1.998c.123.123.123.323 0 .446l-2.9 2.899 1.08 1.08c.084.083.114.207.078.319-.036.113-.131.196-.248.215l-5.523.933c-.101.017-.203-.015-.276-.087v-.001c-.072-.072-.105-.174-.088-.274l.919-5.538zm16.154-6.19c-.019.117-.102.213-.215.249-.113.036-.236.006-.32-.077l-1.08-1.08-2.899 2.899c-.123.123-.323.123-.446 0l-1.998-1.998c-.123-.123-.123-.323 0-.446l2.9-2.9-1.08-1.08c-.084-.084-.114-.207-.078-.319.036-.113.132-.196.248-.215l5.523-.933c.101-.017.203.016.276.088v.001c.072.072.105.174.088.274l-.919 5.538z"/></svg>
`, rn = (n, e, t, i, r, s) => {
  var o, a;
  return i ?? (i = `toggle${e.slice(0, 1).toUpperCase() + e.slice(1)}`), r ?? (r = "is-active"), s ?? (s = (l) => l.tiptap.isActive(e)), a = class extends Ur {
    constructor() {
      super();
      Ne(this, o);
      Oe(this, o, document.createElement("button")), J(this, o).title = typeof n == "string" ? I(n) : `${I(n[0])} (${Pd(n[1])})`, J(this, o).innerHTML = t, this.shadowRoot.appendChild(J(this, o));
    }
    connectedCallback() {
      super.connectedCallback(), this.addEventListener("click", () => {
        const c = this.tiptap;
        c && (typeof i == "function" ? i(c) : c.chain().focus()[i]().run(), this.onEditorUpdate());
      });
    }
    onEditorUpdate() {
      if (r !== !1) {
        const c = s(this.editor);
        J(this, o).classList.toggle(r, c), r === "is-disabled" && (J(this, o).disabled = c);
      }
    }
  }, o = new WeakMap(), a;
}, Dd = (n, e, t) => {
  var r, s;
  const i = e.substring(5).toLowerCase();
  return s = class extends Ur {
    constructor() {
      super();
      Ne(this, r);
      Oe(this, r, document.createElement("button")), J(this, r).title = typeof n == "string" ? I(n) : `${I(n[0])} (${Pd(n[1])})`, J(this, r).innerHTML = t, this.shadowRoot.appendChild(J(this, r));
    }
    connectedCallback() {
      super.connectedCallback(), this.addEventListener("click", () => {
        const a = this.tiptap;
        if (!a)
          return;
        const l = a.state.selection.$head.parent.type.name;
        a.getAttributes(l).textAlign === i ? a.chain().focus().unsetTextAlign().run() : a.chain().focus().setTextAlign(i).run();
      });
    }
    onEditorUpdate() {
      const a = this.tiptap;
      if (!a)
        return;
      const l = a.state.selection.$head.parent.type.name, c = a.getAttributes(l).textAlign;
      J(this, r).classList.toggle("is-active", c === i);
    }
  }, r = new WeakMap(), s;
}, WT = rn(["Bold", "cmd+B"], "bold", CT), UT = rn(["Italic", "cmd+I"], "italic", TT), KT = rn(
  ["Underline", "cmd+U"],
  "underline",
  AT
), qT = rn("Strike", "strike", MT), GT = rn(
  "Unlink",
  "unlink",
  IT,
  "unsetLink",
  "is-disabled",
  (n) => !n.tiptap.isActive("link")
), JT = rn(
  "Bullet List",
  "bulletList",
  OT,
  (n) => {
    n.chain().focus().lift(n.state.selection.$from.before()).setNode(n.isActive("bulletList") ? "paragraph" : "textBlock").run(), n.chain().toggleBulletList().run();
  }
), XT = rn(
  "Ordered List",
  "orderedList",
  NT,
  (n) => {
    n.chain().focus().lift(n.state.selection.$from.before()).setNode(n.isActive("orderedList") ? "paragraph" : "textBlock").run(), n.chain().toggleOrderedList().run();
  }
), YT = rn("Blockquote", "blockquote", RT), ZT = rn(
  ["Undo", "cmd+Z"],
  "undo",
  PT,
  "undo",
  "is-disabled",
  (n) => dS(n.tiptap.state) === 0
), QT = rn(
  ["Redo", "cmd+Y"],
  "redo",
  DT,
  "redo",
  "is-disabled",
  (n) => fS(n.tiptap.state) === 0
), eA = rn(
  "Remove Format",
  "removeFormat",
  $T,
  (n) => n.chain().focus().unsetAllMarks().clearNodes().run(),
  !1
), tA = Dd("Align Left", "alignLeft", zT), nA = Dd(
  "Align Center",
  "alignCenter",
  BT
), iA = Dd(
  "Align Right",
  "alignRight",
  HT
), rA = rn("Indent", "indent", FT, "indent", !1), sA = rn("Outdent", "outdent", VT, "outdent", !1);
class oA extends Ur {
  constructor() {
    super();
    const e = document.createElement("button");
    e.title = I("Horizontal Rule"), e.innerHTML = LT, this.shadowRoot.appendChild(e);
  }
  connectedCallback() {
    super.connectedCallback(), this.addEventListener("click", () => {
      const e = this.tiptap;
      e && e.chain().focus().setHorizontalRule().run();
    });
  }
}
class aA extends Ur {
  constructor() {
    super();
    const e = document.createElement("button");
    e.title = I("Insert HTML"), e.innerHTML = tT, this.shadowRoot.appendChild(e);
  }
  connectedCallback() {
    super.connectedCallback(), this.addEventListener("click", () => {
      const e = this.tiptap;
      if (!e)
        return;
      const t = It(w0, {
        target: document.body,
        props: {
          onSubmit: (i) => {
            e.commands.insertContent(br(i));
          },
          onClose: () => {
            ut(t);
          }
        }
      });
    });
  }
}
class lA extends Ur {
  constructor() {
    super();
    const e = document.createElement("button");
    e.title = I("Toggle to HTML editing mode"), e.innerHTML = kT, this.shadowRoot.appendChild(e);
  }
  connectedCallback() {
    super.connectedCallback(), this.addEventListener("click", () => {
      const e = this.tiptap;
      if (!e)
        return;
      const t = It(k0, {
        target: document.body,
        props: {
          text: Pc(e.getHTML()),
          onSubmit: (i) => {
            e.commands.setContent(br(i));
          },
          onClose: () => {
            ut(t);
          }
        }
      });
    });
  }
}
var mi, Pi;
class cA extends Ur {
  constructor() {
    super();
    Ne(this, mi);
    Ne(this, Pi);
    Oe(this, Pi, document.createElement("style")), J(this, Pi).textContent = "body { overflow: hidden; }", Oe(this, mi, document.createElement("button")), J(this, mi).title = I("Full Screen"), J(this, mi).innerHTML = jT, this.shadowRoot.appendChild(J(this, mi));
  }
  connectedCallback() {
    super.connectedCallback(), this.addEventListener("click", () => {
      const t = this.editor;
      if (!t)
        return;
      const i = t[yn].classList.contains(
        "mt-rich-text-editor-editor--fullscreen"
      );
      t[yn].classList.toggle("mt-rich-text-editor-editor--fullscreen"), J(this, mi).classList.toggle("is-active", !i), i ? document.body.removeChild(J(this, Pi)) : document.body.appendChild(J(this, Pi));
    });
  }
}
mi = new WeakMap(), Pi = new WeakMap();
const S0 = (n) => class extends n {
  constructor() {
    super(...arguments);
    bn(this, "editor");
    bn(this, "options", {});
  }
  get tiptap() {
    var t;
    return (t = this.editor) == null ? void 0 : t.tiptap;
  }
  get shadowRoot() {
    return super.shadowRoot;
  }
  onEditorInit(t, i) {
    this.editor = t, this.options = i;
  }
  onEditorUpdate() {
  }
}, E0 = document.createElement("style");
E0.textContent = s1;
const sn = (n) => class extends S0(n) {
  connectedCallback() {
    super.connectedCallback(), this.shadowRoot.appendChild(E0.cloneNode(!0));
  }
}, uA = `<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24">
    <path fill-rule="evenodd" d="M16.366 6.438l1.732 1c.957.552 1.284 1.775.732 2.732l-5 8.66c-.552.957-1.775 1.284-2.732.732l-1.732-1-1.5 2.598c-.276.478-.888.642-1.366.366-.478-.276-.642-.888-.366-1.366l1.5-2.598-1.732-1c-.957-.552-1.284-1.775-.732-2.732l5-8.66c.552-.957 1.775-1.284 2.732-.732l1.732 1 1.5-2.598c.276-.478.888-.642 1.366-.366.478.276.642.888.366 1.366l-1.5 2.598zm-1 1.732l-.5.866c-.276.478-.888.642-1.366.366-.478-.276-.642-.888-.366-1.366l.5-.866-1.299-.75c-.239-.138-.545-.056-.683.183l-4.5 7.794c-.138.239-.056.545.183.683l1.299.75.5-.866c.276-.478.888-.642 1.366-.366.478.276.642.888.366 1.366l-.5.866 1.299.75c.239.138.545.056.683-.183l4.5-7.794c.138-.239.056-.545-.183-.683l-1.299-.75z"/>
</svg>
`;
var dA = Y('<div class="toolbar-group svelte-16z2bvg"></div>'), fA = Y("<div></div>");
const hA = {
  hash: "svelte-16z2bvg",
  code: `.toolbar.svelte-16z2bvg {position:absolute;background-color:#fff;border:1px solid #ccc;z-index:1200;border-radius:4px;box-shadow:0 2px 4px rgba(0, 0, 0, 0.1);gap:5px;}.toolbar.svelte-16z2bvg::after,
  .toolbar.svelte-16z2bvg::before {content:"";position:absolute;left:50%;transform:translateX(-50%);width:0;height:0;}

  /* Arrow at the bottom */.toolbar--top.svelte-16z2bvg::before {bottom:-9px;border-left:8px solid transparent;border-right:8px solid transparent;border-top:8px solid #ccc;}.toolbar--top.svelte-16z2bvg::after {bottom:-7px;border-left:7px solid transparent;border-right:7px solid transparent;border-top:7px solid #fff;}

  /* Arrow at the top */.toolbar--bottom.svelte-16z2bvg::before {top:-9px;border-left:8px solid transparent;border-right:8px solid transparent;border-bottom:8px solid #ccc;}.toolbar--bottom.svelte-16z2bvg::after {top:-7px;border-left:7px solid transparent;border-right:7px solid transparent;border-bottom:7px solid #fff;}.toolbar-group.svelte-16z2bvg {display:flex;gap:5px;padding:4px;}.toolbar-item.svelte-16z2bvg {display:flex;align-items:center;justify-content:center;}`
};
function $d(n, e) {
  ye(e, !0), Wt(n, hA);
  const t = ee(e, "editor", 7), i = ee(e, "condition", 7), r = ee(e, "targetNodeName", 7), s = ee(e, "targetNodeTagName", 7), o = ee(e, "items", 7), a = t().tiptap, l = a.view.dom, c = {}, u = o().map((E) => E.map((k) => ({
    name: k,
    elementName: Xr("toolbar", k),
    icon: k
  })));
  let d = de(!1), f = de(0), h = de(0), p, b = de(!1);
  const m = () => {
    if (K(d, !t().getStructureMode() && i()(), !0), A(d)) {
      v();
      for (const E in c)
        "onEditorUpdate" in c[E] && c[E].onEditorUpdate();
    }
  };
  a.on("selectionUpdate", m), a.on("update", m);
  const g = (E) => {
    var T;
    const k = E.dom.getBoundingClientRect(), { selection: S } = E.state;
    let y = null;
    if (a.isActive(r())) {
      const _ = E.domAtPos(S.from);
      if (_.node && (y = _.node, y.nodeType === Node.TEXT_NODE && (y = y.parentElement)), s() === "A" && (y == null ? void 0 : y.tagName) !== "A") {
        const C = E.domAtPos(S.from - 1);
        C.node && (y = C.node, y.nodeType === Node.TEXT_NODE && (y = y.parentElement));
      }
      if (y && s() !== y.tagName) {
        const C = y.querySelector(s());
        C && (y = C);
      }
    }
    if (!y) {
      const _ = (
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        ((T = S.node) == null ? void 0 : T.type.name) === r() ? S.$anchor : Qi((C) => C.type.name === r())(S)
      );
      if (!_) {
        K(f, 0), K(h, 0);
        return;
      }
      if (y = E.nodeDOM(_.pos), !y) {
        K(f, 0), K(h, 0);
        return;
      }
    }
    (async () => {
      y instanceof HTMLImageElement && !y.complete && await new Promise((re) => {
        y.onload = re;
      });
      const _ = y.getBoundingClientRect();
      if (!(_.top < k.bottom && _.bottom > k.top && _.left < k.right && _.right > k.left)) {
        K(f, 0), K(h, 0);
        return;
      }
      const M = (p == null ? void 0 : p.offsetWidth) || 0, H = (p == null ? void 0 : p.offsetHeight) || 0, D = y.offsetWidth, F = _.top - k.top - H - 10, W = _.bottom - k.top + 10;
      K(b, F < 0), K(f, A(b) ? W : F, !0);
      const G = _.left - k.left + D / 2 - M / 2;
      G + k.left < yo ? K(h, yo - k.left) : G + k.left + D > window.innerWidth - yo ? K(h, window.innerWidth - yo - k.left - D) : K(h, G);
    })();
  }, v = () => {
    try {
      g(a.view);
    } catch {
    }
  };
  function x(E, k) {
    return c[k] = E, "onEditorInit" in c[k] && c[k].onEditorInit(t(), {}), {
      destroy() {
        delete c[k];
      }
    };
  }
  Re(() => {
    l.addEventListener("scroll", () => {
      A(d) && v();
    }), A(d) && v();
  });
  var w = fA();
  return pt(w, 21, () => u, En, (E, k) => {
    var S = dA();
    pt(S, 21, () => A(k), (y) => y.name, (y, T) => {
      var _ = ki(), C = Le(_);
      Jr(C, () => A(T).elementName, !1, (M, H) => {
        nt(M, (D, F) => x == null ? void 0 : x(D, F), () => A(T).name), gt(M, 0, "toolbar-item svelte-16z2bvg");
      }), V(y, _);
    }), O(S), V(E, S);
  }), O(w), Ge(w, (E) => p = E, () => p), ie(() => {
    gt(w, 1, `toolbar ${A(b) ? "toolbar--bottom" : "toolbar--top"}`, "svelte-16z2bvg"), Gs(w, `
    display: ${A(d) && (A(f) || A(h)) ? "flex" : "none"};
    background-color: #fff;
    top: ${A(f)}px; 
    left: ${A(h)}px;
  `);
  }), V(n, w), xe({
    get editor() {
      return t();
    },
    set editor(E) {
      t(E), te();
    },
    get condition() {
      return i();
    },
    set condition(E) {
      i(E), te();
    },
    get targetNodeName() {
      return r();
    },
    set targetNodeName(E) {
      r(E), te();
    },
    get targetNodeTagName() {
      return s();
    },
    set targetNodeTagName(E) {
      s(E), te();
    },
    get items() {
      return o();
    },
    set items(E) {
      o(E), te();
    }
  });
}
ve(
  $d,
  {
    editor: {},
    condition: {},
    targetNodeName: {},
    targetNodeTagName: {},
    items: {}
  },
  [],
  [],
  !0
);
function C0(n, e) {
  ye(e, !0);
  const t = ee(e, "editor", 7);
  return $d(n, {
    get editor() {
      return t();
    },
    targetNodeName: "link",
    targetNodeTagName: "A",
    condition: () => {
      var r, s;
      return !t().isPasting() && ((r = t().tiptap) == null ? void 0 : r.isActive("link")) && !((s = t().tiptap) != null && s.isActive("link", { class: "mt-asset-link" }));
    },
    items: [["previewLink", "editLink", "unlink"]]
  }), xe({
    get editor() {
      return t();
    },
    set editor(r) {
      t(r), te();
    }
  });
}
ve(C0, { editor: {} }, [], [], !0);
var Sr;
class pA {
  constructor({ editor: e }) {
    Ne(this, Sr);
    Oe(this, Sr, It(C0, {
      target: e.tiptap.view.dom.getRootNode(),
      props: {
        editor: e
      }
    }));
  }
  destroy() {
    J(this, Sr) && ut(J(this, Sr));
  }
}
Sr = new WeakMap();
var mA = Y('<div class="form-group mb-3"><label for="link-url" class="form-label"> </label> <input type="url" id="link-url" class="form-control"></div> <div class="form-group mb-3"><label for="link-text" class="form-label"> </label> <input type="text" id="link-text" class="form-control"></div> <div class="form-group mb-3"><label for="link-title" class="form-label"> </label> <input type="text" id="link-title" class="form-control"></div> <div class="form-group mb-3"><label for="link-target" class="form-label"> </label> <select id="link-target" class="form-select"><option> </option><option> </option></select></div>', 1), gA = Y('<button type="button" class="action primary button btn btn-primary"> </button> <button type="button" class="cancel action button mt-close-dialog btn btn-default"> </button>', 1);
function zd(n, e) {
  ye(e, !0);
  let t = ee(e, "linkData", 7), i = ee(e, "onSubmit", 7), r = ee(e, "onClose", 7), s = de(He(t().url)), o = de(He(t().text)), a = de(He(t().title)), l = de(He(t().target)), c;
  Re(() => {
    c == null || c.focus();
  });
  let u = t().text !== "";
  const d = () => {
    u = !0;
  };
  Re(() => {
    u || K(o, A(s), !0);
  });
  let f, h;
  return Ge(
    On(n, {
      $$events: {
        close(...p) {
          var b;
          (b = r()) == null || b.apply(this, p);
        }
      },
      children: (p, b) => {
        Nn(p, {
          get close() {
            return h;
          },
          set close(m) {
            h = m;
          },
          $$slots: {
            title: (m, g) => {
              var v = Tn();
              ie((x) => z(v, x), [() => I("Insert Link")]), V(m, v);
            },
            body: (m, g) => {
              var v = mA(), x = Le(v), w = L(x), E = L(w, !0);
              O(w);
              var k = B(w, 2);
              mt(k), Ge(k, (oe) => c = oe, () => c), O(x);
              var S = B(x, 2), y = L(S), T = L(y, !0);
              O(y);
              var _ = B(y, 2);
              mt(_), _.__change = d, O(S);
              var C = B(S, 2), M = L(C), H = L(M, !0);
              O(M);
              var D = B(M, 2);
              mt(D), O(C);
              var F = B(C, 2), W = L(F), G = L(W, !0);
              O(W);
              var re = B(W, 2), Z = L(re);
              Z.value = (Z.__value = "_self") == null ? "" : "_self";
              var ue = L(Z, !0);
              O(Z);
              var he = B(Z);
              he.value = (he.__value = "_blank") == null ? "" : "_blank";
              var Te = L(he, !0);
              O(he), O(re), O(F), ie(
                (oe, Ve, be, R, tt, ge) => {
                  z(E, oe), z(T, Ve), z(H, be), z(G, R), z(ue, tt), z(Te, ge);
                },
                [
                  () => I("Link URL"),
                  () => I("Link Text"),
                  () => I("Title"),
                  () => I("Link Target"),
                  () => I("LINK_TARGET_SELF"),
                  () => I("LINK_TARGET_BLANK")
                ]
              ), Ct(k, () => A(s), (oe) => K(s, oe)), Ct(_, () => A(o), (oe) => K(o, oe)), Ct(D, () => A(a), (oe) => K(a, oe)), gr(re, () => A(l), (oe) => K(l, oe)), V(m, v);
            },
            footer: (m, g) => {
              var v = gA(), x = Le(v);
              x.__click = () => {
                i()({
                  url: A(s),
                  text: A(o),
                  title: A(a),
                  target: A(l)
                }), h();
              };
              var w = L(x, !0);
              O(x);
              var E = B(x, 2);
              E.__click = h;
              var k = L(E, !0);
              O(E), ie(
                (S, y, T, _) => {
                  Ae(x, "title", S), z(w, y), Ae(E, "title", T), z(k, _);
                },
                [
                  () => I("Insert (s)"),
                  () => I("Insert"),
                  () => I("Cancel (x)"),
                  () => I("Cancel")
                ]
              ), V(m, v);
            }
          }
        });
      },
      $$slots: { default: !0 }
    }),
    (p) => f = p,
    () => f
  ), xe({
    get linkData() {
      return t();
    },
    set linkData(p) {
      t(p), te();
    },
    get onSubmit() {
      return i();
    },
    set onSubmit(p) {
      i(p), te();
    },
    get onClose() {
      return r();
    },
    set onClose(p) {
      r(p), te();
    }
  });
}
Rt(["change", "click"]);
ve(zd, { linkData: {}, onSubmit: {}, onClose: {} }, [], [], !0);
const T0 = (n, e = {}) => () => {
  if (!n)
    return;
  let t;
  if (n.isActive("link")) {
    n.chain().extendMarkRange("link").run();
    const r = n.state.doc.textBetween(
      n.state.selection.from,
      n.state.selection.to
    ), s = n.getAttributes("link");
    t = {
      url: s.href || "",
      text: r,
      title: s.title || "",
      target: s.target || e.defaultTarget || "_self"
    };
  } else
    t = {
      url: "",
      text: n.state.selection.empty ? "" : n.state.doc.textBetween(n.state.selection.from, n.state.selection.to),
      title: "",
      target: e.defaultTarget || "_self"
    };
  const i = It(zd, {
    target: document.body,
    props: {
      linkData: t,
      onSubmit: (r) => {
        const s = n.chain().focus();
        n.isActive("link") && s.extendMarkRange("link"), s.deleteSelection().insertContent({
          type: "text",
          text: r.text,
          marks: [
            {
              type: "link",
              attrs: {
                href: r.url,
                target: r.target,
                title: r.title
              }
            }
          ]
        }).run();
      },
      onClose: () => {
        ut(i);
      }
    }
  });
}, _A = (n) => class extends sn(n) {
  onEditorUpdate() {
    var e;
    this.classList.toggle("is-active", (e = this.tiptap) == null ? void 0 : e.isActive("link"));
  }
};
var bA = Y("<button><!></button>");
function A0(n, e) {
  ye(e, !0);
  const t = e.$$host, { editor: i, options: r, tiptap: s } = t, o = T0(s, r);
  t.addEventListener("click", o);
  let a;
  Re(() => {
    var u;
    return i && (a = new pA({ editor: i }), (u = i.tiptap) == null || u.commands.setInlineLinkShortcutHandler(o)), () => {
      a == null || a.destroy();
    };
  });
  var l = bA(), c = L(l);
  Xt(c, () => uA), O(l), nt(l, (u, d) => {
    var f;
    return (f = An) == null ? void 0 : f(u, d);
  }, () => `${I("Link")} (${Pd("cmd+K")})`), V(n, l), xe();
}
ve(A0, {}, [], [], !0, _A);
const vA = `<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="icon icon-tabler icons-tabler-outline icon-tabler-external-link">
    <path stroke="none" d="M0 0h24v24H0z" fill="none"/>
    <path d="M12 6h-6a2 2 0 0 0 -2 2v10a2 2 0 0 0 2 2h10a2 2 0 0 0 2 -2v-6" />
    <path d="M11 13l9 -9" />
    <path d="M15 4h5v5" />
</svg>
`, yA = (n) => class extends sn(n) {
};
var xA = Y('<a target="_blank" class="svelte-23fhoy"><span class="svelte-23fhoy"> </span> <!></a>');
const wA = {
  hash: "svelte-23fhoy",
  code: "a.svelte-23fhoy {display:flex;align-items:center;gap:4px;height:100%;padding:0 4px;}a.svelte-23fhoy:hover {background-color:#dee0e2;}a.svelte-23fhoy span:where(.svelte-23fhoy) {max-width:300px;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;}a.svelte-23fhoy svg {width:16px;height:16px;}"
};
function M0(n, e) {
  ye(e, !0), Wt(n, wA);
  const t = e.$$host, { tiptap: i } = t;
  let r = de("");
  t.onEditorUpdate = () => {
    K(r, i == null ? void 0 : i.getAttributes("link").href, !0);
  };
  var s = xA(), o = L(s), a = L(o, !0);
  O(o);
  var l = B(o, 2);
  Xt(l, () => vA), O(s), ie(() => {
    Ae(s, "href", A(r)), Ae(s, "title", A(r)), z(a, A(r));
  }), V(n, s), xe();
}
ve(M0, {}, [], [], !0, yA);
const O0 = `<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="icon icon-tabler icons-tabler-outline icon-tabler-pencil">
    <path stroke="none" d="M0 0h24v24H0z" fill="none"/>
    <path d="M4 20h4l10.5 -10.5a2.828 2.828 0 1 0 -4 -4l-10.5 10.5v4" />
    <path d="M13.5 6.5l4 4" />
</svg>
`, kA = (n) => class extends sn(n) {
};
var SA = Y("<button><!></button>");
function N0(n, e) {
  ye(e, !0);
  const t = e.$$host, { tiptap: i } = t;
  t.addEventListener("click", T0(i));
  var r = SA(), s = L(r);
  Xt(s, () => O0), O(r), nt(r, (o, a) => {
    var l;
    return (l = An) == null ? void 0 : l(o, a);
  }, () => I("Edit Link")), V(n, r), xe();
}
ve(N0, {}, [], [], !0, kA);
const EA = `<svg width="72" height="72" viewBox="0 0 72 72" fill="none"
    xmlns="http://www.w3.org/2000/svg">
    <g clip-path="url(#clip0_57_27)">
        <path d="M56.75 24.88H51.56V15.99C51.56 13.53 49.57 11.54 47.11 11.54H24.87C22.41 11.54 20.42 13.53 20.42 15.99V24.88H15.23C12.77 24.88 10.78 26.87 10.78 29.33V56.01C10.78 58.47 12.77 60.46 15.23 60.46H56.74C59.2 60.46 61.19 58.47 61.19 56.01V29.33C61.19 26.87 59.2 24.88 56.74 24.88H56.75ZM24.88 15.99H47.12V24.88H24.88V15.99Z" fill="black"/>
    </g>
    <defs>
        <clipPath id="clip0_57_27">
            <rect width="72" height="72" fill="white"/>
        </clipPath>
    </defs>
</svg>
`;
var CA = Y("<button><!></button>");
function L0(n, e) {
  ye(e, !0);
  const t = e.$$host;
  t.addEventListener("click", () => {
    var s, o;
    (o = (s = t.options).select) == null || o.call(s, { editor: t.editor });
  });
  var i = CA(), r = L(i);
  Xt(r, () => EA), O(i), nt(i, (s, o) => {
    var a;
    return (a = An) == null ? void 0 : a(s, o);
  }, () => I("Insert File")), V(n, i), xe();
}
ve(L0, {}, [], [], !0, sn);
const TA = `<svg width="72" height="72" viewBox="0 0 72 72" fill="none"
    xmlns="http://www.w3.org/2000/svg">
    <g clip-path="url(#clip0_57_21)">
        <path d="M58.5 18.9V53.1H13.5V18.9H58.5ZM58.5 11.7H13.5C9.52005 11.7 6.30005 14.92 6.30005 18.9V53.1C6.30005 57.08 9.52005 60.3 13.5 60.3H58.5C62.48 60.3 65.7 57.08 65.7 53.1V18.9C65.7 14.92 62.48 11.7 58.5 11.7Z" fill="black"/>
        <path d="M50.4 35.1C53.3823 35.1 55.8 32.6823 55.8 29.7C55.8 26.7177 53.3823 24.3 50.4 24.3C47.4177 24.3 45 26.7177 45 29.7C45 32.6823 47.4177 35.1 50.4 35.1Z" fill="#231F20"/>
        <path d="M56.7 54H50.53L50.44 53.73H50.45L37.54 29.69C37.26 29.07 36.66 28.63 35.97 28.63C35.28 28.63 34.65 29.09 34.37 29.74L25.78 45.73L23.68 41.82C23.53 41.49 23.22 41.26 22.85 41.26C22.48 41.26 22.15 41.5 22.01 41.85L13.51 54.02C13.51 56.99 15.92 59.4 18.9 59.4H56.73C59.71 59.4 62.12 56.99 62.12 54.02L56.72 54H56.7Z" fill="#231F20"/>
    </g>
    <defs>
        <clipPath id="clip0_57_21">
            <rect width="72" height="72" fill="white"/>
        </clipPath>
    </defs>
</svg>
`;
function R0(n, e) {
  var s, o;
  ye(e, !0);
  const t = ee(e, "editor", 7), i = t().tiptap, r = (o = (s = t().options.toolbarOptions) == null ? void 0 : s.image) != null && o.edit ? [["deleteImage"], ["editImage"]] : [["deleteImage"]];
  return $d(n, {
    get editor() {
      return t();
    },
    targetNodeName: "image",
    targetNodeTagName: "IMG",
    condition: () => !(i.isActive("link") && !i.isActive("link", { class: "mt-asset-link" })) && i.isActive("image"),
    items: r
  }), xe({
    get editor() {
      return t();
    },
    set editor(a) {
      t(a), te();
    }
  });
}
ve(R0, { editor: {} }, [], [], !0);
var Er;
class AA {
  constructor({
    editor: e,
    edit: t
  }) {
    Ne(this, Er);
    Oe(this, Er, It(R0, {
      target: e.tiptap.view.dom.getRootNode(),
      props: {
        editor: e,
        edit: t
      }
    }));
  }
  destroy() {
    J(this, Er) && ut(J(this, Er));
  }
}
Er = new WeakMap();
var MA = Y("<button><!></button>");
function I0(n, e) {
  ye(e, !0);
  const t = e.$$host, { editor: i, options: r } = t;
  t.addEventListener("click", () => {
    var l, c;
    (c = (l = t.options).select) == null || c.call(l, { editor: t.editor });
  });
  let s;
  Re(() => (i && (s = new AA({ editor: i, edit: r.edit })), () => {
    s == null || s.destroy();
  }));
  var o = MA(), a = L(o);
  Xt(a, () => TA), O(o), nt(o, (l, c) => {
    var u;
    return (u = An) == null ? void 0 : u(l, c);
  }, () => I("Insert Image")), V(n, o), xe();
}
ve(I0, {}, [], [], !0, sn);
const OA = `<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="icon icon-tabler icons-tabler-outline icon-tabler-trash">
    <path stroke="none" d="M0 0h24v24H0z" fill="none"/>
    <path d="M4 7l16 0" />
    <path d="M10 11l0 6" />
    <path d="M14 11l0 6" />
    <path d="M5 7l1 12a2 2 0 0 0 2 2h8a2 2 0 0 0 2 -2l1 -12" />
    <path d="M9 7v-3a1 1 0 0 1 1 -1h4a1 1 0 0 1 1 1v3" />
</svg>
`, NA = (n) => class extends sn(n) {
};
var LA = Y("<button><!></button>");
function P0(n, e) {
  ye(e, !0);
  const t = e.$$host;
  t.addEventListener("click", () => {
    var s;
    (s = t.tiptap) == null || s.chain().focus().deleteSelection().run();
  });
  var i = LA(), r = L(i);
  Xt(r, () => OA), O(i), nt(i, (s, o) => {
    var a;
    return (a = An) == null ? void 0 : a(s, o);
  }, () => I("Delete Image")), V(n, i), xe();
}
ve(P0, {}, [], [], !0, NA);
const RA = (n) => class extends sn(n) {
};
var IA = Y("<button><!></button>");
function D0(n, e) {
  ye(e, !0);
  const t = e.$$host, { editor: i, tiptap: r } = t;
  function s() {
    var u;
    if (!r)
      return null;
    const { selection: l } = r.state, c = (
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      ((u = l.node) == null ? void 0 : u.type.name) === "image" ? l.$anchor : Qi((d) => d.type.name === "image")(l)
    );
    return c ? r.view.nodeDOM(c.pos) : null;
  }
  t.addEventListener("click", () => {
    var c, u, d;
    const l = s();
    l && ((d = (u = (c = i == null ? void 0 : i.options.toolbarOptions) == null ? void 0 : c.image) == null ? void 0 : u.edit) == null || d.call(u, { editor: i, element: l }));
  });
  var o = IA(), a = L(o);
  Xt(a, () => O0), O(o), nt(o, (l, c) => {
    var u;
    return (u = An) == null ? void 0 : u(l, c);
  }, () => I("Edit Image")), V(n, o), xe();
}
ve(D0, {}, [], [], !0, RA);
const PA = `<svg width="72" height="72" viewBox="0 0 72 72" fill="none"
    xmlns="http://www.w3.org/2000/svg">
    <g clip-path="url(#clip0_57_229)">
        <path d="M64.05 22.55C63.27 21.44 62 20.78 60.65 20.78H56.32L54.81 24.93H60.65L50.08 53.98H16.8799L18.6399 49.14H14.22L12.97 52.56C12.51 53.83 12.69 55.25 13.47 56.36C14.25 57.47 15.52 58.13 16.87 58.13H50.07C51.81 58.13 53.37 57.04 53.97 55.4L64.54 26.35C65 25.08 64.82 23.66 64.04 22.55H64.05Z" fill="black"/>
        <path d="M55.1201 18.02L44.5501 47.07H11.3501L21.9201 18.02H55.1201ZM55.1201 13.87H21.9201C20.1801 13.87 18.6201 14.96 18.0201 16.6L7.45005 45.65C6.99005 46.92 7.17005 48.34 7.95005 49.45C8.73005 50.56 10.0001 51.22 11.3501 51.22H44.5501C46.2901 51.22 47.8501 50.13 48.4501 48.49L59.0201 19.44C59.4801 18.17 59.3001 16.75 58.5201 15.64C57.7401 14.53 56.4701 13.87 55.1201 13.87Z" fill="black"/>
        <path d="M43.86 23.55L39.71 35.31H21.23L25.38 23.55H43.86ZM43.86 20.79H25.38C24.21 20.79 23.16 21.53 22.77 22.63L18.62 34.39C18.32 35.24 18.45 36.18 18.97 36.91C19.49 37.64 20.33 38.08 21.23 38.08H39.71C40.88 38.08 41.93 37.34 42.32 36.24L46.47 24.48C46.77 23.63 46.64 22.69 46.12 21.96C45.6 21.23 44.76 20.79 43.86 20.79Z" fill="black"/>
    </g>
    <defs>
        <clipPath id="clip0_57_229">
            <rect width="72" height="72" fill="white"/>
        </clipPath>
    </defs>
</svg>
`, DA = (n) => class extends sn(n) {
  onEditorUpdate() {
    var e;
    this.classList.toggle("is-active", (e = this.editor) == null ? void 0 : e.getStructureMode());
  }
};
var $A = Y("<button><!></button>");
function $0(n, e) {
  ye(e, !0);
  const t = e.$$host;
  t.addEventListener("click", () => {
    const s = t.editor;
    s && (s.setStructureMode(!s.getStructureMode()), t.onEditorUpdate());
  });
  var i = $A(), r = L(i);
  Xt(r, () => PA), O(i), nt(i, (s, o) => {
    var a;
    return (a = An) == null ? void 0 : a(s, o);
  }, () => I("Toggle to HTML structure editing mode")), V(n, i), xe();
}
ve($0, {}, [], [], !0, DA);
const zA = `<svg width="72" height="72" viewBox="0 0 72 72" fill="none"
    xmlns="http://www.w3.org/2000/svg">
    <g clip-path="url(#clip0_57_206)">
        <path d="M58.4 8.80005H13.6C10.07 8.80005 7.20001 11.67 7.20001 15.2V56.8C7.20001 60.33 10.07 63.2001 13.6 63.2001H58.4C61.93 63.2001 64.8 60.33 64.8 56.8V15.2C64.8 11.67 61.93 8.80005 58.4 8.80005ZM58.4 24.8V37.6H39.2V24.8H58.4ZM32.8 24.8V37.6H13.6V24.8H32.8ZM13.6 56.8V44H32.8V56.8H13.6ZM39.2 56.8V44H58.4V56.8H39.2Z" fill="black"/>
    </g>
    <defs>
        <clipPath id="clip0_57_206">
            <rect width="72" height="72" fill="white"/>
        </clipPath>
    </defs>
</svg>
`;
function BA(n, e) {
  n.key === "Enter" && e(n);
}
var HA = Y('<div role="button" tabindex="0"></div>'), FA = Y('<div class="grid_row svelte-zhz6om"></div>'), VA = Y('<div class="table_insert_panel svelte-zhz6om"><div class="grid_container svelte-zhz6om" tabindex="-1" role="grid"></div> <div class="size_indicator svelte-zhz6om"><!></div></div>');
const jA = {
  hash: "svelte-zhz6om",
  code: ".table_insert_panel.svelte-zhz6om {position:absolute;top:0;left:0;background:white;border:1px solid #ccc;border-radius:4px;padding:8px 8px 0 8px;box-shadow:0 2px 4px rgba(0, 0, 0, 0.1);}.size_indicator.svelte-zhz6om {text-align:center;margin:4px 0;height:20px;font-size:12px;}.grid_container.svelte-zhz6om {display:flex;flex-direction:column;gap:2px;}.grid_row.svelte-zhz6om {display:flex;gap:2px;}.grid_cell.svelte-zhz6om {width:12px;height:12px;border:1px solid #ddd;background:#fff;cursor:pointer;}.grid_cell.selected.svelte-zhz6om {background:#0066cc;border-color:#0066cc;}"
};
function z0(n, e) {
  ye(e, !0), Wt(n, jA);
  const t = ee(e, "onInsert", 7);
  let i = de(0), r = de(0);
  const s = 20, o = 20, a = 10, l = 10, c = na(() => Math.min(s, Math.max(a, A(i) + 1))), u = na(() => Math.min(o, Math.max(l, A(r) + 1)));
  function d(v, x) {
    K(i, v + 1), K(r, x + 1);
  }
  function f(v) {
    v.stopPropagation(), A(i) && A(r) && t()(A(i), A(r));
  }
  var h = VA(), p = L(h);
  p.__click = f, p.__keydown = [BA, f], pt(p, 21, () => Array(A(c)), En, (v, x, w) => {
    var E = FA();
    pt(E, 21, () => Array(A(u)), En, (k, S, y, T) => {
      var _ = HA();
      let C;
      _.__mouseover = () => d(w, y), ie((M) => C = gt(_, 1, "grid_cell svelte-zhz6om", null, C, M), [
        () => ({
          selected: w < A(i) && y < A(r)
        })
      ]), kn("focus", _, () => d(w, y)), V(k, _);
    }), O(E), V(v, E);
  }), O(p);
  var b = B(p, 2), m = L(b);
  {
    var g = (v) => {
      var x = Tn();
      ie(() => z(x, `${A(i) ?? ""} x ${A(r) ?? ""}`)), V(v, x);
    };
    lt(m, (v) => {
      A(i) && A(r) && v(g);
    });
  }
  return O(b), O(h), V(n, h), xe({
    get onInsert() {
      return t();
    },
    set onInsert(v) {
      t(v), te();
    }
  });
}
Rt(["click", "keydown", "mouseover"]);
ve(z0, { onInsert: {} }, [], [], !0);
var WA = Y('<div class="form-group mb-3"><label for="link-url" class="form-label"> </label> <input type="text" id="table-width" class="form-control"></div> <div class="form-group mb-3"><label for="table-height" class="form-label"> </label> <input type="text" id="table-height" class="form-control"></div> <div class="form-group mb-3"><label for="table-cell-spacing" class="form-label"> </label> <input type="text" id="table-cell-spacing" class="form-control"></div> <div class="form-group mb-3"><label for="table-border-width" class="form-label"> </label> <input type="text" id="table-border-width" class="form-control"></div>', 1), UA = Y('<button type="button" class="action primary button btn btn-primary"> </button> <button type="button" class="cancel action button mt-close-dialog btn btn-default"> </button>', 1);
function B0(n, e) {
  ye(e, !0);
  let t = ee(e, "tableData", 7), i = ee(e, "onSubmit", 7), r = ee(e, "onClose", 7), s = de(He(t().width)), o = de(He(t().height)), a = de(He(t().cellSpacing)), l = de(He(t().borderWidth)), c;
  Re(() => {
    c == null || c.focus();
  });
  let u, d;
  return Ge(
    On(n, {
      $$events: {
        close(...f) {
          var h;
          (h = r()) == null || h.apply(this, f);
        }
      },
      children: (f, h) => {
        Nn(f, {
          get close() {
            return d;
          },
          set close(p) {
            d = p;
          },
          $$slots: {
            title: (p, b) => {
              var m = Tn();
              ie((g) => z(m, g), [() => I("Table Properties")]), V(p, m);
            },
            body: (p, b) => {
              var m = WA(), g = Le(m), v = L(g), x = L(v, !0);
              O(v);
              var w = B(v, 2);
              mt(w), Ge(w, (G) => c = G, () => c), O(g);
              var E = B(g, 2), k = L(E), S = L(k, !0);
              O(k);
              var y = B(k, 2);
              mt(y), O(E);
              var T = B(E, 2), _ = L(T), C = L(_, !0);
              O(_);
              var M = B(_, 2);
              mt(M), O(T);
              var H = B(T, 2), D = L(H), F = L(D, !0);
              O(D);
              var W = B(D, 2);
              mt(W), O(H), ie(
                (G, re, Z, ue) => {
                  z(x, G), z(S, re), z(C, Z), z(F, ue);
                },
                [
                  () => I("Width"),
                  () => I("Height"),
                  () => I("Cell Spacing"),
                  () => I("Border Width")
                ]
              ), Ct(w, () => A(s), (G) => K(s, G)), Ct(y, () => A(o), (G) => K(o, G)), Ct(M, () => A(a), (G) => K(a, G)), Ct(W, () => A(l), (G) => K(l, G)), V(p, m);
            },
            footer: (p, b) => {
              var m = UA(), g = Le(m);
              g.__click = () => {
                i()({
                  width: A(s),
                  height: A(o),
                  cellSpacing: A(a),
                  borderWidth: A(l)
                }), d();
              };
              var v = L(g, !0);
              O(g);
              var x = B(g, 2);
              x.__click = d;
              var w = L(x, !0);
              O(x), ie(
                (E, k, S, y) => {
                  Ae(g, "title", E), z(v, k), Ae(x, "title", S), z(w, y);
                },
                [
                  () => I("Insert (s)"),
                  () => I("Insert"),
                  () => I("Cancel (x)"),
                  () => I("Cancel")
                ]
              ), V(p, m);
            }
          }
        });
      },
      $$slots: { default: !0 }
    }),
    (f) => u = f,
    () => u
  ), xe({
    get tableData() {
      return t();
    },
    set tableData(f) {
      t(f), te();
    },
    get onSubmit() {
      return i();
    },
    set onSubmit(f) {
      i(f), te();
    },
    get onClose() {
      return r();
    },
    set onClose(f) {
      r(f), te();
    }
  });
}
Rt(["click"]);
ve(B0, { tableData: {}, onSubmit: {}, onClose: {} }, [], [], !0);
const KA = (n) => {
  const { state: e } = n;
  let t = e.selection.$anchor.depth, i = null;
  for (; t > 0; ) {
    const s = e.selection.$anchor.node(t);
    if (s.type.name === "table") {
      i = s;
      break;
    }
    t--;
  }
  const r = document.createElement("div");
  return r.style.cssText = (i == null ? void 0 : i.attrs.style) || "", {
    width: r.style.width || "100%",
    height: r.style.height || "",
    cellSpacing: r.style.borderSpacing || "",
    borderWidth: r.style.borderWidth || ""
  };
}, qA = (n) => {
  const { state: e } = n;
  let t = e.selection.$anchor.depth;
  for (; t > 0; ) {
    if (e.selection.$anchor.node(t).type.name === "table")
      return e.selection.$anchor.before(t);
    t--;
  }
  return null;
};
let Np;
const GA = (n) => {
  It(B0, {
    target: document.body,
    props: {
      tableData: KA(n),
      onSubmit: (e) => {
        const t = qA(n);
        t !== null && (n == null || n.chain().focus().command(({ tr: i }) => {
          const r = i.doc.nodeAt(t);
          if (r) {
            const s = document.createElement("div");
            s.style.cssText = r.attrs.style || "", s.style.width = hr(e.width), s.style.height = hr(e.height), s.style.borderSpacing = e.cellSpacing, s.style.borderWidth = hr(e.borderWidth), i.setNodeMarkup(t, null, {
              ...r.attrs,
              style: s.style.cssText
            });
            const o = mn(n.state);
            o && o.map.map.forEach((a) => {
              const l = o.table.nodeAt(a);
              if (l) {
                const c = document.createElement("div");
                c.style.cssText = l.attrs.style || "", c.style.borderWidth = hr(e.borderWidth), i.setNodeMarkup(o.tableStart + a, null, {
                  ...l.attrs,
                  style: c.style.cssText
                });
              }
            });
          }
          return !0;
        }).run()), ut(Np);
      },
      onClose: () => {
        ut(Np);
      }
    }
  });
};
var JA = Y('<div class="form-group mb-3"><label for="width" class="form-label"> </label> <input type="text" id="width" class="form-control"></div> <div class="form-group mb-3"><label for="width" class="form-label"> </label> <input type="text" id="height" class="form-control"></div> <div class="form-group mb-3"><label for="element" class="form-label"> </label> <select id="element" class="form-control"><option> </option><option> </option></select></div> <div class="form-group mb-3"><label for="scope" class="form-label"> </label> <select id="scope" class="form-control"><option> </option><option> </option><option> </option><option> </option><option> </option></select></div> <div class="form-group mb-3"><label for="horizontalAlign" class="form-label"> </label> <select id="horizontalAlign" class="form-control"><option> </option><option> </option><option> </option><option> </option><option> </option></select></div> <div class="form-group mb-3"><label for="verticalAlign" class="form-label"> </label> <select id="verticalAlign" class="form-control"><option> </option><option> </option><option> </option><option> </option></select></div>', 1), XA = Y('<button type="button" class="action primary button btn btn-primary"> </button> <button type="button" class="cancel action button mt-close-dialog btn btn-default"> </button>', 1);
function H0(n, e) {
  ye(e, !0);
  let t = ee(e, "cellData", 7), i = ee(e, "onSubmit", 7), r = ee(e, "onClose", 7), s = de(He(t().width)), o = de(He(t().height)), a = de(He(t().element)), l = de(He(t().scope)), c = de(He(t().horizontalAlign)), u = de(He(t().verticalAlign)), d;
  Re(() => {
    d == null || d.focus();
  });
  let f, h;
  return Ge(
    On(n, {
      $$events: {
        close(...p) {
          var b;
          (b = r()) == null || b.apply(this, p);
        }
      },
      children: (p, b) => {
        Nn(p, {
          get close() {
            return h;
          },
          set close(m) {
            h = m;
          },
          $$slots: {
            title: (m, g) => {
              var v = Tn();
              ie((x) => z(v, x), [() => I("Cell Properties")]), V(m, v);
            },
            body: (m, g) => {
              var v = JA(), x = Le(v), w = L(x), E = L(w, !0);
              O(w);
              var k = B(w, 2);
              mt(k), Ge(k, (ot) => d = ot, () => d), O(x);
              var S = B(x, 2), y = L(S), T = L(y, !0);
              O(y);
              var _ = B(y, 2);
              mt(_), O(S);
              var C = B(S, 2), M = L(C), H = L(M, !0);
              O(M);
              var D = B(M, 2), F = L(D);
              F.value = (F.__value = "td") == null ? "" : "td";
              var W = L(F, !0);
              O(F);
              var G = B(F);
              G.value = (G.__value = "th") == null ? "" : "th";
              var re = L(G, !0);
              O(G), O(D), O(C);
              var Z = B(C, 2), ue = L(Z), he = L(ue, !0);
              O(ue);
              var Te = B(ue, 2), oe = L(Te);
              oe.value = ((oe.__value = "") == null, "");
              var Ve = L(oe, !0);
              O(oe);
              var be = B(oe);
              be.value = (be.__value = "row") == null ? "" : "row";
              var R = L(be, !0);
              O(be);
              var tt = B(be);
              tt.value = (tt.__value = "col") == null ? "" : "col";
              var ge = L(tt, !0);
              O(tt);
              var rt = B(tt);
              rt.value = (rt.__value = "rowgroup") == null ? "" : "rowgroup";
              var ft = L(rt, !0);
              O(rt);
              var ne = B(rt);
              ne.value = (ne.__value = "colgroup") == null ? "" : "colgroup";
              var xt = L(ne, !0);
              O(ne), O(Te), O(Z);
              var we = B(Z, 2), P = L(we), Q = L(P, !0);
              O(P);
              var me = B(P, 2), j = L(me);
              j.value = ((j.__value = "") == null, "");
              var Be = L(j, !0);
              O(j);
              var st = B(j);
              st.value = (st.__value = "left") == null ? "" : "left";
              var Xe = L(st, !0);
              O(st);
              var Tt = B(st);
              Tt.value = (Tt.__value = "center") == null ? "" : "center";
              var on = L(Tt, !0);
              O(Tt);
              var ht = B(Tt);
              ht.value = (ht.__value = "right") == null ? "" : "right";
              var Dt = L(ht, !0);
              O(ht);
              var $e = B(ht);
              $e.value = ($e.__value = "justify") == null ? "" : "justify";
              var Ue = L($e, !0);
              O($e), O(me), O(we);
              var Pe = B(we, 2), Se = L(Pe), At = L(Se, !0);
              O(Se);
              var Ti = B(Se, 2), ii = L(Ti);
              ii.value = ((ii.__value = "") == null, "");
              var tr = L(ii, !0);
              O(ii);
              var Ln = B(ii);
              Ln.value = (Ln.__value = "top") == null ? "" : "top";
              var gn = L(Ln, !0);
              O(Ln);
              var an = B(Ln);
              an.value = (an.__value = "middle") == null ? "" : "middle";
              var Yr = L(an, !0);
              O(an);
              var ri = B(an);
              ri.value = (ri.__value = "bottom") == null ? "" : "bottom";
              var El = L(ri, !0);
              O(ri), O(Ti), O(Pe), ie(
                (ot, nr, Cl, Ai, Tl, Al, at, si, Ml, fo, Zr, ho, po, Ol, ln, ir, mo, go, Qr, _o, _n, bo) => {
                  z(E, ot), z(T, nr), z(H, Cl), z(W, Ai), z(re, Tl), z(he, Al), z(Ve, at), z(R, si), z(ge, Ml), z(ft, fo), z(xt, Zr), z(Q, ho), z(Be, po), z(Xe, Ol), z(on, ln), z(Dt, ir), z(Ue, mo), z(At, go), z(tr, Qr), z(gn, _o), z(Yr, _n), z(El, bo);
                },
                [
                  () => I("Width"),
                  () => I("Height"),
                  () => I("Cell type"),
                  () => I("Cell"),
                  () => I("Header cell"),
                  () => I("Scope"),
                  () => I("None"),
                  () => I("Row"),
                  () => I("Column"),
                  () => I("Row group"),
                  () => I("Column group"),
                  () => I("Horizontal align"),
                  () => I("None"),
                  () => I("HORIZONTAL_ALIGN_LEFT"),
                  () => I("HORIZONTAL_ALIGN_CENTER"),
                  () => I("HORIZONTAL_ALIGN_RIGHT"),
                  () => I("HORIZONTAL_ALIGN_JUSTIFY"),
                  () => I("Vertical align"),
                  () => I("None"),
                  () => I("VERTICAL_ALIGN_TOP"),
                  () => I("VERTICAL_ALIGN_MIDDLE"),
                  () => I("VERTICAL_ALIGN_BOTTOM")
                ]
              ), Ct(k, () => A(s), (ot) => K(s, ot)), Ct(_, () => A(o), (ot) => K(o, ot)), gr(D, () => A(a), (ot) => K(a, ot)), gr(Te, () => A(l), (ot) => K(l, ot)), gr(me, () => A(c), (ot) => K(c, ot)), gr(Ti, () => A(u), (ot) => K(u, ot)), V(m, v);
            },
            footer: (m, g) => {
              var v = XA(), x = Le(v);
              x.__click = () => {
                i()({
                  width: A(s),
                  height: A(o),
                  element: A(a),
                  scope: A(l),
                  horizontalAlign: A(c),
                  verticalAlign: A(u)
                }), h();
              };
              var w = L(x, !0);
              O(x);
              var E = B(x, 2);
              E.__click = h;
              var k = L(E, !0);
              O(E), ie(
                (S, y, T, _) => {
                  Ae(x, "title", S), z(w, y), Ae(E, "title", T), z(k, _);
                },
                [
                  () => I("Insert (s)"),
                  () => I("Insert"),
                  () => I("Cancel (x)"),
                  () => I("Cancel")
                ]
              ), V(m, v);
            }
          }
        });
      },
      $$slots: { default: !0 }
    }),
    (p) => f = p,
    () => f
  ), xe({
    get cellData() {
      return t();
    },
    set cellData(p) {
      t(p), te();
    },
    get onSubmit() {
      return i();
    },
    set onSubmit(p) {
      i(p), te();
    },
    get onClose() {
      return r();
    },
    set onClose(p) {
      r(p), te();
    }
  });
}
Rt(["click"]);
ve(H0, { cellData: {}, onSubmit: {}, onClose: {} }, [], [], !0);
const YA = (n) => {
  const { state: e } = n;
  let t = e.selection.$anchor.depth, i = null;
  for (; t > 0; ) {
    const s = e.selection.$anchor.node(t);
    if (s.type.name === "tableCell" || s.type.name === "tableHeader") {
      i = s;
      break;
    }
    t--;
  }
  const r = document.createElement("div");
  return r.style.cssText = (i == null ? void 0 : i.attrs.style) || "", {
    width: r.style.width || "",
    height: r.style.height || "",
    element: (i == null ? void 0 : i.type.name) === "tableCell" ? "td" : "th",
    scope: (i == null ? void 0 : i.attrs.scope) || "",
    horizontalAlign: r.style.textAlign || "",
    verticalAlign: r.style.verticalAlign || ""
  };
}, ZA = (n) => {
  if (!n)
    return null;
  const { state: e } = n;
  let t = e.selection.$anchor.depth;
  for (; t > 0; ) {
    const i = e.selection.$anchor.node(t);
    if (i.type.name === "tableCell" || i.type.name === "tableHeader")
      return e.selection.$anchor.before(t);
    t--;
  }
  return null;
};
let Lp;
const QA = (n) => {
  It(H0, {
    target: document.body,
    props: {
      cellData: YA(n),
      onSubmit: (e) => {
        var i;
        const t = ZA(n);
        if (t !== null) {
          const r = (i = n == null ? void 0 : n.state.selection) == null ? void 0 : i.$anchor.node();
          ((r == null ? void 0 : r.type.name) === "tableCell" && e.element === "th" || (r == null ? void 0 : r.type.name) === "tableHeader" && e.element === "td") && (n == null || n.chain().focus().toggleHeaderCell().run()), n == null || n.chain().focus().command(({ tr: s }) => {
            const o = s.doc.nodeAt(t);
            if (o) {
              const a = document.createElement("div");
              a.style.cssText = o.attrs.style || "", a.style.width = hr(e.width), a.style.height = hr(e.height), a.style.textAlign = e.horizontalAlign, a.style.verticalAlign = e.verticalAlign, s.setNodeMarkup(t, null, {
                ...o.attrs,
                scope: e.scope || void 0,
                style: a.style.cssText
              });
            }
            return !0;
          }).run();
        }
        ut(Lp);
      },
      onClose: () => {
        ut(Lp);
      }
    }
  });
};
var eM = Y('<div class="form-group mb-3"><label for="element" class="form-label"> </label> <select id="element" class="form-control"><option> </option><option> </option></select></div>'), tM = Y('<button type="button" class="action primary button btn btn-primary"> </button> <button type="button" class="cancel action button mt-close-dialog btn btn-default"> </button>', 1);
function nM(n, e) {
  ye(e, !0);
  let t = ee(e, "rowData", 7), i = ee(e, "onSubmit", 7), r = ee(e, "onClose", 7), s = de(He(t().element)), o;
  Re(() => {
    o == null || o.focus();
  });
  let a, l;
  return Ge(
    On(n, {
      $$events: {
        close(...c) {
          var u;
          (u = r()) == null || u.apply(this, c);
        }
      },
      children: (c, u) => {
        Nn(c, {
          get close() {
            return l;
          },
          set close(d) {
            l = d;
          },
          $$slots: {
            title: (d, f) => {
              var h = Tn();
              ie((p) => z(h, p), [() => I("Row Properties")]), V(d, h);
            },
            body: (d, f) => {
              var h = eM(), p = L(h), b = L(p, !0);
              O(p);
              var m = B(p, 2), g = L(m);
              g.value = (g.__value = "tbody") == null ? "" : "tbody";
              var v = L(g, !0);
              O(g);
              var x = B(g);
              x.value = (x.__value = "thead") == null ? "" : "thead";
              var w = L(x, !0);
              O(x), O(m), Ge(m, (E) => o = E, () => o), O(h), ie(
                (E, k, S) => {
                  z(b, E), z(v, k), z(w, S);
                },
                [
                  () => I("Row type"),
                  () => I("Row"),
                  () => I("Header row")
                ]
              ), gr(m, () => A(s), (E) => K(s, E)), V(d, h);
            },
            footer: (d, f) => {
              var h = tM(), p = Le(h);
              p.__click = () => {
                i()({ element: A(s) }), l();
              };
              var b = L(p, !0);
              O(p);
              var m = B(p, 2);
              m.__click = l;
              var g = L(m, !0);
              O(m), ie(
                (v, x, w, E) => {
                  Ae(p, "title", v), z(b, x), Ae(m, "title", w), z(g, E);
                },
                [
                  () => I("Insert (s)"),
                  () => I("Insert"),
                  () => I("Cancel (x)"),
                  () => I("Cancel")
                ]
              ), V(d, h);
            }
          }
        });
      },
      $$slots: { default: !0 }
    }),
    (c) => a = c,
    () => a
  ), xe({
    get rowData() {
      return t();
    },
    set rowData(c) {
      t(c), te();
    },
    get onSubmit() {
      return i();
    },
    set onSubmit(c) {
      i(c), te();
    },
    get onClose() {
      return r();
    },
    set onClose(c) {
      r(c), te();
    }
  });
}
Rt(["click"]);
ve(nM, { rowData: {}, onSubmit: {}, onClose: {} }, [], [], !0);
var iM = Y('<div class="button-menu-item-subgroup svelte-woewg3"><!></div>'), rM = (n, e) => {
  e == null || e.chain().focus().mergeCells().run();
}, sM = (n, e) => {
  e == null || e.chain().focus().splitCell().run();
}, oM = (n, e) => {
  QA(e);
}, aM = Y('<div class="button-menu-item-subgroup svelte-woewg3"><button class="button-menu-item svelte-woewg3"> </button> <button class="button-menu-item svelte-woewg3"> </button> <button class="button-menu-item svelte-woewg3"> </button></div>'), lM = (n, e, t) => {
  e == null || e.chain().focus().addRowBefore().command(t(e)).run();
}, cM = (n, e, t) => {
  e == null || e.chain().focus().addRowAfter().command(t(e)).run();
}, uM = (n, e) => {
  e == null || e.chain().focus().deleteRow().run();
}, dM = Y('<div class="button-menu-item-subgroup svelte-woewg3"><button class="button-menu-item svelte-woewg3"> </button> <button class="button-menu-item svelte-woewg3"> </button> <button class="button-menu-item svelte-woewg3"> </button> <!></div>'), fM = (n, e, t) => {
  e == null || e.chain().focus().addColumnBefore().command(t(e)).run();
}, hM = (n, e, t) => {
  e == null || e.chain().focus().addColumnAfter().command(t(e)).run();
}, pM = (n, e) => {
  e == null || e.chain().focus().deleteColumn().run();
}, mM = Y('<div class="button-menu-item-subgroup svelte-woewg3"><button class="button-menu-item svelte-woewg3"> </button> <button class="button-menu-item svelte-woewg3"> </button> <button class="button-menu-item svelte-woewg3"> </button></div>'), gM = (n, e) => {
  GA(e);
}, _M = (n, e) => {
  e == null || e.chain().focus().deleteTable().run();
}, bM = Y('<div class="button-menu svelte-woewg3"><div class="button-menu-item-group button-menu-item-group--insert svelte-woewg3" role="menuitem" tabindex="0"><div class="button-menu-item-group-label svelte-woewg3"> </div> <!></div> <div class="button-menu-item-group svelte-woewg3" role="menuitem" tabindex="0"><div class="button-menu-item-group-label svelte-woewg3"> </div> <!></div> <div class="button-menu-item-group svelte-woewg3" role="menuitem" tabindex="0"><div class="button-menu-item-group-label svelte-woewg3"> </div> <!></div> <div class="button-menu-item-group svelte-woewg3"><div class="button-menu-item-group-label svelte-woewg3"> </div> <!></div> <div class="button-menu-item-group svelte-woewg3"><button class="button-menu-item svelte-woewg3"> </button> <button class="button-menu-item svelte-woewg3"> </button></div></div>'), vM = Y('<button><!></button> <div class="button-menu-container svelte-woewg3"><!></div>', 1);
const yM = {
  hash: "svelte-woewg3",
  code: '.button-menu-container.svelte-woewg3 {position:relative;z-index:3;}.button-menu.svelte-woewg3 {position:absolute;left:0;top:0;display:flex;flex-direction:column;border-radius:4px;box-shadow:0 0 0 1px #ccc;background:white;}.button-menu-item-group.svelte-woewg3 {position:relative;background:white;&:first-child {border-top-left-radius:4px;border-top-right-radius:4px;}&:hover .button-menu-item-group-label:where(.svelte-woewg3) {background:#dee0e2;}}.button-menu-item-group--insert.svelte-woewg3 {border-bottom:1px solid #ccc;}.button-menu-item-group-label.svelte-woewg3 {font-size:0.85rem;padding:5px 10px;display:flex;align-items:center;justify-content:space-between;&:after {content:">";font-weight:bold;font-size:0.85rem;}}.button-menu-item-subgroup.svelte-woewg3 {position:absolute;left:calc(100% + 1px);top:0;border-radius:4px;.button-menu-item:where(.svelte-woewg3):first-child {border-top-left-radius:4px;border-top-right-radius:4px;}}.button-menu-item.svelte-woewg3 {font-size:0.85rem;border:none;margin:0;display:flex;align-items:center;justify-content:flex-start;padding:5px 10px;width:100%;background:white;box-shadow:0 0 0 1px #ccc;white-space:nowrap;&:last-child {border-bottom-left-radius:4px;border-bottom-right-radius:4px;}&:hover {background:#dee0e2;}}'
};
function F0(n, e) {
  ye(e, !0), Wt(n, yM);
  const t = e.$$host, { tiptap: i } = t;
  t.addEventListener("click", u);
  let r = de(!1), s = de(He(i == null ? void 0 : i.isActive("table"))), o = de(!1), a = de(!1);
  const l = () => {
    if (!i)
      return;
    K(s, i.isActive("table"), !0);
    const S = A(s) ? mn(i.state) : null;
    if (S) {
      const y = /* @__PURE__ */ new Set();
      let T = !1;
      const _ = S.map;
      e: for (let C = S.top; C < S.bottom; C++)
        for (let M = S.left; M < S.right; M++) {
          const H = _.map[C * _.width + M], D = S.table.nodeAt(H);
          if (D && (y.add(D), T = D.attrs.colspan > 1 || D.attrs.rowspan > 1, T && y.size > 1))
            break e;
        }
      K(a, T, !0), K(o, y.size > 1);
    }
  };
  i == null || i.on("update", l), i == null || i.on("selectionUpdate", l);
  function c(S, y) {
    if (!i)
      return;
    const T = J_(i.schema, S, y, !1, i.schema.nodes.textBlock.create());
    T.attrs.style = "width: 100%;", i.chain().command(({ tr: _ }) => {
      const C = _.selection.from + 1;
      return _.replaceSelectionWith(T).scrollIntoView().setSelection(fe.near(_.doc.resolve(C))), !0;
    }).run(), K(r, !1);
  }
  function u(S) {
    i && (S.stopPropagation(), K(r, !A(r)));
  }
  function d() {
    K(r, !1);
  }
  Re(() => (document.addEventListener("click", d), () => {
    document.removeEventListener("click", d);
  }));
  let f = de(He({}));
  const h = (S) => {
    K(f, { [S]: !0 }, !0);
  };
  Re(() => {
    A(r) || K(f, {}, !0);
  });
  const p = (S) => {
    const y = /* @__PURE__ */ new Set(), T = S.state.doc.nodeAt(S.state.selection.$anchor.before(1));
    return T && T.type.name === "table" && T.forEach((_) => {
      _.forEach((C) => {
        y.add(C);
      });
    }), y;
  }, b = (S) => {
    const y = p(S);
    return ({ tr: T }) => {
      let _ = T.selection.$anchor.before(1);
      const C = T.doc.nodeAt(_);
      if (C && C.type.name === "table") {
        const M = document.createElement("div"), H = document.createElement("div");
        M.style.cssText = C.attrs.style || "", H.style.borderWidth = M.style.borderWidth;
        const D = H.style.cssText;
        C.forEach((F, W) => {
          F.forEach((G, re) => {
            if (!y.has(G)) {
              const Z = _ + W + re + 2, ue = Z + 1, he = Z + G.nodeSize - 1;
              T.setNodeMarkup(Z, void 0, { ...G.attrs, style: D }), T.replaceWith(ue, he, S.schema.nodes.textBlock.create());
            }
          });
        });
      }
      return !0;
    };
  }, m = (S, y) => {
    S.addEventListener("mouseenter", () => A(f)[y] = !0), S.addEventListener("mouseleave", () => A(f)[y] = !1), S.addEventListener("focus", () => h(y)), S.addEventListener("click", (T) => {
      T.target instanceof HTMLElement && (T.target === S || T.target.parentElement === S) && T.stopPropagation();
    });
  };
  var g = vM(), v = Le(g), x = L(v);
  Xt(x, () => zA), O(v), nt(v, (S, y) => {
    var T;
    return (T = An) == null ? void 0 : T(S, y);
  }, () => I("Table"));
  var w = B(v, 2), E = L(w);
  {
    var k = (S) => {
      var y = bM(), T = L(y), _ = L(T), C = L(_, !0);
      O(_);
      var M = B(_, 2);
      {
        var H = (P) => {
          var Q = iM(), me = L(Q);
          z0(me, { onInsert: c }), O(Q), V(P, Q);
        };
        lt(M, (P) => {
          A(f).insert && P(H);
        });
      }
      O(T), nt(T, (P, Q) => m == null ? void 0 : m(P, Q), () => "insert");
      var D = B(T, 2), F = L(D), W = L(F, !0);
      O(F);
      var G = B(F, 2);
      {
        var re = (P) => {
          var Q = aM(), me = L(Q);
          me.__click = [rM, i];
          var j = L(me, !0);
          O(me);
          var Be = B(me, 2);
          Be.__click = [sM, i];
          var st = L(Be, !0);
          O(Be);
          var Xe = B(Be, 2);
          Xe.__click = [oM, i];
          var Tt = L(Xe, !0);
          O(Xe), O(Q), ie(
            (on, ht, Dt) => {
              me.disabled = !(A(s) && A(o)), z(j, on), Be.disabled = !(A(s) && A(a)), z(st, ht), Xe.disabled = !A(s), z(Tt, Dt);
            },
            [
              () => I("Merge cells"),
              () => I("Split cell"),
              () => I("Cell properties")
            ]
          ), V(P, Q);
        };
        lt(G, (P) => {
          A(f).cell && P(re);
        });
      }
      O(D), nt(D, (P, Q) => m == null ? void 0 : m(P, Q), () => "cell");
      var Z = B(D, 2), ue = L(Z), he = L(ue, !0);
      O(ue);
      var Te = B(ue, 2);
      {
        var oe = (P) => {
          var Q = dM(), me = L(Q);
          me.__click = [lM, i, b];
          var j = L(me, !0);
          O(me);
          var Be = B(me, 2);
          Be.__click = [cM, i, b];
          var st = L(Be, !0);
          O(Be);
          var Xe = B(Be, 2);
          Xe.__click = [uM, i];
          var Tt = L(Xe, !0);
          O(Xe);
          var on = B(Xe, 2);
          lt(on, (ht) => {
          }), O(Q), ie(
            (ht, Dt, $e) => {
              me.disabled = !A(s), z(j, ht), Be.disabled = !A(s), z(st, Dt), Xe.disabled = !A(s), z(Tt, $e);
            },
            [
              () => I("Insert row before"),
              () => I("Insert row after"),
              () => I("Delete row")
            ]
          ), V(P, Q);
        };
        lt(Te, (P) => {
          A(f).row && P(oe);
        });
      }
      O(Z), nt(Z, (P, Q) => m == null ? void 0 : m(P, Q), () => "row");
      var Ve = B(Z, 2), be = L(Ve), R = L(be, !0);
      O(be);
      var tt = B(be, 2);
      {
        var ge = (P) => {
          var Q = mM(), me = L(Q);
          me.__click = [fM, i, b];
          var j = L(me, !0);
          O(me);
          var Be = B(me, 2);
          Be.__click = [hM, i, b];
          var st = L(Be, !0);
          O(Be);
          var Xe = B(Be, 2);
          Xe.__click = [pM, i];
          var Tt = L(Xe, !0);
          O(Xe), O(Q), ie(
            (on, ht, Dt) => {
              me.disabled = !A(s), z(j, on), Be.disabled = !A(s), z(st, ht), Xe.disabled = !A(s), z(Tt, Dt);
            },
            [
              () => I("Insert column before"),
              () => I("Insert column after"),
              () => I("Delete column")
            ]
          ), V(P, Q);
        };
        lt(tt, (P) => {
          A(f).col && P(ge);
        });
      }
      O(Ve), nt(Ve, (P, Q) => m == null ? void 0 : m(P, Q), () => "col");
      var rt = B(Ve, 2), ft = L(rt);
      ft.__click = [gM, i];
      var ne = L(ft, !0);
      O(ft);
      var xt = B(ft, 2);
      xt.__click = [_M, i];
      var we = L(xt, !0);
      O(xt), O(rt), O(y), ie(
        (P, Q, me, j, Be, st) => {
          z(C, P), z(W, Q), z(he, me), z(R, j), ft.disabled = !A(s), z(ne, Be), xt.disabled = !A(s), z(we, st);
        },
        [
          () => I("Insert table"),
          () => I("Cell"),
          () => I("Row"),
          () => I("Column"),
          () => I("Table properties"),
          () => I("Delete table")
        ]
      ), V(S, y);
    };
    lt(E, (S) => {
      A(r) && S(k);
    });
  }
  O(w), V(n, g), xe();
}
Rt(["click"]);
ve(F0, {}, [], [], !0, sn);
function xM(n, e, t) {
  e && (n.stopPropagation(), K(t, !A(t)));
}
var wM = (n, e, t) => e(A(t).value), kM = Y("<button><div> </div></button>"), SM = Y('<div class="options svelte-osezha"></div>'), EM = Y('<div class="dropdown svelte-osezha"><button class="selected svelte-osezha"> <span class="arrow svelte-osezha"></span></button> <!></div>');
const CM = {
  hash: "svelte-osezha",
  code: ".dropdown.svelte-osezha {position:relative;width:150px;}.selected.svelte-osezha {width:100%;padding:4px 8px;border:1px solid #ccc;border-radius:4px;background-color:white;font-size:14px;cursor:pointer;display:flex;justify-content:space-between;align-items:center;}.arrow.svelte-osezha {width:6px;height:6px;border-right:1px solid #666;border-bottom:1px solid #666;transform:rotate(45deg);margin-left:4px;position:relative;top:-2px;}.options.svelte-osezha {position:absolute;top:100%;left:0;right:0;background:white;border:1px solid #ccc;border-radius:4px;margin-top:4px;box-shadow:0 2px 4px rgba(0, 0, 0, 0.1);z-index:1000;}.option.svelte-osezha {display:block;width:100%;text-align:left;border:none;background:white;padding:8px;cursor:pointer;}.option.svelte-osezha:hover {background-color:#f5f5f5;}.option.active.svelte-osezha {background-color:#e0e0e0;}.h1.svelte-osezha {font-size:1.8em;font-weight:bold;}.h2.svelte-osezha {font-size:1.5em;font-weight:bold;}.h3.svelte-osezha {font-size:1.3em;font-weight:bold;}.h4.svelte-osezha {font-size:1.2em;font-weight:bold;}.h5.svelte-osezha {font-size:1.1em;font-weight:bold;}.h6.svelte-osezha {font-size:1em;font-weight:bold;}.paragraph.svelte-osezha {font-size:1em;}.pre.svelte-osezha {font-family:monospace;}"
};
function V0(n, e) {
  ye(e, !0), Wt(n, CM);
  const t = [
    { value: "paragraph", label: I("Paragraph") },
    { value: "h1", label: I("Heading 1") },
    { value: "h2", label: I("Heading 2") },
    { value: "h3", label: I("Heading 3") },
    { value: "h4", label: I("Heading 4") },
    { value: "h5", label: I("Heading 5") },
    { value: "h6", label: I("Heading 6") },
    { value: "pre", label: I("Preformatted") }
  ], i = e.$$host, { options: r, tiptap: s } = i;
  let o = de(!1);
  const l = (r.blocks ?? t).map((x) => typeof x == "string" ? t.find((w) => w.value === x) : x).filter((x) => x !== void 0);
  let c = de(He(l[0].value));
  i.onEditorUpdate = () => {
    if (!s)
      return;
    const { $head: x } = s.state.selection, w = x.parent;
    w.type.name === "heading" ? K(c, `h${w.attrs.level}`) : K(c, w.type.name, !0), l.some((E) => E.value === A(c)) || K(c, l[0].value, !0);
  };
  function u(x) {
    if (x === "paragraph" || x === "pre")
      s == null || s.chain().focus().setNode(x).run();
    else if (x.match(/^h[1-6]$/)) {
      const w = parseInt(x.substring(1));
      s == null || s.chain().focus().setHeading({ level: w }).run();
    }
    K(c, x, !0), K(o, !1);
  }
  function d() {
    K(o, !1);
  }
  let f, h = de(!1);
  Re(() => {
    if (!A(h))
      return K(h, !0), document.addEventListener("click", d), () => {
        document.removeEventListener("click", d);
      };
  });
  var p = EM(), b = L(p);
  b.__click = [xM, s, o];
  var m = L(b);
  tm(), O(b);
  var g = B(b, 2);
  {
    var v = (x) => {
      var w = SM();
      pt(w, 21, () => l, (E) => E.value, (E, k) => {
        var S = kM();
        let y;
        S.__click = [wM, u, k];
        var T = L(S), _ = L(T, !0);
        O(T), O(S), ie(
          (C) => {
            y = gt(S, 1, "option svelte-osezha", null, y, C), gt(T, 1, u0(A(k).value), "svelte-osezha"), z(_, A(k).label);
          },
          [
            () => ({
              active: A(c) === A(k).value
            })
          ]
        ), V(E, S);
      }), O(w), V(x, w);
    };
    lt(g, (x) => {
      A(o) && x(v);
    });
  }
  O(p), Ge(p, (x) => f = x, () => f), ie((x) => z(m, `${x ?? ""} `), [
    () => {
      var x;
      return (x = l.find((w) => w.value === A(c))) == null ? void 0 : x.label;
    }
  ]), V(n, p), xe();
}
Rt(["click"]);
ve(V0, {}, [], [], !0, sn);
const TM = `<svg width="24" height="24"
    xmlns="http://www.w3.org/2000/svg">
    <path fill-rule="evenodd" d="M10.384 11.53h3.18l-1.547-4.504h-.034l-1.599 4.504zM10.642 4h2.768L18 16.275h-2.802l-.929-2.733H9.68l-.963 2.733H6L10.642 4z" />
    <rect x="4" y="18" width="16" height="3" rx=".5" fill="currentColor"/>
</svg>
`;
var AM = (n, e, t) => {
  n.stopPropagation(), e()(t);
}, MM = (n, e, t) => e(n, t), OM = Y('<div class="color-item svelte-1bm8p55" role="button" tabindex="0"></div>'), NM = Y('<div class="color-panel svelte-1bm8p55"></div>');
const LM = {
  hash: "svelte-1bm8p55",
  code: ".color-panel.svelte-1bm8p55 {position:absolute;top:0;left:0;display:grid;grid-template-columns:repeat(6, 1fr);gap:4px;padding:8px;background:white;border:1px solid #ddd;border-radius:4px;box-shadow:0 2px 4px rgba(0, 0, 0, 0.1);width:188px;z-index:1000;}.color-item.svelte-1bm8p55 {width:24px;height:24px;border-radius:4px;cursor:pointer;border:1px solid #ddd;}.color-item.svelte-1bm8p55:hover {transform:scale(1.1);transition:transform 0.2s;}"
};
function Bd(n, e) {
  ye(e, !0), Wt(n, LM);
  const t = ee(e, "colors", 7), i = ee(e, "onSelect", 7);
  function r(o, a) {
    o.key === "Enter" && (o.stopPropagation(), i()(a));
  }
  var s = NM();
  return pt(s, 20, t, (o) => o, (o, a) => {
    var l = OM();
    l.__click = [AM, i, a], l.__keydown = [MM, r, a], ie(() => {
      Gs(l, `background-color: ${a ?? ""}`), Ae(l, "aria-label", a);
    }), V(o, l);
  }), O(s), V(n, s), xe({
    get colors() {
      return t();
    },
    set colors(o) {
      t(o), te();
    },
    get onSelect() {
      return i();
    },
    set onSelect(o) {
      i(o), te();
    }
  });
}
Rt(["click", "keydown"]);
ve(Bd, { colors: {}, onSelect: {} }, [], [], !0);
const j0 = [
  "#000000",
  "#002B76",
  "#1B4F2A",
  "#783F04",
  "#700000",
  "#351C75",
  "#6B6B6B",
  "#1155CC",
  "#38761D",
  "#B45F06",
  "#AC0000",
  "#674EA7",
  "#999999",
  "#4A86E8",
  "#6AA84F",
  "#E69138",
  "#DC3D3D",
  "#8E7CC3",
  "#D9D9D9",
  "#A4C2F4",
  "#B6D7A8",
  "#F9CB9C",
  "#EA9999",
  "#B4A7D6",
  "#F3F3F3",
  "#CFE2F3",
  "#D9EAD3",
  "#FFE6C4",
  "#F4CCCC",
  "#D9D2E9",
  "#FFFFFF",
  "#EAF1FB",
  "#EBF5EB",
  "#FFF8E1",
  "#FDEBEE",
  "#F2EFF9"
];
var RM = Y('<button><!></button> <div class="color-panel-container svelte-gqoyg9"><!></div>', 1);
const IM = {
  hash: "svelte-gqoyg9",
  code: ".color-panel-container.svelte-gqoyg9 {position:relative;}"
};
function W0(n, e) {
  ye(e, !0), Wt(n, IM);
  const t = e.$$host;
  t.addEventListener("click", c);
  const { options: i, tiptap: r } = t;
  let s = de(!1);
  const o = i.presetColors ?? j0;
  let a = de("#000000");
  t.onEditorUpdate = () => {
    K(a, (r == null ? void 0 : r.getAttributes("textStyle").color) ?? "#000000", !0);
  };
  function l(v) {
    K(a, v, !0), r == null || r.chain().focus().setColor(v).run(), K(s, !1);
  }
  function c(v) {
    r && (v.stopPropagation(), K(s, !A(s)));
  }
  function u() {
    K(s, !1);
  }
  Re(() => (document.addEventListener("click", u), () => {
    document.removeEventListener("click", u);
  }));
  var d = RM(), f = Le(d);
  let h;
  var p = L(f);
  Xt(p, () => TM.replace(/fill="currentColor"/g, `fill="${A(a)}"`)), O(f), nt(f, (v, x) => {
    var w;
    return (w = An) == null ? void 0 : w(v, x);
  }, () => I("Text Color"));
  var b = B(f, 2), m = L(b);
  {
    var g = (v) => {
      Bd(v, { colors: o, onSelect: l });
    };
    lt(m, (v) => {
      A(s) && v(g);
    });
  }
  O(b), ie((v) => h = gt(f, 1, "", null, h, v), [
    () => ({ "tooltip-disabled": A(s) })
  ]), V(n, d), xe();
}
ve(W0, {}, [], [], !0, sn);
const PM = `<?xml version="1.0" encoding="UTF-8"?>
<svg id="b"
    xmlns="http://www.w3.org/2000/svg" version="1.1" viewBox="0 0 72 72">
    <!-- Generator: Adobe Illustrator 29.3.1, SVG Export Plug-In . SVG Version: 2.1.0 Build 151)  -->
    <g id="c">
        <g id="d">
            <rect x="9" y="54.8" width="54" height="10.2" rx=".5" ry=".5" fill="rgba(0,0,0,0)"/>
            <path class="st1" d="M62.3,15.6l-10.1-9.7c-.5-.5-1.1-.7-1.7-.7h0c-.6,0-1.2.2-1.7.7l-28,26.7c-.5.4-.7,1.1-.7,1.6s.2,1.2.7,1.7l.9.8-12.5,11.9h16.8l4.2-3.9.9.8c.5.5,1.1.7,1.7.7.6,0,1.3-.2,1.7-.7l28-26.7c.5-.4.7-1.1.7-1.6s-.2-1.2-.7-1.7h0ZM45.7,28.5l-7.1-6.8,11.8-11.3,7.1,6.8-11.8,11.3Z"/>
        </g>
    </g>
</svg>
`;
var DM = Y('<button><!></button> <div class="color-panel-container svelte-gqoyg9"><!></div>', 1);
const $M = {
  hash: "svelte-gqoyg9",
  code: ".color-panel-container.svelte-gqoyg9 {position:relative;}"
};
function U0(n, e) {
  ye(e, !0), Wt(n, $M);
  const t = e.$$host;
  t.addEventListener("click", u);
  const { options: i, tiptap: r } = t;
  let s = de(!1);
  const o = i.presetColors ?? j0, a = "rgba(0,0,0,0)";
  let l = de(a);
  t.onEditorUpdate = () => {
    K(l, (r == null ? void 0 : r.getAttributes("textStyle").backgroundColor) ?? a, !0);
  };
  function c(x) {
    K(l, x, !0), r == null || r.chain().focus().setBackgroundColor(x).run(), K(s, !1);
  }
  function u(x) {
    r && (x.stopPropagation(), K(s, !A(s)));
  }
  function d() {
    K(s, !1);
  }
  Re(() => (document.addEventListener("click", d), () => {
    document.removeEventListener("click", d);
  }));
  var f = DM(), h = Le(f);
  let p;
  var b = L(h);
  Xt(b, () => PM.replace(/fill="rgba\(0,0,0,0\)"/g, `fill="${A(l)}"`)), O(h), nt(h, (x, w) => {
    var E;
    return (E = An) == null ? void 0 : E(x, w);
  }, () => I("Highlight Color"));
  var m = B(h, 2), g = L(m);
  {
    var v = (x) => {
      Bd(x, { colors: o, onSelect: c });
    };
    lt(g, (x) => {
      A(s) && x(v);
    });
  }
  O(m), ie((x) => p = gt(h, 1, "", null, p, x), [
    () => ({ "tooltip-disabled": A(s) })
  ]), V(n, f), xe();
}
ve(U0, {}, [], [], !0, sn);
const zM = `<svg width="72" height="72" viewBox="0 0 72 72" fill="none"
    xmlns="http://www.w3.org/2000/svg">
    <g clip-path="url(#clip0_57_211)">
        <path d="M48 32.8H24V36H48V32.8Z" fill="black"/>
        <path d="M48 40.8H24V44H48V40.8Z" fill="black"/>
        <path d="M48 48.8H24V52H48V48.8Z" fill="black"/>
        <path fill-rule="evenodd" clip-rule="evenodd" d="M51.2 15.2H47.2V12.8H41.6C41.6 9.71001 39.09 7.20001 36 7.20001C32.91 7.20001 30.4 9.71001 30.4 12.8H24.8V15.2H20.8C17.27 15.2 14.4 18.07 14.4 21.6V58.4C14.4 61.93 17.27 64.8 20.8 64.8H51.2C54.73 64.8 57.6 61.93 57.6 58.4V21.6C57.6 18.07 54.73 15.2 51.2 15.2ZM52.8 58.4C52.8 59.28 52.08 60 51.2 60H20.8C19.92 60 19.2 59.28 19.2 58.4V21.6C19.2 20.72 19.92 20 20.8 20H24.8V22.4H47.2V20H51.2C52.08 20 52.8 20.72 52.8 21.6V58.4Z" fill="black"/>
    </g>
    <defs>
        <clipPath id="clip0_57_211">
            <rect width="72" height="72" fill="white"/>
        </clipPath>
    </defs>
</svg>
`;
/*! @license DOMPurify 3.2.4 | (c) Cure53 and other contributors | Released under the Apache license 2.0 and Mozilla Public License 2.0 | github.com/cure53/DOMPurify/blob/3.2.4/LICENSE */
const {
  entries: K0,
  setPrototypeOf: Rp,
  isFrozen: BM,
  getPrototypeOf: HM,
  getOwnPropertyDescriptor: FM
} = Object;
let {
  freeze: Vt,
  seal: pn,
  create: q0
} = Object, {
  apply: ku,
  construct: Su
} = typeof Reflect < "u" && Reflect;
Vt || (Vt = function(e) {
  return e;
});
pn || (pn = function(e) {
  return e;
});
ku || (ku = function(e, t, i) {
  return e.apply(t, i);
});
Su || (Su = function(e, t) {
  return new e(...t);
});
const jo = jt(Array.prototype.forEach), VM = jt(Array.prototype.lastIndexOf), Ip = jt(Array.prototype.pop), us = jt(Array.prototype.push), jM = jt(Array.prototype.splice), Qo = jt(String.prototype.toLowerCase), Tc = jt(String.prototype.toString), Pp = jt(String.prototype.match), ds = jt(String.prototype.replace), WM = jt(String.prototype.indexOf), UM = jt(String.prototype.trim), vn = jt(Object.prototype.hasOwnProperty), zt = jt(RegExp.prototype.test), fs = KM(TypeError);
function jt(n) {
  return function(e) {
    for (var t = arguments.length, i = new Array(t > 1 ? t - 1 : 0), r = 1; r < t; r++)
      i[r - 1] = arguments[r];
    return ku(n, e, i);
  };
}
function KM(n) {
  return function() {
    for (var e = arguments.length, t = new Array(e), i = 0; i < e; i++)
      t[i] = arguments[i];
    return Su(n, t);
  };
}
function Ee(n, e) {
  let t = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : Qo;
  Rp && Rp(n, null);
  let i = e.length;
  for (; i--; ) {
    let r = e[i];
    if (typeof r == "string") {
      const s = t(r);
      s !== r && (BM(e) || (e[i] = s), r = s);
    }
    n[r] = !0;
  }
  return n;
}
function qM(n) {
  for (let e = 0; e < n.length; e++)
    vn(n, e) || (n[e] = null);
  return n;
}
function Oi(n) {
  const e = q0(null);
  for (const [t, i] of K0(n))
    vn(n, t) && (Array.isArray(i) ? e[t] = qM(i) : i && typeof i == "object" && i.constructor === Object ? e[t] = Oi(i) : e[t] = i);
  return e;
}
function hs(n, e) {
  for (; n !== null; ) {
    const i = FM(n, e);
    if (i) {
      if (i.get)
        return jt(i.get);
      if (typeof i.value == "function")
        return jt(i.value);
    }
    n = HM(n);
  }
  function t() {
    return null;
  }
  return t;
}
const Dp = Vt(["a", "abbr", "acronym", "address", "area", "article", "aside", "audio", "b", "bdi", "bdo", "big", "blink", "blockquote", "body", "br", "button", "canvas", "caption", "center", "cite", "code", "col", "colgroup", "content", "data", "datalist", "dd", "decorator", "del", "details", "dfn", "dialog", "dir", "div", "dl", "dt", "element", "em", "fieldset", "figcaption", "figure", "font", "footer", "form", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "i", "img", "input", "ins", "kbd", "label", "legend", "li", "main", "map", "mark", "marquee", "menu", "menuitem", "meter", "nav", "nobr", "ol", "optgroup", "option", "output", "p", "picture", "pre", "progress", "q", "rp", "rt", "ruby", "s", "samp", "section", "select", "shadow", "small", "source", "spacer", "span", "strike", "strong", "style", "sub", "summary", "sup", "table", "tbody", "td", "template", "textarea", "tfoot", "th", "thead", "time", "tr", "track", "tt", "u", "ul", "var", "video", "wbr"]), Ac = Vt(["svg", "a", "altglyph", "altglyphdef", "altglyphitem", "animatecolor", "animatemotion", "animatetransform", "circle", "clippath", "defs", "desc", "ellipse", "filter", "font", "g", "glyph", "glyphref", "hkern", "image", "line", "lineargradient", "marker", "mask", "metadata", "mpath", "path", "pattern", "polygon", "polyline", "radialgradient", "rect", "stop", "style", "switch", "symbol", "text", "textpath", "title", "tref", "tspan", "view", "vkern"]), Mc = Vt(["feBlend", "feColorMatrix", "feComponentTransfer", "feComposite", "feConvolveMatrix", "feDiffuseLighting", "feDisplacementMap", "feDistantLight", "feDropShadow", "feFlood", "feFuncA", "feFuncB", "feFuncG", "feFuncR", "feGaussianBlur", "feImage", "feMerge", "feMergeNode", "feMorphology", "feOffset", "fePointLight", "feSpecularLighting", "feSpotLight", "feTile", "feTurbulence"]), GM = Vt(["animate", "color-profile", "cursor", "discard", "font-face", "font-face-format", "font-face-name", "font-face-src", "font-face-uri", "foreignobject", "hatch", "hatchpath", "mesh", "meshgradient", "meshpatch", "meshrow", "missing-glyph", "script", "set", "solidcolor", "unknown", "use"]), Oc = Vt(["math", "menclose", "merror", "mfenced", "mfrac", "mglyph", "mi", "mlabeledtr", "mmultiscripts", "mn", "mo", "mover", "mpadded", "mphantom", "mroot", "mrow", "ms", "mspace", "msqrt", "mstyle", "msub", "msup", "msubsup", "mtable", "mtd", "mtext", "mtr", "munder", "munderover", "mprescripts"]), JM = Vt(["maction", "maligngroup", "malignmark", "mlongdiv", "mscarries", "mscarry", "msgroup", "mstack", "msline", "msrow", "semantics", "annotation", "annotation-xml", "mprescripts", "none"]), $p = Vt(["#text"]), zp = Vt(["accept", "action", "align", "alt", "autocapitalize", "autocomplete", "autopictureinpicture", "autoplay", "background", "bgcolor", "border", "capture", "cellpadding", "cellspacing", "checked", "cite", "class", "clear", "color", "cols", "colspan", "controls", "controlslist", "coords", "crossorigin", "datetime", "decoding", "default", "dir", "disabled", "disablepictureinpicture", "disableremoteplayback", "download", "draggable", "enctype", "enterkeyhint", "face", "for", "headers", "height", "hidden", "high", "href", "hreflang", "id", "inputmode", "integrity", "ismap", "kind", "label", "lang", "list", "loading", "loop", "low", "max", "maxlength", "media", "method", "min", "minlength", "multiple", "muted", "name", "nonce", "noshade", "novalidate", "nowrap", "open", "optimum", "pattern", "placeholder", "playsinline", "popover", "popovertarget", "popovertargetaction", "poster", "preload", "pubdate", "radiogroup", "readonly", "rel", "required", "rev", "reversed", "role", "rows", "rowspan", "spellcheck", "scope", "selected", "shape", "size", "sizes", "span", "srclang", "start", "src", "srcset", "step", "style", "summary", "tabindex", "title", "translate", "type", "usemap", "valign", "value", "width", "wrap", "xmlns", "slot"]), Nc = Vt(["accent-height", "accumulate", "additive", "alignment-baseline", "amplitude", "ascent", "attributename", "attributetype", "azimuth", "basefrequency", "baseline-shift", "begin", "bias", "by", "class", "clip", "clippathunits", "clip-path", "clip-rule", "color", "color-interpolation", "color-interpolation-filters", "color-profile", "color-rendering", "cx", "cy", "d", "dx", "dy", "diffuseconstant", "direction", "display", "divisor", "dur", "edgemode", "elevation", "end", "exponent", "fill", "fill-opacity", "fill-rule", "filter", "filterunits", "flood-color", "flood-opacity", "font-family", "font-size", "font-size-adjust", "font-stretch", "font-style", "font-variant", "font-weight", "fx", "fy", "g1", "g2", "glyph-name", "glyphref", "gradientunits", "gradienttransform", "height", "href", "id", "image-rendering", "in", "in2", "intercept", "k", "k1", "k2", "k3", "k4", "kerning", "keypoints", "keysplines", "keytimes", "lang", "lengthadjust", "letter-spacing", "kernelmatrix", "kernelunitlength", "lighting-color", "local", "marker-end", "marker-mid", "marker-start", "markerheight", "markerunits", "markerwidth", "maskcontentunits", "maskunits", "max", "mask", "media", "method", "mode", "min", "name", "numoctaves", "offset", "operator", "opacity", "order", "orient", "orientation", "origin", "overflow", "paint-order", "path", "pathlength", "patterncontentunits", "patterntransform", "patternunits", "points", "preservealpha", "preserveaspectratio", "primitiveunits", "r", "rx", "ry", "radius", "refx", "refy", "repeatcount", "repeatdur", "restart", "result", "rotate", "scale", "seed", "shape-rendering", "slope", "specularconstant", "specularexponent", "spreadmethod", "startoffset", "stddeviation", "stitchtiles", "stop-color", "stop-opacity", "stroke-dasharray", "stroke-dashoffset", "stroke-linecap", "stroke-linejoin", "stroke-miterlimit", "stroke-opacity", "stroke", "stroke-width", "style", "surfacescale", "systemlanguage", "tabindex", "tablevalues", "targetx", "targety", "transform", "transform-origin", "text-anchor", "text-decoration", "text-rendering", "textlength", "type", "u1", "u2", "unicode", "values", "viewbox", "visibility", "version", "vert-adv-y", "vert-origin-x", "vert-origin-y", "width", "word-spacing", "wrap", "writing-mode", "xchannelselector", "ychannelselector", "x", "x1", "x2", "xmlns", "y", "y1", "y2", "z", "zoomandpan"]), Bp = Vt(["accent", "accentunder", "align", "bevelled", "close", "columnsalign", "columnlines", "columnspan", "denomalign", "depth", "dir", "display", "displaystyle", "encoding", "fence", "frame", "height", "href", "id", "largeop", "length", "linethickness", "lspace", "lquote", "mathbackground", "mathcolor", "mathsize", "mathvariant", "maxsize", "minsize", "movablelimits", "notation", "numalign", "open", "rowalign", "rowlines", "rowspacing", "rowspan", "rspace", "rquote", "scriptlevel", "scriptminsize", "scriptsizemultiplier", "selection", "separator", "separators", "stretchy", "subscriptshift", "supscriptshift", "symmetric", "voffset", "width", "xmlns"]), Wo = Vt(["xlink:href", "xml:id", "xlink:title", "xml:space", "xmlns:xlink"]), XM = pn(/\{\{[\w\W]*|[\w\W]*\}\}/gm), YM = pn(/<%[\w\W]*|[\w\W]*%>/gm), ZM = pn(/\$\{[\w\W]*/gm), QM = pn(/^data-[\-\w.\u00B7-\uFFFF]+$/), eO = pn(/^aria-[\-\w]+$/), G0 = pn(
  /^(?:(?:(?:f|ht)tps?|mailto|tel|callto|sms|cid|xmpp):|[^a-z]|[a-z+.\-]+(?:[^a-z+.\-:]|$))/i
  // eslint-disable-line no-useless-escape
), tO = pn(/^(?:\w+script|data):/i), nO = pn(
  /[\u0000-\u0020\u00A0\u1680\u180E\u2000-\u2029\u205F\u3000]/g
  // eslint-disable-line no-control-regex
), J0 = pn(/^html$/i), iO = pn(/^[a-z][.\w]*(-[.\w]+)+$/i);
var Hp = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  ARIA_ATTR: eO,
  ATTR_WHITESPACE: nO,
  CUSTOM_ELEMENT: iO,
  DATA_ATTR: QM,
  DOCTYPE_NAME: J0,
  ERB_EXPR: YM,
  IS_ALLOWED_URI: G0,
  IS_SCRIPT_OR_DATA: tO,
  MUSTACHE_EXPR: XM,
  TMPLIT_EXPR: ZM
});
const ps = {
  element: 1,
  text: 3,
  // Deprecated
  progressingInstruction: 7,
  comment: 8,
  document: 9
}, rO = function() {
  return typeof window > "u" ? null : window;
}, sO = function(e, t) {
  if (typeof e != "object" || typeof e.createPolicy != "function")
    return null;
  let i = null;
  const r = "data-tt-policy-suffix";
  t && t.hasAttribute(r) && (i = t.getAttribute(r));
  const s = "dompurify" + (i ? "#" + i : "");
  try {
    return e.createPolicy(s, {
      createHTML(o) {
        return o;
      },
      createScriptURL(o) {
        return o;
      }
    });
  } catch {
    return console.warn("TrustedTypes policy " + s + " could not be created."), null;
  }
}, Fp = function() {
  return {
    afterSanitizeAttributes: [],
    afterSanitizeElements: [],
    afterSanitizeShadowDOM: [],
    beforeSanitizeAttributes: [],
    beforeSanitizeElements: [],
    beforeSanitizeShadowDOM: [],
    uponSanitizeAttribute: [],
    uponSanitizeElement: [],
    uponSanitizeShadowNode: []
  };
};
function X0() {
  let n = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : rO();
  const e = (ce) => X0(ce);
  if (e.version = "3.2.4", e.removed = [], !n || !n.document || n.document.nodeType !== ps.document || !n.Element)
    return e.isSupported = !1, e;
  let {
    document: t
  } = n;
  const i = t, r = i.currentScript, {
    DocumentFragment: s,
    HTMLTemplateElement: o,
    Node: a,
    Element: l,
    NodeFilter: c,
    NamedNodeMap: u = n.NamedNodeMap || n.MozNamedAttrMap,
    HTMLFormElement: d,
    DOMParser: f,
    trustedTypes: h
  } = n, p = l.prototype, b = hs(p, "cloneNode"), m = hs(p, "remove"), g = hs(p, "nextSibling"), v = hs(p, "childNodes"), x = hs(p, "parentNode");
  if (typeof o == "function") {
    const ce = t.createElement("template");
    ce.content && ce.content.ownerDocument && (t = ce.content.ownerDocument);
  }
  let w, E = "";
  const {
    implementation: k,
    createNodeIterator: S,
    createDocumentFragment: y,
    getElementsByTagName: T
  } = t, {
    importNode: _
  } = i;
  let C = Fp();
  e.isSupported = typeof K0 == "function" && typeof x == "function" && k && k.createHTMLDocument !== void 0;
  const {
    MUSTACHE_EXPR: M,
    ERB_EXPR: H,
    TMPLIT_EXPR: D,
    DATA_ATTR: F,
    ARIA_ATTR: W,
    IS_SCRIPT_OR_DATA: G,
    ATTR_WHITESPACE: re,
    CUSTOM_ELEMENT: Z
  } = Hp;
  let {
    IS_ALLOWED_URI: ue
  } = Hp, he = null;
  const Te = Ee({}, [...Dp, ...Ac, ...Mc, ...Oc, ...$p]);
  let oe = null;
  const Ve = Ee({}, [...zp, ...Nc, ...Bp, ...Wo]);
  let be = Object.seal(q0(null, {
    tagNameCheck: {
      writable: !0,
      configurable: !1,
      enumerable: !0,
      value: null
    },
    attributeNameCheck: {
      writable: !0,
      configurable: !1,
      enumerable: !0,
      value: null
    },
    allowCustomizedBuiltInElements: {
      writable: !0,
      configurable: !1,
      enumerable: !0,
      value: !1
    }
  })), R = null, tt = null, ge = !0, rt = !0, ft = !1, ne = !0, xt = !1, we = !0, P = !1, Q = !1, me = !1, j = !1, Be = !1, st = !1, Xe = !0, Tt = !1;
  const on = "user-content-";
  let ht = !0, Dt = !1, $e = {}, Ue = null;
  const Pe = Ee({}, ["annotation-xml", "audio", "colgroup", "desc", "foreignobject", "head", "iframe", "math", "mi", "mn", "mo", "ms", "mtext", "noembed", "noframes", "noscript", "plaintext", "script", "style", "svg", "template", "thead", "title", "video", "xmp"]);
  let Se = null;
  const At = Ee({}, ["audio", "video", "img", "source", "image", "track"]);
  let Ti = null;
  const ii = Ee({}, ["alt", "class", "for", "id", "label", "name", "pattern", "placeholder", "role", "summary", "title", "value", "style", "xmlns"]), tr = "http://www.w3.org/1998/Math/MathML", Ln = "http://www.w3.org/2000/svg", gn = "http://www.w3.org/1999/xhtml";
  let an = gn, Yr = !1, ri = null;
  const El = Ee({}, [tr, Ln, gn], Tc);
  let ot = Ee({}, ["mi", "mo", "mn", "ms", "mtext"]), nr = Ee({}, ["annotation-xml"]);
  const Cl = Ee({}, ["title", "style", "font", "a", "script"]);
  let Ai = null;
  const Tl = ["application/xhtml+xml", "text/html"], Al = "text/html";
  let at = null, si = null;
  const Ml = t.createElement("form"), fo = function(N) {
    return N instanceof RegExp || N instanceof Function;
  }, Zr = function() {
    let N = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    if (!(si && si === N)) {
      if ((!N || typeof N != "object") && (N = {}), N = Oi(N), Ai = // eslint-disable-next-line unicorn/prefer-includes
      Tl.indexOf(N.PARSER_MEDIA_TYPE) === -1 ? Al : N.PARSER_MEDIA_TYPE, at = Ai === "application/xhtml+xml" ? Tc : Qo, he = vn(N, "ALLOWED_TAGS") ? Ee({}, N.ALLOWED_TAGS, at) : Te, oe = vn(N, "ALLOWED_ATTR") ? Ee({}, N.ALLOWED_ATTR, at) : Ve, ri = vn(N, "ALLOWED_NAMESPACES") ? Ee({}, N.ALLOWED_NAMESPACES, Tc) : El, Ti = vn(N, "ADD_URI_SAFE_ATTR") ? Ee(Oi(ii), N.ADD_URI_SAFE_ATTR, at) : ii, Se = vn(N, "ADD_DATA_URI_TAGS") ? Ee(Oi(At), N.ADD_DATA_URI_TAGS, at) : At, Ue = vn(N, "FORBID_CONTENTS") ? Ee({}, N.FORBID_CONTENTS, at) : Pe, R = vn(N, "FORBID_TAGS") ? Ee({}, N.FORBID_TAGS, at) : {}, tt = vn(N, "FORBID_ATTR") ? Ee({}, N.FORBID_ATTR, at) : {}, $e = vn(N, "USE_PROFILES") ? N.USE_PROFILES : !1, ge = N.ALLOW_ARIA_ATTR !== !1, rt = N.ALLOW_DATA_ATTR !== !1, ft = N.ALLOW_UNKNOWN_PROTOCOLS || !1, ne = N.ALLOW_SELF_CLOSE_IN_ATTR !== !1, xt = N.SAFE_FOR_TEMPLATES || !1, we = N.SAFE_FOR_XML !== !1, P = N.WHOLE_DOCUMENT || !1, j = N.RETURN_DOM || !1, Be = N.RETURN_DOM_FRAGMENT || !1, st = N.RETURN_TRUSTED_TYPE || !1, me = N.FORCE_BODY || !1, Xe = N.SANITIZE_DOM !== !1, Tt = N.SANITIZE_NAMED_PROPS || !1, ht = N.KEEP_CONTENT !== !1, Dt = N.IN_PLACE || !1, ue = N.ALLOWED_URI_REGEXP || G0, an = N.NAMESPACE || gn, ot = N.MATHML_TEXT_INTEGRATION_POINTS || ot, nr = N.HTML_INTEGRATION_POINTS || nr, be = N.CUSTOM_ELEMENT_HANDLING || {}, N.CUSTOM_ELEMENT_HANDLING && fo(N.CUSTOM_ELEMENT_HANDLING.tagNameCheck) && (be.tagNameCheck = N.CUSTOM_ELEMENT_HANDLING.tagNameCheck), N.CUSTOM_ELEMENT_HANDLING && fo(N.CUSTOM_ELEMENT_HANDLING.attributeNameCheck) && (be.attributeNameCheck = N.CUSTOM_ELEMENT_HANDLING.attributeNameCheck), N.CUSTOM_ELEMENT_HANDLING && typeof N.CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements == "boolean" && (be.allowCustomizedBuiltInElements = N.CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements), xt && (rt = !1), Be && (j = !0), $e && (he = Ee({}, $p), oe = [], $e.html === !0 && (Ee(he, Dp), Ee(oe, zp)), $e.svg === !0 && (Ee(he, Ac), Ee(oe, Nc), Ee(oe, Wo)), $e.svgFilters === !0 && (Ee(he, Mc), Ee(oe, Nc), Ee(oe, Wo)), $e.mathMl === !0 && (Ee(he, Oc), Ee(oe, Bp), Ee(oe, Wo))), N.ADD_TAGS && (he === Te && (he = Oi(he)), Ee(he, N.ADD_TAGS, at)), N.ADD_ATTR && (oe === Ve && (oe = Oi(oe)), Ee(oe, N.ADD_ATTR, at)), N.ADD_URI_SAFE_ATTR && Ee(Ti, N.ADD_URI_SAFE_ATTR, at), N.FORBID_CONTENTS && (Ue === Pe && (Ue = Oi(Ue)), Ee(Ue, N.FORBID_CONTENTS, at)), ht && (he["#text"] = !0), P && Ee(he, ["html", "head", "body"]), he.table && (Ee(he, ["tbody"]), delete R.tbody), N.TRUSTED_TYPES_POLICY) {
        if (typeof N.TRUSTED_TYPES_POLICY.createHTML != "function")
          throw fs('TRUSTED_TYPES_POLICY configuration option must provide a "createHTML" hook.');
        if (typeof N.TRUSTED_TYPES_POLICY.createScriptURL != "function")
          throw fs('TRUSTED_TYPES_POLICY configuration option must provide a "createScriptURL" hook.');
        w = N.TRUSTED_TYPES_POLICY, E = w.createHTML("");
      } else
        w === void 0 && (w = sO(h, r)), w !== null && typeof E == "string" && (E = w.createHTML(""));
      Vt && Vt(N), si = N;
    }
  }, ho = Ee({}, [...Ac, ...Mc, ...GM]), po = Ee({}, [...Oc, ...JM]), Ol = function(N) {
    let q = x(N);
    (!q || !q.tagName) && (q = {
      namespaceURI: an,
      tagName: "template"
    });
    const se = Qo(N.tagName), qe = Qo(q.tagName);
    return ri[N.namespaceURI] ? N.namespaceURI === Ln ? q.namespaceURI === gn ? se === "svg" : q.namespaceURI === tr ? se === "svg" && (qe === "annotation-xml" || ot[qe]) : !!ho[se] : N.namespaceURI === tr ? q.namespaceURI === gn ? se === "math" : q.namespaceURI === Ln ? se === "math" && nr[qe] : !!po[se] : N.namespaceURI === gn ? q.namespaceURI === Ln && !nr[qe] || q.namespaceURI === tr && !ot[qe] ? !1 : !po[se] && (Cl[se] || !ho[se]) : !!(Ai === "application/xhtml+xml" && ri[N.namespaceURI]) : !1;
  }, ln = function(N) {
    us(e.removed, {
      element: N
    });
    try {
      x(N).removeChild(N);
    } catch {
      m(N);
    }
  }, ir = function(N, q) {
    try {
      us(e.removed, {
        attribute: q.getAttributeNode(N),
        from: q
      });
    } catch {
      us(e.removed, {
        attribute: null,
        from: q
      });
    }
    if (q.removeAttribute(N), N === "is")
      if (j || Be)
        try {
          ln(q);
        } catch {
        }
      else
        try {
          q.setAttribute(N, "");
        } catch {
        }
  }, mo = function(N) {
    let q = null, se = null;
    if (me)
      N = "<remove></remove>" + N;
    else {
      const wt = Pp(N, /^[\r\n\t ]+/);
      se = wt && wt[0];
    }
    Ai === "application/xhtml+xml" && an === gn && (N = '<html xmlns="http://www.w3.org/1999/xhtml"><head></head><body>' + N + "</body></html>");
    const qe = w ? w.createHTML(N) : N;
    if (an === gn)
      try {
        q = new f().parseFromString(qe, Ai);
      } catch {
      }
    if (!q || !q.documentElement) {
      q = k.createDocument(an, "template", null);
      try {
        q.documentElement.innerHTML = Yr ? E : qe;
      } catch {
      }
    }
    const Mt = q.body || q.documentElement;
    return N && se && Mt.insertBefore(t.createTextNode(se), Mt.childNodes[0] || null), an === gn ? T.call(q, P ? "html" : "body")[0] : P ? q.documentElement : Mt;
  }, go = function(N) {
    return S.call(
      N.ownerDocument || N,
      N,
      // eslint-disable-next-line no-bitwise
      c.SHOW_ELEMENT | c.SHOW_COMMENT | c.SHOW_TEXT | c.SHOW_PROCESSING_INSTRUCTION | c.SHOW_CDATA_SECTION,
      null
    );
  }, Qr = function(N) {
    return N instanceof d && (typeof N.nodeName != "string" || typeof N.textContent != "string" || typeof N.removeChild != "function" || !(N.attributes instanceof u) || typeof N.removeAttribute != "function" || typeof N.setAttribute != "function" || typeof N.namespaceURI != "string" || typeof N.insertBefore != "function" || typeof N.hasChildNodes != "function");
  }, _o = function(N) {
    return typeof a == "function" && N instanceof a;
  };
  function _n(ce, N, q) {
    jo(ce, (se) => {
      se.call(e, N, q, si);
    });
  }
  const bo = function(N) {
    let q = null;
    if (_n(C.beforeSanitizeElements, N, null), Qr(N))
      return ln(N), !0;
    const se = at(N.nodeName);
    if (_n(C.uponSanitizeElement, N, {
      tagName: se,
      allowedTags: he
    }), N.hasChildNodes() && !_o(N.firstElementChild) && zt(/<[/\w]/g, N.innerHTML) && zt(/<[/\w]/g, N.textContent) || N.nodeType === ps.progressingInstruction || we && N.nodeType === ps.comment && zt(/<[/\w]/g, N.data))
      return ln(N), !0;
    if (!he[se] || R[se]) {
      if (!R[se] && Vd(se) && (be.tagNameCheck instanceof RegExp && zt(be.tagNameCheck, se) || be.tagNameCheck instanceof Function && be.tagNameCheck(se)))
        return !1;
      if (ht && !Ue[se]) {
        const qe = x(N) || N.parentNode, Mt = v(N) || N.childNodes;
        if (Mt && qe) {
          const wt = Mt.length;
          for (let Ut = wt - 1; Ut >= 0; --Ut) {
            const Rn = b(Mt[Ut], !0);
            Rn.__removalCount = (N.__removalCount || 0) + 1, qe.insertBefore(Rn, g(N));
          }
        }
      }
      return ln(N), !0;
    }
    return N instanceof l && !Ol(N) || (se === "noscript" || se === "noembed" || se === "noframes") && zt(/<\/no(script|embed|frames)/i, N.innerHTML) ? (ln(N), !0) : (xt && N.nodeType === ps.text && (q = N.textContent, jo([M, H, D], (qe) => {
      q = ds(q, qe, " ");
    }), N.textContent !== q && (us(e.removed, {
      element: N.cloneNode()
    }), N.textContent = q)), _n(C.afterSanitizeElements, N, null), !1);
  }, Fd = function(N, q, se) {
    if (Xe && (q === "id" || q === "name") && (se in t || se in Ml))
      return !1;
    if (!(rt && !tt[q] && zt(F, q))) {
      if (!(ge && zt(W, q))) {
        if (!oe[q] || tt[q]) {
          if (
            // First condition does a very basic check if a) it's basically a valid custom element tagname AND
            // b) if the tagName passes whatever the user has configured for CUSTOM_ELEMENT_HANDLING.tagNameCheck
            // and c) if the attribute name passes whatever the user has configured for CUSTOM_ELEMENT_HANDLING.attributeNameCheck
            !(Vd(N) && (be.tagNameCheck instanceof RegExp && zt(be.tagNameCheck, N) || be.tagNameCheck instanceof Function && be.tagNameCheck(N)) && (be.attributeNameCheck instanceof RegExp && zt(be.attributeNameCheck, q) || be.attributeNameCheck instanceof Function && be.attributeNameCheck(q)) || // Alternative, second condition checks if it's an `is`-attribute, AND
            // the value passes whatever the user has configured for CUSTOM_ELEMENT_HANDLING.tagNameCheck
            q === "is" && be.allowCustomizedBuiltInElements && (be.tagNameCheck instanceof RegExp && zt(be.tagNameCheck, se) || be.tagNameCheck instanceof Function && be.tagNameCheck(se)))
          ) return !1;
        } else if (!Ti[q]) {
          if (!zt(ue, ds(se, re, ""))) {
            if (!((q === "src" || q === "xlink:href" || q === "href") && N !== "script" && WM(se, "data:") === 0 && Se[N])) {
              if (!(ft && !zt(G, ds(se, re, "")))) {
                if (se)
                  return !1;
              }
            }
          }
        }
      }
    }
    return !0;
  }, Vd = function(N) {
    return N !== "annotation-xml" && Pp(N, Z);
  }, jd = function(N) {
    _n(C.beforeSanitizeAttributes, N, null);
    const {
      attributes: q
    } = N;
    if (!q || Qr(N))
      return;
    const se = {
      attrName: "",
      attrValue: "",
      keepAttr: !0,
      allowedAttributes: oe,
      forceKeepAttr: void 0
    };
    let qe = q.length;
    for (; qe--; ) {
      const Mt = q[qe], {
        name: wt,
        namespaceURI: Ut,
        value: Rn
      } = Mt, es = at(wt);
      let $t = wt === "value" ? Rn : UM(Rn);
      if (se.attrName = es, se.attrValue = $t, se.keepAttr = !0, se.forceKeepAttr = void 0, _n(C.uponSanitizeAttribute, N, se), $t = se.attrValue, Tt && (es === "id" || es === "name") && (ir(wt, N), $t = on + $t), we && zt(/((--!?|])>)|<\/(style|title)/i, $t)) {
        ir(wt, N);
        continue;
      }
      if (se.forceKeepAttr || (ir(wt, N), !se.keepAttr))
        continue;
      if (!ne && zt(/\/>/i, $t)) {
        ir(wt, N);
        continue;
      }
      xt && jo([M, H, D], (Ud) => {
        $t = ds($t, Ud, " ");
      });
      const Wd = at(N.nodeName);
      if (Fd(Wd, es, $t)) {
        if (w && typeof h == "object" && typeof h.getAttributeType == "function" && !Ut)
          switch (h.getAttributeType(Wd, es)) {
            case "TrustedHTML": {
              $t = w.createHTML($t);
              break;
            }
            case "TrustedScriptURL": {
              $t = w.createScriptURL($t);
              break;
            }
          }
        try {
          Ut ? N.setAttributeNS(Ut, wt, $t) : N.setAttribute(wt, $t), Qr(N) ? ln(N) : Ip(e.removed);
        } catch {
        }
      }
    }
    _n(C.afterSanitizeAttributes, N, null);
  }, hb = function ce(N) {
    let q = null;
    const se = go(N);
    for (_n(C.beforeSanitizeShadowDOM, N, null); q = se.nextNode(); )
      _n(C.uponSanitizeShadowNode, q, null), bo(q), jd(q), q.content instanceof s && ce(q.content);
    _n(C.afterSanitizeShadowDOM, N, null);
  };
  return e.sanitize = function(ce) {
    let N = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, q = null, se = null, qe = null, Mt = null;
    if (Yr = !ce, Yr && (ce = "<!-->"), typeof ce != "string" && !_o(ce))
      if (typeof ce.toString == "function") {
        if (ce = ce.toString(), typeof ce != "string")
          throw fs("dirty is not a string, aborting");
      } else
        throw fs("toString is not a function");
    if (!e.isSupported)
      return ce;
    if (Q || Zr(N), e.removed = [], typeof ce == "string" && (Dt = !1), Dt) {
      if (ce.nodeName) {
        const Rn = at(ce.nodeName);
        if (!he[Rn] || R[Rn])
          throw fs("root node is forbidden and cannot be sanitized in-place");
      }
    } else if (ce instanceof a)
      q = mo("<!---->"), se = q.ownerDocument.importNode(ce, !0), se.nodeType === ps.element && se.nodeName === "BODY" || se.nodeName === "HTML" ? q = se : q.appendChild(se);
    else {
      if (!j && !xt && !P && // eslint-disable-next-line unicorn/prefer-includes
      ce.indexOf("<") === -1)
        return w && st ? w.createHTML(ce) : ce;
      if (q = mo(ce), !q)
        return j ? null : st ? E : "";
    }
    q && me && ln(q.firstChild);
    const wt = go(Dt ? ce : q);
    for (; qe = wt.nextNode(); )
      bo(qe), jd(qe), qe.content instanceof s && hb(qe.content);
    if (Dt)
      return ce;
    if (j) {
      if (Be)
        for (Mt = y.call(q.ownerDocument); q.firstChild; )
          Mt.appendChild(q.firstChild);
      else
        Mt = q;
      return (oe.shadowroot || oe.shadowrootmode) && (Mt = _.call(i, Mt, !0)), Mt;
    }
    let Ut = P ? q.outerHTML : q.innerHTML;
    return P && he["!doctype"] && q.ownerDocument && q.ownerDocument.doctype && q.ownerDocument.doctype.name && zt(J0, q.ownerDocument.doctype.name) && (Ut = "<!DOCTYPE " + q.ownerDocument.doctype.name + `>
` + Ut), xt && jo([M, H, D], (Rn) => {
      Ut = ds(Ut, Rn, " ");
    }), w && st ? w.createHTML(Ut) : Ut;
  }, e.setConfig = function() {
    let ce = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    Zr(ce), Q = !0;
  }, e.clearConfig = function() {
    si = null, Q = !1;
  }, e.isValidAttribute = function(ce, N, q) {
    si || Zr({});
    const se = at(ce), qe = at(N);
    return Fd(se, qe, q);
  }, e.addHook = function(ce, N) {
    typeof N == "function" && us(C[ce], N);
  }, e.removeHook = function(ce, N) {
    if (N !== void 0) {
      const q = VM(C[ce], N);
      return q === -1 ? void 0 : jM(C[ce], q, 1)[0];
    }
    return Ip(C[ce]);
  }, e.removeHooks = function(ce) {
    C[ce] = [];
  }, e.removeAllHooks = function() {
    C = Fp();
  }, e;
}
var oO = X0();
function aO(n, e, t) {
  const i = n.target;
  K(e, ""), t(i.value);
}
var lO = Y("<option> </option>"), cO = Y('<label for="boilerplate_text"> </label> <div id="boilerplate_text" class="form-control"><!></div>', 1), uO = Y('<div class="form-group mb-3"><label for="boilerplate_title"> </label> <select id="boilerplate_title" class="form-control"></select> <div class="form-text"> </div></div> <div class="form-group mb-3"><!></div>', 1), dO = Y('<button type="button" class="action primary button btn btn-primary"> </button> <button type="button" class="cancel action button mt-close-dialog btn btn-default"> </button>', 1);
function Y0(n, e) {
  ye(e, !0);
  const t = oO(window);
  let i = ee(e, "boilerplates", 7), r = ee(e, "onSubmit", 7), s = ee(e, "onClose", 7), o = de(""), a = de("");
  async function l(u) {
    var d;
    K(a, ((d = i().find((f) => f.url === u)) == null ? void 0 : d.description) || "", !0), K(o, await (await fetch(u)).text(), !0);
  }
  _0(() => {
    i().length > 0 && l(i()[0].url);
  });
  let c;
  return On(n, {
    size: "lg",
    $$events: {
      close(...u) {
        var d;
        (d = s()) == null || d.apply(this, u);
      }
    },
    children: (u, d) => {
      Nn(u, {
        get close() {
          return c;
        },
        set close(f) {
          c = f;
        },
        $$slots: {
          title: (f, h) => {
            var p = Tn();
            ie((b) => z(p, b), [() => I("Insert Boilerplate")]), V(f, p);
          },
          body: (f, h) => {
            var p = uO(), b = Le(p), m = L(b), g = L(m, !0);
            O(m);
            var v = B(m, 2);
            v.__change = [
              aO,
              o,
              l
            ], pt(v, 21, i, (y) => y.url, (y, T) => {
              var _ = lO(), C = {}, M = L(_, !0);
              O(_), ie(() => {
                C !== (C = A(T).url) && (_.value = (_.__value = A(T).url) == null ? "" : A(T).url), z(M, A(T).title);
              }), V(y, _);
            }), O(v);
            var x = B(v, 2), w = L(x, !0);
            O(x), O(b);
            var E = B(b, 2), k = L(E);
            {
              var S = (y) => {
                var T = cO(), _ = Le(T), C = L(_, !0);
                O(_);
                var M = B(_, 2), H = L(M);
                Xt(H, () => t.sanitize(A(o))), O(M), ie((D) => z(C, D), [() => I("Text")]), V(y, T);
              };
              lt(k, (y) => {
                A(o) && y(S);
              });
            }
            O(E), ie(
              (y) => {
                z(g, y), z(w, A(a));
              },
              [() => I("Boilerplate")]
            ), V(f, p);
          },
          footer: (f, h) => {
            var p = dO(), b = Le(p);
            b.__click = () => {
              r()(A(o)), c();
            };
            var m = L(b, !0);
            O(b);
            var g = B(b, 2);
            g.__click = c;
            var v = L(g, !0);
            O(g), ie(
              (x, w, E, k) => {
                Ae(b, "title", x), z(m, w), Ae(g, "title", E), z(v, k);
              },
              [
                () => I("Insert (s)"),
                () => I("Insert"),
                () => I("Cancel (x)"),
                () => I("Cancel")
              ]
            ), V(f, p);
          }
        }
      });
    },
    $$slots: { default: !0 }
  }), xe({
    get boilerplates() {
      return i();
    },
    set boilerplates(u) {
      i(u), te();
    },
    get onSubmit() {
      return r();
    },
    set onSubmit(u) {
      r(u), te();
    },
    get onClose() {
      return s();
    },
    set onClose(u) {
      s(u), te();
    }
  });
}
Rt(["change", "click"]);
ve(Y0, { boilerplates: {}, onSubmit: {}, onClose: {} }, [], [], !0);
var fO = Y("<button><!></button>");
function Z0(n, e) {
  ye(e, !0);
  const t = e.$$host;
  t.addEventListener("click", () => {
    const s = It(Y0, {
      target: document.body,
      props: {
        boilerplates: t.options.boilerplates,
        onSubmit: (o) => {
          var a;
          (a = t.tiptap) == null || a.chain().focus().insertContent(o).run();
        },
        onClose: () => {
          ut(s);
        }
      }
    });
  });
  var i = fO(), r = L(i);
  Xt(r, () => zM), O(i), nt(i, (s, o) => {
    var a;
    return (a = An) == null ? void 0 : a(s, o);
  }, () => I("Insert Boilerplate")), V(n, i), xe();
}
ve(Z0, {}, [], [], !0, sn);
const hO = {
  bold: WT,
  italic: UT,
  underline: KT,
  strike: qT,
  bulletList: JT,
  orderedList: XT,
  horizontalRule: oA,
  blockquote: YT,
  unlink: GT,
  insertHtml: aA,
  source: lA,
  undo: ZT,
  redo: QT,
  removeFormat: eA,
  alignLeft: tA,
  alignCenter: nA,
  alignRight: iA,
  indent: rA,
  outdent: sA,
  fullScreen: cA,
  // @ts-ignore
  link: A0.element,
  // @ts-ignore
  file: L0.element,
  // @ts-ignore
  image: I0.element,
  // @ts-ignore
  structure: $0.element,
  // @ts-ignore
  table: F0.element,
  // @ts-ignore
  block: V0.element,
  // @ts-ignore
  foregroundColor: W0.element,
  // @ts-ignore
  backgroundColor: U0.element,
  // @ts-ignore
  boilerplate: Z0.element,
  // for context toolbar
  // @ts-ignore
  previewLink: M0.element,
  // @ts-ignore
  editLink: N0.element,
  // @ts-ignore
  deleteImage: P0.element,
  // @ts-ignore
  editImage: D0.element
}, pO = {
  paragraph: "p",
  heading: "h1",
  bulletList: "ul",
  orderedList: "ol",
  listItem: "li",
  blockquote: "blockquote",
  horizontalRule: "hr",
  table: "table",
  tableRow: "tr",
  tableCell: "td",
  tableHeader: "th",
  hardBreak: "br",
  text: "",
  textBlock: ""
}, mO = (n) => pO[n] ?? n;
class gO extends o1 {
  onEditorUpdate() {
    if (!this.tiptap)
      return;
    const { selection: e } = this.tiptap.state, t = e.$head, i = [];
    for (let r = 1; r <= t.depth; r++) {
      const s = t.node(r);
      let o = mO(s.type.name);
      if (!o)
        continue;
      const a = s.attrs.textAlign;
      a && (o += `[align=${a}]`), i.push(o);
    }
    this.shadowRoot.textContent = i.join(" > ");
  }
}
const _O = {
  path: gO
}, Q0 = document.createElement("style");
Q0.textContent = a1;
const uo = (n) => class extends S0(n) {
  constructor() {
    super(...arguments);
    bn(this, "content");
  }
  connectedCallback() {
    super.connectedCallback(), this.shadowRoot.appendChild(Q0.cloneNode(!0));
  }
  onEditorSetPasteContent(t) {
    this.content = t;
  }
  isEditorItemAvailable() {
    return !0;
  }
  insertContent(t) {
    return Pr.prototype.insertContent.bind(this)(t);
  }
  onEditorPaste() {
  }
}, bO = /* @__PURE__ */ new Set(["mtIndent", "pmSlice"]);
function vO(n, e) {
  A(e).every((i) => i.checked) ? A(e).forEach((i) => i.checked = !1) : A(e).forEach((i) => i.checked = !0);
}
function yO(n, e) {
  A(e).every((i) => i.checked) ? A(e).forEach((i) => i.checked = !1) : A(e).forEach((i) => i.checked = !0);
}
var xO = Y('<li><label><input type="checkbox"> </label></li>'), wO = Y('<h4 class="svelte-ecdfcs"> </h4> <div class="help-text svelte-ecdfcs"> </div> <ul class="svelte-ecdfcs"></ul> <div class="mt-checkbox-all svelte-ecdfcs"><label><input type="checkbox" name="all"> </label></div>', 1), kO = Y('<li><label><input type="checkbox"> </label></li>'), SO = Y('<h4 class="svelte-ecdfcs"> </h4> <div class="help-text svelte-ecdfcs"> </div> <ul class="svelte-ecdfcs"></ul> <div class="mt-checkbox-all svelte-ecdfcs"><label><input type="checkbox" name="all"> </label></div>', 1), EO = Y('<div class="html-modal-modal-content svelte-ecdfcs"><!> <!></div>'), CO = Y('<button type="button" class="action primary button btn btn-primary"> </button> <button type="button" class="cancel action button mt-close-dialog btn btn-default"> </button>', 1);
const TO = {
  hash: "svelte-ecdfcs",
  code: ".mt-checkbox-all.svelte-ecdfcs {margin-top:0.5rem;}.help-text.svelte-ecdfcs {margin-bottom:0.5rem;font-size:0.8rem;color:#666;}h4.svelte-ecdfcs {font-weight:bold;margin-top:1.5rem;}h4.svelte-ecdfcs:first-child {margin-top:0;}ul.svelte-ecdfcs {list-style:none;padding:0;}.html-modal-modal-content.svelte-ecdfcs {overflow-y:auto;max-height:580px;}"
};
function eb(n, e) {
  ye(e, !0), Wt(n, TO);
  let t = ee(e, "keepDataAttributes", 7), i = ee(e, "htmlDocument", 7), r = ee(e, "onSubmit", 7), s = ee(e, "onClose", 7), o;
  const a = de(He([]));
  i().body.querySelectorAll("*").forEach((d) => {
    const f = d.dataset;
    for (const h in f)
      bO.has(h) || A(a).find((p) => p.name === h) || A(a).push({ name: h, checked: t() });
  });
  const l = de(He([]));
  i().body.querySelectorAll("[style]").forEach((d) => {
    const f = d.getAttribute("style");
    if (!f) return;
    f.split(";").map((p) => p.trim()).filter((p) => p).map((p) => {
      const [b] = p.split(":");
      return b.trim();
    }).forEach((p) => {
      A(l).find((b) => b.name === p) || A(l).push({ name: p, checked: !0 });
    });
  }), Re(() => {
    o && A(a).length === 0 && A(l).length === 0 && o.click();
  });
  let c, u;
  return Ge(
    On(n, {
      $$events: {
        close(...d) {
          var f;
          (f = s()) == null || f.apply(this, d);
        }
      },
      children: (d, f) => {
        Nn(d, {
          get close() {
            return u;
          },
          set close(h) {
            u = h;
          },
          $$slots: {
            title: (h, p) => {
              var b = Tn();
              ie((m) => z(b, m), [() => I("Paste as HTML")]), V(h, b);
            },
            body: (h, p) => {
              var b = EO(), m = L(b);
              {
                var g = (w) => {
                  var E = wO(), k = Le(E), S = L(k, !0);
                  O(k);
                  var y = B(k, 2), T = L(y, !0);
                  O(y);
                  var _ = B(y, 2);
                  pt(_, 21, () => A(a), (F) => F.name, (F, W, G) => {
                    var re = xO(), Z = L(re), ue = L(Z);
                    mt(ue);
                    var he = B(ue);
                    O(Z), O(re), ie(() => {
                      Ae(ue, "name", A(W).name), z(he, ` data-${A(W).name ?? ""}`);
                    }), Sp(ue, () => A(W).checked, (Te) => A(W).checked = Te), V(F, re);
                  }), O(_);
                  var C = B(_, 2), M = L(C), H = L(M);
                  mt(H), H.__change = [yO, a];
                  var D = B(H);
                  O(M), O(C), ie(
                    (F, W, G, re) => {
                      z(S, F), z(T, W), xp(H, G), z(D, ` ${re ?? ""}`);
                    },
                    [
                      () => I("Data attributes"),
                      () => I("Select the data attributes you want to keep in the pasted HTML. Unselected attributes will be removed."),
                      () => A(a).every((F) => F.checked),
                      () => I("Select All")
                    ]
                  ), V(w, E);
                };
                lt(m, (w) => {
                  A(a).length > 0 && w(g);
                });
              }
              var v = B(m, 2);
              {
                var x = (w) => {
                  var E = SO(), k = Le(E), S = L(k, !0);
                  O(k);
                  var y = B(k, 2), T = L(y, !0);
                  O(y);
                  var _ = B(y, 2);
                  pt(_, 21, () => A(l), (F) => F.name, (F, W, G) => {
                    var re = kO(), Z = L(re), ue = L(Z);
                    mt(ue);
                    var he = B(ue);
                    O(Z), O(re), ie(() => {
                      Ae(ue, "name", A(W).name), z(he, ` ${A(W).name ?? ""}`);
                    }), Sp(ue, () => A(W).checked, (Te) => A(W).checked = Te), V(F, re);
                  }), O(_);
                  var C = B(_, 2), M = L(C), H = L(M);
                  mt(H), H.__change = [vO, l];
                  var D = B(H);
                  O(M), O(C), ie(
                    (F, W, G, re) => {
                      z(S, F), z(T, W), xp(H, G), z(D, ` ${re ?? ""}`);
                    },
                    [
                      () => I("Properties for style attributes"),
                      () => I("Select the properties you want to keep in the pasted HTML. Unselected properties will be removed."),
                      () => A(l).every((F) => F.checked),
                      () => I("Select All")
                    ]
                  ), V(w, E);
                };
                lt(v, (w) => {
                  A(l).length > 0 && w(x);
                });
              }
              O(b), V(h, b);
            },
            footer: (h, p) => {
              var b = CO(), m = Le(b);
              m.__click = () => {
                const w = A(l).filter((S) => !S.checked).map((S) => S.name), E = i().cloneNode(!0);
                E.querySelectorAll("[style]").forEach((S) => {
                  const y = S.style;
                  for (let T = y.length - 1; T >= 0; T--) {
                    const _ = y[T];
                    w.includes(_) && y.removeProperty(_);
                  }
                });
                const k = A(a).filter((S) => !S.checked).map((S) => S.name);
                E.body.querySelectorAll("*").forEach((S) => {
                  const y = S.dataset;
                  for (const T in y)
                    k.includes(T) && delete S.dataset[T];
                }), r()(E), u();
              };
              var g = L(m, !0);
              O(m), Ge(m, (w) => o = w, () => o);
              var v = B(m, 2);
              v.__click = u;
              var x = L(v, !0);
              O(v), ie(
                (w, E, k, S) => {
                  Ae(m, "title", w), z(g, E), Ae(v, "title", k), z(x, S);
                },
                [
                  () => I("Insert (s)"),
                  () => I("Insert"),
                  () => I("Cancel (x)"),
                  () => I("Cancel")
                ]
              ), V(h, b);
            }
          }
        });
      },
      $$slots: { default: !0 }
    }),
    (d) => c = d,
    () => c
  ), xe({
    get keepDataAttributes() {
      return t();
    },
    set keepDataAttributes(d) {
      t(d), te();
    },
    get htmlDocument() {
      return i();
    },
    set htmlDocument(d) {
      i(d), te();
    },
    get onSubmit() {
      return r();
    },
    set onSubmit(d) {
      r(d), te();
    },
    get onClose() {
      return s();
    },
    set onClose(d) {
      s(d), te();
    }
  });
}
Rt(["change", "click"]);
ve(
  eb,
  {
    keepDataAttributes: {},
    htmlDocument: {},
    onSubmit: {},
    onClose: {}
  },
  [],
  [],
  !0
);
const AO = (n) => class extends uo(n) {
  isEditorItemAvailable() {
    var i;
    const e = (i = this.content) == null ? void 0 : i.htmlDocument;
    if (!e)
      return !1;
    const t = e.body.childNodes;
    return !(t.length === 0 || t.length === 1 && t[0] instanceof HTMLParagraphElement && t[0].getAttribute("data-pm-slice") && [...t[0].childNodes].every((r) => r instanceof Text));
  }
};
var MO = Y("<button> </button>");
function tb(n, e) {
  ye(e, !0);
  const t = e.$$host;
  t.addEventListener("click", a);
  const { options: i, tiptap: r } = t;
  let s = null;
  const o = (d = null) => {
    var p, b, m, g, v, x, w;
    if (!r)
      return;
    d || (d = (b = (p = t.content) == null ? void 0 : p.htmlDocument) == null ? void 0 : b.cloneNode(!0), d && !i.keepDataAttributes && d.body.querySelectorAll("*").forEach((E) => {
      for (const k in E.dataset)
        delete E.dataset[k];
    })), d && ((m = i.handler) == null || m.call(i, d));
    const f = br((d == null ? void 0 : d.body.innerHTML) ?? ""), h = new ClipboardEvent("paste", { clipboardData: new DataTransfer() });
    (g = h.clipboardData) == null || g.setData("text/html", f), (v = h.clipboardData) == null || v.setData(Hd, "1"), (x = t.content) == null || x.transaction(() => {
      r.chain().undo().focus().run(), r.view.dom.dispatchEvent(h);
    }), (w = t.parentElement) == null || w.dispatchEvent(new Event("paste-menu-item-applied")), l();
  };
  t.onEditorPaste = o;
  function a(d) {
    r && (d.stopPropagation(), s ? l() : s = It(eb, {
      target: document.body,
      props: {
        keepDataAttributes: !!i.keepDataAttributes,
        htmlDocument: t.content.htmlDocument,
        onSubmit: o,
        onClose: () => {
          l();
        }
      }
    }));
  }
  function l() {
    s && (ut(s), s = null);
  }
  Re(() => l);
  var c = MO(), u = L(c, !0);
  O(c), ie((d) => z(u, d), [() => `${I("Paste as HTML")}...`]), V(n, c), xe();
}
ve(tb, {}, [], [], !0, AO);
const OO = (n) => class extends uo(n) {
  isEditorItemAvailable() {
    var e;
    return /^https?:\/\/[^\s]+(\s*)?$/.test(((e = this.content) == null ? void 0 : e.plainText) ?? "");
  }
};
var NO = Y("<button> </button>");
function nb(n, e) {
  ye(e, !0);
  const t = e.$$host, { editor: i, tiptap: r } = t;
  let s = null;
  const o = (d = void 0) => {
    var p, b;
    const f = t.content;
    if (!f || !r)
      return;
    d ?? (d = {
      url: f.plainText,
      text: f.plainText,
      title: "",
      target: ((b = (p = i == null ? void 0 : i.options.toolbarOptions) == null ? void 0 : p.link) == null ? void 0 : b.defaultTarget) || "_self"
    });
    const h = document.createElement("a");
    h.href = d.url, d.title && (h.title = d.title), h.target = d.target, h.textContent = d.text, t.insertContent(h.outerHTML), l();
  };
  t.onEditorPaste = o;
  const a = (d) => {
    var f, h;
    r && (d.stopPropagation(), s ? l() : s = It(zd, {
      target: document.body,
      props: {
        linkData: {
          url: t.content.plainText,
          text: t.content.plainText,
          title: "",
          target: ((h = (f = i == null ? void 0 : i.options.toolbarOptions) == null ? void 0 : f.link) == null ? void 0 : h.defaultTarget) || "_self"
        },
        onSubmit: o,
        onClose: () => {
          l();
        }
      }
    }));
  };
  t.addEventListener("click", a);
  const l = () => {
    s && (ut(s), s = null);
  };
  Re(() => l);
  var c = NO(), u = L(c, !0);
  O(c), ie((d) => z(u, d), [() => I("Paste as link")]), V(n, c), xe();
}
ve(nb, {}, [], [], !0, OO);
const Lc = {}, Sl = async ({
  embedData: n,
  tiptap: e,
  editor: t
}) => {
  var i;
  return e && t ? await (Lc[i = `${n.url}-${n.maxwidth}-${n.maxheight}`] || (Lc[i] = e.commands.getEmbedObject(n))).catch((r) => (t.notify({
    level: "error",
    message: I("Failed to get embed object: ", r.toString())
  }), {
    html: "",
    inline: void 0
  })) : {
    html: "",
    inline: void 0
  };
};
var LO = Y('<div class="form-group mb-3"><label for="embed-url" class="form-label"> </label> <input type="url" id="embed-url" class="form-control"></div> <div class="form-group mb-3"><label for="embed-maxwidth" class="form-label"> </label> <input type="number" id="embed-maxwidth" class="form-control"></div> <div class="form-group mb-3"><label for="embed-maxheight" class="form-label"> </label> <input type="number" id="embed-maxheight" class="form-control"></div>', 1), RO = Y('<button type="button" class="action primary button btn btn-primary"> </button> <button type="button" class="cancel action button mt-close-dialog btn btn-default"> </button>', 1);
function ib(n, e) {
  ye(e, !0);
  let t = ee(e, "embedData", 7), i = ee(e, "onSubmit", 7), r = ee(e, "onClose", 7), s = de(He(t().url)), o = de(He(t().maxwidth)), a = de(He(t().maxheight)), l;
  Re(() => {
    l == null || l.focus();
  });
  let c, u;
  return Ge(
    On(n, {
      $$events: {
        close(...d) {
          var f;
          (f = r()) == null || f.apply(this, d);
        }
      },
      children: (d, f) => {
        Nn(d, {
          get close() {
            return u;
          },
          set close(h) {
            u = h;
          },
          $$slots: {
            title: (h, p) => {
              var b = Tn();
              ie((m) => z(b, m), [() => I("oEmbed")]), V(h, b);
            },
            body: (h, p) => {
              var b = LO(), m = Le(b), g = L(m), v = L(g, !0);
              O(g);
              var x = B(g, 2);
              mt(x), Ge(x, (M) => l = M, () => l), O(m);
              var w = B(m, 2), E = L(w), k = L(E, !0);
              O(E);
              var S = B(E, 2);
              mt(S), O(w);
              var y = B(w, 2), T = L(y), _ = L(T, !0);
              O(T);
              var C = B(T, 2);
              mt(C), O(y), ie(
                (M, H, D) => {
                  z(v, M), z(k, H), z(_, D);
                },
                [
                  () => I("URL"),
                  () => I("Width"),
                  () => I("Height")
                ]
              ), Ct(x, () => A(s), (M) => K(s, M)), Ct(S, () => A(o), (M) => K(o, M)), Ct(C, () => A(a), (M) => K(a, M)), V(h, b);
            },
            footer: (h, p) => {
              var b = RO(), m = Le(b);
              m.__click = () => {
                i()({
                  url: A(s),
                  maxwidth: A(o),
                  maxheight: A(a)
                }), u();
              };
              var g = L(m, !0);
              O(m);
              var v = B(m, 2);
              v.__click = u;
              var x = L(v, !0);
              O(v), ie(
                (w, E, k, S) => {
                  Ae(m, "title", w), z(g, E), Ae(v, "title", k), z(x, S);
                },
                [
                  () => I("Insert (s)"),
                  () => I("Insert"),
                  () => I("Cancel (x)"),
                  () => I("Cancel")
                ]
              ), V(h, b);
            }
          }
        });
      },
      $$slots: { default: !0 }
    }),
    (d) => c = d,
    () => c
  ), xe({
    get embedData() {
      return t();
    },
    set embedData(d) {
      t(d), te();
    },
    get onSubmit() {
      return i();
    },
    set onSubmit(d) {
      i(d), te();
    },
    get onClose() {
      return r();
    },
    set onClose(d) {
      r(d), te();
    }
  });
}
Rt(["click"]);
ve(ib, { embedData: {}, onSubmit: {}, onClose: {} }, [], [], !0);
const IO = (n) => class extends uo(n) {
  async isEditorItemAvailable() {
    var r, s;
    const e = ((r = this.content) == null ? void 0 : r.plainText) || "";
    if (!/^https?:\/\/[^\s]+(\s*)?$/.test(e))
      return !1;
    const t = await Sl({
      embedData: { url: e, maxwidth: 0, maxheight: 0 },
      tiptap: this.tiptap,
      editor: this.editor
    });
    if (!(t != null && t.html))
      return !1;
    const i = (s = this.content) == null ? void 0 : s.targetDomNode;
    return i instanceof HTMLElement && (i == null ? void 0 : i.tagName) === "P" && i.childNodes.length === 0 ? Pr.Priority.High : Pr.Priority.Default;
  }
};
var PO = Y("<button> </button>");
function rb(n, e) {
  ye(e, !0);
  const t = e.$$host;
  t.addEventListener("click", a);
  const { editor: i, tiptap: r } = t;
  let s = null;
  const o = async (d = void 0) => {
    var p, b;
    const f = t.content;
    if (!f || !r)
      return;
    d ?? (d = {
      url: f.plainText,
      maxwidth: 0,
      maxheight: 0
    });
    const h = await Sl({ embedData: d, tiptap: t.tiptap, editor: i });
    h.html && ((p = t.content) == null || p.transaction(() => {
      r.chain().undo().focus().run(), r.commands.insertEmbedObject(h.html);
    }), (b = t.parentElement) == null || b.dispatchEvent(new Event("paste-menu-item-applied")), l());
  };
  t.onEditorPaste = o;
  function a(d) {
    r && (d.stopPropagation(), s ? l() : s = It(ib, {
      target: document.body,
      props: {
        embedData: { url: t.content.plainText },
        onSubmit: o,
        onClose: () => {
          l();
        }
      }
    }));
  }
  function l() {
    s && (ut(s), s = null);
  }
  Re(() => l);
  var c = PO(), u = L(c, !0);
  O(c), ie((d) => z(u, d), [() => I("Embed object")]), V(n, c), xe();
}
ve(rb, {}, [], [], !0, IO);
const DO = (n) => class extends uo(n) {
  async isEditorItemAvailable() {
    var i;
    const e = ((i = this.content) == null ? void 0 : i.plainText) || "";
    return /^https?:\/\/[^\s]+(\s*)?$/.test(e) ? !!(await Sl({
      embedData: { url: e, maxwidth: 0, maxheight: 0 },
      tiptap: this.tiptap,
      editor: this.editor
    })).inline : !1;
  }
};
var $O = Y("<button> </button>");
function sb(n, e) {
  ye(e, !0);
  const t = e.$$host, i = () => {
    const o = t.content;
    o && Sl({
      embedData: {
        url: o.plainText,
        maxwidth: 0,
        maxheight: 0
      },
      tiptap: t.tiptap,
      editor: t.editor
    }).then((a) => {
      const l = a.inline;
      l && t.insertContent(l);
    });
  };
  t.onEditorPaste = i, t.addEventListener("click", i);
  var r = $O(), s = L(r, !0);
  O(r), ie((o) => z(s, o), [() => I("Embed inline")]), V(n, r), xe();
}
ve(sb, {}, [], [], !0, DO);
const zO = (n) => class extends uo(n) {
  isEditorItemAvailable() {
    var e, t, i;
    return (e = this.tiptap) != null && e.commands.isMarkdownConversionAvailable() && /^(#|```|- |\* |\d+\. |> |=+$|-+$)/m.test(((t = this.content) == null ? void 0 : t.plainText) ?? "") ? (i = this.content) != null && i.htmlDocument ? Pr.Priority.Default : Pr.Priority.High : !1;
  }
};
var BO = Y("<button> </button>");
function ob(n, e) {
  ye(e, !0);
  const t = e.$$host, i = async () => {
    var o, a, l;
    t.insertContent(((l = await ((a = t.tiptap) == null ? void 0 : a.commands.markdownToHtml({ content: ((o = t.content) == null ? void 0 : o.plainText) ?? "" }))) == null ? void 0 : l.content) ?? "");
  };
  t.onEditorPaste = i, t.addEventListener("click", i);
  var r = BO(), s = L(r, !0);
  O(r), ie((o) => z(s, o), [() => I("Convert from Markdown")]), V(n, r), xe();
}
ve(ob, {}, [], [], !0, zO);
const Hd = "x-mt-rich-text-editor";
class HO extends Pr {
  constructor() {
    super();
    const e = document.createElement("button");
    e.textContent = I("Paste as text"), this.shadowRoot.appendChild(e);
  }
  onEditorPaste() {
    var t, i, r, s, o;
    const e = new ClipboardEvent("paste", {
      clipboardData: new DataTransfer()
    });
    (i = e.clipboardData) == null || i.setData("text/plain", ((t = this.content) == null ? void 0 : t.plainText) ?? ""), (r = e.clipboardData) == null || r.setData(Hd, "1"), (s = this.content) == null || s.transaction(() => {
      var a, l;
      (a = this.tiptap) == null || a.chain().undo().focus().run(), (l = this.tiptap) == null || l.view.dom.dispatchEvent(e);
    }), (o = this.parentElement) == null || o.dispatchEvent(new Event("paste-menu-item-applied"));
  }
  connectedCallback() {
    this.addEventListener("click", () => {
      this.onEditorPaste();
    });
  }
}
const FO = {
  text: HO,
  // @ts-ignore
  html: tb.element,
  // @ts-ignore
  link: nb.element,
  // @ts-ignore
  embed: rb.element,
  // @ts-ignore
  embedInline: sb.element,
  // @ts-ignore
  markdown: ob.element
}, VO = `<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="icon icon-tabler icons-tabler-outline icon-tabler-h-1">
    <path stroke="none" d="M0 0h24v24H0z" fill="none"/>
    <path d="M19 18v-8l-2 2" />
    <path d="M4 6v12" />
    <path d="M12 6v12" />
    <path d="M11 18h2" />
    <path d="M3 18h2" />
    <path d="M4 12h8" />
    <path d="M3 6h2" />
    <path d="M11 6h2" />
</svg>
`, jO = `<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="icon icon-tabler icons-tabler-outline icon-tabler-h-2">
    <path stroke="none" d="M0 0h24v24H0z" fill="none"/>
    <path d="M17 12a2 2 0 1 1 4 0c0 .591 -.417 1.318 -.816 1.858l-3.184 4.143l4 0" />
    <path d="M4 6v12" />
    <path d="M12 6v12" />
    <path d="M11 18h2" />
    <path d="M3 18h2" />
    <path d="M4 12h8" />
    <path d="M3 6h2" />
    <path d="M11 6h2" />
</svg>
`, WO = `<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="icon icon-tabler icons-tabler-outline icon-tabler-h-3">
    <path stroke="none" d="M0 0h24v24H0z" fill="none"/>
    <path d="M19 14a2 2 0 1 0 -2 -2" />
    <path d="M17 16a2 2 0 1 0 2 -2" />
    <path d="M4 6v12" />
    <path d="M12 6v12" />
    <path d="M11 18h2" />
    <path d="M3 18h2" />
    <path d="M4 12h8" />
    <path d="M3 6h2" />
    <path d="M11 6h2" />
</svg>
`, UO = `<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="icon icon-tabler icons-tabler-outline icon-tabler-h-4">
    <path stroke="none" d="M0 0h24v24H0z" fill="none"/>
    <path d="M20 18v-8l-4 6h5" />
    <path d="M4 6v12" />
    <path d="M12 6v12" />
    <path d="M11 18h2" />
    <path d="M3 18h2" />
    <path d="M4 12h8" />
    <path d="M3 6h2" />
    <path d="M11 6h2" />
</svg>
`, KO = `<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="icon icon-tabler icons-tabler-outline icon-tabler-h-5">
    <path stroke="none" d="M0 0h24v24H0z" fill="none"/>
    <path d="M17 18h2a2 2 0 1 0 0 -4h-2v-4h4" />
    <path d="M4 6v12" />
    <path d="M12 6v12" />
    <path d="M11 18h2" />
    <path d="M3 18h2" />
    <path d="M4 12h8" />
    <path d="M3 6h2" />
    <path d="M11 6h2" />
</svg>
`, qO = `<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="icon icon-tabler icons-tabler-outline icon-tabler-h-6">
    <path stroke="none" d="M0 0h24v24H0z" fill="none"/>
    <path d="M19 14a2 2 0 1 0 0 4a2 2 0 0 0 0 -4z" />
    <path d="M21 12a2 2 0 1 0 -4 0v4" />
    <path d="M4 6v12" />
    <path d="M12 6v12" />
    <path d="M11 18h2" />
    <path d="M3 18h2" />
    <path d="M4 12h8" />
    <path d="M3 6h2" />
    <path d="M11 6h2" />
</svg>
`, GO = {
  1: VO,
  2: jO,
  3: WO,
  4: UO,
  5: KO,
  6: qO
};
class JO extends l1 {
  connectedCallback() {
    const e = this.dataset.mtRichTextEditorPanelItemVariant;
    if (!e)
      return;
    this.aliases = [`h${e}`, `heading${e}`];
    const t = document.createElement("button"), i = document.createElement("span");
    i.classList.add("icon"), i.innerHTML = GO[e];
    const r = document.createElement("span");
    r.textContent = I(`Heading ${e}`), t.appendChild(i), t.appendChild(r), this.shadowRoot.appendChild(t), this.addEventListener("click", () => {
      this.insertContent(`<h${e}></h${e}>`);
    });
  }
}
const XO = {
  heading: JO
}, YO = {
  toolbar: hO,
  statusbar: _O,
  "paste-menu": FO,
  "quick-action": XO
}, Xr = (n, e) => {
  const t = e.toLowerCase();
  if (t.includes("-") && window.customElements.get(t))
    return t;
  const i = `mt-rich-text-editor-${n}-item-${t}`;
  let r = window.customElements.get(i);
  if (!r) {
    if (r = YO[n][e], !r) {
      console.error(`Item for ${e} is not found`);
      return;
    }
    window.customElements.define(i, r);
  }
  return i;
};
var ZO = Y("<div></div>"), QO = Y('<div class="toolbar-side svelte-1rk98em"></div>'), e3 = Y('<div class="toolbar-row svelte-1rk98em"></div>'), t3 = Y("<div></div>");
const n3 = {
  hash: "svelte-1rk98em",
  code: `.toolbar.svelte-1rk98em {display:flex;flex-wrap:wrap;flex-direction:column;}.toolbar-row.svelte-1rk98em {display:flex;justify-content:space-between;border-bottom:1px solid #ccc;position:relative;}.toolbar-row.svelte-1rk98em::before {content:"";position:absolute;left:0;top:0;width:100%;height:90%;background-image:url("data:image/svg+xml;utf8,<svg width='100%' height='39' xmlns='http://www.w3.org/2000/svg'><line x1='0' y1='39' x2='10000' y2='39' stroke='%23ccc' stroke-width='2'/></svg>");background-repeat:repeat-y;background-size:100% 39px;}.toolbar-row.svelte-1rk98em:last-child {border-bottom:none;}.toolbar-side.svelte-1rk98em {display:flex;flex-wrap:wrap;}.toolbar-group.svelte-1rk98em {padding:0 4px;display:flex;}.toolbar-group.svelte-1rk98em:not(:last-child) {border-right:1px solid #ccc;white-space:nowrap;}.toolbar-item.svelte-1rk98em {display:inline-flex;align-items:center;justify-content:center;margin:2px 0 3px;height:34px;}.toolbar-item.is-active.svelte-1rk98em {background:#dee0e2;}

  /**
   * Inline
   */.toolbar--inline.svelte-1rk98em {position:absolute;display:none;z-index:1;border:1px solid #ccc;border-radius:4px;background:#fff;}.toolbar--inline.svelte-1rk98em::before {content:"";position:absolute;z-index:-1;top:50%;left:-8px;width:14px;height:14px;background:#fff;transform:translateY(-50%) rotate(45deg);border-left:1px solid #ccc;border-bottom:1px solid #ccc;box-shadow:-1px 1px 2px rgba(0, 0, 0, 0.03);}.toolbar--inline.svelte-1rk98em:not([data-is-new-line])::before {content:"";position:absolute;z-index:-1;top:-8px;left:20px;width:14px;height:14px;background:#fff;transform:translateX(-50%) rotate(45deg);border-left:1px solid #ccc;border-top:1px solid #ccc;border-bottom:none;box-shadow:-1px -1px 2px rgba(0, 0, 0, 0.03);}`
};
function ab(n, e) {
  ye(e, !0), Wt(n, n3);
  const t = ee(e, "editor", 7), i = ee(e, "toolbar", 7), r = ee(e, "options", 7), s = ee(e, "inline", 7);
  let o = null;
  const a = {}, l = i().map((f) => f.map((h) => (h || []).map((p) => (p || []).map((b) => ({
    name: b,
    elementName: Xr("toolbar", b),
    options: r()[b] ?? {}
  })).filter((b) => b.elementName && b.options !== !1)).filter((p) => p.length > 0))).filter((f) => f.length > 0);
  function c() {
    for (const f in a)
      "onEditorUpdate" in a[f] && a[f].onEditorUpdate();
  }
  if (t().tiptap.on("selectionUpdate", c), t().tiptap.on("update", c), Re(() => {
    c();
  }), s()) {
    const f = b0(
      () => {
        if (!o)
          return;
        let h = !1, p = !1;
        if (!t().tiptap.isFocused)
          h = !1;
        else if (t().tiptap.state.selection.empty) {
          const v = t().tiptap.state.selection.$head.parent;
          h = v.type.name === "paragraph" && v.content.size === 0, p = !0;
        } else
          h = !0;
        if (!h) {
          o.style.display = "", o.style.transition = "";
          return;
        }
        o.style.display === "" && (o.style.display = "block", setTimeout(
          () => {
            o && (o.style.transition = "left 0.2s ease-in-out");
          },
          100
        ));
        const b = t().tiptap.view.dom.getBoundingClientRect(), { selection: m } = t().tiptap.view.state, g = t().tiptap.view.coordsAtPos(m.$to.pos);
        if (p)
          o.style.top = `${g.bottom - b.top - 30}px`, o.style.left = `${g.left - b.left + 20}px`, o.setAttribute("data-is-new-line", "true");
        else {
          const v = t().tiptap.view.coordsAtPos(m.$from.pos), x = v.left < g.left ? v : g;
          o.style.top = `${x.bottom - b.top + 15}px`, o.style.left = `${x.left - b.left}px`, o.removeAttribute("data-is-new-line");
        }
      },
      50
    );
    t().tiptap.on("selectionUpdate", f), t().tiptap.on("focus", f), t().tiptap.on("blur", f), f();
  }
  function u(f, h) {
    return a[h] = f, "onEditorInit" in f && f.onEditorInit(t(), (r()[h] || void 0) ?? {}), {
      destroy() {
        delete a[h];
      }
    };
  }
  var d = t3();
  return pt(d, 21, () => l, En, (f, h) => {
    var p = e3();
    pt(p, 21, () => A(h), En, (b, m) => {
      var g = QO();
      pt(g, 21, () => A(m), En, (v, x) => {
        var w = ZO();
        pt(w, 21, () => A(x), En, (E, k) => {
          var S = ki(), y = Le(S);
          Jr(y, () => A(k).elementName, !1, (T, _) => {
            nt(T, (C, M) => u == null ? void 0 : u(C, M), () => A(k).name), gt(T, 0, "toolbar-item svelte-1rk98em");
          }), V(E, S);
        }), O(w), ie(() => gt(w, 1, `toolbar-group ${A(x).length === 1 ? `toolbar-group--${A(x)[0].name}` : ""}`, "svelte-1rk98em")), V(v, w);
      }), O(g), V(b, g);
    }), O(p), V(f, p);
  }), O(d), Ge(d, (f) => o = f, () => o), ie(() => gt(d, 1, `toolbar ${(s() ? "toolbar--inline" : "") ?? ""}`, "svelte-1rk98em")), V(n, d), xe({
    get editor() {
      return t();
    },
    set editor(f) {
      t(f), te();
    },
    get toolbar() {
      return i();
    },
    set toolbar(f) {
      i(f), te();
    },
    get options() {
      return r();
    },
    set options(f) {
      r(f), te();
    },
    get inline() {
      return s();
    },
    set inline(f) {
      s(f), te();
    }
  });
}
ve(
  ab,
  {
    editor: {},
    toolbar: {},
    options: {},
    inline: {}
  },
  [],
  [],
  !0
);
var Cr;
class i3 {
  constructor({ target: e, editor: t, toolbar: i, options: r, inline: s }) {
    Ne(this, Cr);
    !i || i.length === 0 || Oe(this, Cr, It(ab, {
      target: e,
      props: {
        editor: t,
        toolbar: i,
        inline: s,
        options: r
      }
    }));
  }
  destroy() {
    J(this, Cr) && ut(J(this, Cr));
  }
}
Cr = new WeakMap();
var r3 = Y('<div class="statusbar-side svelte-1axc334"></div>'), s3 = Y('<div class="statusbar svelte-1axc334"></div>');
const o3 = {
  hash: "svelte-1axc334",
  code: ".statusbar.svelte-1axc334 {display:flex;flex-wrap:wrap;justify-content:space-between;}.statusbar-side.svelte-1axc334 {display:flex;flex-wrap:wrap;}.statusbar-item.svelte-1axc334 {display:inline-flex;align-items:center;margin:2px 0 3px;border:none;background:none;border-radius:4px;padding:1px 5px;}"
};
function lb(n, e) {
  ye(e, !0), Wt(n, o3);
  const t = ee(e, "editor", 7), i = ee(e, "statusbar", 7), r = ee(e, "options", 7), s = {}, o = i().map((u) => (u || []).map((d) => ({
    name: d,
    elementName: Xr("statusbar", d),
    options: r()[d] ?? {}
  })).filter((d) => d.elementName && d.options !== !1));
  function a() {
    for (const u in s)
      "onEditorUpdate" in s[u] && s[u].onEditorUpdate();
  }
  t().tiptap.on("selectionUpdate", a), t().tiptap.on("update", a), Re(() => {
    a();
  });
  function l(u, d) {
    return s[d] = u, "onEditorInit" in u && u.onEditorInit(t(), r()[d] ?? {}), {
      destroy() {
        delete s[d];
      }
    };
  }
  var c = s3();
  return pt(c, 21, () => o, En, (u, d) => {
    var f = r3();
    pt(f, 21, () => A(d), En, (h, p) => {
      var b = ki(), m = Le(b);
      Jr(m, () => A(p).elementName, !1, (g, v) => {
        nt(g, (x, w) => l == null ? void 0 : l(x, w), () => A(p).name), gt(g, 0, "statusbar-item svelte-1axc334");
      }), V(h, b);
    }), O(f), V(u, f);
  }), O(c), V(n, c), xe({
    get editor() {
      return t();
    },
    set editor(u) {
      t(u), te();
    },
    get statusbar() {
      return i();
    },
    set statusbar(u) {
      i(u), te();
    },
    get options() {
      return r();
    },
    set options(u) {
      r(u), te();
    }
  });
}
ve(lb, { editor: {}, statusbar: {}, options: {} }, [], [], !0);
var Tr;
class a3 {
  constructor({ target: e, editor: t, statusbar: i, options: r, inline: s }) {
    Ne(this, Tr);
    s || i.length === 0 || Oe(this, Tr, It(lb, {
      target: e,
      props: {
        editor: t,
        statusbar: i,
        inline: s,
        options: r
      }
    }));
  }
  destroy() {
    J(this, Tr) && ut(J(this, Tr));
  }
}
Tr = new WeakMap();
const l3 = `<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="icon icon-tabler icons-tabler-outline icon-tabler-clipboard">
    <path stroke="none" d="M0 0h24v24H0z" fill="none"/>
    <path d="M9 5h-2a2 2 0 0 0 -2 2v12a2 2 0 0 0 2 2h10a2 2 0 0 0 2 -2v-12a2 2 0 0 0 -2 -2h-2" />
    <path d="M9 3m0 2a2 2 0 0 1 2 -2h2a2 2 0 0 1 2 2v0a2 2 0 0 1 -2 2h-2a2 2 0 0 1 -2 -2z" />
</svg>
`, c3 = /font-weight:\s*normal/, u3 = ["P", "OL", "UL"], Vp = (n) => n && u3.includes(n.tagName), d3 = (n) => {
  Array.from(n.querySelectorAll("br")).filter((e) => Vp(e.previousElementSibling) && Vp(e.nextElementSibling)).forEach((e) => {
    var t;
    (t = e.parentNode) == null || t.removeChild(e);
  });
}, f3 = (n) => {
  Array.from(n.querySelectorAll('b[style*="font-weight"]')).filter((e) => {
    var t;
    return (t = e.getAttribute("style")) == null ? void 0 : t.match(c3);
  }).forEach((e) => {
    var i;
    const t = n.createDocumentFragment();
    t.append(...e.childNodes), (i = e.parentNode) == null || i.replaceChild(t, e);
  });
};
function h3(n) {
  n.querySelector('[id^="docs-internal-guid-"]') && (f3(n), d3(n));
}
const p3 = /\bmso-list:[^;]*ignore/i, m3 = /\bmso-list:[^;]*\bl(\d+)/i, g3 = /\bmso-list:[^;]*\blevel(\d+)/i, _3 = (n, e) => {
  const t = n.getAttribute("style"), i = t == null ? void 0 : t.match(m3);
  if (!i)
    return null;
  const r = Number(i[1]), s = t == null ? void 0 : t.match(g3), o = s ? Number(s[1]) : 1, a = new RegExp(`@list l${r}:level${o}\\s*\\{[^\\}]*mso-level-number-format:\\s*([\\w-]+)`, "i"), l = e.match(a), c = l && l[1] === "bullet" ? "bullet" : "ordered";
  return {
    id: r,
    indent: o,
    type: c,
    element: n
  };
}, b3 = (n) => {
  var o, a;
  const e = Array.from(n.querySelectorAll("[style*=mso-list]")), t = [], i = [];
  e.forEach((l) => {
    (l.getAttribute("style") || "").match(p3) ? t.push(l) : i.push(l);
  }), t.forEach((l) => {
    var c;
    return (c = l.parentNode) == null ? void 0 : c.removeChild(l);
  });
  const r = n.documentElement.innerHTML, s = i.map((l) => _3(l, r)).filter((l) => l);
  for (; s.length; ) {
    const l = [];
    let c = s.shift();
    for (; c; )
      l.push(c), c = s.length && ((o = s[0]) == null ? void 0 : o.element) === c.element.nextElementSibling && // Different id means the next item doesn't belong to this group.
      s[0].id === c.id ? s.shift() : null;
    const u = document.createElement("ul");
    l.forEach((h) => {
      const p = document.createElement("li");
      p.setAttribute("data-list", h.type), h.indent > 1 && p.setAttribute("class", `ql-indent-${h.indent - 1}`), p.innerHTML = h.element.innerHTML, u.appendChild(p);
    });
    const d = (a = l[0]) == null ? void 0 : a.element, {
      parentNode: f
    } = d ?? {};
    d && (f == null || f.replaceChild(u, d)), l.slice(1).forEach((h) => {
      let {
        element: p
      } = h;
      f == null || f.removeChild(p);
    });
  }
};
function v3(n) {
  n.documentElement.getAttribute("xmlns:w") === "urn:schemas-microsoft-com:office:word" && b3(n);
}
const y3 = [v3, h3], x3 = (n) => {
  n.documentElement && y3.forEach((e) => {
    e(n);
  });
};
var w3 = (n, e) => K(e, !A(e)), k3 = Y("<div><!></div>"), S3 = Y('<div class="paste-menu svelte-19f323f"><button type="button"><!></button> <div class="paste-menu-list svelte-19f323f"></div></div>');
const E3 = {
  hash: "svelte-19f323f",
  code: '.paste-menu.svelte-19f323f {position:absolute;z-index:1;}.paste-menu-icon.svelte-19f323f {background:none;border:1px solid #ccc;border-radius:4px;padding:2px;margin:0;cursor:pointer;display:flex;align-items:center;justify-content:center;background:#fff;}.paste-menu-icon.svelte-19f323f:after {content:"";display:block;margin:0 2px;width:6px;height:6px;border-right:1px solid #000;border-bottom:1px solid #000;transform:rotate(45deg);margin-top:-3px;}.paste-menu-icon.svelte-19f323f:hover {background:#f0f0f0;}.paste-menu-icon.is-active.svelte-19f323f {border-bottom:0;border-bottom-left-radius:0;border-bottom-right-radius:0;position:relative;z-index:1;background:#fff;}.paste-menu.svelte-19f323f {display:flex;flex-wrap:wrap;flex-direction:column;}.paste-menu-list.svelte-19f323f {display:flex;flex-wrap:wrap;border:1px solid #ccc;border-radius:4px;border-top-left-radius:0;margin-top:-1px;background:#fff;}.paste-menu-item-container.svelte-19f323f {position:relative;}.paste-menu-item-container.is-applied.svelte-19f323f::before {content:"✔";position:absolute;left:10px;top:50%;transform:translateY(-50%);}'
};
function cb(n, e) {
  ye(e, !0), Wt(n, E3);
  function t(_) {
    const C = _.getData("text/plain") || _.getData("Text");
    if (C)
      return C;
    const M = _.getData("text/uri-list");
    return M ? M.replace(/\r?\n/g, " ") : void 0;
  }
  const i = ee(e, "editor", 7), r = ee(e, "onPaste", 7), s = ee(e, "pasteMenu", 7), o = ee(e, "options", 7), a = ee(e, "setIsPasting", 7), l = {}, c = s().map((_) => ({
    name: _,
    elementName: Xr("paste-menu", _),
    options: o()[_] ?? {}
  })).filter((_) => _.elementName && _.options !== !1);
  let u = de(!1), d = de(!1), f = !1, h = de(0), p = de(0), b = null;
  const m = de(He({}));
  Re(() => {
    a()(A(u));
  }), i().tiptap.on("update", () => {
    f || K(u, !1);
  });
  const g = (_, C = !1) => {
    const M = _.dom.getBoundingClientRect(), { selection: H } = _.state, D = H.$to.pos, F = _.nodeDOM(H.$from.pos - 2);
    if (!F) {
      const G = _.coordsAtPos(D), re = G.bottom - M.top;
      (A(h) < re || A(h) - re > 100) && K(h, re);
      const Z = G.left - M.left;
      A(p) !== 0 && A(p) > Z && K(p, Z);
      return;
    }
    const W = (G = void 0) => {
      if (!F.parentElement) {
        G == null || G.disconnect();
        return;
      }
      const re = F.getBoundingClientRect(), Z = re.bottom - M.top, ue = Z > M.height - 20 ? M.height - 20 : Z;
      (C || A(h) < ue || A(h) - ue > 100) && K(h, ue, !0);
      const he = re.left - M.left;
      (C || A(p) > he) && K(p, he);
    };
    if (W(), !C) {
      const G = new ResizeObserver(() => {
        W(G);
      });
      G.observe(F), setTimeout(
        () => {
          G.disconnect();
        },
        1e4
      );
    }
  }, v = (_, C = !1) => {
    try {
      g(_, C);
    } catch {
    }
  };
  i().tiptap.view.dom.addEventListener("scroll", () => {
    A(u) && v(i().tiptap.view, !0);
  });
  let x = de("");
  r()((_, C) => {
    var G, re, Z;
    if ((G = C.clipboardData) != null && G.getData(Hd))
      return !1;
    i().tiptap.commands.undo(), i().tiptap.commands.redo();
    const M = (Z = (re = _.domAtPos(i().tiptap.state.selection.from)) == null ? void 0 : re.node) == null ? void 0 : Z.cloneNode(!0);
    if (M instanceof HTMLElement && M.querySelectorAll("br.ProseMirror-trailingBreak").forEach((ue) => {
      ue.remove();
    }), !C.clipboardData)
      return !1;
    const H = C.clipboardData, D = t(H), F = H.getData("text/html");
    let W = null;
    return F && (W = new DOMParser().parseFromString(F, "text/html"), W.body.querySelector("[data-pm-slice]") || x3(W)), (async () => {
      K(h, 0), K(p, D != null && D.includes(`
`) ? 0 : 9999, !0);
      const ue = {};
      c.forEach(({ name: Te }) => {
        var Ve;
        const oe = l[Te];
        "onEditorSetPasteContent" in oe && ((Ve = oe.onEditorSetPasteContent) == null || Ve.call(oe, {
          plainText: D ?? (W == null ? void 0 : W.body.innerText) ?? "",
          htmlDocument: W,
          targetDomNode: M,
          clipboardData: H,
          transaction: async (be) => {
            f = !0;
            try {
              await be();
            } finally {
              f = !1, v(_);
            }
          }
        })), "isEditorItemAvailable" in oe && (ue[Te] = oe.isEditorItemAvailable());
      }), await Promise.all(Object.values(ue));
      let he = 0;
      K(x, "");
      for (const { name: Te } of c) {
        const oe = await ue[Te];
        A(m)[Te] = oe === !0 ? 1 : oe === !1 ? 0 : oe, A(m)[Te] > he && (he = A(m)[Te], K(x, Te, !0));
      }
      if (A(x)) {
        a()(!0);
        const Te = l[A(x)];
        "onEditorPaste" in Te && Te.onEditorPaste();
      }
      setTimeout(() => {
        Object.values(A(m)).filter(Boolean).length <= 1 || (K(u, !0), v(_));
      });
    })(), !1;
  });
  const w = (_, C) => (l[C] = _, "onEditorInit" in _ && _.onEditorInit(i(), o()[C] ?? {}), {
    destroy() {
      delete l[C];
    }
  }), E = (_) => {
    document.body.classList.contains("modal-open") || b && _.composedPath().includes(b) || K(d, !1);
  };
  Re(() => (A(d) && document.addEventListener("click", E), () => {
    document.removeEventListener("click", E);
  }));
  var k = S3(), S = L(k);
  S.__click = [w3, d];
  var y = L(S);
  Xt(y, () => l3), O(S);
  var T = B(S, 2);
  return pt(T, 21, () => c, (_) => _.name, (_, C) => {
    var M = k3();
    let H;
    var D = L(M);
    Jr(D, () => A(C).elementName, !1, (F, W) => {
      nt(F, (re, Z) => w == null ? void 0 : w(re, Z), () => A(C).name);
      let G;
      ie(() => G = h0(F, G, {
        class: "paste-menu-item",
        style: `display: ${A(m)[A(C).name] ? "block" : "none"};`
      }));
    }), O(M), ie((F) => H = gt(M, 1, "paste-menu-item-container svelte-19f323f", null, H, F), [
      () => ({
        "is-applied": A(x) === A(C).name
      })
    ]), kn("paste-menu-item-applied", M, () => {
      K(x, A(C).name, !0);
    }), V(_, M);
  }), O(T), O(k), Ge(k, (_) => b = _, () => b), ie(() => {
    Gs(k, `
    display: ${A(u) ? "block" : "none"};
    z-index: 1000;
    top: ${A(h)}px;
    left: ${A(p)}px;
    width: max-content;
  `), gt(S, 1, `paste-menu-icon ${A(d) ? "is-active" : ""}`, "svelte-19f323f"), Gs(T, `display: ${A(d) ? "block" : "none"};`);
  }), V(n, k), xe({
    get editor() {
      return i();
    },
    set editor(_) {
      i(_), te();
    },
    get onPaste() {
      return r();
    },
    set onPaste(_) {
      r(_), te();
    },
    get pasteMenu() {
      return s();
    },
    set pasteMenu(_) {
      s(_), te();
    },
    get options() {
      return o();
    },
    set options(_) {
      o(_), te();
    },
    get setIsPasting() {
      return a();
    },
    set setIsPasting(_) {
      a(_), te();
    }
  });
}
Rt(["click"]);
ve(
  cb,
  {
    editor: {},
    onPaste: {},
    pasteMenu: {},
    options: {},
    setIsPasting: {}
  },
  [],
  [],
  !0
);
var Ar, Js;
class C3 {
  constructor({ target: e, editor: t, onPaste: i, pasteMenu: r, options: s }) {
    Ne(this, Ar);
    Ne(this, Js, !1);
    r.length !== 0 && Oe(this, Ar, It(cb, {
      target: e,
      props: {
        editor: t,
        onPaste: i,
        pasteMenu: r,
        options: s,
        setIsPasting: (o) => {
          Oe(this, Js, o);
        }
      }
    }));
  }
  isPasting() {
    return J(this, Js);
  }
  destroy() {
    J(this, Ar) && ut(J(this, Ar));
  }
}
Ar = new WeakMap(), Js = new WeakMap();
var T3 = Y("<div><!></div>"), A3 = Y('<div class="mt-rich-text-editor-quick-action svelte-182x144"></div>');
const M3 = {
  hash: "svelte-182x144",
  code: `.mt-rich-text-editor-quick-action.svelte-182x144 {position:absolute;z-index:1;border:1px solid #ccc;border-radius:4px;background:#fff;display:none;}.mt-rich-text-editor-quick-action-button.svelte-182x144 {padding:10px;display:block;&.selected,
    &:hover {background:#f0f0f0;}}`
};
function ub(n, e) {
  ye(e, !0), Wt(n, M3);
  const t = ee(e, "editor", 7), i = ee(e, "quickAction", 7), r = ee(e, "options", 7), s = {}, o = i().map((m) => {
    const [g, v] = m.split(":");
    return {
      name: m,
      variant: v,
      elementName: Xr("quick-action", g),
      aliases: [v],
      options: r()[m] ?? {}
    };
  }).filter((m) => m.elementName && m.options !== !1);
  let a = de("");
  const l = na(() => A(a) ? o.filter((m) => m.aliases.some((g) => g.startsWith(A(a)))) : o), c = na(() => A(l).length);
  let u = de(0);
  Re(() => {
    A(c) > 0 && K(u, 0);
  });
  let d = !1, f = null;
  const h = b0(
    () => {
      var x, w;
      if (!f)
        return;
      if (d = !1, t().tiptap.state.selection.empty) {
        const E = t().tiptap.state.selection.$head.parent;
        d = E.type.name === "paragraph" && ((x = E.textContent) == null ? void 0 : x.startsWith("/")), d && K(a, (w = E.textContent) == null ? void 0 : w.slice(1), !0);
      }
      if (!d) {
        f.style.display = "", f.style.transition = "";
        return;
      }
      f.style.display === "" && (f.style.display = "block", setTimeout(
        () => {
          f && (f.style.transition = "left 0.2s ease-in-out");
        },
        100
      ));
      const m = t().tiptap.view.dom.getBoundingClientRect(), { selection: g } = t().tiptap.view.state, v = t().tiptap.view.coordsAtPos(g.$to.pos);
      f.style.top = `${v.bottom - m.top + 10}px`, f.style.left = "0px";
    },
    50
  );
  Re(() => {
    t().tiptap.on("selectionUpdate", h), h(), t().tiptap.view.dom.addEventListener(
      "keydown",
      (m) => {
        d && (m.key === "Enter" ? (m.preventDefault(), m.stopPropagation(), m.stopImmediatePropagation(), s[A(l)[A(u)].name].click()) : m.key === "ArrowDown" ? (m.preventDefault(), m.stopPropagation(), m.stopImmediatePropagation(), K(u, (A(u) + 1) % A(l).length)) : m.key === "ArrowUp" && (m.preventDefault(), m.stopPropagation(), m.stopImmediatePropagation(), K(u, (A(u) - 1 + A(l).length) % A(l).length)));
      },
      { capture: !0 }
    );
  });
  function p(m, g) {
    if (s[g] = m, "onEditorInit" in m && m.onEditorInit(t(), r()[g] ?? {}), "aliases" in m) {
      const v = o.find((x) => x.name === g);
      v && (v.aliases = m.aliases);
    }
    return {
      destroy() {
        delete s[g];
      }
    };
  }
  var b = A3();
  return pt(b, 23, () => A(l), (m) => m.name, (m, g, v) => {
    var x = T3(), w = L(x);
    Jr(w, () => A(g).elementName, !1, (E, k) => {
      nt(E, (y, T) => p == null ? void 0 : p(y, T), () => A(g).name);
      let S;
      ie(() => S = h0(E, S, {
        "data-mt-rich-text-editor-panel-item-variant": A(g).variant
      }));
    }), O(x), ie(() => gt(x, 1, `mt-rich-text-editor-quick-action-button ${(A(v) === A(u) ? "selected" : "") ?? ""}`, "svelte-182x144")), V(m, x);
  }), O(b), Ge(b, (m) => f = m, () => f), V(n, b), xe({
    get editor() {
      return t();
    },
    set editor(m) {
      t(m), te();
    },
    get quickAction() {
      return i();
    },
    set quickAction(m) {
      i(m), te();
    },
    get options() {
      return r();
    },
    set options(m) {
      r(m), te();
    }
  });
}
ve(ub, { editor: {}, quickAction: {}, options: {} }, [], [], !0);
var Mr;
class O3 {
  constructor({ target: e, editor: t, quickAction: i, options: r }) {
    Ne(this, Mr);
    i.length !== 0 && Oe(this, Mr, It(ub, {
      target: e,
      props: {
        editor: t,
        quickAction: i,
        options: r
      }
    }));
  }
  destroy() {
    J(this, Mr) && ut(J(this, Mr));
  }
}
Mr = new WeakMap();
var N3 = Y('<div class="form-group mb-3"><label for="structure-id" class="form-label">id</label> <input type="text" id="structure-id" class="form-control"></div> <div class="form-group mb-3"><label for="structure-class-name" class="form-label">class</label> <input type="text" id="structure-class-name" class="form-control"></div> <div class="form-group mb-3"><label for="structure-style" class="form-label">style</label> <input type="text" id="structure-style" class="form-control"></div>', 1), L3 = Y('<button type="button" class="action primary button btn btn-primary"> </button> <button type="button" class="cancel action button mt-close-dialog btn btn-default"> </button>', 1);
function db(n, e) {
  ye(e, !0);
  let t = ee(e, "structureData", 7), i = ee(e, "onSubmit", 7), r = ee(e, "onClose", 7), s = de(He(t().id)), o = de(He(t().className)), a = de(He(t().style)), l;
  Re(() => {
    l == null || l.focus();
  });
  let c, u;
  return Ge(
    On(n, {
      $$events: {
        close(...d) {
          var f;
          (f = r()) == null || f.apply(this, d);
        }
      },
      children: (d, f) => {
        Nn(d, {
          get close() {
            return u;
          },
          set close(h) {
            u = h;
          },
          $$slots: {
            title: (h, p) => {
              var b = Tn();
              ie((m) => z(b, m), [() => I("Edit attributes")]), V(h, b);
            },
            body: (h, p) => {
              var b = N3(), m = Le(b), g = B(L(m), 2);
              mt(g), Ge(g, (k) => l = k, () => l), O(m);
              var v = B(m, 2), x = B(L(v), 2);
              mt(x), O(v);
              var w = B(v, 2), E = B(L(w), 2);
              mt(E), O(w), Ct(g, () => A(s), (k) => K(s, k)), Ct(x, () => A(o), (k) => K(o, k)), Ct(E, () => A(a), (k) => K(a, k)), V(h, b);
            },
            footer: (h, p) => {
              var b = L3(), m = Le(b);
              m.__click = () => {
                i()({
                  id: A(s),
                  className: A(o),
                  style: A(a)
                }), u();
              };
              var g = L(m, !0);
              O(m);
              var v = B(m, 2);
              v.__click = u;
              var x = L(v, !0);
              O(v), ie(
                (w, E, k, S) => {
                  Ae(m, "title", w), z(g, E), Ae(v, "title", k), z(x, S);
                },
                [
                  () => I("Insert (s)"),
                  () => I("Insert"),
                  () => I("Cancel (x)"),
                  () => I("Cancel")
                ]
              ), V(h, b);
            }
          }
        });
      },
      $$slots: { default: !0 }
    }),
    (d) => c = d,
    () => c
  ), xe({
    get structureData() {
      return t();
    },
    set structureData(d) {
      t(d), te();
    },
    get onSubmit() {
      return i();
    },
    set onSubmit(d) {
      i(d), te();
    },
    get onClose() {
      return r();
    },
    set onClose(d) {
      r(d), te();
    }
  });
}
Rt(["click"]);
ve(db, { structureData: {}, onSubmit: {}, onClose: {} }, [], [], !0);
var Yt, Or, Di, $i, Zt, Xs;
class R3 {
  constructor(e) {
    Ne(this, Yt);
    Ne(this, Or);
    Ne(this, Di);
    Ne(this, $i);
    Ne(this, Zt, null);
    Ne(this, Xs, "section, div, p, ul, ol, li, h1, h2, h3, h4, h5, h6");
    Oe(this, Yt, e), Oe(this, Or, this.onUpdate.bind(this)), Oe(this, $i, (t) => {
      const i = t.currentTarget;
      if (t.target !== i)
        return;
      const r = i.getBoundingClientRect();
      t.clientY - r.top > 13 || Oe(this, Zt, It(db, {
        target: document.body,
        props: {
          structureData: {
            id: i.id,
            className: i.className,
            style: i.style.cssText
          },
          onSubmit: (s) => {
            const o = J(this, Yt).tiptap.view.posAtDOM(i, 0), a = J(this, Yt).tiptap.state.doc.nodeAt(o - 1);
            if (!a)
              return;
            const l = { ...a.attrs.MTRichTextEditorHTMLAttributes }, c = {
              className: "class"
            };
            ["id", "className", "style"].forEach((d) => {
              l[c[d] ?? d] = s[d] || void 0;
            });
            const u = J(this, Yt).tiptap.state.tr.setNodeAttribute(
              o - 1,
              "MTRichTextEditorHTMLAttributes",
              l
            );
            J(this, Yt).tiptap.view.dispatch(u), J(this, Zt) && (ut(J(this, Zt)), Oe(this, Zt, null));
          },
          onClose: () => {
            J(this, Zt) && (ut(J(this, Zt)), Oe(this, Zt, null));
          }
        }
      }));
    }), Oe(this, Di, document.createElement("style")), J(this, Yt).tiptap.view.dom.getRootNode().appendChild(J(this, Di)), J(this, Yt).tiptap.on("update", J(this, Or)), this.onUpdate();
  }
  onUpdate() {
    let e = "";
    const t = J(this, Yt).tiptap.view.dom.querySelectorAll(J(this, Xs));
    for (const i of t) {
      i.removeEventListener("click", J(this, $i)), i.addEventListener("click", J(this, $i));
      const r = `${i.tagName.toLowerCase()}${i.getAttributeNames().map((s) => s === "data-mt-rich-text-editor-id" || !["id", "class", "style"].includes(s) ? "" : `[${s}="${i.getAttribute(s)}"]`).join("")}`;
      e += `${r} {
    outline: 1px solid rgba(0, 0, 0, 0.2);
    padding: 0.5rem;
    margin: 1rem 0;
    border-radius: 0.5rem;
    position: relative;
    &:before {
      content: "${r.replace(/"/g, '\\"')}";
      position: absolute;
      top: -0.8rem;
      left: 0.5rem;
      display: block;
      background-color: #fff;
      padding: 0 0.5rem;
      font-weight: normal;
      font-size: 1rem;
      cursor: pointer;
    }
  }
      `;
    }
    J(this, Di).textContent = e;
  }
  destroy() {
    const e = J(this, Yt).tiptap.view.dom.querySelectorAll(J(this, Xs));
    for (const t of e)
      t.removeEventListener("click", J(this, $i));
    J(this, Di).remove(), J(this, Zt) && (ut(J(this, Zt)), Oe(this, Zt, null)), J(this, Yt).tiptap.off("update", J(this, Or));
  }
}
Yt = new WeakMap(), Or = new WeakMap(), Di = new WeakMap(), $i = new WeakMap(), Zt = new WeakMap(), Xs = new WeakMap();
const I3 = `.ProseMirror {
  position: relative;
}

.ProseMirror {
  word-wrap: break-word;
  white-space: pre-wrap;
  white-space: break-spaces;
  -webkit-font-variant-ligatures: none;
  font-variant-ligatures: none;
  font-feature-settings: "liga" 0; /* the above doesn't seem to work in Edge */
}

.ProseMirror pre {
  white-space: pre-wrap;
}

.ProseMirror li {
  position: relative;
}

.ProseMirror-hideselection *::selection { background: transparent; }
.ProseMirror-hideselection *::-moz-selection { background: transparent; }
.ProseMirror-hideselection { caret-color: transparent; }

/* See https://github.com/ProseMirror/prosemirror/issues/1421#issuecomment-1759320191 */
.ProseMirror [draggable][contenteditable=false] { user-select: text }

.ProseMirror-selectednode {
  outline: 2px solid #8cf;
}

/* Make sure li selections wrap around markers */

li.ProseMirror-selectednode {
  outline: none;
}

li.ProseMirror-selectednode:after {
  content: "";
  position: absolute;
  left: -32px;
  right: -2px; top: -2px; bottom: -2px;
  border: 2px solid #8cf;
  pointer-events: none;
}

/* Protect against generic img rules */

img.ProseMirror-separator {
  display: inline !important;
  border: none !important;
  margin: 0 !important;
}
`, jp = `.tiptap{overflow:auto}.mt-rich-text-editor-editor{border:1px solid #ccc;border-radius:4px;display:flex;flex-direction:column;height:100%;position:relative;background:#fff}.mt-rich-text-editor-editor--fullscreen{position:fixed;top:-1px;left:0;width:100%;z-index:10000}.mt-rich-text-editor-content{position:relative}.mt-rich-text-editor-content-root,.mt-rich-text-editor-content-root>.tiptap{height:calc(100% - 10px)}.mt-rich-text-editor-content-root>.tiptap{padding:10px;outline:none}.mt-rich-text-editor-content-root>.tiptap:after{content:"";display:block;height:1px}.mt-rich-text-editor-editor:focus-within{outline:none}.mt-rich-text-editor-content{flex-grow:1;min-height:0}.mt-rich-text-editor-toolbar{border-bottom:1px solid #ccc}.mt-rich-text-editor-statusbar{border-top:1px solid #ccc}.mt-rich-text-editor-resize-handle{position:absolute;right:0;bottom:0;width:15px;height:15px;cursor:ns-resize;background-image:url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='15' height='15' viewBox='0 0 15 15'%3E%3Cpath d='M11 15 L15 11 M7 15 L15 7' stroke='%23666666' stroke-width='1' fill='none'/%3E%3C/svg%3E")}.mt-rich-text-editor-editor--fullscreen .mt-rich-text-editor-resize-handle{display:none}.mt-rich-text-editor-editor--inline,.mt-rich-text-editor-editor--inline .mt-rich-text-editor-content,.mt-rich-text-editor-content-root{display:flex;flex-direction:column;flex-grow:1}.tiptap{flex-grow:1}.mt-rich-text-editor-toolbar--inline,.mt-rich-text-editor-statusbar--inline{border:none}.mt-rich-text-editor-editor--inline .mt-rich-text-editor-resize-handle{display:none}`, P3 = ':host{--table-border-color: #ccc;--table-header-background-color: #f0f0f0;--table-header-text-color: #333;--table-header-font-weight: bold;--table-header-text-align: left;--table-selected-cell-background-color: #f0f0f0;--table-resize-handle-background-color: #ccc}table{border-collapse:collapse;margin:0;overflow:hidden;table-layout:fixed;width:100%}table td,table th{border:1px solid var(--table-border-color);box-sizing:border-box;min-width:1em;padding:6px 8px;position:relative;vertical-align:top}:is(table td,table th)>*{margin-bottom:0}table th{background-color:var(--table-header-background-color);color:var(--table-header-text-color);font-weight:var(--table-header-font-weight);text-align:var(--table-header-text-align)}table .selectedCell:after{background:var(--table-selected-cell-background-color);content:"";left:0;right:0;top:0;bottom:0;pointer-events:none;position:absolute;z-index:2}table .column-resize-handle{background-color:var(--table-resize-handle-background-color);bottom:-2px;pointer-events:none;position:absolute;right:-2px;top:0;width:4px}.tableWrapper{margin:1.5rem 0;overflow-x:auto}.resize-cursor{cursor:col-resize}.mt-rich-text-editor-script:before{content:attr(data-mt-rich-text-editor-script-title);display:block;position:absolute;top:-13px;left:10px;background-color:#fff;padding:0 5px}.mt-rich-text-editor-script{position:relative;border:1px solid #ccc;border-radius:4px;margin-top:10px;padding:10px}.mt-rich-text-editor-script.mt-rich-text-editor-script--preview{padding:10px 0 0}', D3 = 350, $3 = 300, yn = Symbol("EditorEl");
var Up, Nr, Qt, $n, zi, Ys, Zs, Lr, Qs, gi, Rr, Ya, fb;
Up = yn;
class z3 {
  constructor(e, t) {
    Ne(this, Ya);
    bn(this, "id");
    bn(this, "tiptap");
    bn(this, Up);
    bn(this, "options");
    Ne(this, Nr);
    Ne(this, Qt);
    Ne(this, $n);
    Ne(this, zi);
    Ne(this, Ys);
    Ne(this, Zs);
    Ne(this, Lr);
    Ne(this, Qs);
    Ne(this, gi);
    Ne(this, Rr);
    var m, g, v, x, w, E;
    this.id = e.id, Oe(this, $n, e), this.options = t, Oe(this, Rr, ((m = t.htmlOutputOptions) == null ? void 0 : m.format) === !1 ? void 0 : {
      indent_size: ((g = t.htmlOutputOptions) == null ? void 0 : g.indentSize) ?? 0,
      wrap_line_length: 0,
      content_unformatted: ((v = t.htmlOutputOptions) == null ? void 0 : v.contentUnformatted) ?? [
        "pre",
        "style",
        "script"
      ]
    });
    const i = t.inline ?? !1, r = typeof t.height == "number" ? `${t.height}px` : t.height ?? `${localStorage.getItem("mt-rich-text-editor-height") ?? D3}px`;
    Oe(this, Qt, document.createElement("div")), J(this, Qt).className = "mt-rich-text-editor", i ? J(this, Qt).style.minHeight = r : J(this, Qt).style.height = r, J(this, Qt).dataset.mtRichTextEditorId = e.id, (x = J(this, $n).parentNode) == null || x.insertBefore(J(this, Qt), J(this, $n)), J(this, $n).style.display = "none";
    const s = J(this, Qt).attachShadow({ mode: "open" });
    mc(s, [jp, ...t.editorStylesheets ?? []]), this[yn] = document.createElement("div"), this[yn].classList.add("mt-rich-text-editor-editor"), i && (this[yn].classList.add("mt-rich-text-editor-editor--inline"), this[yn].style.minHeight = r), s.appendChild(this[yn]);
    const o = (k, S) => {
      const T = (k ?? (() => {
        const C = document.createElement("div");
        return C.className = S, i && C.classList.add(`${S}--inline`), this[yn].appendChild(C), C;
      })()).attachShadow({ mode: "open" });
      mc(T, t.editorStylesheets ?? []);
      const _ = document.createElement("div");
      return T.appendChild(_), _;
    }, a = o(
      t.toolbarContainer,
      (w = t.toolbar) != null && w.length ? "mt-rich-text-editor-toolbar" : "mt-rich-text-editor-toolbar--empty"
    );
    Oe(this, zi, document.createElement("div")), J(this, zi).className = "mt-rich-text-editor-content";
    const l = J(this, zi).attachShadow({ mode: "open" });
    mc(l, [
      I3 + jp + P3,
      ...t.editorStylesheets ?? [],
      ...t.stylesheets ?? []
    ]);
    const c = document.createElement("div");
    c.className = "mt-rich-text-editor-content-root", l.appendChild(c), this[yn].appendChild(J(this, zi));
    const u = (k) => {
      Oe(this, Nr, k);
    }, d = (...k) => {
      var S;
      return ((S = J(this, Nr)) == null ? void 0 : S.call(this, ...k)) ?? !1;
    }, f = document.createElement("div");
    f.className = "mt-rich-text-editor-paste-menu", l.appendChild(f), this.tiptap = new p_({
      element: c,
      extensions: [LC.configure(t.extensionOptions), ...t.extensions ?? []],
      content: br(J(this, $n).value),
      editorProps: {
        handlePaste: d
      }
    }), t.autoFocus && this.focus(), Oe(this, Ys, new i3({
      target: a,
      editor: this,
      toolbar: t.toolbar,
      options: t.toolbarOptions ?? {},
      inline: i && !t.toolbarContainer
    }));
    const h = o(
      t.statusbarContainer,
      (E = t.statusbar) != null && E.length ? "mt-rich-text-editor-statusbar" : "mt-rich-text-editor-statusbar--empty"
    );
    Oe(this, Zs, new a3({
      target: h,
      editor: this,
      statusbar: t.statusbar ?? [],
      options: t.statusbarOptions ?? {},
      inline: i && !t.statusbarContainer
    }));
    const p = o(f, "mt-rich-text-editor-paste-menu");
    Oe(this, Lr, new C3({
      target: p,
      editor: this,
      onPaste: u,
      pasteMenu: t.pasteMenu ?? [],
      options: t.pasteMenuOptions ?? {},
      inline: i
    }));
    const b = document.createElement("div");
    l.appendChild(b), Oe(this, Qs, new O3({
      target: b,
      editor: this,
      quickAction: t.quickAction ?? [],
      options: t.quickActionOptions ?? {}
    })), vo(this, Ya, fb).call(this, this[yn]), t.structure && this.setStructureMode(!0);
  }
  save() {
    J(this, $n).value = this.getContent();
  }
  getContent() {
    return J(this, Rr) === void 0 ? Pc(this.tiptap.getHTML()) : S_.html(Pc(this.tiptap.getHTML()), J(this, Rr));
  }
  setContent(e) {
    this.tiptap.commands.setContent(br(e)), J(this, $n).value = e;
  }
  getHeight() {
    return J(this, Qt).clientHeight;
  }
  setHeight(e) {
    e !== 0 && (J(this, Qt).style.height = `${e}px`, localStorage.setItem("mt-rich-text-editor-height", e.toString()));
  }
  getStructureMode() {
    return J(this, gi) !== void 0;
  }
  setStructureMode(e) {
    var t;
    e ? Oe(this, gi, new R3(this)) : ((t = J(this, gi)) == null || t.destroy(), Oe(this, gi, void 0));
  }
  focus() {
    this.tiptap.commands.focus();
  }
  destroy() {
    var e;
    Oe(this, Nr, void 0), J(this, Ys).destroy(), J(this, Zs).destroy(), J(this, Lr).destroy(), (e = J(this, gi)) == null || e.destroy(), J(this, Qs).destroy(), this.tiptap.destroy(), J(this, Qt).remove();
  }
  insertContent(e) {
    const t = $g(br(e), this.tiptap.extensionManager.extensions);
    this.tiptap.commands.insertContent(t);
  }
  notify({ message: e }) {
    alert(e);
  }
  isPasting() {
    return J(this, Lr).isPasting();
  }
}
Nr = new WeakMap(), Qt = new WeakMap(), $n = new WeakMap(), zi = new WeakMap(), Ys = new WeakMap(), Zs = new WeakMap(), Lr = new WeakMap(), Qs = new WeakMap(), gi = new WeakMap(), Rr = new WeakMap(), Ya = new WeakSet(), fb = function(e) {
  const t = document.createElement("div");
  t.className = "mt-rich-text-editor-resize-handle", e.appendChild(t);
  let i = 0, r = 0;
  const s = (l) => {
    l.preventDefault(), i = l.clientY, r = this.getHeight(), document.addEventListener("mousemove", o), document.addEventListener("mouseup", a);
  }, o = (l) => {
    const c = l.clientY - i, u = Math.max($3, r + c);
    this.setHeight(u);
  }, a = () => {
    document.removeEventListener("mousemove", o), document.removeEventListener("mouseup", a);
  };
  t.addEventListener("mousedown", s);
};
var Bi, eo, Eu;
const Kt = class Kt {
  static on(e, t) {
    J(this, Bi)[e] || (J(this, Bi)[e] = []), J(this, Bi)[e].push(t);
  }
  static async create(e) {
    const { id: t, language: i } = e;
    if (i && et.language !== i && et.changeLanguage(i), Kt.Editors[t])
      throw new Error("Editor already exists");
    const r = document.querySelector(`#${t}`);
    if (!r)
      throw new Error("Textarea not found");
    const s = {
      toolbar: [],
      toolbarOptions: {},
      statusbar: [["path"]],
      statusbarOptions: {},
      pasteMenu: ["embedInline", "embed", "html", "link", "text", "markdown"],
      pasteMenuOptions: {},
      quickAction: ["heading:1", "heading:2", "heading:3", "heading:4", "heading:5", "heading:6"],
      quickActionOptions: {},
      extensions: [],
      inline: !1,
      ...e
    };
    vo(this, eo, Eu).call(this, "create", s);
    const { id: o, language: a, ...l } = s, c = new z3(r, l);
    return vo(this, eo, Eu).call(this, "init", c), Kt.Editors[t] = c, c;
  }
  static unload({ id: e }) {
    Kt.Editors[e] && (Kt.Editors[e].destroy(), delete Kt.Editors[e]);
  }
  static get({ id: e }) {
    return Kt.Editors[e];
  }
  static async save() {
    await Promise.all(Object.values(Kt.Editors).map((e) => e.save()));
  }
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  static async import(e) {
    if (e === "@tiptap/core")
      return sk;
    throw new Error(`Unknown module: ${e}`);
  }
  static setLanguage(e) {
    et.language !== e && et.changeLanguage(e);
  }
};
Bi = new WeakMap(), eo = new WeakSet(), Eu = function(e, ...t) {
  (J(this, Bi)[e] || []).forEach((r) => r(...t));
}, Ne(Kt, eo), bn(Kt, "version", u1), bn(Kt, "Editors", {}), bn(Kt, "Component", {
  ...c1,
  getPanelItem: Xr
}), Ne(Kt, Bi, {});
let Wp = Kt;
export {
  z3 as Editor,
  Wp as default
};
//# sourceMappingURL=index.js.map
