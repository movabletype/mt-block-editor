function addPlugin(ed) {
  ed.on('PreInit', function() {
    let eventAttrs    = 'onabort, onblur, oncancel, oncanplay, oncanplaythrough, onchange, onclick, onclose, oncontextmenu, oncuechange, ondblclick, ondrag, ondragend, ondragenter, ondragleave, ondragover, ondragstart, ondrop, ondurationchange, onemptied, onended, onerror, onfocus, oninput, oninvalid, onkeydown, onkeypress, onkeyup, onload, onloadeddata, onloadedmetadata, onloadstart, onmousedown, onmousemove, onmouseout, onmouseover, onmouseup, onmousewheel, onpause, onplay, onplaying, onprogress, onratechange, onreset, onscroll, onseeked, onseeking, onseeking, onselect, onshow, onstalled, onsubmit, onsuspend, ontimeupdate, onvolumechange, onwaiting, formaction action',
        eventPrefix   = 'data-mt-event-',
        commentPrefix = 'data-mt-protection ',
        cdataPrefix   = 'data-mt-cdata ';

    // Save/Restore event handler of the node.
    ed.parser.addAttributeFilter(eventAttrs, function(nodes, name) {
      let i = nodes.length;
      while (i--) {
        if (nodes[i].attr(eventPrefix + name)) {
          continue;
        }
        nodes[i].attr(eventPrefix + name, nodes[i].attr(name));
        nodes[i].attr(name, 'javascript:void(0)');
      }
    });

    ed.serializer.addAttributeFilter(eventAttrs, function(nodes, name) {
      let i = nodes.length;
      while (i--) {
        if (nodes[i].attr(eventPrefix + name)) {
          nodes[i].attr(name, nodes[i].attr(eventPrefix + name));
          nodes[i].attr(eventPrefix + name, null);
        }
      }
    });

    // Remove link/meta element in order to avoid XSS
    ed.parser.addNodeFilter('link,meta', function(nodes, name) {
      nodes.forEach(function(node) {
        node.remove();
      });
    });

    // Escape/Unescape comment/cdata in order to avoid XSS
    ed.parser.addNodeFilter('#comment,#cdata', function(nodes, name) {
      let i = nodes.length,
          prefix = name === '#comment' ? commentPrefix : cdataPrefix,
          node;

      while (i--) {
        node = nodes[i];
        if (node.value.indexOf(prefix) !== 0) {
          node.value = prefix + escape(node.value);
        }
      }
    });

    ed.serializer.addNodeFilter('#comment', function(nodes, name) {
      let i = nodes.length, node, value;
      while (i--) {
        node = nodes[i];
        if (node.value.indexOf(commentPrefix) === 0) {
          node.value = node.value.replace(new RegExp(commentPrefix), '');
          node.value = unescape(node.value);
        } else if (node.value.indexOf(cdataPrefix) === 0) {
          node.name = '#cdata';
          node.type = 4;

          value = unescape(node.value);
          node.value = value.substring(
            cdataPrefix.length + '[CDATA['.length,
            value.length - ']]'.length
          );
        }
      }
    });
  });
};

tinymce.PluginManager.add('mt_security', addPlugin);
